{
  "id": "2017949",
  "permalink": "pospayment-configuration",
  "title": "POS Payment Configuration",
  "type": "topic",
  "level": 7,
  "path": "Manhattan Active® Omni/Store/Process & Configuration Guides/Point of Sale/POS Classic Guides/POS Order Selling/POS Payment/POS Payment Configuration",
  "raw_item": {
    "id": "2017949",
    "text": "POS Payment Configuration",
    "title": "POS Payment Configuration",
    "permalink": "pospayment-configuration",
    "leaf": false,
    "droppable": true,
    "expanded": true,
    "closed": true,
    "visible": true,
    "editable": true,
    "type": "topic",
    "topicType": "0",
    "status": "1",
    "iconCls": "icon-topic",
    "cls": "",
    "folder_id": "175419",
    "parent": "f;175419",
    "created_date": "1527613530",
    "modified_date": "1735316922",
    "instructor_id": null,
    "loaded": true,
    "haschildren": false,
    "callout": "0",
    "order": "3"
  },
  "success": true,
  "content": "\r\n\r\n\r\n<div class=\"hiq-page-wrap\">\r\n<div class=\"hiq-t-wrap\">\r\n\t\t\r\n  \t  <div class=\"hiq-t \">\r\n\t\t\t\t<ul class=\"breadcrumbs\"><li><a class=\"breadcrumb-links\" hqid=\"1788908\"  href=\"/home\">Home</a></li> <li><span>&rsaquo;&rsaquo;</span><a hqid=\"3500940\" href=\"/omni\" class=\"breadcrumb-links\">Manhattan Active® Omni</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"3426481\" href=\"/store-3\" class=\"breadcrumb-links\">Store</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158412\" href=\"/process-configuration-guides-3\" class=\"breadcrumb-links\">Process & Configuration Guides</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158737\" href=\"/point-of-sale\" class=\"breadcrumb-links\">Point of Sale</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2225114\" href=\"/process-configuration-guides-4\" class=\"breadcrumb-links\">POS Classic Guides</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2672964\" href=\"/pos-order-selling\" class=\"breadcrumb-links\">POS Order Selling</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2178705\" href=\"/pos-payment\" class=\"breadcrumb-links\">POS Payment</a></li><li> <span>››</span>POS Payment Configuration</li></ul>  \t\r\n\t\t<h2>POS Payment Configuration</h2>\r\n\r\n<p></p>\r\n\r\n<div>\r\n<div class=\"tip\"><ul><li><a href=\"/pospayment-configuration$payment-capture-configuration\">Payment Capture Configuration</a></li><li><a href=\"/pospayment-configuration$payment-form-configuration\">Payment Form Configuration</a></li><li><a href=\"/pospayment-configuration$user-input-form\">User Input Form</a></li><li><a href=\"/pospayment-configuration$user-input-form-fields\">User Input Form Fields</a></li><li><a href=\"/pospayment-configuration$pay-by-link-configuration\">Pay By Link Configuration</a><ul><li><a href=\"/pospayment-configuration$payment-capture-configuration\">Payment Capture Configuration</a></li><li><a href=\"/pospayment-configuration$grants\">Grants</a></li><li><a href=\"/pospayment-configuration$digital-self-service-configuration-nbsp\">Digital Self Service Configuration&nbsp;</a></li><li><a href=\"/pospayment-configuration$selfservice-organizationmapping\">SelfService.OrganizationMapping</a></li><li><a href=\"/pospayment-configuration$kv-store-in-consul\">KV store in Consul</a></li><li><a href=\"/pospayment-configuration$two-other-payment-side-configurations\">Two other Payment-Side Configurations</a></li></ul></li><li><a href=\"/pospayment-configuration$foreign-or-alternate-currency-configuration\">Foreign (or alternate) Currency Configuration</a><ul><li><a href=\"/pospayment-configuration$currency-conversion-table\">Currency Conversion Table</a></li><li><a href=\"/pospayment-configuration$grants\">Grants</a></li><li><a href=\"/pospayment-configuration$additional-configurations-which-interact-with-alternate-39-foreign-39-currency-feature\">Additional Configurations which Interact with Alternate &#39;foreign&#39; Currency feature</a><ul><li><a href=\"/pospayment-configuration$currency-formatting\">Currency Formatting</a></li><li><a href=\"/pospayment-configuration$default-to-balance-due\">Default to Balance Due</a></li><li><a href=\"/pospayment-configuration$overtender\">Overtender</a></li></ul></li><li><a href=\"/pospayment-configuration$electronic-journal\">Electronic Journal</a></li><li><a href=\"/pospayment-configuration$receipts\">Receipts</a></li></ul></li><li><a href=\"/pospayment-configuration$payment-terminal-selection-and-sharing-for-mobile-devices\">Payment Terminal Selection and Sharing for Mobile Devices</a></li><li><a href=\"/pospayment-configuration$exchange-tender-configuration\">Exchange Tender configuration</a></li><li><a href=\"/pospayment-configuration$pos-refund-configuration\">POS Refund configuration</a></li><li><a href=\"/pospayment-configuration$pos-post-void-configuration\">POS Post Void Configuration</a><ul><li><a href=\"/pospayment-configuration$post-void-of-refund-transaction\">Post void of refund transaction</a></li></ul></li><li><a href=\"/pospayment-configuration$payment-franking\">Payment Franking</a><ul><li><a href=\"/pospayment-configuration$information-message-during-franking-configuration\">Information Message During Franking Configuration</a></li><li><a href=\"/pospayment-configuration$payment-franking-template-configuration\">Payment Franking Template Configuration:</a></li></ul></li><li><a href=\"/pospayment-configuration$ui-39-s-and-entities\">UI&#39;s and Entities</a></li><li><a href=\"/pospayment-configuration$profile-purpose\">Profile Purpose</a></li></ul></div>\r\n</div>\r\n\r\n<p>This guide contains the configurations required for payment processing in the POS application.</p>\r\n\r\n<h4><a name=\"payment-capture-configuration\" id=\"payment-capture-configuration\"></a>Payment Capture Configuration</h4>\r\n\r\n<p>The payment capture configuration is used to define settings within each payment type for accepting and issuing payments in different order capture channels. The rules that can be defined within each payment type can vary between them - for example, whether or not to allow accepting the payment details from register device, payment terminal or through different hardware.</p>\r\n\r\n<p>For example: credit or debit payment type will always use the payment terminal so processThroughTerminal will be TRUE.</p>\r\n\r\n<p>But for payment type as Check, Input required may be TRUE, because associate needs to capture the check number manually or using another hardware like MICR reader, but processThroughTerminal FALSE.</p>\r\n\r\n<p>Other configuration includes whether signature required, franking required and so on. Below are some of the main POS configurations to be done for any payment type.</p>\r\n\r\n<ul>\r\n\t<li><strong>Input Required</strong> - User need to configure how the input will be captured - either it can be from the payment terminal or within the application. Configure this attribute &quot;inputRequired&quot; as true if it is through the application. If it is from the payment terminal then configure &quot;processThroughTerminal&quot; = true. Retailer can also configure both to be true, in which case the payment can be captured from either of them. Note that the Credit and Debit are seeded as &quot;processThroughTerminal&quot; = true and cannot be changed to false.</li>\r\n\t<li><strong>Capture Signature</strong> - Retailer can also configure capturing signature using forceCaptureSignature flag for any payment type within the POS application outside of the payment terminal. For example: Any custom tender which requires signature. Retailer can also configure the message using infoMessageDuringSignature attribute that needs to be displayed on the application in the signature screen.</li>\r\n\t<li><strong>Franking</strong> - Franking of a payment type during redeem (produced for any purchases) can be configured with FrankingReqForRedeem Flag and the message that needs to be displayed on application when UI is waiting hardware to frank can be configured using InfoMessageDuringFranking attribute.</li>\r\n\t<li><strong><a id=\"Include In Drawer Count\" name=\"Include In Drawer Count\">Include In Drawer Count</a> -</strong> Payment Instrument displayed during the Reconciliation, Bank Deposit and on various Back Office Reports can be configured using this flag.\r\n\t<ul>\r\n\t\t<li>Three payment instruments CASH, CHECK, and TRAVELERS CHECK are assumed to be included by default.</li>\r\n\t\t<li>Currently, a business can configure whether or not to display two of these payment instruments i.e. Traveller&#39;s Check and Personal Check on these screens by changing this flag from TRUE (display) to FALSE (do not display).\r\n\t\t<ul>\r\n\t\t\t<li>If this flag is FALSE, it is assumed that the retailer does not count these two and they will not be shown or displayed.</li>\r\n\t\t\t<li>This would be the case if for example the retailer doesn&#39;t even accept one or both of these payment types.</li>\r\n\t\t</ul>\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t<div class=\"tip\">NOTE: CASH will always be displayed on these screens; the flag does not have any impact on the display or inclusion of CASH.</div>\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t<div class=\"info\">Note that &quot;Restrict Split Payment&quot; flag works on the balance due amount.&nbsp; If you have a 100 dollar amount, and you are paying by credit card that has &quot;Restrict Split Payment&quot; set to true, you have to pay the total 100 dollars with that credit card. However, for the same order, if you paid 25 dollars on a gift card, paying the rest with credit card is still allowed, but&nbsp;the remainder of 75 dollars should be paid.</div>\r\n\t\t</li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<h4><a name=\"payment-form-configuration\" id=\"payment-form-configuration\"></a>Payment Form Configuration</h4>\r\n\r\n<p>There are subsequent configurations required for payment type configured to accept the payment details as an input from application or from the payment terminal. From base supported payments we provide seed data configuration which can be used out of the box. Retailer can capture relative payment details specific to a tender and those details may not be required for any another payment type. <em>For example:</em> Check tender, it would be ideal to capture routing number, check number along with account number and amount from a MICR reader. For traveler&#39;s check, the details might be irrelevant and some check does not come with micro ink to read from micro reader but can be configured to get details from keyboard. This will allow the retailer to provide capability to custom configure the details of base supported or custom payment type that is accepted. More details on configuration are mentioned below:</p>\r\n\r\n<div class=\"warning\">If a user input form is created with no input fields configured, POS UI will show a blank form during the payment process.</div>\r\n\r\n<div class=\"warning\">Customer info related fields in payment is not used. They populate only at order header section. It is very unlikely that user captures these multiple times in an order. Even if does happen, the latest information persists.</div>\r\n\r\n<h4><a name=\"user-input-form\" id=\"user-input-form\"></a>User Input Form</h4>\r\n\r\n<p>If process through terminal is configured as TRUE for any payment type, for example: credit, debit and so on, then all the details of the payment will be picked from the payment terminal. Retailers need not configure any input forms here unless they are required to capture more details regarding the payment from different hardware or from app. For example, to capture zip code for a gift card payment for authentication, since zip code is not captured by payment terminal, retailers would create new user input form and related fields to input this data from keyboard.</p>\r\n\r\n<p>If input required is configured as TRUE for any payment type, then the input form and the form field needs to be configured. This configuration is necessary to get the payment details, map the payment details to attributes that get saved on backend system. The required input form configuration is detailed below</p>\r\n\r\n<ul>\r\n\t<li>Create an input form by providing form name and form Id.</li>\r\n\t<li>Select interaction mode as &quot;customer present&quot; as this payment is for POS application. Also set the context for sale or/and return.</li>\r\n\t<li>Configure the form methods to set the mode of capture data. For example, &quot;isPinpadFormMethod&quot;, &quot;isKeyboardFormMethod&quot;, &quot;isMicrFormMethod&quot; and &quot;isScannerFormMethod&quot;. Note that if processThruTerminal is TRUE, isMicr is not a valid option but either isPinPad or isKeyboard can be used.</li>\r\n\t<li>Input form sequence needs to be provided. This will be used by the UI to decide which form needs to be captured first.</li>\r\n</ul>\r\n\r\n<p><strong>Seed data Snippet of <em>User Input form</em> for &quot;Check&quot; payment type:</strong></p>\r\n\r\n<pre>\r\n<code>\r\n    {\r\n      &quot;PaymentType&quot;: &quot;Check&quot;,\r\n      &quot;UserInputFormID&quot;: &quot;CHECKINPUTGROUP&quot;,\r\n      &quot;UserInputFormName&quot;: &quot;Check Input Group&quot;,\r\n      &quot;InteractionMode&quot;: {\r\n        &quot;InteractionModeId&quot;: &quot;CustomerPresent&quot;\r\n      },\r\n      &quot;IsSaleContext&quot;: true,\r\n      &quot;IsReturnContext&quot;: true,\r\n      &quot;IsKeyboardFormMethod&quot;: true,\r\n      &quot;IsPinpadFormMethod&quot;: false,\r\n      &quot;IsMicrFormMethod&quot;: true,\r\n      &quot;IsScannerFormMethod&quot;: false,\r\n      &quot;UserInputFormSequence&quot;: 1,\r\n      &quot;FailoverToKeyboard&quot;: true,\r\n      &quot;InfoMessageDuringPayment&quot;: &quot;Please input information through the MICR or Keyboard&quot;,\r\n      &quot;UserInputFormField&quot;: [\r\n        {\r\n          &quot;PaymentType&quot;: &quot;Check&quot;,\r\n          &quot;UserInputFormID&quot;: &quot;CHECKINPUTGROUP&quot;,\r\n          &quot;UserInputFormFieldID&quot;: {\r\n            &quot;UserInputFieldID&quot;: &quot;CheckNumber&quot;\r\n          },\r\n          &quot;UserInputFormFieldSize&quot;: 15,\r\n          &quot;UserInputFormFieldSequence&quot;: 3\r\n        },\r\n        {\r\n          &quot;PaymentType&quot;: &quot;Check&quot;,\r\n          &quot;UserInputFormID&quot;: &quot;CHECKINPUTGROUP&quot;,\r\n          &quot;UserInputFormFieldID&quot;: {\r\n            &quot;UserInputFieldID&quot;: &quot;AccountNumber&quot;\r\n          },\r\n          &quot;UserInputFormFieldSize&quot;: 20,\r\n          &quot;UserInputFormFieldSequence&quot;: 2\r\n        },\r\n        {\r\n          &quot;PaymentType&quot;: &quot;Check&quot;,\r\n          &quot;UserInputFormID&quot;: &quot;CHECKINPUTGROUP&quot;,\r\n          &quot;UserInputFormFieldID&quot;: {\r\n            &quot;UserInputFieldID&quot;: &quot;RoutingNumber&quot;\r\n          },\r\n          &quot;UserInputFormFieldSize&quot;: 9,\r\n          &quot;UserInputFormFieldSequence&quot;: 1\r\n        }\r\n      ]\r\n    }</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div class=\"warning\">Note:&nbsp;Please note that&nbsp;User Input forms are not being used by Digital Self-Service and Contact Center&nbsp;flows currently.&nbsp;</div>\r\n\r\n<h4><a name=\"user-input-form-fields\" id=\"user-input-form-fields\"></a>User Input Form Fields</h4>\r\n\r\n<p>Once the input form is configured, retailers need to configure the form fields (payment details) which may need to be captured as part of that input form. Below are high level guidelines which need to be followed</p>\r\n\r\n<ul>\r\n\t<li><strong>Input form fields types</strong> - We can create form fields types before using that in input form. All form field types provided as part of seed data will be set as isBase = TRUE and any custom field that is created should be isBase = FALSE. The isBase attribute is turned TRUE only when the explicit mapping is present (which is for base attributes) with payment component to save the data.</li>\r\n\t<li>Create the input form field and link the field type. If any fields need to be validated then use the field size for static validation and form field validation regular expression validation.</li>\r\n\t<li>The form field sequence within the form can be configured. This can also be set up as mandatory field wherever necessary.</li>\r\n</ul>\r\n\r\n<p><strong>Seed data Snippet of <em>User Input form fields</em> for &quot;Check&quot; payment type:</strong></p>\r\n\r\n<div class=\"warning\">Note: The &quot;UserInputFieldID&quot; should not contain any space or special characters.</div>\r\n\r\n<div>\r\n<pre>\r\n<code>{\r\n  &quot;ProfileId&quot;: &quot;systemAugmentable&quot;,\r\n  &quot;data&quot;: [\r\n    {\r\n      &quot;UserInputFieldID&quot;: &quot;CheckNumber&quot;,\r\n      &quot;UserInputFieldType&quot;: {\r\n        &quot;UserInputFieldTypeID&quot;: &quot;Numeric&quot;\r\n      },\r\n      &quot;UserInputFieldName&quot;: &quot;Check Number&quot;,\r\n      &quot;IsBase&quot;: true,\r\n      &quot;EncryptionRequired&quot;: true\r\n    },\r\n    {\r\n      &quot;UserInputFieldID&quot;: &quot;AccountNumber&quot;,\r\n      &quot;UserInputFieldType&quot;: {\r\n        &quot;UserInputFieldTypeID&quot;: &quot;Numeric&quot;\r\n      },\r\n      &quot;UserInputFieldName&quot;: &quot;Account Number&quot;,\r\n      &quot;IsBase&quot;: true,\r\n      &quot;EncryptionRequired&quot;: true\r\n    },\r\n    {\r\n      &quot;UserInputFieldID&quot;: &quot;RoutingNumber&quot;,\r\n      &quot;UserInputFieldType&quot;: {\r\n        &quot;UserInputFieldTypeID&quot;: &quot;Numeric&quot;\r\n      },\r\n      &quot;UserInputFieldName&quot;: &quot;Routing Number&quot;,\r\n      &quot;IsBase&quot;: true,\r\n      &quot;EncryptionRequired&quot;: true\r\n    }\r\n  ],\r\n  &quot;RelatedProfiles&quot;: [\r\n    {\r\n      &quot;profilePurpose&quot;: &quot;pay::paymentCaptureConfig&quot;,\r\n      &quot;profileId&quot;: &quot;retail&quot;\r\n    }\r\n  ]\r\n}</code>\r\n\r\n</pre>\r\n</div>\r\n\r\n<div>\r\n<h4><a name=\"pay-by-link-configuration\" id=\"pay-by-link-configuration\"></a><a id=\"pblconfig\" name=\"pblconfig\"></a>Pay By Link Configuration</h4>\r\n\r\n<h5><a name=\"payment-capture-configuration\" id=\"payment-capture-configuration\"></a>Payment Capture Configuration</h5>\r\n\r\n<ul>\r\n\t<li><strong>Enable Pay By Link POS</strong>&nbsp;- Retailers can configure to obtain credit/debit/gift card payment&nbsp;using the <strong>Pay By Link POS</strong>&nbsp;flag.&nbsp; If enabled, a link via email&nbsp;can be sent to the customer or a QR code will be generated on the POS terminal (not payment terminal) which the customer can scan with their phone.&nbsp; The customer will open the link,&nbsp;review the order and click on a Pay button on their phone.&nbsp; Based on Manhattan Active&reg; Omni Digital Self-Service functionality, which is <a href=\"https://omni.helpdocsonline.com/paybylink$configurations\">configured outside POS</a>, a&nbsp;3rd party website&nbsp;will be displayed, and the customer will enter the payment information on their phone.&nbsp; POS will obtain the payment status and, if successfully authorized, finalize&nbsp;the order.</li>\r\n</ul>\r\n\r\n<div class=\"info\"><strong>Note</strong>: Make sure a&nbsp;new &quot;Payment Type&quot; should be defined for&nbsp;&quot;Pay by link&quot;.</div>\r\n\r\n<div class=\"info\"><strong>Note</strong>: Pay By Link will always default to the full balance due and the amount cannot be changed.</div>\r\n\r\n<div class=\"info\"><strong>Note</strong>: Pay By Link should only be configured for the Pay By Link tender as it is not logical for other tenders (i.e. Cash, Check, etc.).</div>\r\n</div>\r\n\r\n<div class=\"info\"><strong>Note</strong>: Pay by Link by SMS/Text is not currently supported out of base POS.&nbsp; This would require further integration with a provider - for example, Twilio.&nbsp; Base deployments should use the &quot;hide&quot; metadata extension provided to hide the SMS option on the Order Summary screen, as it is not relevant at this time.</div>\r\n\r\n<h5><a name=\"grants\" id=\"grants\"></a>Grants</h5>\r\n\r\n<ul>\r\n\t<li>digitalselfservice::configuration::admin&nbsp;&nbsp;This grant allows the user access to the DSS configurations.</li>\r\n</ul>\r\n\r\n<h5><a name=\"digital-self-service-configuration-nbsp\" id=\"digital-self-service-configuration-nbsp\"></a>Digital Self Service Configuration&nbsp;</h5>\r\n\r\n<ul>\r\n\t<li>Set Self Service Payment Gateway Id to Cybersource</li>\r\n</ul>\r\n\r\n<h5><a name=\"selfservice-organizationmapping\" id=\"selfservice-organizationmapping\"></a>SelfService.OrganizationMapping</h5>\r\n\r\n<ul>\r\n\t<li>Add Organization/User as the Key/Value pair in Consul for Self-Service Component (SelfService.OrganizationMapping) i.e., &quot;tm-demo-us&quot;: &quot;User&quot;: <a href=\"mailto:admin@tm-demo-us.com\">admin@tm-demo-us.com</a> (user name which will send email).</li>\r\n</ul>\r\n\r\n<h5><a name=\"kv-store-in-consul\" id=\"kv-store-in-consul\"></a>KV store in Consul</h5>\r\n\r\n<ul>\r\n\t<li>Add these properties to KV store in Consul:\r\n\t<ul>\r\n\t\t<li>order.selfServiceHostName=[omni-url].&nbsp; &nbsp; ex: order.selfServiceHostName=<a href=\"https://store-mpatgar0101.cp.manh.cloud/\">https://store-mpatgar0101.cp.manh.cloud</a></li>\r\n\t\t<li>email.publishEmailPayload =false</li>\r\n\t\t<li>email.postemailtoqueue=false</li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<h5><a name=\"two-other-payment-side-configurations\" id=\"two-other-payment-side-configurations\"></a>Two other Payment-Side Configurations</h5>\r\n\r\n<ul>\r\n\t<li>Save the payment gateway configuration for Cybersource</li>\r\n\t<li>Upload the payment certificate (for the organization)</li>\r\n</ul>\r\n\r\n<h4><a name=\"foreign-or-alternate-currency-configuration\" id=\"foreign-or-alternate-currency-configuration\"></a><a id=\"ForeignCurrencyconfig\" name=\"ForeignCurrencyconfig\"></a>Foreign (or alternate) Currency Configuration</h4>\r\n\r\n<p>Point of Sale allows retailers to accept foreign, or alternate, currencies as cash payment for purchases. Below are the configurations required to display and accept alternate currency:</p>\r\n\r\n<ul>\r\n\t<li>PaymentCaptureConfig &gt; Cash &gt; Currency Config:\r\n\t<ul>\r\n\t\t<li>Currency Code: 3 character currency ISO code</li>\r\n\t\t<li>Permit to be accepted: When set to true and all other configurations are in place, this currency will be displayed in POS. If set to false, regardless of all other configurations being set, this currency will not display in POS.</li>\r\n\t\t<li>Minimum Sale Amount: Allows retailers to set a minimum amount for acceptance during a sale.</li>\r\n\t\t<li>Maximum Sale Amount: Allows retailers to set a maximum amount for acceptance during a sale.</li>\r\n\t\t<li>Display Sequence: Detemines the display order in the currency dropdown. This is used both during tendering, as well as during till pickup, till reconciliation and deposit.</li>\r\n\t\t<li>Display Name: Allows retailers to set a user-friendly name within the currency dropdown. If no display name is set, POS will use the 3 character ISO code.</li>\r\n\t\t<li>Allow Decimals: Allows retailers to accept only whole dollars from alternate currencies. EX: In a Canadian store, the retailer can set U.S. Dollars as an alternate currency. If Allow decimals is set to false, then the customer cannot pay using U.S. coins.</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li>POS Configuration &gt; Back Office &gt; Store Currency\r\n\t<ul>\r\n\t\t<li>These are the allowed currencies for Back Office operations.</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li>OmniUtil &gt; Conversion Rates\r\n\t<ul>\r\n\t\t<li>This entity contains the current conversion rates. It is structured as shown below with dummy sample data:</li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<h5 data-renderer-start-pos=\"12112\" id=\"currencyConversion-table:-Sample-data-as-of-07-Jun-2021\"><a name=\"currency-conversion-table\" id=\"currency-conversion-table\"></a>Currency Conversion Table</h5>\r\n\r\n<p data-renderer-start-pos=\"12112\">Sample data as of 07-Jun 2021<button></button></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table data-number-column=\"false\" style=\"border:undefined\">\r\n\t<colgroup>\r\n\t\t<col />\r\n\t\t<col />\r\n\t\t<col />\r\n\t</colgroup>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td colorname=\"\" colspan=\"1\" data-colwidth=\"254\" rowspan=\"1\">\r\n\t\t\t<p data-renderer-start-pos=\"12173\"><strong data-renderer-mark=\"true\">From Currency</strong></p>\r\n\t\t\t</td>\r\n\t\t\t<td colorname=\"\" colspan=\"1\" data-colwidth=\"253\" rowspan=\"1\">\r\n\t\t\t<p data-renderer-start-pos=\"12190\"><strong data-renderer-mark=\"true\">To Currency</strong></p>\r\n\t\t\t</td>\r\n\t\t\t<td colorname=\"\" colspan=\"1\" data-colwidth=\"253\" rowspan=\"1\">\r\n\t\t\t<p data-renderer-start-pos=\"12205\"><strong data-renderer-mark=\"true\">Exchange rate</strong></p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td colorname=\"\" colspan=\"1\" data-colwidth=\"254\" rowspan=\"1\">\r\n\t\t\t<p data-renderer-start-pos=\"12224\">USD</p>\r\n\t\t\t</td>\r\n\t\t\t<td colorname=\"\" colspan=\"1\" data-colwidth=\"253\" rowspan=\"1\">\r\n\t\t\t<p data-renderer-start-pos=\"12231\">EUR</p>\r\n\t\t\t</td>\r\n\t\t\t<td colorname=\"\" colspan=\"1\" data-colwidth=\"253\" rowspan=\"1\">\r\n\t\t\t<p data-renderer-start-pos=\"12238\">0.82</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td colorname=\"\" colspan=\"1\" data-colwidth=\"254\" rowspan=\"1\">\r\n\t\t\t<p data-renderer-start-pos=\"12248\">EUR</p>\r\n\t\t\t</td>\r\n\t\t\t<td colorname=\"\" colspan=\"1\" data-colwidth=\"253\" rowspan=\"1\">\r\n\t\t\t<p data-renderer-start-pos=\"12255\">USD</p>\r\n\t\t\t</td>\r\n\t\t\t<td colorname=\"\" colspan=\"1\" data-colwidth=\"253\" rowspan=\"1\">\r\n\t\t\t<p data-renderer-start-pos=\"12262\">1.22</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td colorname=\"\" colspan=\"1\" data-colwidth=\"254\" rowspan=\"1\">\r\n\t\t\t<p data-renderer-start-pos=\"12272\">USD</p>\r\n\t\t\t</td>\r\n\t\t\t<td colorname=\"\" colspan=\"1\" data-colwidth=\"253\" rowspan=\"1\">\r\n\t\t\t<p data-renderer-start-pos=\"12279\">MXN</p>\r\n\t\t\t</td>\r\n\t\t\t<td colorname=\"\" colspan=\"1\" data-colwidth=\"253\" rowspan=\"1\">\r\n\t\t\t<p data-renderer-start-pos=\"12286\">19.830</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td colorname=\"\" colspan=\"1\" data-colwidth=\"254\" rowspan=\"1\">\r\n\t\t\t<p data-renderer-start-pos=\"12298\">MXN</p>\r\n\t\t\t</td>\r\n\t\t\t<td colorname=\"\" colspan=\"1\" data-colwidth=\"253\" rowspan=\"1\">\r\n\t\t\t<p data-renderer-start-pos=\"12305\">USD</p>\r\n\t\t\t</td>\r\n\t\t\t<td colorname=\"\" colspan=\"1\" data-colwidth=\"253\" rowspan=\"1\">\r\n\t\t\t<p data-renderer-start-pos=\"12312\">0.0504</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td colorname=\"\" colspan=\"1\" data-colwidth=\"254\" rowspan=\"1\">\r\n\t\t\t<p data-renderer-start-pos=\"12324\">USD</p>\r\n\t\t\t</td>\r\n\t\t\t<td colorname=\"\" colspan=\"1\" data-colwidth=\"253\" rowspan=\"1\">\r\n\t\t\t<p data-renderer-start-pos=\"12331\">CAD</p>\r\n\t\t\t</td>\r\n\t\t\t<td colorname=\"\" colspan=\"1\" data-colwidth=\"253\" rowspan=\"1\">\r\n\t\t\t<p data-renderer-start-pos=\"12338\">1.210</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td colorname=\"\" colspan=\"1\" data-colwidth=\"254\" rowspan=\"1\">\r\n\t\t\t<p data-renderer-start-pos=\"12349\">CAD</p>\r\n\t\t\t</td>\r\n\t\t\t<td colorname=\"\" colspan=\"1\" data-colwidth=\"253\" rowspan=\"1\">\r\n\t\t\t<p data-renderer-start-pos=\"12356\">USD</p>\r\n\t\t\t</td>\r\n\t\t\t<td colorname=\"\" colspan=\"1\" data-colwidth=\"253\" rowspan=\"1\">\r\n\t\t\t<p data-renderer-start-pos=\"12363\">0.830</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ul>\r\n\t<li>It is customer responsibility to create and maintain required rates via API. There is currently no UI to the ConversionRate entity.</li>\r\n\t<li>For most orgs, there is typically one LOCAL currency so only half the records above will be required.\r\n\t<ul>\r\n\t\t<li>For example if the local currency is USD then one would never need a record for which USD is the FROM currency.</li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h5><a name=\"grants\" id=\"grants\"></a>Grants</h5>\r\n\r\n<ul>\r\n\t<li>ui::posservice::allowforeigncurrencycashtendering This grant allows the user to see the alternate currency dropdown on the UI,but manager override will be prompted.</li>\r\n\t<li>overrideaccess::posservice::allowforeigncurrencycashtendering This grant allows manager override to occur.</li>\r\n</ul>\r\n\r\n<div class=\"info\"><strong>Note</strong>: If the conversion rate API fails to get data, the UI will not display the alternate currency dropdown.</div>\r\n\r\n<p>In addition to the above required configurations, there are several additional configurations which are used in POS for cash payment, each of which interact with alternate &#39;foreign&#39; currency amount fields as well.</p>\r\n\r\n<h5><a name=\"additional-configurations-which-interact-with-alternate-39-foreign-39-currency-feature\" id=\"additional-configurations-which-interact-with-alternate-39-foreign-39-currency-feature\"></a>Additional Configurations which Interact with Alternate &#39;foreign&#39; Currency feature</h5>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h6><a name=\"currency-formatting\" id=\"currency-formatting\"></a>Currency Formatting</h6>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ul>\r\n\t<li><strong>If Currency Formatting is not enabled</strong>, amount fields are generic.\r\n\r\n\t<ul>\r\n\t\t<li>For example, whether local currency is CAD, USD, or EURO, 150 will be shown as 150.00 with no currency symbol (or 150,00 if the locale is European), whether the general (local) amount fields or alternate currency input amount fields.</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li><strong>If this is enabled</strong> via <a href=\"https://omni.helpdocsonline.com/poscartccnfiguration$CurrencyFormatBF\">POSStoreConfig,</a> the local amount fields are generally formatted as per the correct local currency symbol and locale.\r\n\t<ul>\r\n\t\t<li>In this event,\r\n\t\t<ul>\r\n\t\t\t<li>For a system whose local default currency is EUR and whose locale is France, 150 will be generally shown as 150,00 &euro;.</li>\r\n\t\t\t<li>For a system whose local default currency is USD and whose locale is United States, 150 will be generally shown as $150.00.</li>\r\n\t\t</ul>\r\n\t\t</li>\r\n\t\t<li>However any amount fields which accept ALTERNATE currency will show a currency symbol compatible with the ALTERNATE currency.\r\n\t\t<ul>\r\n\t\t\t<li>Ex. 1 - 150 represented in a French system with local currency EUR and MXN (Mexican Pesos) available as alternate currency:\r\n\t\t\t<ul>\r\n\t\t\t\t<li>General (local) amount fields 150,00 &euro;.</li>\r\n\t\t\t\t<li>Alternate amount fields, where user selects MXN 150,00 $MX.\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li>Note - $MX or MX$ are both conventions to represent Mexican Pesos.</li>\r\n\t\t\t\t</ul>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t\t</li>\r\n\t\t\t<li>Ex. 2 - 150 represented in a US system with local currency USD and EUR (Euros) available as alternate currency:\r\n\t\t\t<ul>\r\n\t\t\t\t<li>General (local) amount fields $150.00.</li>\r\n\t\t\t\t<li>Alternate amount fields, where user selects EUR &euro; 150.00.\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li>Note - &euro; is the symbol for Euro..</li>\r\n\t\t\t\t</ul>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\t\t</li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<h6><a name=\"default-to-balance-due\" id=\"default-to-balance-due\"></a>Default to Balance Due</h6>\r\n\r\n<ul>\r\n\t<li>The UI will honor this configuration, and whenever the alternate currency is changed, the amount shown in the Enter Amount field is automatically shown at the converted rate.</li>\r\n</ul>\r\n\r\n<h6><a name=\"overtender\" id=\"overtender\"></a>Overtender</h6>\r\n\r\n<ul>\r\n\t<li>If set to true, UI will allow overtendering of all currencies. If set to false, UI will not allow the user to overtender with any currency.</li>\r\n</ul>\r\n\r\n<h6>&nbsp;</h6>\r\n\r\n<div class=\"warning\">Default to balance due is not recommended if Allow Decimal configuration is set to false.</div>\r\n\r\n<div class=\"warning\">Overtender configurations: Based on conversion rates, this may leave a balance due if customer chooses to pay with an alternate curency. It is our current recommendation that this configuration be set to allow for overtendering if allowing alternate currency collection.</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h5><a name=\"electronic-journal\" id=\"electronic-journal\"></a>Electronic Journal</h5>\r\n\r\n<p>No additional configurations are required. When an alternate currency is collected, the <span style=\"color:#172b4d\"><span style=\"color:#172b4d\">additional fields from Payment Method Object &quot;Alternate Currency Code&quot;, &quot;Alternate Currency Amount&quot; and &quot;Conversion Rate&quot; For &#39;Pos::AddTender::Cash&#39; </span></span><span style=\"color:#172b4d\">EJ mod type will be displayed.</span></p>\r\n\r\n<h5><a name=\"receipts\" id=\"receipts\"></a>Receipts</h5>\r\n\r\n<p>The following receipt templates have been modified to display alternate currency data:</p>\r\n\r\n<ul>\r\n\t<li>SaleReturn_Payment_CashTenders.jrxml</li>\r\n\t<li>SaleReturn_Payment_GC_CashTenders.jrxml</li>\r\n</ul>\r\n\r\n<div class=\"info\"><strong>Note</strong>: Alternate currencies can also be used on a local edge server. As part of Edge export schedule, the conversionRate shadow table from OmniUtil will be synced then export from configdirector.</div>\r\n\r\n<h4><a name=\"payment-terminal-selection-and-sharing-for-mobile-devices\" id=\"payment-terminal-selection-and-sharing-for-mobile-devices\"></a>Payment Terminal Selection and Sharing for Mobile Devices</h4>\r\n\r\n<p>Retailers can configure mobile registers to establish a session with a payment terminal at the time of payment, instead of at the beginning of an order. To enable this functionality in mobile registers for a location, set posStoreConfig&gt;storeCommonConfig&gt;delayPTSessionTillPayment = True.</p>\r\n\r\n<p>This allows for multiple registers to be connected to a single payment terminal, and also allows users to easily switch to a different terminal as needed. When configured, the connected payment terminal will be displayed in the screen header of the Cart and Order Summary.</p>\r\n\r\n<p>The session for the device will not begin until the following:</p>\r\n\r\n<ul>\r\n\t<li>User selects a tender on Order Summary which requires the terminal to collect data or to process (credit, debit, gift card, etc.)</li>\r\n\t<li>User selects to issue or reload a gift card from the Cart</li>\r\n\t<li>User selects a &quot;from&quot; exchange tender which requires a payment terminal</li>\r\n</ul>\r\n\r\n<p>If a session is started in the Cart, due to a gift card activate or reload, where &quot;Activate Gift Card in Cart&quot; is true, the session will not end until the transaction is complete. The same will hold true for Exchange tenders where the &quot;from&quot; tender requires the payment terminal. The session release will occur after the receipt has been printed or emailed, and the terminal will then become available for the next transaction.</p>\r\n\r\n<p>Grant:</p>\r\n\r\n<p><span style=\"color:#000000\">ui::devicemgmt::pairpaymentterminalinheader - </span>This is a UI action to allow user to change the payment terminl within the tappable header when config is turned on. If user does not have this grant, the selected PT will be visible but not editable from outside POS Settings.</p>\r\n\r\n<div class=\"info\">Note: If a user changes the selected payment terminal in the Cart or Order Summary, it will overwrite the selected device in POS Settings.</div>\r\n\r\n<h4><a name=\"exchange-tender-configuration\" id=\"exchange-tender-configuration\"></a>Exchange Tender configuration</h4>\r\n\r\n<p>Exchange tender in Active Store solution offers the retailers to accept a tender and refund the customer with another tender. Both the tenders i.e. the tender exchanged and the list of available refunded tenders are configurable from payment capture details screen from config UI.</p>\r\n\r\n<p>Payment Type that needs to be eligible for exchange: below are the configurations required to accept a payment type for exchange tender functionality</p>\r\n\r\n<ul>\r\n\t<li>PermitFromExchangeTender - Set it to TRUE, to accept a payment type as eligible tender for exchange.</li>\r\n\t<li>MaxFromExchange - Retailer can set up maximum amount allowed for an exchange for the selected payment type.</li>\r\n\t<li>FromExchngTendrDispSeq - This is to configure the display sequence of the available tender for exchange. It will be used on the Store application.</li>\r\n\t<li>PermitToExchangeTender - Check this flag if this paymentType can be used as an eligible payback/refund tender for any exchange tender.</li>\r\n\t<li>IsBalEqReqFOrExchgTndr - Check this flag if balance enquiry is required before charging the tender to be exchanged. For example: this flag should be true for gift cards, since we do a balance enquiry first to get the available balance amount. This is necessary and tied back to the payment form method, since usually a gift card is processed through the terminal to the get balance, if not processed through terminal, user extension will be used to get balance from thirrd-party applications. If this flag is False, then balance of the gift card needs to be input by the user.</li>\r\n</ul>\r\n\r\n<p><strong>Configure eligible payback/refund for exchange tender transaction</strong></p>\r\n\r\n<p>The list of eligible payback/refund tenders for exchange tender transaction can be configured from the config UI. This list is specific to a tender that is getting exchanged, so this list needs to be configured for all the tenders for which exchange is permitted. The maximum amount of refund allowed can be configured here.</p>\r\n\r\n<p><strong>Code Snippet of list of eligible exchange refund tenders for check:</strong></p>\r\n\r\n<pre>\r\n<code>    &quot;ExchangeTenderRefndType&quot; :[\r\n\t{\r\n\t\t&quot;ParentPayCaptureConfigType&quot;: &quot;Check&quot;,\r\n\t\t&quot;PermitExchgTndrRefndType&quot;: {\r\n\t\t    &quot;PaymentTypeId&quot;: &quot;Gift Card&quot;\r\n\t\t  },\r\n\t\t&quot;DisplaySequence&quot;: &quot;1&quot;,\r\n\t\t&quot;InteractionMode&quot;: {\r\n\t\t\t&quot;InteractionModeId&quot;: &quot;CustomerPresent&quot;\r\n\t         },\r\n      \t\t&quot;MaxToExchangeTender&quot;: 5000\r\n\t},\r\n\t{\r\n\t\t&quot;ParentPayCaptureConfigType&quot;: &quot;Check&quot;,\r\n\t\t&quot;PermitExchgTndrRefndType&quot;: {\r\n\t\t    &quot;PaymentTypeId&quot;: &quot;Cash&quot;\r\n\t\t  },\r\n\t\t&quot;DisplaySequence&quot;: &quot;2&quot;,\r\n\t\t&quot;InteractionMode&quot;: {\r\n\t\t\t&quot;InteractionModeId&quot;: &quot;CustomerPresent&quot;\r\n\t         },\r\n      \t\t&quot;MaxToExchangeTender&quot;: 9999999.99\r\n\t},\r\n\t{\r\n\t\t&quot;ParentPayCaptureConfigType&quot;: &quot;Check&quot;,\r\n\t\t&quot;PermitExchgTndrRefndType&quot;: {\r\n\t\t    &quot;PaymentTypeId&quot;: &quot;Credit Card&quot;\r\n\t\t  },\r\n\t\t&quot;DisplaySequence&quot;: &quot;3&quot;,\r\n\t\t&quot;InteractionMode&quot;: {\r\n\t\t\t&quot;InteractionModeId&quot;: &quot;CustomerPresent&quot;\r\n\t        },\r\n      \t\t&quot;MaxToExchangeTender&quot;: 9999999.99\r\n\t}\r\n      ]</code></pre>\r\n\r\n<h4><a name=\"pos-refund-configuration\" id=\"pos-refund-configuration\"></a>POS Refund configuration</h4>\r\n\r\n<ul>\r\n</ul>\r\n\r\n<p><strong>Payment Capture Config</strong></p>\r\n\r\n<ul>\r\n\t<li>Minimum Refund Amount: Specify the minimum amount that can be refunded using this tender type.</li>\r\n\t<li>Maximum Refund Amount: Specify the maximum amount that can be refunded using this tender type. While doing so, ensure that there is one another refund tender type which can be used to refund.</li>\r\n</ul>\r\n\r\n<p><strong>Refund Pay Type - Available Refund Payment types for Validated Returns</strong></p>\r\n\r\n<ul>\r\n\t<li>List of allowed refund tender types: This is the list of allowed refund tender types for a given tender type, used to make purchases. One with sequence 1 and interaction mode=Customer Present is used in case of automatic refunds. In case of override tender, all refund pay types with interaction mode=Customer Present are available. If there are multiple tender types used to make purchases, override refund types are the ones common across all these.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><a id=\"Alternate tenders for Override Tender\" name=\"Alternate tenders for Override Tender\"></a>Refund Pay Type - Available Refund Payment Types for Standalone Returns</strong></p>\r\n\r\n<p>Standalone Returns are return lines with items that cannot be matched to an original order - i.e., &quot;returns without receipt&quot;. Normally the refund payment types which are recommended either automatically or by override are based on the payment type of the original order. If there is no &#39;original order&#39; as for standalone, the recommended/available payment types are configured differently as described.</p>\r\n\r\n<p><strong>Payment Parameter Standalone Return Payment Type value - use to configure single Default refund payment type for Standalone Returns</strong></p>\r\n\r\n<ul>\r\n\t<li>Standalone Return Payment Type: Used to specify a single default refund payment type for standalone returns. This parameter is used if no payment types are configured via payment capture configurations as available to be allowed in standalone returns.</li>\r\n\t<li>In this case POS allows one default refund tender type for standalone returns.</li>\r\n\t<li>In case of return order with validated and standalone returns, this gets added to the list of tender types applicable to validated return tender types. Threshold defined for refund tender is not applicable to standalone return payment type.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Pay Capture Config Payment type attribute &quot;Allow Standalone Return&quot; - use with Business Flag to configure multiple available refund payment typesfor Standalone Returns</strong></p>\r\n\r\n<ul>\r\n\t<li>Allow Standalone Return: This attribute is on &quot;payment capture config&quot; and is used to configure alternate refund type during a override tender scenario.</li>\r\n\t<li>This attribute works with a business flag on pos general config &gt; common config &gt; &quot;Show Alternate Refunds For Return&quot; which is false by default. If the business flag remains false, this AllowStandalone returns attribute for each payment type has no function.\r\n\t<ul>\r\n\t\t<li>If Show Alternate Refunds For Return = false, Allow Standalone returns flag for each payment type has no function. A single payment type, taken from that configured in paymentParameters&gt;Standalone Return Payment Type will be used in a standalone refund tender scenario.</li>\r\n\t\t<li>If Show Alternate Refunds For Return = true, Allow Standalone returns flag will be used to show alternate override tenders in a standalone tender scenario.\r\n\t\t<ul>\r\n\t\t\t<li>For an unvalidated return, when the business flag is true, any payment types for which Allow Standalone Return is True will be available as alternate &#39;override&#39; refund types.</li>\r\n\t\t\t<li>For example, Gift card and Store credit are initially seeded as &quot;Allow Standalone Return&quot; = true from base seed data profile. Therefore, if this profile is copied and used for the retailer, Gift card and store credit will be shown as alternate tenders in refund override tender.</li>\r\n\t\t</ul>\r\n\t\t</li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<p><strong>&#39;Mixed&#39; Returns - Combination of Validated and Standalone</strong></p>\r\n\r\n<ul>\r\n\t<li>This logic can be more complicated in a cart containing multiple returns.\r\n\t<ul>\r\n\t\t<li>Multiple Return example: One return item can be associated to an original order paid by Credit card (validated return) and another can be standalone, not matched to an original order.</li>\r\n\t\t<li>In this case, at the Order Summary, if the flags are set to allow multiple alternate standalone refund tenders, the recommendation will be the intersection of refund tenders for each of the returns.\r\n\t\t<ul>\r\n\t\t\t<li>Assume Credit Card is configured to allow refund by Credit, Debit, <span style=\"color:#000000\">Gift Card, and Cash.</span></li>\r\n\t\t\t<li>Assume that the alternative standalone refund types are <span style=\"color:#000000\">Gift Card, Cash,</span> and Store Credit.</li>\r\n\t\t\t<li>In the above example, Override refund choices will be the intersection of these two sets of rules: <span style=\"color:#000000\">Gift Card and Cash.</span></li>\r\n\t\t</ul>\r\n\t\t</li>\r\n\t\t<li>In other words, for such a mixed cart return scenario the rules for Standalone override refund types work along with Refund Pay Type of the original payment method. Only the common payment types will be displayed as alternate tenders in refund override tender.</li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4><a name=\"pos-post-void-configuration\" id=\"pos-post-void-configuration\"></a>POS Post Void Configuration</h4>\r\n\r\n<p>Post void is controlled and configured at each payment type, enable &quot;permit cancel&quot; under payment capture configuration to support post void for that payment type.</p>\r\n\r\n<div class=\"info\">NOTE In general, cancelling a payment transaction after the fact is not guaranteed of success in all cases, particularly for electronic payment methods, and depends on the gateway and the particular payment implementation for each retailer. If payment types are configured to permit &quot;cancel&quot;, further work may be required to make this work for that payment type/gateway/provider combination.</div>\r\n\r\n<p>If post void refund is required to be different from original then specify the payment Id under &quot;Cancel Refund Payment Type&quot;. Along with this configure the cancel behavior under payment type configuration. This indicates the behavior when a payment is canceled during a Post Void. When an order is post voided, the isCancelled flag set to true on corresponding order header, order line and payment header</p>\r\n\r\n<p>For example, some payment types such as cash should have an open void transaction created, so POS can issue cash to the customer and close the transaction. Other payment types like credit cards can have void transactions created and executed in the gateway immediately, since no follow-up action is required by POS. Possible values for cancel behavior include:</p>\r\n\r\n<ol>\r\n\t<li><strong>New payment method</strong>: When a payment method of this payment type is canceled, a new payment method gets created to issue a refund for any closed settlement amounts. For example, follow-on voids against Traveler&rsquo;s Check is not supported as checks cannot be given back to the customer. So instead of creating a cancel transaction, this flag tells the payment component to create a new payment method. The new payment type is created based on the payment capture configuration called &#39;Cancel Refund Payment Type.&#39;</li>\r\n\t<li><strong>Create and process cancel against original payment method</strong>: When a payment method of this payment type is canceled, a follow-on void gets created for each closed settlement and refund transaction. The cancel transaction is immediately sent to the gateway to be processed, and the payment header response includes the details of the outcome. For example, when a credit card with a closed settlement is canceled, a follow-on cancel is created against the settlement and executed in the gateway.</li>\r\n\t<li value=\"3\"><strong>Create open cancel against original payment method</strong>: When a payment method of this payment type is canceled, a follow-on void gets created for each closed settlement and refund transaction. The cancel transaction is not sent to a gateway, but instead is left open, so that POS can perform actions and close the transaction. For example, when a cash payment with a closed settlement is canceled, an open follow-on cancel is created against the settlement, and POS is expected to close the cancel transaction after issuing cash to the customer.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h5><a name=\"post-void-of-refund-transaction\" id=\"post-void-of-refund-transaction\"></a><a id=\"PostVoid_Refund_Config\" name=\"PostVoid_Refund_Config\"></a>Post void of refund transaction</h5>\r\n\r\n<p>To enable refund of any payment type, &quot;permit post void on refunds&quot; should be turned on for that payment type under payment capture configuration, and it is also mandatory to have the &quot;permit cancel&quot; flag enabled for this to work. If this is not enabled, then post void validation will fail and the user will not be allowed to post void the transaction.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4><a name=\"payment-franking\" id=\"payment-franking\"></a>Payment Franking</h4>\r\n\r\n<p><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">If &ldquo;Frank Required for Redeem&rdquo; is marked as &lsquo;true&rsquo; within Payment Capture Config Detail for a payment method, such as Checks, the retailer can configure an information message to display on the UI and configure what data is franked, or endorsed, by the printer on the back of the tender.</span></span></span></p>\r\n\r\n<div class=\"info\">Note: Tender franking requires a supported Register/Printer combination and a receipt printer model that supports franking, such as the Epson TM-6000IV. See the <a hqid=\"1832731\" href=\"/certified-technology\">MAO Supported Technology</a> page.</div>\r\n\r\n<h5 class=\"CxSpFirst\" style=\"margin-bottom:11.25pt\"><a name=\"information-message-during-franking-configuration\" id=\"information-message-during-franking-configuration\"></a><b><span style=\"font-size:12.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">Information Message During Franking Configuration</span></span></span></b></h5>\r\n\r\n<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">Within Payment Capture Config Detail, there is a configuration called &ldquo;InfoMessageDuringFranking&rdquo; that allows for a retailer to configure a message that is displayed on application when the UI is waiting on the hardware to frank the check. This is useful for the retailer to communicate any important instructions to the user. <a>If there is no message configured, then a default message will display on the UI.</a></span></span></span>: &ldquo;Insert the slip into the MICR&rdquo;</p>\r\n\r\n<p class=\"CxSpFirst\" style=\"margin-bottom:11.25pt\"><b><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">Snippet of sample configuration for a franking message</span></span></span></b></p>\r\n\r\n<div class=\"computer_code\">\r\n<p class=\"CxSpFirst\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\">{</span></span></p>\r\n\r\n<p class=\"CxSpMiddle\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\">&quot;PaymentType&quot;: &quot;Check&quot;,</span></span></p>\r\n\r\n<p class=\"CxSpMiddle\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\">&quot;PayCaptureConfigDetail&quot;: {</span></span></p>\r\n\r\n<p class=\"CxSpMiddle\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\">&quot;InfoMessageDuringFranking&quot;: &quot;Please insert check upside-down&quot;,</span></span></p>\r\n\r\n<p class=\"CxSpMiddle\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\">&quot;FrankingReqForRedeem&quot;: true</span></span></p>\r\n\r\n<p class=\"CxSpMiddle\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\">}</span></span></p>\r\n\r\n<p class=\"CxSpMiddle\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\">}</span></span></p>\r\n<strong><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">POST: {{url}}/payment/api/payment/payCaptureConfig/save</span></span></span></strong></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h5><a name=\"payment-franking-template-configuration\" id=\"payment-franking-template-configuration\"></a><b><span style=\"font-size:12.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">Payment Franking Template Configuration:</span></span></span></b></h5>\r\n\r\n<div class=\"info\"><strong>Note</strong>:<span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:black\"> This configuration of the FrankTemplateContent must be done via API using a JSON message. There is not a UI for to add the content details to a Frank Template.</span></span></span></div>\r\n\r\n<p class=\"CxSpFirst\" style=\"margin-bottom:11.25pt\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">There are two kinds of data that can be printed: &lsquo;dynamic&rsquo; data so that transactional information is printed, and &lsquo;static&rsquo; data so that non-transactional data is printed. If &ldquo;Frank Required for Redeem&rdquo; is marked as &lsquo;true&rsquo;, dynamic data will be printed. Should additional non-transactional data be required, static data can be configured. </span></span></span></p>\r\n\r\n<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">Dynamic data will be printed to provide the retailer with information that would change between transactions, such as OrderId and customer information. There are 4 fields that are enabled: </span></span></span></p>\r\n\r\n<table class=\"MsoTableGrid\" style=\"border-collapse:collapse; border:solid windowtext 1.0pt\">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width:89.75pt; border:solid windowtext 1.0pt; background:#d9d9d9\" width=\"120\">\r\n\t\t\t<p class=\"CxSpFirst\" style=\"margin-bottom:11.25pt; padding:0in 5.4pt 0in 5.4pt\"><b><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">Field Label</span></span></span></b></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width:175.5pt; border:solid windowtext 1.0pt; border-left:none; background:#d9d9d9\" width=\"234\">\r\n\t\t\t<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt; padding:0in 5.4pt 0in 5.4pt\"><b><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">Field Mapping</span></span></span></b></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width:202.25pt; border:solid windowtext 1.0pt; border-left:none; background:#d9d9d9\" width=\"270\">\r\n\t\t\t<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt; padding:0in 5.4pt 0in 5.4pt\"><b><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">Description</span></span></span></b></p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr style=\"height:3.15pt\">\r\n\t\t\t<td style=\"width:89.75pt; border:solid windowtext 1.0pt; border-top:none\" width=\"120\">\r\n\t\t\t<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt; padding:0in 5.4pt 0in 5.4pt\"><span style=\"height:3.15pt\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">Order Id</span></span></span></span></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width:175.5pt; border-top:none; border-left:none; border-bottom:solid windowtext 1.0pt; border-right:solid windowtext 1.0pt\" width=\"234\">\r\n\t\t\t<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt; padding:0in 5.4pt 0in 5.4pt\"><span style=\"height:3.15pt\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">Order.OrderId</span></span></span></span></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width:202.25pt; border-top:none; border-left:none; border-bottom:solid windowtext 1.0pt; border-right:solid windowtext 1.0pt\" width=\"270\">\r\n\t\t\t<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt; padding:0in 5.4pt 0in 5.4pt\"><span style=\"height:3.15pt\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">This is the unique transaction/order id </span></span></span></span></p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width:89.75pt; border:solid windowtext 1.0pt; border-top:none\" width=\"120\">\r\n\t\t\t<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt; padding:0in 5.4pt 0in 5.4pt\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">Tel. Num.</span></span></span></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width:175.5pt; border-top:none; border-left:none; border-bottom:solid windowtext 1.0pt; border-right:solid windowtext 1.0pt\" width=\"234\">\r\n\t\t\t<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt; padding:0in 5.4pt 0in 5.4pt\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">Order.CustomerPhone</span></span></span></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width:202.25pt; border-top:none; border-left:none; border-bottom:solid windowtext 1.0pt; border-right:solid windowtext 1.0pt\" width=\"270\">\r\n\t\t\t<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt; padding:0in 5.4pt 0in 5.4pt\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">This is the customer&rsquo;s phone number from the </span></span></span></p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width:89.75pt; border:solid windowtext 1.0pt; border-top:none\" width=\"120\">\r\n\t\t\t<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt; padding:0in 5.4pt 0in 5.4pt\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">State Code</span></span></span></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width:175.5pt; border-top:none; border-left:none; border-bottom:solid windowtext 1.0pt; border-right:solid windowtext 1.0pt\" width=\"234\">\r\n\t\t\t<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt; padding:0in 5.4pt 0in 5.4pt\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">Order.CustomerIdentityDoc.State</span></span></span></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width:202.25pt; border-top:none; border-left:none; border-bottom:solid windowtext 1.0pt; border-right:solid windowtext 1.0pt\" width=\"270\">\r\n\t\t\t<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt; padding:0in 5.4pt 0in 5.4pt\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">This is the state that issued the customer&rsquo;s license captured within the POS</span></span></span></p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width:89.75pt; border:solid windowtext 1.0pt; border-top:none\" width=\"120\">\r\n\t\t\t<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt; padding:0in 5.4pt 0in 5.4pt\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">Customer Id Num.</span></span></span></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width:175.5pt; border-top:none; border-left:none; border-bottom:solid windowtext 1.0pt; border-right:solid windowtext 1.0pt\" width=\"234\">\r\n\t\t\t<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt; padding:0in 5.4pt 0in 5.4pt\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">Order.CustomerIdentityDoc.IdDocNumber</span></span></span></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width:202.25pt; border-top:none; border-left:none; border-bottom:solid windowtext 1.0pt; border-right:solid windowtext 1.0pt\" width=\"270\">\r\n\t\t\t<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt; padding:0in 5.4pt 0in 5.4pt\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">This is the customer&rsquo;s driver&rsquo;s license number captured within the POS</span></span></span></p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt\">&nbsp;</p>\r\n\r\n<p><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">Static data allows for a retailer to configure fixed information that remains the same between transactions, for example any text related to the Retailer&rsquo;s bank account or specific notes needed on the check. Static data goes into the &ldquo;StaticFieldContent&rdquo; field within the &ldquo;FrankTemplateContent&rdquo; entity. Static data is printed before the dynamic data, and if multiple lines of static information need to be printed, use the &ldquo;FieldSequence&rdquo; field </span></span></span><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">within the &ldquo;FrankTemplateContent&rdquo; entity to list in what order the information needs to be printed.</span></span></span></p>\r\n\r\n<div class=\"info\"><b><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">Note:</span></span></span></b><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\"> There is a character limit of up to 29 characters that will be printed. If the value is longer than 29 characters, then any remaining characters may not be printed on the back of the check. </span></span></span></div>\r\n\r\n<p class=\"CxSpFirst\" style=\"margin-bottom:11.25pt\"><b><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">Payment Frank Template Example</span></span></span></b></p>\r\n\r\n<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">The retailer would like to display 3 additional attributes of &ldquo;static&rdquo; data along with the 4 attributes of &ldquo;dynamic&rdquo; data. To do this, we only need to configure the &ldquo;static&rdquo; data:</span></span></span></p>\r\n\r\n<table class=\"MsoTableGrid\" style=\"border-collapse:collapse; border:solid windowtext 1.0pt\">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width:71.4pt; border:solid windowtext 1.0pt; background:#d9d9d9\" width=\"95\">\r\n\t\t\t<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt; padding:0in 5.4pt 0in 5.4pt\"><b><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">PaymentType</span></span></span></b></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width:74.05pt; border:solid windowtext 1.0pt; border-left:none; background:#d9d9d9\" width=\"99\">\r\n\t\t\t<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt; padding:0in 5.4pt 0in 5.4pt\"><b><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">PaymentAction</span></span></span></b></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width:73.3pt; border:solid windowtext 1.0pt; border-left:none; background:#d9d9d9\" width=\"98\">\r\n\t\t\t<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt; padding:0in 5.4pt 0in 5.4pt\"><b><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">FieldSequence</span></span></span></b></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width:177.0pt; border:solid windowtext 1.0pt; border-left:none; background:#d9d9d9\" width=\"236\">\r\n\t\t\t<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt; padding:0in 5.4pt 0in 5.4pt\"><b><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">StaticFieldContent</span></span></span></b></p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width:71.4pt; border:solid windowtext 1.0pt; border-top:none\" width=\"95\">\r\n\t\t\t<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt; padding:0in 5.4pt 0in 5.4pt\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">Check</span></span></span></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width:74.05pt; border-top:none; border-left:none; border-bottom:solid windowtext 1.0pt; border-right:solid windowtext 1.0pt\" width=\"99\">\r\n\t\t\t<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt; padding:0in 5.4pt 0in 5.4pt\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">Redeem</span></span></span></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width:73.3pt; border-top:none; border-left:none; border-bottom:solid windowtext 1.0pt; border-right:solid windowtext 1.0pt\" width=\"98\">\r\n\t\t\t<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt; padding:0in 5.4pt 0in 5.4pt\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">1</span></span></span></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width:177.0pt; border-top:none; border-left:none; border-bottom:solid windowtext 1.0pt; border-right:solid windowtext 1.0pt\" width=\"236\">\r\n\t\t\t<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt; padding:0in 5.4pt 0in 5.4pt\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">Deposit to the Acct of Client</span></span></span></p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width:71.4pt; border:solid windowtext 1.0pt; border-top:none\" width=\"95\">\r\n\t\t\t<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt; padding:0in 5.4pt 0in 5.4pt\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">Check</span></span></span></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width:74.05pt; border-top:none; border-left:none; border-bottom:solid windowtext 1.0pt; border-right:solid windowtext 1.0pt\" width=\"99\">\r\n\t\t\t<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt; padding:0in 5.4pt 0in 5.4pt\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">Redeem</span></span></span></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width:73.3pt; border-top:none; border-left:none; border-bottom:solid windowtext 1.0pt; border-right:solid windowtext 1.0pt\" width=\"98\">\r\n\t\t\t<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt; padding:0in 5.4pt 0in 5.4pt\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">2</span></span></span></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width:177.0pt; border-top:none; border-left:none; border-bottom:solid windowtext 1.0pt; border-right:solid windowtext 1.0pt\" width=\"236\">\r\n\t\t\t<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt; padding:0in 5.4pt 0in 5.4pt\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">Account# 123456789</span></span></span></p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width:71.4pt; border:solid windowtext 1.0pt; border-top:none\" width=\"95\">\r\n\t\t\t<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt; padding:0in 5.4pt 0in 5.4pt\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">Check</span></span></span></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width:74.05pt; border-top:none; border-left:none; border-bottom:solid windowtext 1.0pt; border-right:solid windowtext 1.0pt\" width=\"99\">\r\n\t\t\t<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt; padding:0in 5.4pt 0in 5.4pt\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">Redeem</span></span></span></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width:73.3pt; border-top:none; border-left:none; border-bottom:solid windowtext 1.0pt; border-right:solid windowtext 1.0pt\" width=\"98\">\r\n\t\t\t<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt; padding:0in 5.4pt 0in 5.4pt\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">3</span></span></span></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width:177.0pt; border-top:none; border-left:none; border-bottom:solid windowtext 1.0pt; border-right:solid windowtext 1.0pt\" width=\"236\">\r\n\t\t\t<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt; padding:0in 5.4pt 0in 5.4pt\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">*****************************</span></span></span></p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt\">&nbsp;</p>\r\n\r\n<p class=\"CxSpMiddle\" style=\"margin-bottom:11.25pt\"><b><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\">Snippet of sample configuration of data to be franked:</span></span></span></b></p>\r\n\r\n<table style=\"border:undefined\" width=\"100%\">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<div>\r\n\t\t\t<p class=\"CxSpFirst\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\">{</span></span></p>\r\n\r\n\t\t\t<p class=\"CxSpMiddle\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\">&quot;PaymentType&quot;: &quot;Check&quot;,</span></span></p>\r\n\r\n\t\t\t<p class=\"CxSpMiddle\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\">&quot;PaymentFrankTemplate&quot;: [</span></span></p>\r\n\r\n\t\t\t<p class=\"CxSpMiddle\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\">{</span></span></p>\r\n\r\n\t\t\t<p class=\"CxSpMiddle\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\">&quot;TemplateId&quot;: &quot;Franking0001&quot;,</span></span></p>\r\n\r\n\t\t\t<p class=\"CxSpMiddle\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\">&quot;LocationId&quot;: &quot;0001&quot;,</span></span></p>\r\n\r\n\t\t\t<p class=\"CxSpMiddle\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\">&quot;Language&quot;: &quot;en&quot;,</span></span></p>\r\n\r\n\t\t\t<p class=\"CxSpMiddle\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\">&quot;PaymentFrankingAction&quot;: {</span></span></p>\r\n\r\n\t\t\t<p class=\"CxSpMiddle\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\">&quot;PaymentFrankingActionId&quot;: &quot;Redeem&quot;</span></span></p>\r\n\r\n\t\t\t<p class=\"CxSpMiddle\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\">},</span></span></p>\r\n\r\n\t\t\t<p class=\"CxSpMiddle\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\">&quot;FrankTemplateContent&quot;: [</span></span></p>\r\n\r\n\t\t\t<p class=\"CxSpMiddle\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\">,</span></span></p>\r\n\r\n\t\t\t<p class=\"CxSpMiddle\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\">{</span></span></p>\r\n\r\n\t\t\t<p class=\"CxSpMiddle\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\">&quot;FieldSequence&quot;: 1,</span></span></p>\r\n\r\n\t\t\t<p class=\"CxSpMiddle\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\">&quot;StaticFieldContent&quot;: &quot;Deposit to the Acct of Client&quot;</span></span></p>\r\n\r\n\t\t\t<p class=\"CxSpMiddle\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\">},</span></span></p>\r\n\r\n\t\t\t<p class=\"CxSpMiddle\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\">{</span></span></p>\r\n\r\n\t\t\t<p class=\"CxSpMiddle\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\">&quot;FieldSequence&quot;: 2,</span></span></p>\r\n\r\n\t\t\t<p class=\"CxSpMiddle\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\">&quot;StaticFieldContent&quot;: &quot;Account# 123456789&quot;</span></span></p>\r\n\r\n\t\t\t<p class=\"CxSpMiddle\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\">},</span></span></p>\r\n\r\n\t\t\t<p class=\"CxSpMiddle\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\">{</span></span></p>\r\n\r\n\t\t\t<p class=\"CxSpMiddle\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\">&quot;FieldSequence&quot;: 3,</span></span></p>\r\n\r\n\t\t\t<p class=\"CxSpMiddle\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\">&quot;StaticFieldContent&quot;: *****************************</span></span></p>\r\n\r\n\t\t\t<p class=\"CxSpMiddle\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\">}</span></span></p>\r\n\r\n\t\t\t<p class=\"CxSpMiddle\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\">]</span></span></p>\r\n\r\n\t\t\t<p class=\"CxSpMiddle\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\">}</span></span></p>\r\n\r\n\t\t\t<p class=\"CxSpMiddle\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\">]</span></span></p>\r\n\r\n\t\t\t<p class=\"CxSpLast\"><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\">}</span></span></p>\r\n\t\t\t</div>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p><span style=\"position:relative; width:515px\"><span style=\"z-index:251661312\"><span style=\"left:-10px\"><span style=\"top:0px\"><span style=\"height:330px\"><img alt=\"Text Box: {\r\n\t&quot;PaymentType&quot;: &quot;Check&quot;,\r\n\t&quot;PaymentFrankTemplate&quot;: [\r\n\t\t{\r\n\t\t\t&quot;TemplateId&quot;: &quot;Franking0001&quot;,\r\n\t\t\t&quot;LocationId&quot;: &quot;0001&quot;,\r\n\t\t\t&quot;Language&quot;: &quot;en&quot;,\r\n\t\t\t&quot;PaymentFrankingAction&quot;: {\r\n\t\t\t\t&quot;PaymentFrankingActionId&quot;: &quot;Redeem&quot;\r\n\t\t\t},\r\n\t\t\t&quot;FrankTemplateContent&quot;: [\r\n\t\t\t\t,\r\n\t\t\t\t{\r\n\t\t\t\t\t&quot;FieldSequence&quot;: 1,\r\n\t\t\t\t\t&quot;StaticFieldContent&quot;: &quot;Deposit to the Acct of Client&quot;\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t&quot;FieldSequence&quot;: 2,\r\n\t\t\t\t\t&quot;StaticFieldContent&quot;: &quot;Account# 123456789&quot;\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t&quot;FieldSequence&quot;: 3,\r\n\t\t\t\t\t&quot;StaticFieldContent&quot;: *****************************\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}\r\n\" src=\"file:////Users/mallen/Library/Group Containers/UBF8T346G9.Office/TemporaryItems/msohtmlclip/clip_image001.png\" style=\"width:515px; height:120px\" /></span></span></span></span></span></p>\r\n\r\n<p><span style=\"font-size:9.0pt\"><span style=\"font-family:&quot;Arial&quot;,sans-serif\"><span style=\"color:#3d3d3d\"><img src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/image(405).png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL2ltYWdlKDQwNSkucG5nIiwiQ29uZGl0aW9uIjp7IkRhdGVMZXNzVGhhbiI6eyJBV1M6RXBvY2hUaW1lIjoxNzU0NzUyMDcyfX19XX0_&Signature=lAs6wW-2Vp3ub3h0KHU9v9aauNbiJVQel69kwm2WQ5XOU2NxNfP06VtdRfYdvGMbG8Kp4CD3dmrkWpxm8-SRBIp-z9MR7Nv0jt5lV6ftact9OWJVyj1gLAKJ0fZgaLTZLtqOCOddk18OcBdGhWo1BQElZiiqw85fpr7WFGZcj1iEiPHD4et8oHELsMmqIAc~C4c4dO9jXKykU0z56SqAw0j853eNMjXUmqGigcYJliaG9cYXSk-QO8R2UZWz8O-potDm5hiIlv8lkibtyNw-ALJhjq9M9IIq8JdnjVZxx5p6pN0bft3I2L-XevQaRlsQRl17mFRiDhPbmQiRoSlWTw__&Key-Pair-Id=K2TK3EG287XSFC\" style=\"width:284px; height:194px\" /></span></span></span></p>\r\n\r\n<h4><a name=\"ui-39-s-and-entities\" id=\"ui-39-s-and-entities\"></a>UI&#39;s and Entities</h4>\r\n\r\n<p>The configuration UI&#39;s mentioned in this document are listed in the following table, along with information to navigate to the API documentation.</p>\r\n\r\n<table style=\"border:undefined\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">UI Name</th>\r\n\t\t\t<th scope=\"col\">Component</th>\r\n\t\t\t<th scope=\"col\">Group</th>\r\n\t\t\t<th scope=\"col\">Seed Data Present?</th>\r\n\t\t\t<th scope=\"col\">Seed Data Profile</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Payment Capture Config</td>\r\n\t\t\t<td>Payment</td>\r\n\t\t\t<td>PayCaptureConfig services</td>\r\n\t\t\t<td>Yes</td>\r\n\t\t\t<td>Base</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>User Input Form</td>\r\n\t\t\t<td><span style=\"font-family:&quot;Open Sans&quot;, arial, sans-serif\"><span style=\"background-color:#e6e6e6\">Payment</span></span></td>\r\n\t\t\t<td>UserInputForm services</td>\r\n\t\t\t<td>Yes</td>\r\n\t\t\t<td><span style=\"font-family:&quot;Open Sans&quot;, arial, sans-serif\">Base</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>User Input Form Field</td>\r\n\t\t\t<td><span style=\"font-family:&quot;Open Sans&quot;, arial, sans-serif\">Paym</span><span style=\"font-family:&quot;Open Sans&quot;, arial, sans-serif\">ent</span></td>\r\n\t\t\t<td>UserInputForm services</td>\r\n\t\t\t<td>Yes</td>\r\n\t\t\t<td>Base</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>User Input Field</td>\r\n\t\t\t<td><span style=\"font-family:&quot;Open Sans&quot;, arial, sans-serif\"><span style=\"background-color:#e6e6e6\">Payment</span></span></td>\r\n\t\t\t<td>UserInputField services</td>\r\n\t\t\t<td>Yes</td>\r\n\t\t\t<td>System Augmentable</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>User input Field Type</td>\r\n\t\t\t<td><span style=\"font-family:&quot;Open Sans&quot;, arial, sans-serif\">Paym</span><span style=\"font-family:&quot;Open Sans&quot;, arial, sans-serif\">ent</span></td>\r\n\t\t\t<td>UserInputFieldtype services</td>\r\n\t\t\t<td>Yes</td>\r\n\t\t\t<td><span style=\"font-family:&quot;Open Sans&quot;, arial, sans-serif\">Base</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Payment Parameters</td>\r\n\t\t\t<td><span style=\"font-family:&quot;Open Sans&quot;, arial, sans-serif\">Payment</span></td>\r\n\t\t\t<td>PaymentParameters services</td>\r\n\t\t\t<td>Yes</td>\r\n\t\t\t<td><span style=\"font-family:&quot;Open Sans&quot;, arial, sans-serif\">Base</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Payment Rule</td>\r\n\t\t\t<td><span style=\"font-family:&quot;Open Sans&quot;, arial, sans-serif\">Payment</span></td>\r\n\t\t\t<td>PaymentRule services</td>\r\n\t\t\t<td>Yes</td>\r\n\t\t\t<td><span style=\"font-family:&quot;Open Sans&quot;, arial, sans-serif\">Base</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Payment Simulator Rule</td>\r\n\t\t\t<td><span style=\"font-family:&quot;Open Sans&quot;, arial, sans-serif\">Payment Gateway</span></td>\r\n\t\t\t<td>PaymentSimulatorRule services</td>\r\n\t\t\t<td>Yes</td>\r\n\t\t\t<td><span style=\"font-family:&quot;Open Sans&quot;, arial, sans-serif\">Base</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"font-family:&quot;Open Sans&quot;, arial, sans-serif\">Payment Type</span></td>\r\n\t\t\t<td><span style=\"font-family:&quot;Open Sans&quot;, arial, sans-serif\">Payment</span></td>\r\n\t\t\t<td><span style=\"font-family:&quot;Open Sans&quot;, arial, sans-serif\">PaymentType services</span></td>\r\n\t\t\t<td>Yes</td>\r\n\t\t\t<td><span style=\"font-family:&quot;Open Sans&quot;, arial, sans-serif\">Base</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"font-family:&quot;Open Sans&quot;, arial, sans-serif\">Payment Type Config</span></td>\r\n\t\t\t<td><span style=\"font-family:&quot;Open Sans&quot;, arial, sans-serif\">Payment</span></td>\r\n\t\t\t<td><span style=\"font-family:&quot;Open Sans&quot;, arial, sans-serif\">PaymentTypeConfig services</span></td>\r\n\t\t\t<td><span style=\"font-family:&quot;Open Sans&quot;, arial, sans-serif\">Yes</span></td>\r\n\t\t\t<td><span style=\"font-family:&quot;Open Sans&quot;, arial, sans-serif\">Base</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Payment Franking Options</td>\r\n\t\t\t<td>Payment</td>\r\n\t\t\t<td>PaymentFrankingActionServices</td>\r\n\t\t\t<td>Yes</td>\r\n\t\t\t<td>System Augmentable</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nbsp;</td>\r\n\t\t\t<td>Omniutil</td>\r\n\t\t\t<td>CurrencyConversionRate Services</td>\r\n\t\t\t<td>No</td>\r\n\t\t\t<td>&nbsp;</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4><a name=\"profile-purpose\" id=\"profile-purpose\"></a>Profile Purpose</h4>\r\n\r\n<p>The profile purposes of all the configuration entities are listed below. The default profile would be <strong style=\"font-style:inherit\">retail</strong> for these profile purposes.</p>\r\n\r\n<ul style=\"list-style-position:initial; list-style-image:initial\">\r\n\t<li>pay::paymentCaptureConfig</li>\r\n\t<li>pay::paymentConfig</li>\r\n\t<li>pay::paymentCoreConfig</li>\r\n</ul>\r\n\r\n\t  </div>\r\n </div>\r\n <div id=\"ui-page-fb-wrap\"></div>\r\n <div class=\"hiq-footer-wrap\">\r\n    \r\n                \r\n  </div>\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n",
  "content_length": 76991,
  "scraped_at": "2025-08-09T22:02:52.266769",
  "content_clean": "Home ››Manhattan Active® Omni››Store››Process & Configuration Guides››Point of Sale››POS Classic Guides››POS Order Selling››POS Payment ››POS Payment Configuration POS Payment Configuration Payment Capture ConfigurationPayment Form ConfigurationUser Input FormUser Input Form FieldsPay By Link ConfigurationPayment Capture ConfigurationGrantsDigital Self Service Configuration SelfService.OrganizationMappingKV store in ConsulTwo other Payment-Side ConfigurationsForeign (or alternate) Currency ConfigurationCurrency Conversion TableGrantsAdditional Configurations which Interact with Alternate 'foreign' Currency featureCurrency FormattingDefault to Balance DueOvertenderElectronic JournalReceiptsPayment Terminal Selection and Sharing for Mobile DevicesExchange Tender configurationPOS Refund configurationPOS Post Void ConfigurationPost void of refund transactionPayment FrankingInformation Message During Franking ConfigurationPayment Franking Template Configuration:UI's and EntitiesProfile Purpose This guide contains the configurations required for payment processing in the POS application. Payment Capture Configuration The payment capture configuration is used to define settings within each payment type for accepting and issuing payments in different order capture channels. The rules that can be defined within each payment type can vary between them - for example, whether or not to allow accepting the payment details from register device, payment terminal or through different hardware. For example: credit or debit payment type will always use the payment terminal so processThroughTerminal will be TRUE. But for payment type as Check, Input required may be TRUE, because associate needs to capture the check number manually or using another hardware like MICR reader, but processThroughTerminal FALSE. Other configuration includes whether signature required, franking required and so on. Below are some of the main POS configurations to be done for any payment type. Input Required - User need to configure how the input will be captured - either it can be from the payment terminal or within the application. Configure this attribute \"inputRequired\" as true if it is through the application. If it is from the payment terminal then configure \"processThroughTerminal\" = true. Retailer can also configure both to be true, in which case the payment can be captured from either of them. Note that the Credit and Debit are seeded as \"processThroughTerminal\" = true and cannot be changed to false. Capture Signature - Retailer can also configure capturing signature using forceCaptureSignature flag for any payment type within the POS application outside of the payment terminal. For example: Any custom tender which requires signature. Retailer can also configure the message using infoMessageDuringSignature attribute that needs to be displayed on the application in the signature screen. Franking - Franking of a payment type during redeem (produced for any purchases) can be configured with FrankingReqForRedeem Flag and the message that needs to be displayed on application when UI is waiting hardware to frank can be configured using InfoMessageDuringFranking attribute. Include In Drawer Count - Payment Instrument displayed during the Reconciliation, Bank Deposit and on various Back Office Reports can be configured using this flag. Three payment instruments CASH, CHECK, and TRAVELERS CHECK are assumed to be included by default. Currently, a business can configure whether or not to display two of these payment instruments i.e. Traveller's Check and Personal Check on these screens by changing this flag from TRUE (display) to FALSE (do not display). If this flag is FALSE, it is assumed that the retailer does not count these two and they will not be shown or displayed. This would be the case if for example the retailer doesn't even accept one or both of these payment types. NOTE: CASH will always be displayed on these screens; the flag does not have any impact on the display or inclusion of CASH. Note that \"Restrict Split Payment\" flag works on the balance due amount.  If you have a 100 dollar amount, and you are paying by credit card that has \"Restrict Split Payment\" set to true, you have to pay the total 100 dollars with that credit card. However, for the same order, if you paid 25 dollars on a gift card, paying the rest with credit card is still allowed, but the remainder of 75 dollars should be paid. Payment Form Configuration There are subsequent configurations required for payment type configured to accept the payment details as an input from application or from the payment terminal. From base supported payments we provide seed data configuration which can be used out of the box. Retailer can capture relative payment details specific to a tender and those details may not be required for any another payment type. For example: Check tender, it would be ideal to capture routing number, check number along with account number and amount from a MICR reader. For traveler's check, the details might be irrelevant and some check does not come with micro ink to read from micro reader but can be configured to get details from keyboard. This will allow the retailer to provide capability to custom configure the details of base supported or custom payment type that is accepted. More details on configuration are mentioned below: If a user input form is created with no input fields configured, POS UI will show a blank form during the payment process. Customer info related fields in payment is not used. They populate only at order header section. It is very unlikely that user captures these multiple times in an order. Even if does happen, the latest information persists. User Input Form If process through terminal is configured as TRUE for any payment type, for example: credit, debit and so on, then all the details of the payment will be picked from the payment terminal. Retailers need not configure any input forms here unless they are required to capture more details regarding the payment from different hardware or from app. For example, to capture zip code for a gift card payment for authentication, since zip code is not captured by payment terminal, retailers would create new user input form and related fields to input this data from keyboard. If input required is configured as TRUE for any payment type, then the input form and the form field needs to be configured. This configuration is necessary to get the payment details, map the payment details to attributes that get saved on backend system. The required input form configuration is detailed below Create an input form by providing form name and form Id. Select interaction mode as \"customer present\" as this payment is for POS application. Also set the context for sale or/and return. Configure the form methods to set the mode of capture data. For example, \"isPinpadFormMethod\", \"isKeyboardFormMethod\", \"isMicrFormMethod\" and \"isScannerFormMethod\". Note that if processThruTerminal is TRUE, isMicr is not a valid option but either isPinPad or isKeyboard can be used. Input form sequence needs to be provided. This will be used by the UI to decide which form needs to be captured first. Seed data Snippet of User Input form for \"Check\" payment type: { \"PaymentType\": \"Check\", \"UserInputFormID\": \"CHECKINPUTGROUP\", \"UserInputFormName\": \"Check Input Group\", \"InteractionMode\": { \"InteractionModeId\": \"CustomerPresent\" }, \"IsSaleContext\": true, \"IsReturnContext\": true, \"IsKeyboardFormMethod\": true, \"IsPinpadFormMethod\": false, \"IsMicrFormMethod\": true, \"IsScannerFormMethod\": false, \"UserInputFormSequence\": 1, \"FailoverToKeyboard\": true, \"InfoMessageDuringPayment\": \"Please input information through the MICR or Keyboard\", \"UserInputFormField\": [ { \"PaymentType\": \"Check\", \"UserInputFormID\": \"CHECKINPUTGROUP\", \"UserInputFormFieldID\": { \"UserInputFieldID\": \"CheckNumber\" }, \"UserInputFormFieldSize\": 15, \"UserInputFormFieldSequence\": 3 }, { \"PaymentType\": \"Check\", \"UserInputFormID\": \"CHECKINPUTGROUP\", \"UserInputFormFieldID\": { \"UserInputFieldID\": \"AccountNumber\" }, \"UserInputFormFieldSize\": 20, \"UserInputFormFieldSequence\": 2 }, { \"PaymentType\": \"Check\", \"UserInputFormID\": \"CHECKINPUTGROUP\", \"UserInputFormFieldID\": { \"UserInputFieldID\": \"RoutingNumber\" }, \"UserInputFormFieldSize\": 9, \"UserInputFormFieldSequence\": 1 } ] } Note: Please note that User Input forms are not being used by Digital Self-Service and Contact Center flows currently. User Input Form Fields Once the input form is configured, retailers need to configure the form fields (payment details) which may need to be captured as part of that input form. Below are high level guidelines which need to be followed Input form fields types - We can create form fields types before using that in input form. All form field types provided as part of seed data will be set as isBase = TRUE and any custom field that is created should be isBase = FALSE. The isBase attribute is turned TRUE only when the explicit mapping is present (which is for base attributes) with payment component to save the data. Create the input form field and link the field type. If any fields need to be validated then use the field size for static validation and form field validation regular expression validation. The form field sequence within the form can be configured. This can also be set up as mandatory field wherever necessary. Seed data Snippet of User Input form fields for \"Check\" payment type: Note: The \"UserInputFieldID\" should not contain any space or special characters. { \"ProfileId\": \"systemAugmentable\", \"data\": [ { \"UserInputFieldID\": \"CheckNumber\", \"UserInputFieldType\": { \"UserInputFieldTypeID\": \"Numeric\" }, \"UserInputFieldName\": \"Check Number\", \"IsBase\": true, \"EncryptionRequired\": true }, { \"UserInputFieldID\": \"AccountNumber\", \"UserInputFieldType\": { \"UserInputFieldTypeID\": \"Numeric\" }, \"UserInputFieldName\": \"Account Number\", \"IsBase\": true, \"EncryptionRequired\": true }, { \"UserInputFieldID\": \"RoutingNumber\", \"UserInputFieldType\": { \"UserInputFieldTypeID\": \"Numeric\" }, \"UserInputFieldName\": \"Routing Number\", \"IsBase\": true, \"EncryptionRequired\": true } ], \"RelatedProfiles\": [ { \"profilePurpose\": \"pay::paymentCaptureConfig\", \"profileId\": \"retail\" } ] } Pay By Link Configuration Payment Capture Configuration Enable Pay By Link POS - Retailers can configure to obtain credit/debit/gift card payment using the Pay By Link POS flag.  If enabled, a link via email can be sent to the customer or a QR code will be generated on the POS terminal (not payment terminal) which the customer can scan with their phone.  The customer will open the link, review the order and click on a Pay button on their phone.  Based on Manhattan Active® Omni Digital Self-Service functionality, which is configured outside POS, a 3rd party website will be displayed, and the customer will enter the payment information on their phone.  POS will obtain the payment status and, if successfully authorized, finalize the order. Note: Make sure a new \"Payment Type\" should be defined for \"Pay by link\". Note: Pay By Link will always default to the full balance due and the amount cannot be changed. Note: Pay By Link should only be configured for the Pay By Link tender as it is not logical for other tenders (i.e. Cash, Check, etc.). Note: Pay by Link by SMS/Text is not currently supported out of base POS.  This would require further integration with a provider - for example, Twilio.  Base deployments should use the \"hide\" metadata extension provided to hide the SMS option on the Order Summary screen, as it is not relevant at this time. Grants digitalselfservice::configuration::admin  This grant allows the user access to the DSS configurations. Digital Self Service Configuration Set Self Service Payment Gateway Id to Cybersource SelfService.OrganizationMapping Add Organization/User as the Key/Value pair in Consul for Self-Service Component (SelfService.OrganizationMapping) i.e., \"tm-demo-us\": \"User\": admin@tm-demo-us.com (user name which will send email). KV store in Consul Add these properties to KV store in Consul: order.selfServiceHostName=[omni-url].    ex: order.selfServiceHostName=https://store-mpatgar0101.cp.manh.cloud email.publishEmailPayload =false email.postemailtoqueue=false Two other Payment-Side Configurations Save the payment gateway configuration for Cybersource Upload the payment certificate (for the organization) Foreign (or alternate) Currency Configuration Point of Sale allows retailers to accept foreign, or alternate, currencies as cash payment for purchases. Below are the configurations required to display and accept alternate currency: PaymentCaptureConfig > Cash > Currency Config: Currency Code: 3 character currency ISO code Permit to be accepted: When set to true and all other configurations are in place, this currency will be displayed in POS. If set to false, regardless of all other configurations being set, this currency will not display in POS. Minimum Sale Amount: Allows retailers to set a minimum amount for acceptance during a sale. Maximum Sale Amount: Allows retailers to set a maximum amount for acceptance during a sale. Display Sequence: Detemines the display order in the currency dropdown. This is used both during tendering, as well as during till pickup, till reconciliation and deposit. Display Name: Allows retailers to set a user-friendly name within the currency dropdown. If no display name is set, POS will use the 3 character ISO code. Allow Decimals: Allows retailers to accept only whole dollars from alternate currencies. EX: In a Canadian store, the retailer can set U.S. Dollars as an alternate currency. If Allow decimals is set to false, then the customer cannot pay using U.S. coins. POS Configuration > Back Office > Store Currency These are the allowed currencies for Back Office operations. OmniUtil > Conversion Rates This entity contains the current conversion rates. It is structured as shown below with dummy sample data: Currency Conversion Table Sample data as of 07-Jun 2021 From Currency To Currency Exchange rate USD EUR 0.82 EUR USD 1.22 USD MXN 19.830 MXN USD 0.0504 USD CAD 1.210 CAD USD 0.830 It is customer responsibility to create and maintain required rates via API. There is currently no UI to the ConversionRate entity. For most orgs, there is typically one LOCAL currency so only half the records above will be required. For example if the local currency is USD then one would never need a record for which USD is the FROM currency. Grants ui::posservice::allowforeigncurrencycashtendering This grant allows the user to see the alternate currency dropdown on the UI,but manager override will be prompted. overrideaccess::posservice::allowforeigncurrencycashtendering This grant allows manager override to occur. Note: If the conversion rate API fails to get data, the UI will not display the alternate currency dropdown. In addition to the above required configurations, there are several additional configurations which are used in POS for cash payment, each of which interact with alternate 'foreign' currency amount fields as well. Additional Configurations which Interact with Alternate 'foreign' Currency feature Currency Formatting If Currency Formatting is not enabled, amount fields are generic. For example, whether local currency is CAD, USD, or EURO, 150 will be shown as 150.00 with no currency symbol (or 150,00 if the locale is European), whether the general (local) amount fields or alternate currency input amount fields. If this is enabled via POSStoreConfig, the local amount fields are generally formatted as per the correct local currency symbol and locale. In this event, For a system whose local default currency is EUR and whose locale is France, 150 will be generally shown as 150,00 €. For a system whose local default currency is USD and whose locale is United States, 150 will be generally shown as $150.00. However any amount fields which accept ALTERNATE currency will show a currency symbol compatible with the ALTERNATE currency. Ex. 1 - 150 represented in a French system with local currency EUR and MXN (Mexican Pesos) available as alternate currency: General (local) amount fields 150,00 €. Alternate amount fields, where user selects MXN 150,00 $MX. Note - $MX or MX$ are both conventions to represent Mexican Pesos. Ex. 2 - 150 represented in a US system with local currency USD and EUR (Euros) available as alternate currency: General (local) amount fields $150.00. Alternate amount fields, where user selects EUR € 150.00. Note - € is the symbol for Euro.. Default to Balance Due The UI will honor this configuration, and whenever the alternate currency is changed, the amount shown in the Enter Amount field is automatically shown at the converted rate. Overtender If set to true, UI will allow overtendering of all currencies. If set to false, UI will not allow the user to overtender with any currency. Default to balance due is not recommended if Allow Decimal configuration is set to false. Overtender configurations: Based on conversion rates, this may leave a balance due if customer chooses to pay with an alternate curency. It is our current recommendation that this configuration be set to allow for overtendering if allowing alternate currency collection. Electronic Journal No additional configurations are required. When an alternate currency is collected, the additional fields from Payment Method Object \"Alternate Currency Code\", \"Alternate Currency Amount\" and \"Conversion Rate\" For 'Pos::AddTender::Cash' EJ mod type will be displayed. Receipts The following receipt templates have been modified to display alternate currency data: SaleReturn_Payment_CashTenders.jrxml SaleReturn_Payment_GC_CashTenders.jrxml Note: Alternate currencies can also be used on a local edge server. As part of Edge export schedule, the conversionRate shadow table from OmniUtil will be synced then export from configdirector. Payment Terminal Selection and Sharing for Mobile Devices Retailers can configure mobile registers to establish a session with a payment terminal at the time of payment, instead of at the beginning of an order. To enable this functionality in mobile registers for a location, set posStoreConfig>storeCommonConfig>delayPTSessionTillPayment = True. This allows for multiple registers to be connected to a single payment terminal, and also allows users to easily switch to a different terminal as needed. When configured, the connected payment terminal will be displayed in the screen header of the Cart and Order Summary. The session for the device will not begin until the following: User selects a tender on Order Summary which requires the terminal to collect data or to process (credit, debit, gift card, etc.) User selects to issue or reload a gift card from the Cart User selects a \"from\" exchange tender which requires a payment terminal If a session is started in the Cart, due to a gift card activate or reload, where \"Activate Gift Card in Cart\" is true, the session will not end until the transaction is complete. The same will hold true for Exchange tenders where the \"from\" tender requires the payment terminal. The session release will occur after the receipt has been printed or emailed, and the terminal will then become available for the next transaction. Grant: ui::devicemgmt::pairpaymentterminalinheader - This is a UI action to allow user to change the payment terminl within the tappable header when config is turned on. If user does not have this grant, the selected PT will be visible but not editable from outside POS Settings. Note: If a user changes the selected payment terminal in the Cart or Order Summary, it will overwrite the selected device in POS Settings. Exchange Tender configuration Exchange tender in Active Store solution offers the retailers to accept a tender and refund the customer with another tender. Both the tenders i.e. the tender exchanged and the list of available refunded tenders are configurable from payment capture details screen from config UI. Payment Type that needs to be eligible for exchange: below are the configurations required to accept a payment type for exchange tender functionality PermitFromExchangeTender - Set it to TRUE, to accept a payment type as eligible tender for exchange. MaxFromExchange - Retailer can set up maximum amount allowed for an exchange for the selected payment type. FromExchngTendrDispSeq - This is to configure the display sequence of the available tender for exchange. It will be used on the Store application. PermitToExchangeTender - Check this flag if this paymentType can be used as an eligible payback/refund tender for any exchange tender. IsBalEqReqFOrExchgTndr - Check this flag if balance enquiry is required before charging the tender to be exchanged. For example: this flag should be true for gift cards, since we do a balance enquiry first to get the available balance amount. This is necessary and tied back to the payment form method, since usually a gift card is processed through the terminal to the get balance, if not processed through terminal, user extension will be used to get balance from thirrd-party applications. If this flag is False, then balance of the gift card needs to be input by the user. Configure eligible payback/refund for exchange tender transaction The list of eligible payback/refund tenders for exchange tender transaction can be configured from the config UI. This list is specific to a tender that is getting exchanged, so this list needs to be configured for all the tenders for which exchange is permitted. The maximum amount of refund allowed can be configured here. Code Snippet of list of eligible exchange refund tenders for check: \"ExchangeTenderRefndType\" :[ { \"ParentPayCaptureConfigType\": \"Check\", \"PermitExchgTndrRefndType\": { \"PaymentTypeId\": \"Gift Card\" }, \"DisplaySequence\": \"1\", \"InteractionMode\": { \"InteractionModeId\": \"CustomerPresent\" }, \"MaxToExchangeTender\": 5000 }, { \"ParentPayCaptureConfigType\": \"Check\", \"PermitExchgTndrRefndType\": { \"PaymentTypeId\": \"Cash\" }, \"DisplaySequence\": \"2\", \"InteractionMode\": { \"InteractionModeId\": \"CustomerPresent\" }, \"MaxToExchangeTender\": 9999999.99 }, { \"ParentPayCaptureConfigType\": \"Check\", \"PermitExchgTndrRefndType\": { \"PaymentTypeId\": \"Credit Card\" }, \"DisplaySequence\": \"3\", \"InteractionMode\": { \"InteractionModeId\": \"CustomerPresent\" }, \"MaxToExchangeTender\": 9999999.99 } ] POS Refund configuration Payment Capture Config Minimum Refund Amount: Specify the minimum amount that can be refunded using this tender type. Maximum Refund Amount: Specify the maximum amount that can be refunded using this tender type. While doing so, ensure that there is one another refund tender type which can be used to refund. Refund Pay Type - Available Refund Payment types for Validated Returns List of allowed refund tender types: This is the list of allowed refund tender types for a given tender type, used to make purchases. One with sequence 1 and interaction mode=Customer Present is used in case of automatic refunds. In case of override tender, all refund pay types with interaction mode=Customer Present are available. If there are multiple tender types used to make purchases, override refund types are the ones common across all these. Refund Pay Type - Available Refund Payment Types for Standalone Returns Standalone Returns are return lines with items that cannot be matched to an original order - i.e., \"returns without receipt\". Normally the refund payment types which are recommended either automatically or by override are based on the payment type of the original order. If there is no 'original order' as for standalone, the recommended/available payment types are configured differently as described. Payment Parameter Standalone Return Payment Type value - use to configure single Default refund payment type for Standalone Returns Standalone Return Payment Type: Used to specify a single default refund payment type for standalone returns. This parameter is used if no payment types are configured via payment capture configurations as available to be allowed in standalone returns. In this case POS allows one default refund tender type for standalone returns. In case of return order with validated and standalone returns, this gets added to the list of tender types applicable to validated return tender types. Threshold defined for refund tender is not applicable to standalone return payment type. Pay Capture Config Payment type attribute \"Allow Standalone Return\" - use with Business Flag to configure multiple available refund payment typesfor Standalone Returns Allow Standalone Return: This attribute is on \"payment capture config\" and is used to configure alternate refund type during a override tender scenario. This attribute works with a business flag on pos general config > common config > \"Show Alternate Refunds For Return\" which is false by default. If the business flag remains false, this AllowStandalone returns attribute for each payment type has no function. If Show Alternate Refunds For Return = false, Allow Standalone returns flag for each payment type has no function. A single payment type, taken from that configured in paymentParameters>Standalone Return Payment Type will be used in a standalone refund tender scenario. If Show Alternate Refunds For Return = true, Allow Standalone returns flag will be used to show alternate override tenders in a standalone tender scenario. For an unvalidated return, when the business flag is true, any payment types for which Allow Standalone Return is True will be available as alternate 'override' refund types. For example, Gift card and Store credit are initially seeded as \"Allow Standalone Return\" = true from base seed data profile. Therefore, if this profile is copied and used for the retailer, Gift card and store credit will be shown as alternate tenders in refund override tender. 'Mixed' Returns - Combination of Validated and Standalone This logic can be more complicated in a cart containing multiple returns. Multiple Return example: One return item can be associated to an original order paid by Credit card (validated return) and another can be standalone, not matched to an original order. In this case, at the Order Summary, if the flags are set to allow multiple alternate standalone refund tenders, the recommendation will be the intersection of refund tenders for each of the returns. Assume Credit Card is configured to allow refund by Credit, Debit, Gift Card, and Cash. Assume that the alternative standalone refund types are Gift Card, Cash, and Store Credit. In the above example, Override refund choices will be the intersection of these two sets of rules: Gift Card and Cash. In other words, for such a mixed cart return scenario the rules for Standalone override refund types work along with Refund Pay Type of the original payment method. Only the common payment types will be displayed as alternate tenders in refund override tender. POS Post Void Configuration Post void is controlled and configured at each payment type, enable \"permit cancel\" under payment capture configuration to support post void for that payment type. NOTE In general, cancelling a payment transaction after the fact is not guaranteed of success in all cases, particularly for electronic payment methods, and depends on the gateway and the particular payment implementation for each retailer. If payment types are configured to permit \"cancel\", further work may be required to make this work for that payment type/gateway/provider combination. If post void refund is required to be different from original then specify the payment Id under \"Cancel Refund Payment Type\". Along with this configure the cancel behavior under payment type configuration. This indicates the behavior when a payment is canceled during a Post Void. When an order is post voided, the isCancelled flag set to true on corresponding order header, order line and payment header For example, some payment types such as cash should have an open void transaction created, so POS can issue cash to the customer and close the transaction. Other payment types like credit cards can have void transactions created and executed in the gateway immediately, since no follow-up action is required by POS. Possible values for cancel behavior include: New payment method: When a payment method of this payment type is canceled, a new payment method gets created to issue a refund for any closed settlement amounts. For example, follow-on voids against Traveler’s Check is not supported as checks cannot be given back to the customer. So instead of creating a cancel transaction, this flag tells the payment component to create a new payment method. The new payment type is created based on the payment capture configuration called 'Cancel Refund Payment Type.' Create and process cancel against original payment method: When a payment method of this payment type is canceled, a follow-on void gets created for each closed settlement and refund transaction. The cancel transaction is immediately sent to the gateway to be processed, and the payment header response includes the details of the outcome. For example, when a credit card with a closed settlement is canceled, a follow-on cancel is created against the settlement and executed in the gateway. Create open cancel against original payment method: When a payment method of this payment type is canceled, a follow-on void gets created for each closed settlement and refund transaction. The cancel transaction is not sent to a gateway, but instead is left open, so that POS can perform actions and close the transaction. For example, when a cash payment with a closed settlement is canceled, an open follow-on cancel is created against the settlement, and POS is expected to close the cancel transaction after issuing cash to the customer. Post void of refund transaction To enable refund of any payment type, \"permit post void on refunds\" should be turned on for that payment type under payment capture configuration, and it is also mandatory to have the \"permit cancel\" flag enabled for this to work. If this is not enabled, then post void validation will fail and the user will not be allowed to post void the transaction. Payment Franking If “Frank Required for Redeem” is marked as ‘true’ within Payment Capture Config Detail for a payment method, such as Checks, the retailer can configure an information message to display on the UI and configure what data is franked, or endorsed, by the printer on the back of the tender. Note: Tender franking requires a supported Register/Printer combination and a receipt printer model that supports franking, such as the Epson TM-6000IV. See the MAO Supported Technology page. Information Message During Franking Configuration Within Payment Capture Config Detail, there is a configuration called “InfoMessageDuringFranking” that allows for a retailer to configure a message that is displayed on application when the UI is waiting on the hardware to frank the check. This is useful for the retailer to communicate any important instructions to the user. If there is no message configured, then a default message will display on the UI.: “Insert the slip into the MICR” Snippet of sample configuration for a franking message { \"PaymentType\": \"Check\", \"PayCaptureConfigDetail\": { \"InfoMessageDuringFranking\": \"Please insert check upside-down\", \"FrankingReqForRedeem\": true } } POST: {{url}}/payment/api/payment/payCaptureConfig/save Payment Franking Template Configuration: Note: This configuration of the FrankTemplateContent must be done via API using a JSON message. There is not a UI for to add the content details to a Frank Template. There are two kinds of data that can be printed: ‘dynamic’ data so that transactional information is printed, and ‘static’ data so that non-transactional data is printed. If “Frank Required for Redeem” is marked as ‘true’, dynamic data will be printed. Should additional non-transactional data be required, static data can be configured. Dynamic data will be printed to provide the retailer with information that would change between transactions, such as OrderId and customer information. There are 4 fields that are enabled: Field Label Field Mapping Description Order Id Order.OrderId This is the unique transaction/order id Tel. Num. Order.CustomerPhone This is the customer’s phone number from the State Code Order.CustomerIdentityDoc.State This is the state that issued the customer’s license captured within the POS Customer Id Num. Order.CustomerIdentityDoc.IdDocNumber This is the customer’s driver’s license number captured within the POS Static data allows for a retailer to configure fixed information that remains the same between transactions, for example any text related to the Retailer’s bank account or specific notes needed on the check. Static data goes into the “StaticFieldContent” field within the “FrankTemplateContent” entity. Static data is printed before the dynamic data, and if multiple lines of static information need to be printed, use the “FieldSequence” field within the “FrankTemplateContent” entity to list in what order the information needs to be printed. Note: There is a character limit of up to 29 characters that will be printed. If the value is longer than 29 characters, then any remaining characters may not be printed on the back of the check. Payment Frank Template Example The retailer would like to display 3 additional attributes of “static” data along with the 4 attributes of “dynamic” data. To do this, we only need to configure the “static” data: PaymentType PaymentAction FieldSequence StaticFieldContent Check Redeem 1 Deposit to the Acct of Client Check Redeem 2 Account# 123456789 Check Redeem 3 ***************************** Snippet of sample configuration of data to be franked: { \"PaymentType\": \"Check\", \"PaymentFrankTemplate\": [ { \"TemplateId\": \"Franking0001\", \"LocationId\": \"0001\", \"Language\": \"en\", \"PaymentFrankingAction\": { \"PaymentFrankingActionId\": \"Redeem\" }, \"FrankTemplateContent\": [ , { \"FieldSequence\": 1, \"StaticFieldContent\": \"Deposit to the Acct of Client\" }, { \"FieldSequence\": 2, \"StaticFieldContent\": \"Account# 123456789\" }, { \"FieldSequence\": 3, \"StaticFieldContent\": ***************************** } ] } ] } UI's and Entities The configuration UI's mentioned in this document are listed in the following table, along with information to navigate to the API documentation. UI Name Component Group Seed Data Present? Seed Data Profile Payment Capture Config Payment PayCaptureConfig services Yes Base User Input Form Payment UserInputForm services Yes Base User Input Form Field Payment UserInputForm services Yes Base User Input Field Payment UserInputField services Yes System Augmentable User input Field Type Payment UserInputFieldtype services Yes Base Payment Parameters Payment PaymentParameters services Yes Base Payment Rule Payment PaymentRule services Yes Base Payment Simulator Rule Payment Gateway PaymentSimulatorRule services Yes Base Payment Type Payment PaymentType services Yes Base Payment Type Config Payment PaymentTypeConfig services Yes Base Payment Franking Options Payment PaymentFrankingActionServices Yes System Augmentable Omniutil CurrencyConversionRate Services No Profile Purpose The profile purposes of all the configuration entities are listed below. The default profile would be retail for these profile purposes. pay::paymentCaptureConfig pay::paymentConfig pay::paymentCoreConfig"
}