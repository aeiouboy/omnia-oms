{
  "id": "3459721",
  "permalink": "peripheral-command-framework",
  "title": "Peripheral Command Framework",
  "type": "topic",
  "level": 6,
  "path": "Manhattan Active® Omni/Store/Process & Configuration Guides/Point of Sale/POS Guides/POS Payment/Peripheral Command Framework",
  "raw_item": {
    "id": "3459721",
    "text": "Peripheral Command Framework",
    "title": "Peripheral Command Framework",
    "permalink": "peripheral-command-framework",
    "leaf": false,
    "droppable": true,
    "expanded": true,
    "closed": true,
    "visible": true,
    "editable": true,
    "type": "topic",
    "topicType": "0",
    "status": "1",
    "iconCls": "icon-topic",
    "cls": "",
    "folder_id": "448348",
    "parent": "f;448348",
    "created_date": "1722561319",
    "modified_date": "1750787734",
    "instructor_id": null,
    "loaded": true,
    "haschildren": false,
    "callout": "0",
    "order": "4"
  },
  "success": true,
  "content": "\r\n\r\n\r\n<div class=\"hiq-page-wrap\">\r\n<div class=\"hiq-t-wrap\">\r\n\t\t\r\n  \t  <div class=\"hiq-t \">\r\n\t\t\t\t<ul class=\"breadcrumbs\"><li><a class=\"breadcrumb-links\" hqid=\"1788908\"  href=\"/home\">Home</a></li> <li><span>&rsaquo;&rsaquo;</span><a hqid=\"3500940\" href=\"/omni\" class=\"breadcrumb-links\">Manhattan Active® Omni</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"3426481\" href=\"/store-3\" class=\"breadcrumb-links\">Store</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158412\" href=\"/process-configuration-guides-3\" class=\"breadcrumb-links\">Process & Configuration Guides</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158737\" href=\"/point-of-sale\" class=\"breadcrumb-links\">Point of Sale</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"3433322\" href=\"/pos-iris-guides\" class=\"breadcrumb-links\">POS Guides</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"3535922\" href=\"/pos-payment-2\" class=\"breadcrumb-links\">POS Payment</a></li><li> <span>››</span>Peripheral Command Framework</li></ul>  \t\r\n\t\t<h2>Peripheral Command Framework</h2>\r\n\r\n<p></p>\r\n\r\n<a href=\"/pos-payment-plugin-2\" hqid=\"3532519\">Previous</a>&nbsp;I&nbsp;\r\n<div class=\"info\"><ul><li><a href=\"/peripheral-command-framework$overview\">Overview</a></li><li><a href=\"/peripheral-command-framework$process-flow\">Process Flow</a></li><li><a href=\"/peripheral-command-framework$configuration-flow\">Configuration flow</a></li><li><a href=\"/peripheral-command-framework$cart-event-and-pcf-nbsp-design\">Cart Event and PCF&nbsp;design</a></li><li><a href=\"/peripheral-command-framework$cart-event\">Cart Event</a><ul><li><a href=\"/peripheral-command-framework$cart-event-config\">Cart Event Config</a></li><li><a href=\"/peripheral-command-framework$cart-event-condition\">Cart Event Condition</a></li><li><a href=\"/peripheral-command-framework$command-group\">Command Group</a></li><li><a href=\"/peripheral-command-framework$command\">Command</a></li><li><a href=\"/peripheral-command-framework$command-sequence\">Command Sequence</a></li><li><a href=\"/peripheral-command-framework$peripheral-template-map\">Peripheral Template Map</a></li><li><a href=\"/peripheral-command-framework$peripheral-response-mappings\">Peripheral Response Mappings</a></li><li><a href=\"/peripheral-command-framework$other-features\">Other Features</a><ul><li><a href=\"/peripheral-command-framework$pause-and-resume-support\">Pause and Resume support</a></li><li><a href=\"/peripheral-command-framework$parallel-command-execution\">Parallel Command execution</a></li></ul></li><li><a href=\"/peripheral-command-framework$base-implementation-of-pcf\">Base Implementation of PCF</a></li></ul></li></ul></div>\r\n\r\n<h3><a name=\"overview\" id=\"overview\"></a>Overview</h3>\r\n\r\n<p data-renderer-start-pos=\"14\"><strong data-renderer-mark=\"true\">What is a Peripheral?</strong></p>\r\n\r\n<p data-renderer-start-pos=\"37\">Peripherals are external hardware components that extend the functionality of the Point of Sale application. These devices are connected to POS to provide additional features and improve overall business efficiency.</p>\r\n\r\n<p data-renderer-start-pos=\"254\"><strong data-renderer-mark=\"true\">Examples of common POS peripherals:</strong></p>\r\n\r\n<ol data-indent-level=\"1\" start=\"1\">\r\n\t<li>\r\n\t<p data-renderer-start-pos=\"293\">Barcode scanners</p>\r\n\t</li>\r\n\t<li>\r\n\t<p data-renderer-start-pos=\"313\">Printers</p>\r\n\t</li>\r\n\t<li>\r\n\t<p data-renderer-start-pos=\"325\">Cash drawers</p>\r\n\t</li>\r\n\t<li>\r\n\t<p data-renderer-start-pos=\"341\">Card readers</p>\r\n\t</li>\r\n\t<li>\r\n\t<p data-renderer-start-pos=\"357\">Secondary Displays</p>\r\n\t</li>\r\n\t<li>\r\n\t<p data-renderer-start-pos=\"379\">Payment Terminals</p>\r\n\t</li>\r\n\t<li>\r\n\t<p data-renderer-start-pos=\"400\">Weighing Scales</p>\r\n\t</li>\r\n</ol>\r\n\r\n<p data-renderer-start-pos=\"419\"><strong data-renderer-mark=\"true\">How does POS talk to the peripherals?</strong></p>\r\n\r\n<p data-renderer-start-pos=\"458\">The communication between the POS application layer and the peripheral happens via a plugin that is written to interact with the peripherals. For example, there is a specific plugin that is written for Payware for the POS application to interact with the payware terminal to accomplish functions like displaying line details on the terminals, requesting a capture or refund, etc.</p>\r\n\r\n<p data-renderer-start-pos=\"825\">For each of these operations there are individual methods that are written in the plugin and each of the methods has the required commands that need to be sent to the payware payment terminal, thus making the plugin an integral part of the POS ecosystem.</p>\r\n\r\n<p data-renderer-start-pos=\"1083\"><strong data-renderer-mark=\"true\">Challenges with existing Plugins:</strong></p>\r\n\r\n<p data-renderer-start-pos=\"1118\">The MAO POS application delivers plugins out of the box for functions that are supported out of the box. However, during implementation, if there is a requirement to support some additional functions which the peripheral is capable of but the base application doesn't support, then the implementation team has to create a copy of the base plugin and then add new methods as needed and then start owning that plugin.</p>\r\n\r\n<p data-renderer-start-pos=\"1533\">The process of creating a new custom plugin has its own disadvantages.</p>\r\n\r\n<ol data-indent-level=\"1\" start=\"1\">\r\n\t<li>\r\n\t<p data-renderer-start-pos=\"1607\">Implementation teams end up writing a lot of business logic into the plugins, which makes the plugins bulky and also do more work than what a plugin should typically do.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p data-renderer-start-pos=\"1780\">The implementation team has to constantly keep up with any base changes made to the base plugin and re-applying those changes to the custom plugin.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p data-renderer-start-pos=\"1926\">It takes time&nbsp;both to build the custom plugin and maintain the custom plugin.</p>\r\n\t</li>\r\n</ol>\r\n\r\n<p data-renderer-start-pos=\"1993\"><strong data-renderer-mark=\"true\">What is Peripheral Command Framework?</strong></p>\r\n\r\n<p data-renderer-start-pos=\"2032\">As the variety of peripherals and their respective use cases continue to grow, and the challenges with custom plugins and implementation times, there is an increasing need for a more extensible interaction framework. The Peripheral Command Framework (PCF) is a structured process governing and orchestrating peripheral interactions within the <strong data-renderer-mark=\"true\">Manhattan Active Omni®</strong> POS. This framework not only supports the seamless integration of various peripherals but also allows customers to implement and manage their own peripherals, enabling tailored interactions as required.</p>\r\n\r\n<p data-renderer-start-pos=\"2599\">The Peripheral Command Framework offers a new approach for implementation teams to interact with peripheral plugins. Below are some of the key objectives of the framework.</p>\r\n\r\n<ol data-indent-level=\"1\" start=\"1\">\r\n\t<li>\r\n\t<p data-renderer-start-pos=\"2777\">Clear separation between business flows and native code(non-functional aspects of the app)</p>\r\n\t</li>\r\n\t<li>\r\n\t<p data-renderer-start-pos=\"2872\">Adding flexibility to the business flows that interact with the native plugins: The thought process is to drive the business flows through configuration. PCF would run through the configs and take appropriate actions based on the config. This makes the interactions completely flexible. The implementation teams will have to create configs based on business requirements. Please refer to the entity structure/example sections for more details on the configuration and its usage.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p data-renderer-start-pos=\"3353\">Reducing the number of user exits. By making the flows flexible and configurable, the number of user exits can be reduced.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p data-renderer-start-pos=\"3478\">Reducing the need for new builds/artifacts.</p>\r\n\t</li>\r\n</ol>\r\n\r\n<p>The framework will provide the hooks or events required from the application to allow the custom implementation of a peripheral.&nbsp;</p>\r\n\r\n<p>Currently, the framework is capable of supporting <strong>custom plugins</strong>&nbsp;(not base) for <strong>payment</strong> on the iOS and Android platforms only.&nbsp; &nbsp;Windows implementations are not supported, and the <strong>base&nbsp;Adyen and Payware connect interactions</strong> continue to follow their current legacy implementation.&nbsp;</p>\r\n\r\n<p>If a customer requires using a payment provider outside of Adyen / Payware, then a custom plugin can be created leveraging the Peripheral Interaction Framework (PCF).&nbsp;</p>\r\n\r\n<p>Currently the PCF supports only communication to the Customer Facing Display (CFD) and to Payment Terminals via custom plugin.&nbsp;</p>\r\n\r\n<h3><a name=\"process-flow\" id=\"process-flow\"></a>Process Flow<img height=\"531\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/qu/1759/image.png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL3F1LzE3NTkvaW1hZ2UucG5nIiwiQ29uZGl0aW9uIjp7IkRhdGVMZXNzVGhhbiI6eyJBV1M6RXBvY2hUaW1lIjoxNzU0NzUyMDI5fX19XX0_&Signature=JB5QtDWpPDKmNMWuGSj6ytbHYwWoISHaGb0RMIJob8hT1pDqdyzGIvgVC7eojPqQFJQmglw4ZByisTrY~zalMPrPNfnUEbLmAHjpZuOHBE1GFmQ8w7cwl6SZTOGvk7Ycj88EwTxLQxYtTZLSBU7SjXF0XJSZv6f4bVlrDBiKtFBWupRNSNfRIMS1rlcM5elU2APMx4dnLZbplKzRZ-5njVBrysQg6NznI4NgexzioVHbX7JNrJvy0dzGzAPbMAeRaKkeGeyBhtABF-fCik1ukf8~FKU8zBkJi0sztNmznAmwMz3oGE2RxqFezyrckSdy2rx59X0RVNYGmljzllUdqg__&Key-Pair-Id=K2TK3EG287XSFC\" style=\"color: rgb(77, 77, 77); font-size: 12px;\" width=\"1024\"></h3>\r\n\r\n<ul class=\"ak-ul\" data-indent-level=\"1\">\r\n\t<li>\r\n\t<p data-renderer-start-pos=\"22\">A new seed data API is introduced to load all the event config related to peripheral commands to seed data.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p data-renderer-start-pos=\"134\">A new peripheral command framework is introduced to orchestrate the whole interaction between UI and peripheral devices.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p data-renderer-start-pos=\"262\">When an event is raised in the UI, the UI performs the following evaluations and actions</p>\r\n\r\n\t<ol data-indent-level=\"2\" start=\"1\">\r\n\t\t<li>\r\n\t\t<p data-renderer-start-pos=\"354\">Check in the seed data if the event raised has a corresponding event config.</p>\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t<p data-renderer-start-pos=\"434\">If an event config exists, then evaluate the condition for the event config.</p>\r\n\r\n\t\t<ol data-indent-level=\"3\" start=\"1\">\r\n\t\t\t<li>\r\n\t\t\t<p data-renderer-start-pos=\"515\">All the event configs that match the conditions are picked. The event config with the lowest rank is then picked for execution.</p>\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t<p data-renderer-start-pos=\"646\">The periphalGroupId and the commandSequence is fetched for execution and the peripherals framework is invoked.</p>\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t<p data-renderer-start-pos=\"767\">The peripheral orchestrator performs the following actions</p>\r\n\r\n\t\t\t<ol data-indent-level=\"4\" start=\"1\">\r\n\t\t\t\t<li>\r\n\t\t\t\t<p data-renderer-start-pos=\"829\">The first command to be executed is identified as the command with IsInitial set to true.</p>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t<p data-renderer-start-pos=\"922\">Once the first command is identified and the peripheral type associated is identified the orchestrator then passes the command along with the request and response template</p>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t<p data-renderer-start-pos=\"1097\">The plugin specific request is created and executed in the plugin and the response is transformed back based on the template.</p>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t<p data-renderer-start-pos=\"1226\">The orchestrator receives the response and based on the response, identifies the next command to be executed from the sequence.</p>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t<p data-renderer-start-pos=\"1358\">This process is continued until all the commands in the sequence are executed.</p>\r\n\t\t\t\t</li>\r\n\t\t\t</ol>\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t<p data-renderer-start-pos=\"1442\">If the event condition in the config doesn't match for the current order, then the UI proceeds further without invoking the orchestrator.</p>\r\n\t\t\t</li>\r\n\t\t</ol>\r\n\t\t</li>\r\n\t</ol>\r\n\t</li>\r\n</ul>\r\n\r\n<p data-renderer-start-pos=\"801\">&nbsp;</p>\r\n\r\n<h3><a name=\"configuration-flow\" id=\"configuration-flow\"></a>Configuration flow</h3>\r\n\r\n<p>The \"Cart Event\" and \"cart event config\"&nbsp;MUP UI screens will help the user to create and configure&nbsp;events for a defined condition. These conditions will be used to initiate the peripheral command framework. All the other configurations are currently only supported via API.</p>\r\n\r\n<h3><a name=\"cart-event-and-pcf-nbsp-design\" id=\"cart-event-and-pcf-nbsp-design\"></a>Cart Event and PCF&nbsp;design</h3>\r\n\r\n<p>There are many entities involved in this workflow, whilst&nbsp;the basic concept is that you define a trigger point which is an event and its conditions, and associate this event with peripheral interaction commands via command group. The sections below are entities involved in the cart event/ PCF design.</p>\r\n\r\n<h3><a name=\"cart-event\" id=\"cart-event\"></a>Cart Event</h3>\r\n\r\n<p>A cart event is a signal that something has happened, which could be initiated by user actions or system action. &nbsp;Events are raised by the UI explicitly upon user action or system action. For example, a cart event can be raised when a user clicks on Checkout, scans an item etc.&nbsp;</p>\r\n\r\n<p>The cart event entity is a system entity and new events can only be added by R&D. A list of all available events will be seeded in the cartEvent entity. Each event will have a unit event Id and a description of when the event is raised.&nbsp;</p>\r\n\r\n<p><strong>Sample events are as follows.&nbsp;</strong></p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\"><strong>CartEventId</strong></th>\r\n\t\t\t<th scope=\"col\">Description</th>\r\n\t\t\t<th scope=\"col\"><strong data-renderer-mark=\"true\">Objects passed with the event</strong></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>capturePayment</td>\r\n\t\t\t<td>This event is triggered when users click on the checkout button on the pos cart screen.</td>\r\n\t\t\t<td>export interface CapturePaymentCommandRequest extends PeripheralCommandRequest {<br>\r\n\t\t\t&nbsp; data: {<br>\r\n\t\t\t&nbsp; &nbsp; Order?: Order,<br>\r\n\t\t\t&nbsp; &nbsp; PaymentSummary?: PaymentSummary,<br>\r\n\t\t\t&nbsp; &nbsp; PaymentData?: PaymentResponse,// rename this to capturePaymentResponse<br>\r\n\t\t\t&nbsp; &nbsp; PaymentMethod?:PaymentMethod[],<br>\r\n\t\t\t&nbsp; &nbsp; CommandSequence?:CommandSequence,<br>\r\n\t\t\t&nbsp; &nbsp; UniqueId?:string,<br>\r\n\t\t\t&nbsp; &nbsp; Gateway?: GatewayDetail,<br>\r\n\t\t\t&nbsp; &nbsp; IsAuth?: boolean,<br>\r\n\t\t\t&nbsp; &nbsp; Response?:PaymentPluginResponse<br>\r\n\t\t\t&nbsp; }<br>\r\n\t\t\t}</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>refundPayment</td>\r\n\t\t\t<td>This event is triggered when a user initiates adding a line to the cart, but before making the API call to the backend.</td>\r\n\t\t\t<td>export interface RefundPaymentCommandRequest extends PeripheralCommandRequest {<br>\r\n\t\t\t&nbsp; data: {<br>\r\n\t\t\t&nbsp; &nbsp; Order?: Order,<br>\r\n\t\t\t&nbsp; &nbsp; PaymentSummary?: PaymentSummary,<br>\r\n\t\t\t&nbsp; &nbsp; PaymentData?: RefundResponse,<br>\r\n\t\t\t&nbsp; &nbsp; PaymentMethod?:PaymentMethod[],<br>\r\n\t\t\t&nbsp; &nbsp; CommandSequence?:CommandSequence,<br>\r\n\t\t\t&nbsp; &nbsp; UniqueId?:string,<br>\r\n\t\t\t&nbsp; &nbsp; Gateway?: GatewayDetail,<br>\r\n\t\t\t&nbsp; &nbsp; Response?:PaymentPluginResponse<br>\r\n\t\t\t&nbsp; }<br>\r\n\t\t\t}</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p data-renderer-start-pos=\"1427\">PostLineAdd</p>\r\n\r\n\t\t\t<p data-renderer-start-pos=\"1440\">PriceOverriden</p>\r\n\r\n\t\t\t<p data-renderer-start-pos=\"1456\">ItemQuantityUpdate</p>\r\n\r\n\t\t\t<p data-renderer-start-pos=\"1476\">DiscountApplied</p>\r\n\r\n\t\t\t<p data-renderer-start-pos=\"1493\">ItemTaxOverride</p>\r\n\r\n\t\t\t<p data-renderer-start-pos=\"1510\">ItemVASAdded</p>\r\n\r\n\t\t\t<p data-renderer-start-pos=\"1524\">PostTaxExempt</p>\r\n\t\t\t</td>\r\n\t\t\t<td>This event is triggered when a user adds a line to the cart.</td>\r\n\t\t\t<td>export interface CaptureLineItemRequest extends PeripheralCommandRequest {<br>\r\n\t\t\t&nbsp; data: {<br>\r\n\t\t\t&nbsp; &nbsp; UpdatedOrderLine?: [],<br>\r\n\t\t\t&nbsp; &nbsp; Order?: Order,cod<br>\r\n\t\t\t&nbsp; &nbsp; OrderLineAttributeChanges?:[],<br>\r\n\t\t\t&nbsp; &nbsp; UpdatedKeys?:[],<br>\r\n\t\t\t&nbsp; &nbsp; CommandSequence?:any,<br>\r\n\t\t\t&nbsp; &nbsp; Response?:PaymentPluginResponse<br>\r\n\t\t\t&nbsp; }<br>\r\n\t\t\t}</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>capture-raise-event</td>\r\n\t\t\t<td>This event is triggered when the user receives a CapturePayment response indicating that PTT is set to true and implementation is local. It will be used for orchestrating interactions with the payment terminal.</td>\r\n\t\t\t<td>export interface CaptureRaiseEvent extends PeripheralCommandRequest {<br>\r\n\t\t\t&nbsp; data: {<br>\r\n\t\t\t&nbsp; &nbsp; order?: Order,<br>\r\n\t\t\t&nbsp; &nbsp; request?: [],<br>\r\n\t\t\t&nbsp; &nbsp; response?:[],<br>\r\n\t\t\t&nbsp; &nbsp; eventName?:string<br>\r\n\t\t\t&nbsp; }<br>\r\n\t\t\t}</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>voidPayment</td>\r\n\t\t\t<td>&nbsp;</td>\r\n\t\t\t<td>export interface VoidPaymentCommandRequest extends PeripheralCommandRequest {<br>\r\n\t\t\t&nbsp; data:{<br>\r\n\t\t\t&nbsp; &nbsp; PaymentData:RequestToTerminal,<br>\r\n\t\t\t&nbsp; &nbsp; PaymentMethod?:[],<br>\r\n\t\t\t&nbsp; &nbsp; Response?:any,<br>\r\n\t\t\t&nbsp; &nbsp; CommandSequence?:any<br>\r\n\t\t\t&nbsp; }<br>\r\n\t\t\t}</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>PostAttachAssociate</td>\r\n\t\t\t<td>&nbsp;</td>\r\n\t\t\t<td>export interface postAttachAssociate {<br>\r\n\t\t\t&nbsp; data: {<br>\r\n\t\t\t&nbsp; &nbsp; SelectedAssociates: [],<br>\r\n\t\t\t&nbsp; &nbsp; SelectedOrderLines: []<br>\r\n\t\t\t&nbsp; }<br>\r\n\t\t\t}</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>PostAttachCustomer</td>\r\n\t\t\t<td>&nbsp;</td>\r\n\t\t\t<td>export interface CustomerShippingAddress extends PeripheralCommandRequest {<br>\r\n\t\t\t&nbsp; data: {<br>\r\n\t\t\t&nbsp; &nbsp; CustomerShippingAddress?:ShippingAddress&nbsp;<br>\r\n\t\t\t&nbsp; }<br>\r\n\t\t\t}</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>PreAttachCustomer</td>\r\n\t\t\t<td>&nbsp;</td>\r\n\t\t\t<td>&nbsp;</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>PostAddAddress</td>\r\n\t\t\t<td>&nbsp;</td>\r\n\t\t\t<td>{<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; data: {<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; CustomerShippingAddress: shippingAddress<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; }<br>\r\n\t\t\t&nbsp; &nbsp; };</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>PreAddAddress</td>\r\n\t\t\t<td>&nbsp;</td>\r\n\t\t\t<td>\r\n\t\t\t<p>{</p>\r\n\r\n\t\t\t<p>&nbsp; &nbsp; &nbsp; data:</p>\r\n\r\n\t\t\t<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {PreAddAddress:{isAVSEnabled:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;shippingInformationCalculator?.isAVSEnable()</p>\r\n\r\n\t\t\t<p>}</p>\r\n\r\n\t\t\t<p>}</p>\r\n\r\n\t\t\t<p>}</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<h4><a name=\"cart-event-config\" id=\"cart-event-config\"></a><a id=\"cart-event-config\" name=\"cart-event-config\"></a>Cart Event Config</h4>\r\n\r\n<p data-renderer-start-pos=\"6434\">Cart event config is the configuration that is used to configure what form group or command group should be invoked when an event is triggered. An event can have either a form group or a command group invoked. A condition can also be configured to control when the command group or form group should be invoked.</p>\r\n\r\n<p data-renderer-start-pos=\"6747\">It is possible to have different form groups or command groups for the same event based on the condition. However, if there is more than one event config available for one event, the rank is used and the lowest rank wins.</p>\r\n\r\n<p data-renderer-start-pos=\"6970\">The event conditions can be more than one. If there are more than one, then the matchAny attribute is used to define if all conditions have to match or not. If the MatchAny is false, then the conditions are treated as “AND” else “OR”</p>\r\n\r\n<p data-renderer-start-pos=\"7203\">Action type attribute defines if the event is triggering a form or a command group.&nbsp;</p>\r\n\r\n<p><strong>Sample Configuration:</strong></p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">cartEventConfigId</th>\r\n\t\t\t<th scope=\"col\">cartEvent</th>\r\n\t\t\t<th scope=\"col\">description</th>\r\n\t\t\t<th scope=\"col\">actionType</th>\r\n\t\t\t<th scope=\"col\">matchAny</th>\r\n\t\t\t<th scope=\"col\">eventRank</th>\r\n\t\t\t<th scope=\"col\">peripheralCommandGroup</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>initialize-tap-to-pay</td>\r\n\t\t\t<td>tap-to-pay-initialize</td>\r\n\t\t\t<td>Event for initializing tap to pay</td>\r\n\t\t\t<td>PeripheralCommands</td>\r\n\t\t\t<td>true</td>\r\n\t\t\t<td>1</td>\r\n\t\t\t<td>taptopay-initialize</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<h4><a name=\"cart-event-condition\" id=\"cart-event-condition\"></a><a id=\"cart-event-condition\" name=\"cart-event-condition\"></a>Cart Event Condition</h4>\r\n\r\n<p data-renderer-start-pos=\"7557\">Cart event condition configuration is to configure the conditions to be evaluated to determine if an event should invoke a command group. More than one condition can be defined for an event config. The event config is referenced here to return the list of all the conditions.&nbsp;</p>\r\n\r\n<p data-renderer-start-pos=\"7838\">For example, the use case may be to initialize tap to pay only if the gateway is AdyenPayments</p>\r\n\r\n<p><strong>Sample Configuration:</strong></p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">parentCartEventConfig</th>\r\n\t\t\t<th scope=\"col\">conditionEntity</th>\r\n\t\t\t<th scope=\"col\">attributeName</th>\r\n\t\t\t<th scope=\"col\">attributeValue</th>\r\n\t\t\t<th scope=\"col\">operator</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>initialize-tap-to-pay</td>\r\n\t\t\t<td>data.payload</td>\r\n\t\t\t<td>GatewayId</td>\r\n\t\t\t<td>AdyenPayments</td>\r\n\t\t\t<td>=</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<h4><a name=\"command-group\" id=\"command-group\"></a>Command Group</h4>\r\n\r\n<p data-renderer-start-pos=\"8506\">The Command group is the configuration that groups one or more related commands that are used to represent a business use case and creates the association between the commands. For example, if there is a requirement to auth and settle for a particular type of transaction, then a command group is configured for this business use case, and two commands are configured one for Authorization and another for Settlement.</p>\r\n\r\n<p data-renderer-start-pos=\"8925\">The event is configured to invoke a command group, and the command group will list all the commands associated to the group.&nbsp;</p>\r\n\r\n<p data-renderer-start-pos=\"8925\"><strong>Sample Configuration:</strong></p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\"><strong data-renderer-mark=\"true\">peripheralCommandGroupId</strong></th>\r\n\t\t\t<th scope=\"col\"><strong data-renderer-mark=\"true\">description</strong></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>taptopay-initialize</p>\r\n\t\t\t</td>\r\n\t\t\t<td>Command group to initialize the tap to pay Adyen SDK</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<h4><a name=\"command\" id=\"command\"></a>Command</h4>\r\n\r\n<p data-renderer-start-pos=\"9203\">The command&nbsp;configuration was introduced to capture the configuration for a command. A command is nothing but the actual command that has to be executed in the peripheral. &nbsp;</p>\r\n\r\n<p data-renderer-start-pos=\"9383\">A command contains a command id that is used to uniquely identify a command. For example, Capture can be a command for a payment terminal, which defines that the command is configured to execute a capture on the payment terminal.</p>\r\n\r\n<p data-renderer-start-pos=\"9614\">The command also has two important attributes:</p>\r\n\r\n<ol data-indent-level=\"1\" start=\"1\">\r\n\t<li>\r\n\t<p data-renderer-start-pos=\"9664\">Request Template: The request template contains the actual request that needs to be sent to the terminal for executing the command. So, going by the example that we picked, the request template for the Capture command will contain the actual request that is required to execute the capture on the payment terminal. The Request template will have identifiers to replace with actual data. The actual data will be substituted during execution.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p data-renderer-start-pos=\"10112\">Response Template: The response template contains the actual response that the base expects for that command to successfully update all the required objects on the MAO side. So, going by the example that we picked, the response template for the Capture command will contain the actual response that is required to record the settlement transaction in MAO.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p data-renderer-start-pos=\"10112\">Service Id: A service can be invoked for a command if there is a need to massage the request or response before or after interacting with the peripheral.</p>\r\n\t</li>\r\n</ol>\r\n\r\n<p data-renderer-start-pos=\"10468\">The implementation team can add any command as needed and provide the required request and response template.</p>\r\n\r\n<p data-renderer-start-pos=\"10579\">The other important attribute in the command configuration is the isInitial flag. This flag is set to true if the command is the first command to be executed, if the expected functionality requires more than one command to be executed in sequence.</p>\r\n\r\n<p data-renderer-start-pos=\"10814\">The Command configuration will be seeded with all the configurations that are required by base. Services and customers can create their own configurations as needed.&nbsp;</p>\r\n\r\n<p data-renderer-start-pos=\"10814\"><strong>Sample Configuration:</strong></p>\r\n\r\n<table align=\"left\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width: 1321.87px;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">\r\n\t\t\t<p>PeripheralCommandTypeId</p>\r\n\t\t\t</th>\r\n\t\t\t<th scope=\"col\">\r\n\t\t\t<p>PeripheralType</p>\r\n\t\t\t</th>\r\n\t\t\t<th scope=\"col\">\r\n\t\t\t<p>PeripheralCommandId</p>\r\n\t\t\t</th>\r\n\t\t\t<th scope=\"col\">\r\n\t\t\t<p>RequestTemplate</p>\r\n\t\t\t</th>\r\n\t\t\t<th scope=\"col\" style=\"width: 510px;\">\r\n\t\t\t<p>ResponseTemplate</p>\r\n\t\t\t</th>\r\n\t\t\t<th scope=\"col\" style=\"width: 285px;\">\r\n\t\t\t<p>IsInitial</p>\r\n\t\t\t</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Settlement</p>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<p>tapToPay</p>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<p>contactless-settlement</p>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<p>\"{\\r\\n \\\"SaleToPOIRequest\\\": {\\r\\n \\\"PaymentRequest\\\": {\\r\\n \\\"SaleData\\\": {\\r\\n \\\"SaleToAcquirerData\\\": \\\"{{&gt; SaleToAcquirerData | toBase64}}\\\",\\r\\n \\\"SaleTransactionID\\\": {\\r\\n \\\"TransactionID\\\": \\\"{{data.UniqueId}}\\\",\\r\\n \\\"TimeStamp\\\": \\\"{{data.Order.CreatedTimestamp | getISOTimeStamp}}\\\"\\r\\n }\\r\\n },\\r\\n \\\"PaymentTransaction\\\": {\\r\\n \\\"AmountsReq\\\": {\\r\\n \\\"Currency\\\": \\\"{{data.Order.CurrencyCode}}\\\",\\r\\n \\\"RequestedAmount\\\": {{data.PaymentData.Amount}}\\r\\n }\\r\\n },\\r\\n \\\"PaymentData\\\": {\\r\\n \\\"PaymentType\\\": \\\"Normal\\\"\\r\\n }\\r\\n },\\r\\n \\\"MessageHeader\\\": {{&gt; AdyenMessageHeader}}\\r\\n }\\r\\n}\"</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width: 495px;\">\r\n\t\t\t<p>{\\r\\n \\\"ExternalResponseCode\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.Result}}\\\",\\r\\n \\\"Response\\\": {\\r\\n \\\"PaymentResponseStatus\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.Result}}\\\",\\r\\n \\\"PaymentResponseText\\\": \\\"\\\",\\r\\n \\\"PaymentMethod\\\": [\\r\\n {\\r\\n \\\"AccountDisplayNumber\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.PaymentResult.PaymentInstrumentData.CardData.MaskedPan}}\\\",\\r\\n \\\"AccountNumber\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.PaymentResult.PaymentInstrumentData.CardData.MaskedPan}}\\\",\\r\\n \\\"Amount\\\": \\\"{{data.PaymentData.Amount}}\\\",\\r\\n \\\"CardExpiryMonth\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.PaymentResult.PaymentInstrumentData.CardData.SensitiveCardData.ExpiryDate | sliceDate : \\\"month\\\"}}\\\",\\r\\n \\\"CardExpiryYear\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.PaymentResult.PaymentInstrumentData.CardData.SensitiveCardData.ExpiryDate | sliceDate : \\\"year\\\"}}\\\",\\r\\n {{#Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardType}}\\r\\n \\\"CardType\\\": {\\\"CardTypeId\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardType | map : \\\"CardType\\\"}}\\\" },\\r\\n {{/Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardType}}\\r\\n \\\"CurrencyCode\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.PaymentResult.AmountsResp.Currency}}\\\",\\r\\n \\\"EntryTypeId\\\": \\\"Contactless\\\",\\r\\n \\\"GatewayId\\\": \\\"{{data.Gateway.GatewayId}}\\\",\\r\\n \\\"LocationId\\\": \\\"{{data.Order.SellingLocationId}}\\\",\\r\\n {{#Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardHolderName}}\\r\\n \\\"NameOnCard\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardHolderName}}\\\",\\r\\n {{/Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardHolderName}}\\r\\n {{^Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardHolderName}}\\r\\n \\\"NameOnCard\\\": \\\"\\\",\\r\\n {{/Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardHolderName}}\\r\\n \\\"PaymentMethodAttribute\\\": [],\\r\\n \\\"PaymentTransaction\\\": [\\r\\n {\\r\\n {{#Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\r\\n \\\"ExternalResponseId\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\\",\\r\\n {{/Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\r\\n {{^Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\r\\n \\\"ExternalResponseId\\\": null,\\r\\n {{/Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\r\\n \\\"OrderId\\\": \\\"{{data.Order.OrderId}}\\\",\\r\\n \\\"PaymentResponseStatus\\\": {\\r\\n \\\"PaymentResponseStatusId\\\": \\\"{{#Response.SaleToPOIResponse}}{{Response.SaleToPOIResponse.PaymentResponse.Response.Result}}{{/Response.SaleToPOIResponse}}{{^Response.SaleToPOIResponse}}Failure{{/Response.SaleToPOIResponse}}\\\"\\r\\n },\\r\\n \\\"PaymentResponseText\\\": \\\"\\\",\\r\\n {{#Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.message}}\\r\\n \\\"PaymentResponseText\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.message | safeValue : \\\"Unexpected Error\\\" }}\\\",\\r\\n {{/Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.message}}\\r\\n {{#Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.message}}\\r\\n \\\"PaymentResponseText\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.message | safeValue : \\\"Unexpected Error\\\" }}\\\",\\r\\n {{/Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.message}}\\r\\n \\\"PaymentTransAttribute\\\": [\\r\\n {\\r\\n \\\"Name\\\": \\\"AcquirerTransactionID\\\",\\r\\n \\\"Value\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.transactionReferenceNumber | safeValue : \\\"N/A\\\"}}\\\"\\r\\n }\\r\\n ],\\r\\n \\\"PaymentTransEncrAttribute\\\": [],\\r\\n \\\"PaymentTransactionEMVTags\\\": {\\r\\n \\\"Emv4F\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.AID}}\\\",\\r\\n \\\"Emv9F06\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.AID}}\\\",\\r\\n \\\"Emv9F12\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.applicationPreferredName}}\\\",\\r\\n \\\"Emv9F21\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.txtime}}\\\",\\r\\n \\\"Emv9C\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.transactionType}}\\\",\\r\\n \\\"Emv9A\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.txdate}}\\\",\\r\\n \\\"Emv9F39\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.posEntryMode}}\\\",\\r\\n \\\"Emv50\\\": \\\"\\\",\\r\\n \\\"EmvCvm\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardHolderVerificationMethodResults}}\\\",\\r\\n \\\"TacOnline\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.offline}}\\\",\\r\\n \\\"TermId\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.mid}}\\\"\\r\\n },\\r\\n \\\"PaymentTransactionId\\\": \\\"{{data.UniqueId}}\\\",\\r\\n {{#Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\r\\n \\\"ProcessedAmount\\\": 0,\\r\\n {{/Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\r\\n {{^Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\r\\n \\\"ProcessedAmount\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.posAuthAmountValue| formatCurrency}}\\\",\\r\\n {{/Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\r\\n \\\"ReconciliationId\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.PaymentResult.PaymentAcquirerData.ApprovalCode}}\\\",\\r\\n \\\"RequestId\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.POIData.POITransactionID.TransactionID | splitByDot:1}}\\\",\\r\\n \\\"RequestToken\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.POIData.POITransactionID.TransactionID | splitByDot:0}}\\\",\\r\\n \\\"RequestedAmount\\\": \\\"{{data.PaymentData.Amount}}\\\",\\r\\n \\\"RequestedDate\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.POIData.POITransactionID.TimeStamp}}\\\",\\r\\n \\\"Status\\\": {\\r\\n \\\"PaymentTransactionStatusId\\\": \\\"Closed\\\"\\r\\n },\\r\\n \\\"TransactionDate\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.SaleData.SaleTransactionID.TimeStamp}}\\\",\\r\\n \\\"TransactionType\\\": {\\r\\n \\\"PaymentTransactionTypeId\\\": \\\"Settlement\\\"\\r\\n },\\r\\n \\\"TransmissionStatus\\\": {\\r\\n \\\"PaymentTransmissionStatusId\\\": \\\"Closed\\\"\\r\\n }\\r\\n }\\r\\n ],\\r\\n {{#Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.fundingSource}}\\r\\n \\\"PaymentType\\\": {\\r\\n \\\"PaymentTypeId\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.fundingSource | map : \\\"PaymentType\\\"}}\\\"\\r\\n }\\r\\n {{/Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.fundingSource}}\\r\\n {{^Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.fundingSource}}\\r\\n \\\"PaymentType\\\": {\\r\\n \\\"PaymentTypeId\\\": \\\"{{data.PaymentData.PaymentType}}\\\"\\r\\n }\\r\\n {{/Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.fundingSource}}\\r\\n }\\r\\n ]\\r\\n}\\r\\n}\"</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width: 271px;\">true</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4>&nbsp;</h4>\r\n\r\n<h4>&nbsp;</h4>\r\n\r\n<h4>&nbsp;</h4>\r\n\r\n<h4>&nbsp;</h4>\r\n\r\n<h4>&nbsp;</h4>\r\n\r\n<h4>&nbsp;</h4>\r\n\r\n<h4>&nbsp;</h4>\r\n\r\n<h4><a name=\"command-sequence\" id=\"command-sequence\"></a><strong data-renderer-mark=\"true\">Command Sequence</strong></h4>\r\n\r\n<p data-renderer-start-pos=\"15077\">The command sequence configuration is used to configure the sequence of commands and how the commands must be orchestrated. Even if there is only one command group, the response for the command group can be handled differently and different actions taken based on the response code. So the command sequence is a composer for the framework to build the conditional orchestration.</p>\r\n\r\n<p data-renderer-start-pos=\"15457\">The nextPeripheralCommandId attribute is used to define what is the next command that should be executed in the peripheral. If there is no command to execute further then the field is left as null.</p>\r\n\r\n<p data-renderer-start-pos=\"15457\"><strong>Sample Configuration:</strong></p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\"><strong data-renderer-mark=\"true\">responseType</strong></th>\r\n\t\t\t<th scope=\"col\"><strong data-renderer-mark=\"true\">responseCode</strong></th>\r\n\t\t\t<th scope=\"col\"><strong data-renderer-mark=\"true\">nextPeripheralCommandId</strong></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Success</td>\r\n\t\t\t<td>200</td>\r\n\t\t\t<td>Settlement</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Failure</td>\r\n\t\t\t<td>4XX</td>\r\n\t\t\t<td>null</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p><strong>Request URL:&nbsp;</strong>/posservice/api/posservice/peripheralCommandGroup/save</p>\r\n\r\n<p><strong>Request Payload:</strong></p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-1\" class=\"toggle-content\"><span class=\"toggle-title\">Command Save - Request Payload</span></a></p><div id=\"tg-1\"><pre>\n<code class=\"json hljs\">{\n&nbsp; &quot;PeripheralCommandGroupId&quot;: &quot;taptopay-settlement&quot;,\n&nbsp; &quot;PeripheralCommand&quot;: [\n&nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &quot;PeripheralCommandTypeId&quot;: {\n&nbsp; &nbsp; &nbsp; &nbsp; &quot;CommandTypeId&quot;: &quot;Settlement&quot;\n&nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &quot;PeripheralType&quot;: &quot;tapToPay&quot;,\n&nbsp; &nbsp; &nbsp; &quot;PeripheralCommandId&quot;: &quot;contactless-settlement&quot;,\n&nbsp; &nbsp; &nbsp; &quot;ResponseTemplate&quot;: &quot;{\\r\\n &nbsp;\\&quot;ExternalResponseCode\\&quot;: \\&quot;{{Response.SaleToPOIResponse.PaymentResponse.Response.Result}}\\&quot;,\\r\\n &nbsp;\n\\&quot;Response\\&quot;: {\\r\\n &nbsp; &nbsp;\\&quot;PaymentResponseStatus\\&quot;: \\&quot;{{Response.SaleToPOIResponse.PaymentResponse.Response.Result}}\\&quot;,\\r\\n &nbsp; &nbsp;\n\\&quot;PaymentResponseText\\&quot;: \\&quot;\\&quot;,\\r\\n &nbsp; &nbsp;\\&quot;PaymentMethod\\&quot;: [\\r\\n &nbsp; &nbsp; &nbsp;{\\r\\n &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;AccountDisplayNumber\\&quot;: \\&quot;{{Response.SaleToPOIResponse.PaymentResponse.PaymentResult.PaymentInstrumentData.CardData.MaskedPan}}\\&quot;,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;AccountNumber\\&quot;: \\&quot;{{Response.SaleToPOIResponse.PaymentResponse.PaymentResult.PaymentInstrumentData.CardData.MaskedPan}}\\&quot;,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;Amount\\&quot;: \\&quot;{{data.PaymentData.Amount}}\\&quot;,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;CardExpiryMonth\\&quot;: \n\\&quot;{{Response.SaleToPOIResponse.PaymentResponse.PaymentResult.PaymentInstrumentData.CardData.SensitiveCardData.ExpiryDate | sliceDate : \\\"month\\\"}}\\&quot;\n,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;CardExpiryYear\\&quot;: \\\n&quot;{{Response.SaleToPOIResponse.PaymentResponse.PaymentResult.PaymentInstrumentData.CardData.SensitiveCardData.ExpiryDate | sliceDate : \\\"year\\\"}}\\&quot;,\n\\r\\n &nbsp; &nbsp; &nbsp; &nbsp;{{#Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardType}}\\r\\n &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;CardType\\&quot;: {\\&quot;CardTypeId\\&quot;: \n\\&quot;{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardType | map : \\\"CardType\\\"}}\\&quot; },\\r\\n &nbsp; &nbsp; &nbsp; &nbsp;\n{{/Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardType}}\\r\\n &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;CurrencyCode\\&quot;: \\&quot;{{Response.SaleToPOIResponse.PaymentResponse.PaymentResult.AmountsResp.Currency}}\\&quot;,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;EntryTypeId\\&quot;: \\&quot;Contactless\\&quot;,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp;\\&quot;GatewayId\\&quot;: \\&quot;{{data.Gateway.GatewayId}}\\&quot;,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;LocationId\\&quot;: \\&quot;{{data.Order.SellingLocationId}}\\&quot;,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp;\n{{#Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardHolderName}}\\r\\n &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;NameOnCard\\&quot;: \\&quot;{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardHolderName}}\\&quot;,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp;\n{{/Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardHolderName}}\\r\\n &nbsp; &nbsp; &nbsp; \n&nbsp;{{^Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardHolderName}}\\r\\n &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;NameOnCard\\&quot;: \\&quot;\\&quot;,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp;{{/Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardHolderName}}\\r\\n &nbsp; &nbsp; &nbsp; \n&nbsp;\\&quot;PaymentMethodAttribute\\&quot;: [],\\r\\n &nbsp; &nbsp; &nbsp; &nbsp;\\&quot;PaymentTransaction\\&quot;: [\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp;{{#Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;ExternalResponseId\\&quot;: \\&quot;{{Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\&quot;,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n{{/Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp;{{^Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;ExternalResponseId\\&quot;: null,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{{/Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;OrderId\\&quot;: \\&quot;{{data.Order.OrderId}}\\&quot;,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\\&quot;PaymentResponseStatus\\&quot;: {\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;PaymentResponseStatusId\\&quot;: \n\\\n&quot;{{#Response.SaleToPOIResponse}}{{Response.SaleToPOIResponse.PaymentResponse.Response.Result}}{{/Response.SaleToPOIResponse}}{{^Response.SaleToPOIResponse}}\nFailure{{/Response.SaleToPOIResponse}}\\&quot;\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;},\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\\&quot;PaymentResponseText\\&quot;: \\&quot;\\&quot;,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp;{{#Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.message}}\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;PaymentResponseText\\&quot;: \\&quot;{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.message | safeValue : \\\"Unexpected Error\\\" }}\\&quot;,\n\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{{/Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.message}}\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp;{{#Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.message}}\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;PaymentResponseText\\&quot;: \n\\&quot;{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.message | safeValue : \\\"Unexpected Error\\\" }}\\&quot;,\\r\\n &nbsp; &nbsp; \n&nbsp; &nbsp; &nbsp; &nbsp;{{/Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.message}}\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;PaymentTransAttribute\\&quot;: [\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\\&quot;Name\\&quot;: \\&quot;AcquirerTransactionID\\&quot;,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;Value\\&quot;: \n\\&quot;{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.transactionReferenceNumber | safeValue : \\\"N/A\\\"}}\\&quot;\\r\\n &nbsp; \n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;],\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\\&quot;PaymentTransEncrAttribute\\&quot;: [],\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\\&quot;PaymentTransactionEMVTags\\&quot;: {\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;Emv4F\\&quot;: \\&quot;{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.AID}}\\&quot;,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;Emv9F06\\&quot;: \\&quot;{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.AID}}\\&quot;,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;Emv9F12\\&quot;: \\&quot;{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.applicationPreferredName}}\\&quot;,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n &nbsp;\\&quot;Emv9F21\\&quot;: \\&quot;{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.txtime}}\\&quot;,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;Emv9C\\&quot;: \\&quot;{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.transactionType}}\\&quot;,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;Emv9A\\&quot;: \\&quot;{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.txdate}}\\&quot;,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;Emv9F39\\&quot;: \\&quot;{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.posEntryMode}}\\&quot;,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp;\\&quot;Emv50\\&quot;: \\&quot;\\&quot;,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;EmvCvm\\&quot;: \\&quot;{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardHolderVerificationMethodResults}}\\&quot;,\\r\\n &nbsp;\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\\&quot;TacOnline\\&quot;: \\&quot;{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.offline}}\\&quot;,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;TermId\\&quot;: \\&quot;{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.mid}}\\&quot;\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;},\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;PaymentTransactionId\\&quot;: \\&quot;{{data.UniqueId}}\\&quot;,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{{#Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;ProcessedAmount\\&quot;: 0,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{{/Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n{{^Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\\&quot;ProcessedAmount\\&quot;: \\\n&quot;{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.posAuthAmountValue| formatCurrency}}\\&quot;,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp;{{/Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\\&quot;ReconciliationId\\&quot;: \n\\&quot;{{Response.SaleToPOIResponse.PaymentResponse.PaymentResult.PaymentAcquirerData.ApprovalCode}}\\&quot;,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;RequestId\\&quot;: \\&quot;{{Response.SaleToPOIResponse.PaymentResponse.POIData.POITransactionID.TransactionID | splitByDot:1}}\\&quot;,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;RequestToken\\&quot;: \\&quot;{{Response.SaleToPOIResponse.PaymentResponse.POIData.POITransactionID.TransactionID | splitByDot:0}}\\&quot;,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;RequestedAmount\\&quot;: \\&quot;{{data.PaymentData.Amount}}\\&quot;,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;RequestedDate\\&quot;: \\&quot;{{Response.SaleToPOIResponse.PaymentResponse.POIData.POITransactionID.TimeStamp}}\\&quot;,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;Status\\&quot;: {\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\\&quot;PaymentTransactionStatusId\\&quot;: \\&quot;Closed\\&quot;\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;},\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;TransactionDate\\&quot;: \\&quot;{{Response.SaleToPOIResponse.PaymentResponse.SaleData.SaleTransactionID.TimeStamp}}\\&quot;,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;TransactionType\\&quot;: {\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\\&quot;PaymentTransactionTypeId\\&quot;: \\&quot;Settlement\\&quot;\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;},\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;TransmissionStatus\\&quot;: {\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\\&quot;PaymentTransmissionStatusId\\&quot;: \\&quot;Closed\\&quot;\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}\\r\\n &nbsp; &nbsp; &nbsp; &nbsp;],\\r\\n &nbsp; &nbsp; &nbsp; \n&nbsp;{{#Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.fundingSource}}\\r\\n &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;PaymentType\\&quot;: {\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\\&quot;PaymentTypeId\\&quot;: \n\\&quot;{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.fundingSource | map : \\\"PaymentType\\\"}}\\&quot;\\r\\n &nbsp; &nbsp; &nbsp; &nbsp;\n}\\r\\n &nbsp; &nbsp; &nbsp; &nbsp;{{/Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.fundingSource}}\\r\\n &nbsp; &nbsp; &nbsp; \n&nbsp;{{^Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.fundingSource}}\\r\\n &nbsp; &nbsp; &nbsp; \n&nbsp;\\&quot;PaymentType\\&quot;: {\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\\&quot;PaymentTypeId\\&quot;: \\&quot;{{data.PaymentData.PaymentType}}\\&quot;\\r\\n &nbsp; &nbsp; &nbsp; &nbsp;}\\r\\n &nbsp; &nbsp; &nbsp; \n&nbsp;{{/Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.fundingSource}}\\r\\n &nbsp; &nbsp; &nbsp;}\\r\\n &nbsp;]\\r\\n}\\r\\n}&quot;,\n&nbsp; &nbsp; &nbsp; &quot;PeripheralCommandSequence&quot;: [],\n&nbsp; &nbsp; &nbsp; &quot;RequestTemplate&quot;: &quot;{\\r\\n &nbsp;\\&quot;SaleToPOIRequest\\&quot;: {\\r\\n &nbsp; &nbsp;\\&quot;PaymentRequest\\&quot;: {\\r\\n &nbsp; &nbsp; &nbsp;\\&quot;SaleData\\&quot;: {\\r\\n &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;SaleToAcquirerData\\&quot;: \\&quot;{{> SaleToAcquirerData | toBase64}}\\&quot;,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp;\\&quot;SaleTransactionID\\&quot;: {\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;TransactionID\\&quot;: \\&quot;{{data.UniqueId}}\\&quot;,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\\&quot;TimeStamp\\&quot;: \\&quot;{{data.Order.CreatedTimestamp | getISOTimeStamp}}\\&quot;\\r\\n &nbsp; &nbsp; &nbsp; &nbsp;}\\r\\n &nbsp; &nbsp; &nbsp;},\n\\r\\n &nbsp; &nbsp; &nbsp;\\&quot;PaymentTransaction\\&quot;: {\\r\\n &nbsp; &nbsp; &nbsp; &nbsp;\\&quot;AmountsReq\\&quot;: {\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\\&quot;Currency\\&quot;: \\&quot;{{data.Order.CurrencyCode}}\\&quot;,\\r\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\\&quot;RequestedAmount\\&quot;: {{data.PaymentData.Amount}}\\r\\n &nbsp; &nbsp; &nbsp; &nbsp;}\\r\\n &nbsp; &nbsp; &nbsp;},\\r\\n &nbsp; &nbsp; &nbsp;\\&quot;PaymentData\\&quot;: {\\r\\n &nbsp; &nbsp; &nbsp; &nbsp;\\&quot;PaymentType\\&quot;: \\&quot;Normal\\&quot;\\r\\n &nbsp; &nbsp; \n&nbsp;}\\r\\n &nbsp; &nbsp;},\\r\\n &nbsp; &nbsp;\\&quot;MessageHeader\\&quot;: {{> AdyenMessageHeader}}\\r\\n &nbsp;}\\r\\n}&quot;\n&nbsp; &nbsp; }\n&nbsp; ]\n}</code></pre>\n</div></div></p>\r\n\r\n<pre>\r\n&nbsp;</pre>\r\n\r\n<h4><a name=\"peripheral-template-map\" id=\"peripheral-template-map\"></a>Peripheral Template Map</h4>\r\n\r\n<p data-renderer-start-pos=\"15818\">Template map is a configuration that allows implementation teams to configure values that need to be translated in the request while sending the request to the peripheral or vice versa. For example, lets say in MAO the card types are configured as Visa, Master Card etc and the payment gateway expects the values to be VI and MC, then the key and values can be configured in the template map along with a group name. The group name must be referenced in the request template or the response template in the command configuration.</p>\r\n\r\n<p data-renderer-start-pos=\"15818\">This can be used in both the request and response templates and eliminates code to handle these translations.&nbsp;</p>\r\n\r\n<p data-renderer-start-pos=\"16350\">The group name is used by the framework to identify which keys to pick and replace.</p>\r\n\r\n<p data-renderer-start-pos=\"16350\"><strong>Sample Configuration:</strong></p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">\r\n\t\t\t<p>GroupName</p>\r\n\t\t\t</th>\r\n\t\t\t<th scope=\"col\">\r\n\t\t\t<p>TemplateKey</p>\r\n\t\t\t</th>\r\n\t\t\t<th scope=\"col\">\r\n\t\t\t<p>TemplateValue</p>\r\n\t\t\t</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>CardType</p>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<p>MC</p>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<p>MasterCard</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>CardType</p>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<p>MASTERCARD</p>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<p>MasterCard</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p><strong>Request URL: /</strong>posservice/api/posservice/peripheralTemplateMap/save</p>\r\n\r\n<p><strong>Request Payload:</strong></p>\r\n\r\n<pre><code hljs=\"\">{\r\n            \r\n            \"GroupName\": \"CardType\",\r\n            \"TemplateKey\": \"MASTERCARD\",\r\n            \"TemplateValue\": \"MasterCard\"\r\n        }</code></pre>\r\n\r\n<h4><a name=\"peripheral-response-mappings\" id=\"peripheral-response-mappings\"></a>Peripheral Response Mappings</h4>\r\n\r\n<p data-renderer-start-pos=\"1\">A new process to map individual peripheral responses to a standard base response. A new configuration&nbsp;has been introduced to allow response mappings to be defined.</p>\r\n\r\n<p data-renderer-start-pos=\"161\">A set of generalized response codes and descriptions are introduced from base as a separate configuration.&nbsp;</p>\r\n\r\n<p data-renderer-start-pos=\"267\">The peripheral response mapping will allow mapping a specific response code from a peripheral to the generic base response codes.</p>\r\n\r\n<p data-renderer-start-pos=\"267\">Custom implementation will configure the required mappings in the peripheral response mappings&nbsp;as needed.</p>\r\n\r\n<p data-renderer-start-pos=\"267\">&nbsp;</p>\r\n\r\n<p data-renderer-start-pos=\"267\"><strong>Sample Configuration (Peripheral Response Mapping):</strong></p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">\r\n\t\t\t<p>PeripheralTypeId</p>\r\n\t\t\t</th>\r\n\t\t\t<th scope=\"col\">\r\n\t\t\t<p>ExternalResponseCode</p>\r\n\t\t\t</th>\r\n\t\t\t<th scope=\"col\">\r\n\t\t\t<p>InternalResponseCode</p>\r\n\t\t\t</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>tapToPay</p>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<p>Success</p>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<p>Success</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p data-renderer-start-pos=\"267\"><strong>Sample Configuration (Peripheral Response Code):</strong></p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">\r\n\t\t\t<p>ResponseType</p>\r\n\t\t\t</th>\r\n\t\t\t<th scope=\"col\">\r\n\t\t\t<p>ResponseDecision</p>\r\n\t\t\t</th>\r\n\t\t\t<th scope=\"col\">\r\n\t\t\t<p>Description</p>\r\n\t\t\t</th>\r\n\t\t\t<th scope=\"col\">\r\n\t\t\t<p>InternalResponseCode</p>\r\n\t\t\t</th>\r\n\t\t\t<th scope=\"col\">\r\n\t\t\t<p>Message</p>\r\n\t\t\t</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Success</p>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<p>Success</p>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<p>Tap to pay payment successfully approved</p>\r\n\t\t\t</td>\r\n\t\t\t<td>Success</td>\r\n\t\t\t<td>\r\n\t\t\t<p>Tap to pay payment successfully approved</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4><a name=\"other-features\" id=\"other-features\"></a>Other Features</h4>\r\n\r\n<h5><a name=\"pause-and-resume-support\" id=\"pause-and-resume-support\"></a>Pause and Resume support</h5>\r\n\r\n<p data-renderer-start-pos=\"1\">The framework supports use cases where the interaction with the peripheral also involves executing something in the application before proceeding further with the peripheral interaction.</p>\r\n\r\n<p data-renderer-start-pos=\"190\">In essence, we can execute a service in the middle of a peripheral interaction.</p>\r\n\r\n<p data-renderer-start-pos=\"270\">A custom service that is registered in the service registry can be executed while executing a command in the peripheral. The framework is able to pause the peripheral interaction and execute the service and, after executing the service, the peripheral interaction can be resumed.</p>\r\n\r\n<h5><a name=\"parallel-command-execution\" id=\"parallel-command-execution\"></a>Parallel Command execution</h5>\r\n\r\n<p>PCF is capable of supporting parallel execution of commands. For example, when items are added to the cart, it may be required to display the items in the payment terminal as well as the customer-facing display. In this scenario, there can be two commands configured for the same event with the same rank but with different peripheral types. The commands are orchestrated in each peripheral in parallel.&nbsp;</p>\r\n\r\n<h4><a name=\"base-implementation-of-pcf\" id=\"base-implementation-of-pcf\"></a>Base Implementation of PCF</h4>\r\n\r\n<ul>\r\n\t<li>Customer-facing display</li>\r\n\t<li>Tap to Pay</li>\r\n\t<li>Support for custom plugins in iOS and Android</li>\r\n</ul>\r\n\r\n\t  </div>\r\n </div>\r\n <div id=\"ui-page-fb-wrap\"></div>\r\n <div class=\"hiq-footer-wrap\">\r\n    \r\n                \r\n  </div>\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n",
  "content_length": 56258,
  "scraped_at": "2025-08-09T22:02:09.629291",
  "content_clean": "Home ››Manhattan Active® Omni››Store››Process & Configuration Guides››Point of Sale››POS Guides››POS Payment ››Peripheral Command Framework Peripheral Command Framework Previous I OverviewProcess FlowConfiguration flowCart Event and PCF designCart EventCart Event ConfigCart Event ConditionCommand GroupCommandCommand SequencePeripheral Template MapPeripheral Response MappingsOther FeaturesPause and Resume supportParallel Command executionBase Implementation of PCF Overview What is a Peripheral? Peripherals are external hardware components that extend the functionality of the Point of Sale application. These devices are connected to POS to provide additional features and improve overall business efficiency. Examples of common POS peripherals: Barcode scanners Printers Cash drawers Card readers Secondary Displays Payment Terminals Weighing Scales How does POS talk to the peripherals? The communication between the POS application layer and the peripheral happens via a plugin that is written to interact with the peripherals. For example, there is a specific plugin that is written for Payware for the POS application to interact with the payware terminal to accomplish functions like displaying line details on the terminals, requesting a capture or refund, etc. For each of these operations there are individual methods that are written in the plugin and each of the methods has the required commands that need to be sent to the payware payment terminal, thus making the plugin an integral part of the POS ecosystem. Challenges with existing Plugins: The MAO POS application delivers plugins out of the box for functions that are supported out of the box. However, during implementation, if there is a requirement to support some additional functions which the peripheral is capable of but the base application doesn't support, then the implementation team has to create a copy of the base plugin and then add new methods as needed and then start owning that plugin. The process of creating a new custom plugin has its own disadvantages. Implementation teams end up writing a lot of business logic into the plugins, which makes the plugins bulky and also do more work than what a plugin should typically do. The implementation team has to constantly keep up with any base changes made to the base plugin and re-applying those changes to the custom plugin. It takes time both to build the custom plugin and maintain the custom plugin. What is Peripheral Command Framework? As the variety of peripherals and their respective use cases continue to grow, and the challenges with custom plugins and implementation times, there is an increasing need for a more extensible interaction framework. The Peripheral Command Framework (PCF) is a structured process governing and orchestrating peripheral interactions within the Manhattan Active Omni® POS. This framework not only supports the seamless integration of various peripherals but also allows customers to implement and manage their own peripherals, enabling tailored interactions as required. The Peripheral Command Framework offers a new approach for implementation teams to interact with peripheral plugins. Below are some of the key objectives of the framework. Clear separation between business flows and native code(non-functional aspects of the app) Adding flexibility to the business flows that interact with the native plugins: The thought process is to drive the business flows through configuration. PCF would run through the configs and take appropriate actions based on the config. This makes the interactions completely flexible. The implementation teams will have to create configs based on business requirements. Please refer to the entity structure/example sections for more details on the configuration and its usage. Reducing the number of user exits. By making the flows flexible and configurable, the number of user exits can be reduced. Reducing the need for new builds/artifacts. The framework will provide the hooks or events required from the application to allow the custom implementation of a peripheral. Currently, the framework is capable of supporting custom plugins (not base) for payment on the iOS and Android platforms only.   Windows implementations are not supported, and the base Adyen and Payware connect interactions continue to follow their current legacy implementation. If a customer requires using a payment provider outside of Adyen / Payware, then a custom plugin can be created leveraging the Peripheral Interaction Framework (PCF). Currently the PCF supports only communication to the Customer Facing Display (CFD) and to Payment Terminals via custom plugin. Process Flow A new seed data API is introduced to load all the event config related to peripheral commands to seed data. A new peripheral command framework is introduced to orchestrate the whole interaction between UI and peripheral devices. When an event is raised in the UI, the UI performs the following evaluations and actions Check in the seed data if the event raised has a corresponding event config. If an event config exists, then evaluate the condition for the event config. All the event configs that match the conditions are picked. The event config with the lowest rank is then picked for execution. The periphalGroupId and the commandSequence is fetched for execution and the peripherals framework is invoked. The peripheral orchestrator performs the following actions The first command to be executed is identified as the command with IsInitial set to true. Once the first command is identified and the peripheral type associated is identified the orchestrator then passes the command along with the request and response template The plugin specific request is created and executed in the plugin and the response is transformed back based on the template. The orchestrator receives the response and based on the response, identifies the next command to be executed from the sequence. This process is continued until all the commands in the sequence are executed. If the event condition in the config doesn't match for the current order, then the UI proceeds further without invoking the orchestrator. Configuration flow The \"Cart Event\" and \"cart event config\" MUP UI screens will help the user to create and configure events for a defined condition. These conditions will be used to initiate the peripheral command framework. All the other configurations are currently only supported via API. Cart Event and PCF design There are many entities involved in this workflow, whilst the basic concept is that you define a trigger point which is an event and its conditions, and associate this event with peripheral interaction commands via command group. The sections below are entities involved in the cart event/ PCF design. Cart Event A cart event is a signal that something has happened, which could be initiated by user actions or system action.  Events are raised by the UI explicitly upon user action or system action. For example, a cart event can be raised when a user clicks on Checkout, scans an item etc. The cart event entity is a system entity and new events can only be added by R&D. A list of all available events will be seeded in the cartEvent entity. Each event will have a unit event Id and a description of when the event is raised. Sample events are as follows. CartEventId Description Objects passed with the event capturePayment This event is triggered when users click on the checkout button on the pos cart screen. export interface CapturePaymentCommandRequest extends PeripheralCommandRequest { data: { Order?: Order, PaymentSummary?: PaymentSummary, PaymentData?: PaymentResponse,// rename this to capturePaymentResponse PaymentMethod?:PaymentMethod[], CommandSequence?:CommandSequence, UniqueId?:string, Gateway?: GatewayDetail, IsAuth?: boolean, Response?:PaymentPluginResponse } } refundPayment This event is triggered when a user initiates adding a line to the cart, but before making the API call to the backend. export interface RefundPaymentCommandRequest extends PeripheralCommandRequest { data: { Order?: Order, PaymentSummary?: PaymentSummary, PaymentData?: RefundResponse, PaymentMethod?:PaymentMethod[], CommandSequence?:CommandSequence, UniqueId?:string, Gateway?: GatewayDetail, Response?:PaymentPluginResponse } } PostLineAdd PriceOverriden ItemQuantityUpdate DiscountApplied ItemTaxOverride ItemVASAdded PostTaxExempt This event is triggered when a user adds a line to the cart. export interface CaptureLineItemRequest extends PeripheralCommandRequest { data: { UpdatedOrderLine?: [], Order?: Order,cod OrderLineAttributeChanges?:[], UpdatedKeys?:[], CommandSequence?:any, Response?:PaymentPluginResponse } } capture-raise-event This event is triggered when the user receives a CapturePayment response indicating that PTT is set to true and implementation is local. It will be used for orchestrating interactions with the payment terminal. export interface CaptureRaiseEvent extends PeripheralCommandRequest { data: { order?: Order, request?: [], response?:[], eventName?:string } } voidPayment export interface VoidPaymentCommandRequest extends PeripheralCommandRequest { data:{ PaymentData:RequestToTerminal, PaymentMethod?:[], Response?:any, CommandSequence?:any } } PostAttachAssociate export interface postAttachAssociate { data: { SelectedAssociates: [], SelectedOrderLines: [] } } PostAttachCustomer export interface CustomerShippingAddress extends PeripheralCommandRequest { data: { CustomerShippingAddress?:ShippingAddress } } PreAttachCustomer PostAddAddress { data: { CustomerShippingAddress: shippingAddress } }; PreAddAddress { data: {PreAddAddress:{isAVSEnabled:                     shippingInformationCalculator?.isAVSEnable() } } } Cart Event Config Cart event config is the configuration that is used to configure what form group or command group should be invoked when an event is triggered. An event can have either a form group or a command group invoked. A condition can also be configured to control when the command group or form group should be invoked. It is possible to have different form groups or command groups for the same event based on the condition. However, if there is more than one event config available for one event, the rank is used and the lowest rank wins. The event conditions can be more than one. If there are more than one, then the matchAny attribute is used to define if all conditions have to match or not. If the MatchAny is false, then the conditions are treated as “AND” else “OR” Action type attribute defines if the event is triggering a form or a command group. Sample Configuration: cartEventConfigId cartEvent description actionType matchAny eventRank peripheralCommandGroup initialize-tap-to-pay tap-to-pay-initialize Event for initializing tap to pay PeripheralCommands true 1 taptopay-initialize Cart Event Condition Cart event condition configuration is to configure the conditions to be evaluated to determine if an event should invoke a command group. More than one condition can be defined for an event config. The event config is referenced here to return the list of all the conditions. For example, the use case may be to initialize tap to pay only if the gateway is AdyenPayments Sample Configuration: parentCartEventConfig conditionEntity attributeName attributeValue operator initialize-tap-to-pay data.payload GatewayId AdyenPayments = Command Group The Command group is the configuration that groups one or more related commands that are used to represent a business use case and creates the association between the commands. For example, if there is a requirement to auth and settle for a particular type of transaction, then a command group is configured for this business use case, and two commands are configured one for Authorization and another for Settlement. The event is configured to invoke a command group, and the command group will list all the commands associated to the group. Sample Configuration: peripheralCommandGroupId description taptopay-initialize Command group to initialize the tap to pay Adyen SDK Command The command configuration was introduced to capture the configuration for a command. A command is nothing but the actual command that has to be executed in the peripheral. A command contains a command id that is used to uniquely identify a command. For example, Capture can be a command for a payment terminal, which defines that the command is configured to execute a capture on the payment terminal. The command also has two important attributes: Request Template: The request template contains the actual request that needs to be sent to the terminal for executing the command. So, going by the example that we picked, the request template for the Capture command will contain the actual request that is required to execute the capture on the payment terminal. The Request template will have identifiers to replace with actual data. The actual data will be substituted during execution. Response Template: The response template contains the actual response that the base expects for that command to successfully update all the required objects on the MAO side. So, going by the example that we picked, the response template for the Capture command will contain the actual response that is required to record the settlement transaction in MAO. Service Id: A service can be invoked for a command if there is a need to massage the request or response before or after interacting with the peripheral. The implementation team can add any command as needed and provide the required request and response template. The other important attribute in the command configuration is the isInitial flag. This flag is set to true if the command is the first command to be executed, if the expected functionality requires more than one command to be executed in sequence. The Command configuration will be seeded with all the configurations that are required by base. Services and customers can create their own configurations as needed. Sample Configuration: PeripheralCommandTypeId PeripheralType PeripheralCommandId RequestTemplate ResponseTemplate IsInitial Settlement tapToPay contactless-settlement \"{\\r\\n \\\"SaleToPOIRequest\\\": {\\r\\n \\\"PaymentRequest\\\": {\\r\\n \\\"SaleData\\\": {\\r\\n \\\"SaleToAcquirerData\\\": \\\"{{> SaleToAcquirerData | toBase64}}\\\",\\r\\n \\\"SaleTransactionID\\\": {\\r\\n \\\"TransactionID\\\": \\\"{{data.UniqueId}}\\\",\\r\\n \\\"TimeStamp\\\": \\\"{{data.Order.CreatedTimestamp | getISOTimeStamp}}\\\"\\r\\n }\\r\\n },\\r\\n \\\"PaymentTransaction\\\": {\\r\\n \\\"AmountsReq\\\": {\\r\\n \\\"Currency\\\": \\\"{{data.Order.CurrencyCode}}\\\",\\r\\n \\\"RequestedAmount\\\": {{data.PaymentData.Amount}}\\r\\n }\\r\\n },\\r\\n \\\"PaymentData\\\": {\\r\\n \\\"PaymentType\\\": \\\"Normal\\\"\\r\\n }\\r\\n },\\r\\n \\\"MessageHeader\\\": {{> AdyenMessageHeader}}\\r\\n }\\r\\n}\" {\\r\\n \\\"ExternalResponseCode\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.Result}}\\\",\\r\\n \\\"Response\\\": {\\r\\n \\\"PaymentResponseStatus\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.Result}}\\\",\\r\\n \\\"PaymentResponseText\\\": \\\"\\\",\\r\\n \\\"PaymentMethod\\\": [\\r\\n {\\r\\n \\\"AccountDisplayNumber\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.PaymentResult.PaymentInstrumentData.CardData.MaskedPan}}\\\",\\r\\n \\\"AccountNumber\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.PaymentResult.PaymentInstrumentData.CardData.MaskedPan}}\\\",\\r\\n \\\"Amount\\\": \\\"{{data.PaymentData.Amount}}\\\",\\r\\n \\\"CardExpiryMonth\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.PaymentResult.PaymentInstrumentData.CardData.SensitiveCardData.ExpiryDate | sliceDate : \\\"month\\\"}}\\\",\\r\\n \\\"CardExpiryYear\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.PaymentResult.PaymentInstrumentData.CardData.SensitiveCardData.ExpiryDate | sliceDate : \\\"year\\\"}}\\\",\\r\\n {{#Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardType}}\\r\\n \\\"CardType\\\": {\\\"CardTypeId\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardType | map : \\\"CardType\\\"}}\\\" },\\r\\n {{/Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardType}}\\r\\n \\\"CurrencyCode\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.PaymentResult.AmountsResp.Currency}}\\\",\\r\\n \\\"EntryTypeId\\\": \\\"Contactless\\\",\\r\\n \\\"GatewayId\\\": \\\"{{data.Gateway.GatewayId}}\\\",\\r\\n \\\"LocationId\\\": \\\"{{data.Order.SellingLocationId}}\\\",\\r\\n {{#Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardHolderName}}\\r\\n \\\"NameOnCard\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardHolderName}}\\\",\\r\\n {{/Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardHolderName}}\\r\\n {{^Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardHolderName}}\\r\\n \\\"NameOnCard\\\": \\\"\\\",\\r\\n {{/Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardHolderName}}\\r\\n \\\"PaymentMethodAttribute\\\": [],\\r\\n \\\"PaymentTransaction\\\": [\\r\\n {\\r\\n {{#Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\r\\n \\\"ExternalResponseId\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\\",\\r\\n {{/Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\r\\n {{^Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\r\\n \\\"ExternalResponseId\\\": null,\\r\\n {{/Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\r\\n \\\"OrderId\\\": \\\"{{data.Order.OrderId}}\\\",\\r\\n \\\"PaymentResponseStatus\\\": {\\r\\n \\\"PaymentResponseStatusId\\\": \\\"{{#Response.SaleToPOIResponse}}{{Response.SaleToPOIResponse.PaymentResponse.Response.Result}}{{/Response.SaleToPOIResponse}}{{^Response.SaleToPOIResponse}}Failure{{/Response.SaleToPOIResponse}}\\\"\\r\\n },\\r\\n \\\"PaymentResponseText\\\": \\\"\\\",\\r\\n {{#Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.message}}\\r\\n \\\"PaymentResponseText\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.message | safeValue : \\\"Unexpected Error\\\" }}\\\",\\r\\n {{/Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.message}}\\r\\n {{#Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.message}}\\r\\n \\\"PaymentResponseText\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.message | safeValue : \\\"Unexpected Error\\\" }}\\\",\\r\\n {{/Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.message}}\\r\\n \\\"PaymentTransAttribute\\\": [\\r\\n {\\r\\n \\\"Name\\\": \\\"AcquirerTransactionID\\\",\\r\\n \\\"Value\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.transactionReferenceNumber | safeValue : \\\"N/A\\\"}}\\\"\\r\\n }\\r\\n ],\\r\\n \\\"PaymentTransEncrAttribute\\\": [],\\r\\n \\\"PaymentTransactionEMVTags\\\": {\\r\\n \\\"Emv4F\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.AID}}\\\",\\r\\n \\\"Emv9F06\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.AID}}\\\",\\r\\n \\\"Emv9F12\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.applicationPreferredName}}\\\",\\r\\n \\\"Emv9F21\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.txtime}}\\\",\\r\\n \\\"Emv9C\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.transactionType}}\\\",\\r\\n \\\"Emv9A\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.txdate}}\\\",\\r\\n \\\"Emv9F39\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.posEntryMode}}\\\",\\r\\n \\\"Emv50\\\": \\\"\\\",\\r\\n \\\"EmvCvm\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardHolderVerificationMethodResults}}\\\",\\r\\n \\\"TacOnline\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.offline}}\\\",\\r\\n \\\"TermId\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.mid}}\\\"\\r\\n },\\r\\n \\\"PaymentTransactionId\\\": \\\"{{data.UniqueId}}\\\",\\r\\n {{#Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\r\\n \\\"ProcessedAmount\\\": 0,\\r\\n {{/Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\r\\n {{^Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\r\\n \\\"ProcessedAmount\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.posAuthAmountValue| formatCurrency}}\\\",\\r\\n {{/Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\r\\n \\\"ReconciliationId\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.PaymentResult.PaymentAcquirerData.ApprovalCode}}\\\",\\r\\n \\\"RequestId\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.POIData.POITransactionID.TransactionID | splitByDot:1}}\\\",\\r\\n \\\"RequestToken\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.POIData.POITransactionID.TransactionID | splitByDot:0}}\\\",\\r\\n \\\"RequestedAmount\\\": \\\"{{data.PaymentData.Amount}}\\\",\\r\\n \\\"RequestedDate\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.POIData.POITransactionID.TimeStamp}}\\\",\\r\\n \\\"Status\\\": {\\r\\n \\\"PaymentTransactionStatusId\\\": \\\"Closed\\\"\\r\\n },\\r\\n \\\"TransactionDate\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.SaleData.SaleTransactionID.TimeStamp}}\\\",\\r\\n \\\"TransactionType\\\": {\\r\\n \\\"PaymentTransactionTypeId\\\": \\\"Settlement\\\"\\r\\n },\\r\\n \\\"TransmissionStatus\\\": {\\r\\n \\\"PaymentTransmissionStatusId\\\": \\\"Closed\\\"\\r\\n }\\r\\n }\\r\\n ],\\r\\n {{#Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.fundingSource}}\\r\\n \\\"PaymentType\\\": {\\r\\n \\\"PaymentTypeId\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.fundingSource | map : \\\"PaymentType\\\"}}\\\"\\r\\n }\\r\\n {{/Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.fundingSource}}\\r\\n {{^Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.fundingSource}}\\r\\n \\\"PaymentType\\\": {\\r\\n \\\"PaymentTypeId\\\": \\\"{{data.PaymentData.PaymentType}}\\\"\\r\\n }\\r\\n {{/Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.fundingSource}}\\r\\n }\\r\\n ]\\r\\n}\\r\\n}\" true Command Sequence The command sequence configuration is used to configure the sequence of commands and how the commands must be orchestrated. Even if there is only one command group, the response for the command group can be handled differently and different actions taken based on the response code. So the command sequence is a composer for the framework to build the conditional orchestration. The nextPeripheralCommandId attribute is used to define what is the next command that should be executed in the peripheral. If there is no command to execute further then the field is left as null. Sample Configuration: responseType responseCode nextPeripheralCommandId Success 200 Settlement Failure 4XX null Request URL: /posservice/api/posservice/peripheralCommandGroup/save Request Payload: Command Save - Request Payload { \"PeripheralCommandGroupId\": \"taptopay-settlement\", \"PeripheralCommand\": [ { \"PeripheralCommandTypeId\": { \"CommandTypeId\": \"Settlement\" }, \"PeripheralType\": \"tapToPay\", \"PeripheralCommandId\": \"contactless-settlement\", \"ResponseTemplate\": \"{\\r\\n  \\\"ExternalResponseCode\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.Result}}\\\",\\r\\n \\\"Response\\\": {\\r\\n    \\\"PaymentResponseStatus\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.Result}}\\\",\\r\\n \\\"PaymentResponseText\\\": \\\"\\\",\\r\\n    \\\"PaymentMethod\\\": [\\r\\n      {\\r\\n \\\"AccountDisplayNumber\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.PaymentResult.PaymentInstrumentData.CardData.MaskedPan}}\\\",\\r\\n \\\"AccountNumber\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.PaymentResult.PaymentInstrumentData.CardData.MaskedPan}}\\\",\\r\\n \\\"Amount\\\": \\\"{{data.PaymentData.Amount}}\\\",\\r\\n \\\"CardExpiryMonth\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.PaymentResult.PaymentInstrumentData.CardData.SensitiveCardData.ExpiryDate | sliceDate : \\\"month\\\"}}\\\" ,\\r\\n \\\"CardExpiryYear\\\": \\ \"{{Response.SaleToPOIResponse.PaymentResponse.PaymentResult.PaymentInstrumentData.CardData.SensitiveCardData.ExpiryDate | sliceDate : \\\"year\\\"}}\\\", \\r\\n        {{#Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardType}}\\r\\n \\\"CardType\\\": {\\\"CardTypeId\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardType | map : \\\"CardType\\\"}}\\\" },\\r\\n {{/Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardType}}\\r\\n \\\"CurrencyCode\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.PaymentResult.AmountsResp.Currency}}\\\",\\r\\n \\\"EntryTypeId\\\": \\\"Contactless\\\",\\r\\n        \\\"GatewayId\\\": \\\"{{data.Gateway.GatewayId}}\\\",\\r\\n \\\"LocationId\\\": \\\"{{data.Order.SellingLocationId}}\\\",\\r\\n {{#Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardHolderName}}\\r\\n \\\"NameOnCard\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardHolderName}}\\\",\\r\\n {{/Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardHolderName}}\\r\\n {{^Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardHolderName}}\\r\\n \\\"NameOnCard\\\": \\\"\\\",\\r\\n        {{/Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardHolderName}}\\r\\n \\\"PaymentMethodAttribute\\\": [],\\r\\n        \\\"PaymentTransaction\\\": [\\r\\n          {\\r\\n {{#Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\r\\n \\\"ExternalResponseId\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\\",\\r\\n {{/Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\r\\n {{^Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\r\\n \\\"ExternalResponseId\\\": null,\\r\\n            {{/Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\r\\n \\\"OrderId\\\": \\\"{{data.Order.OrderId}}\\\",\\r\\n            \\\"PaymentResponseStatus\\\": {\\r\\n \\\"PaymentResponseStatusId\\\": \\ \"{{#Response.SaleToPOIResponse}}{{Response.SaleToPOIResponse.PaymentResponse.Response.Result}}{{/Response.SaleToPOIResponse}}{{^Response.SaleToPOIResponse}} Failure{{/Response.SaleToPOIResponse}}\\\"\\r\\n            },\\r\\n            \\\"PaymentResponseText\\\": \\\"\\\",\\r\\n {{#Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.message}}\\r\\n \\\"PaymentResponseText\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.message | safeValue : \\\"Unexpected Error\\\" }}\\\", \\r\\n            {{/Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.message}}\\r\\n {{#Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.message}}\\r\\n \\\"PaymentResponseText\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.message | safeValue : \\\"Unexpected Error\\\" }}\\\",\\r\\n {{/Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.message}}\\r\\n \\\"PaymentTransAttribute\\\": [\\r\\n              {\\r\\n                \\\"Name\\\": \\\"AcquirerTransactionID\\\",\\r\\n \\\"Value\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.transactionReferenceNumber | safeValue : \\\"N/A\\\"}}\\\"\\r\\n }\\r\\n            ],\\r\\n            \\\"PaymentTransEncrAttribute\\\": [],\\r\\n            \\\"PaymentTransactionEMVTags\\\": {\\r\\n \\\"Emv4F\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.AID}}\\\",\\r\\n \\\"Emv9F06\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.AID}}\\\",\\r\\n \\\"Emv9F12\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.applicationPreferredName}}\\\",\\r\\n \\\"Emv9F21\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.txtime}}\\\",\\r\\n \\\"Emv9C\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.transactionType}}\\\",\\r\\n \\\"Emv9A\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.txdate}}\\\",\\r\\n \\\"Emv9F39\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.posEntryMode}}\\\",\\r\\n \\\"Emv50\\\": \\\"\\\",\\r\\n \\\"EmvCvm\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.cardHolderVerificationMethodResults}}\\\",\\r\\n \\\"TacOnline\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.offline}}\\\",\\r\\n \\\"TermId\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.mid}}\\\"\\r\\n            },\\r\\n \\\"PaymentTransactionId\\\": \\\"{{data.UniqueId}}\\\",\\r\\n            {{#Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\r\\n \\\"ProcessedAmount\\\": 0,\\r\\n            {{/Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\r\\n {{^Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\r\\n            \\\"ProcessedAmount\\\": \\ \"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.posAuthAmountValue| formatCurrency}}\\\",\\r\\n {{/Response.SaleToPOIResponse.PaymentResponse.Response.ErrorCondition}}\\r\\n            \\\"ReconciliationId\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.PaymentResult.PaymentAcquirerData.ApprovalCode}}\\\",\\r\\n \\\"RequestId\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.POIData.POITransactionID.TransactionID | splitByDot:1}}\\\",\\r\\n \\\"RequestToken\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.POIData.POITransactionID.TransactionID | splitByDot:0}}\\\",\\r\\n \\\"RequestedAmount\\\": \\\"{{data.PaymentData.Amount}}\\\",\\r\\n \\\"RequestedDate\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.POIData.POITransactionID.TimeStamp}}\\\",\\r\\n \\\"Status\\\": {\\r\\n              \\\"PaymentTransactionStatusId\\\": \\\"Closed\\\"\\r\\n            },\\r\\n \\\"TransactionDate\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.SaleData.SaleTransactionID.TimeStamp}}\\\",\\r\\n \\\"TransactionType\\\": {\\r\\n              \\\"PaymentTransactionTypeId\\\": \\\"Settlement\\\"\\r\\n            },\\r\\n \\\"TransmissionStatus\\\": {\\r\\n              \\\"PaymentTransmissionStatusId\\\": \\\"Closed\\\"\\r\\n            }\\r\\n          }\\r\\n        ],\\r\\n {{#Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.fundingSource}}\\r\\n \\\"PaymentType\\\": {\\r\\n          \\\"PaymentTypeId\\\": \\\"{{Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.fundingSource | map : \\\"PaymentType\\\"}}\\\"\\r\\n }\\r\\n        {{/Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.fundingSource}}\\r\\n {{^Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.fundingSource}}\\r\\n \\\"PaymentType\\\": {\\r\\n          \\\"PaymentTypeId\\\": \\\"{{data.PaymentData.PaymentType}}\\\"\\r\\n        }\\r\\n {{/Response.SaleToPOIResponse.PaymentResponse.Response.AdditionalResponse.additionalData.fundingSource}}\\r\\n      }\\r\\n  ]\\r\\n}\\r\\n}\", \"PeripheralCommandSequence\": [], \"RequestTemplate\": \"{\\r\\n  \\\"SaleToPOIRequest\\\": {\\r\\n    \\\"PaymentRequest\\\": {\\r\\n      \\\"SaleData\\\": {\\r\\n \\\"SaleToAcquirerData\\\": \\\"{{> SaleToAcquirerData | toBase64}}\\\",\\r\\n        \\\"SaleTransactionID\\\": {\\r\\n \\\"TransactionID\\\": \\\"{{data.UniqueId}}\\\",\\r\\n          \\\"TimeStamp\\\": \\\"{{data.Order.CreatedTimestamp | getISOTimeStamp}}\\\"\\r\\n        }\\r\\n      }, \\r\\n      \\\"PaymentTransaction\\\": {\\r\\n        \\\"AmountsReq\\\": {\\r\\n          \\\"Currency\\\": \\\"{{data.Order.CurrencyCode}}\\\",\\r\\n \\\"RequestedAmount\\\": {{data.PaymentData.Amount}}\\r\\n        }\\r\\n      },\\r\\n      \\\"PaymentData\\\": {\\r\\n        \\\"PaymentType\\\": \\\"Normal\\\"\\r\\n }\\r\\n    },\\r\\n    \\\"MessageHeader\\\": {{> AdyenMessageHeader}}\\r\\n  }\\r\\n}\" } ] } Peripheral Template Map Template map is a configuration that allows implementation teams to configure values that need to be translated in the request while sending the request to the peripheral or vice versa. For example, lets say in MAO the card types are configured as Visa, Master Card etc and the payment gateway expects the values to be VI and MC, then the key and values can be configured in the template map along with a group name. The group name must be referenced in the request template or the response template in the command configuration. This can be used in both the request and response templates and eliminates code to handle these translations. The group name is used by the framework to identify which keys to pick and replace. Sample Configuration: GroupName TemplateKey TemplateValue CardType MC MasterCard CardType MASTERCARD MasterCard Request URL: /posservice/api/posservice/peripheralTemplateMap/save Request Payload: { \"GroupName\": \"CardType\", \"TemplateKey\": \"MASTERCARD\", \"TemplateValue\": \"MasterCard\" } Peripheral Response Mappings A new process to map individual peripheral responses to a standard base response. A new configuration has been introduced to allow response mappings to be defined. A set of generalized response codes and descriptions are introduced from base as a separate configuration. The peripheral response mapping will allow mapping a specific response code from a peripheral to the generic base response codes. Custom implementation will configure the required mappings in the peripheral response mappings as needed. Sample Configuration (Peripheral Response Mapping): PeripheralTypeId ExternalResponseCode InternalResponseCode tapToPay Success Success Sample Configuration (Peripheral Response Code): ResponseType ResponseDecision Description InternalResponseCode Message Success Success Tap to pay payment successfully approved Success Tap to pay payment successfully approved Other Features Pause and Resume support The framework supports use cases where the interaction with the peripheral also involves executing something in the application before proceeding further with the peripheral interaction. In essence, we can execute a service in the middle of a peripheral interaction. A custom service that is registered in the service registry can be executed while executing a command in the peripheral. The framework is able to pause the peripheral interaction and execute the service and, after executing the service, the peripheral interaction can be resumed. Parallel Command execution PCF is capable of supporting parallel execution of commands. For example, when items are added to the cart, it may be required to display the items in the payment terminal as well as the customer-facing display. In this scenario, there can be two commands configured for the same event with the same rank but with different peripheral types. The commands are orchestrated in each peripheral in parallel. Base Implementation of PCF Customer-facing display Tap to Pay Support for custom plugins in iOS and Android"
}