{
  "id": "2588626",
  "permalink": "release-grouping-and-creation",
  "title": "Release Grouping and Creation",
  "type": "topic",
  "level": 6,
  "path": "Manhattan Active® Omni/Order Management/Process & Configuration Guides/Order Processing/Order Fulfillment/Order Release/Release Grouping and Creation",
  "raw_item": {
    "id": "2588626",
    "text": "Release Grouping and Creation",
    "title": "Release Grouping and Creation",
    "permalink": "release-grouping-and-creation",
    "leaf": false,
    "droppable": true,
    "expanded": true,
    "closed": true,
    "visible": true,
    "editable": true,
    "type": "topic",
    "topicType": "0",
    "status": "1",
    "iconCls": "icon-topic",
    "cls": "",
    "folder_id": "289282",
    "parent": "f;289282",
    "created_date": "1590036462",
    "modified_date": "1750427161",
    "instructor_id": null,
    "loaded": true,
    "haschildren": false,
    "callout": "0",
    "order": "3"
  },
  "success": true,
  "content": "\r\n\r\n\r\n<div class=\"hiq-page-wrap\">\r\n<div class=\"hiq-t-wrap\">\r\n\t\t\r\n  \t  <div class=\"hiq-t \">\r\n\t\t\t\t<ul class=\"breadcrumbs\"><li><a class=\"breadcrumb-links\" hqid=\"1788908\"  href=\"/home\">Home</a></li> <li><span>&rsaquo;&rsaquo;</span><a hqid=\"3500940\" href=\"/omni\" class=\"breadcrumb-links\">Manhattan Active® Omni</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158393\" href=\"/order-management\" class=\"breadcrumb-links\">Order Management</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158394\" href=\"/process-configuration-guides\" class=\"breadcrumb-links\">Process & Configuration Guides</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158718\" href=\"/order-processing-2\" class=\"breadcrumb-links\">Order Processing</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158747\" href=\"/order-fulfillment\" class=\"breadcrumb-links\">Order Fulfillment</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2588623\" href=\"/release\" class=\"breadcrumb-links\">Order Release</a></li><li> <span>››</span>Release Grouping and Creation</li></ul>  \t\r\n\t\t<h2>Release Grouping and Creation</h2>\r\n\r\n<p></p>\r\n\r\n<a href=\"/how-release-works\" hqid=\"2588625\">Previous</a>&nbsp;I&nbsp;<a href=\"/publish-release\" hqid=\"2588627\">Next</a>\r\n<p>&nbsp;</p>\r\n\r\n<p>Regardless of which of the three methods of release is used, the release service works by picking allocations, grouping them into releases based on origin, destination, and other parameters, and creating releases.</p>\r\n\r\n<div class=\"info\"><ul><li><a href=\"/release-grouping-and-creation$release-grouping\">Release Grouping</a><ul><li><a href=\"/release-grouping-and-creation$ability-to-form-release-group-based-on-an-order-line-attribute-releasegroupid\">Ability to form Release Group based on an order line attribute - ReleaseGroupId</a></li></ul></li><li><a href=\"/release-grouping-and-creation$release-creation\">Release Creation</a></li><li><a href=\"/release-grouping-and-creation$configuration\">Configuration</a><ul><li><a href=\"/release-grouping-and-creation$demand-type\">Demand Type</a></li><li><a href=\"/release-grouping-and-creation$optional-release-grouping\">Optional Release Grouping</a><ul><li><a href=\"/release-grouping-and-creation$hold-the-release-until-all-the-units-on-the-order-are-allocated\">Hold the release until all the units on the Order are allocated</a></li><li><a href=\"/release-grouping-and-creation$hold-the-release-until-the-units-allocated-across-all-locations-are-eligible\">Hold the release until the units allocated across all locations are eligible</a><ul><li><a href=\"/release-grouping-and-creation$grouping-override\">Grouping Override</a></li></ul></li><li><a href=\"/release-grouping-and-creation$hold-the-release-until-all-the-units-are-eligible-for-the-final-shipment-minimize-shipment\">Hold the release until all the units are eligible for the final shipment (Minimize Shipment)</a></li></ul></li><li><a href=\"/release-grouping-and-creation$fill-rates\">Fill Rates</a><ul><li><a href=\"/release-grouping-and-creation$fill-rates-configuration\">Fill Rates Configuration</a></li></ul></li></ul></li><li><a href=\"/release-grouping-and-creation$implementation-flavors\">Implementation Flavors</a><ul><li><a href=\"/release-grouping-and-creation$how-to-add-existing-attributes-to-the-release-filter\">How to add existing attributes to the release filter</a></li><li><a href=\"/release-grouping-and-creation$how-to-add-extended-attributes-to-the-release-filter\">How to add extended attributes to the release filter</a></li><li><a href=\"/release-grouping-and-creation$how-to-add-extended-attributes-in-the-release-filter-for-both-order-and-order-line-level\">How to add extended attributes in the release filter for both order and order line level</a></li><li><a href=\"/release-grouping-and-creation$how-to-add-extended-attribute-to-an-existing-entity\">How to add extended attribute to an existing entity</a></li><li><a href=\"/release-grouping-and-creation$triggering-release-when-holds-are-removed\">Triggering Release when Holds are Removed</a></li><li><a href=\"/release-grouping-and-creation$consolidate-releases-when-using-merge-shipment\">Consolidate Releases when using Merge Shipment</a></li><li><a href=\"/release-grouping-and-creation$how-to-restrict-manhattan-active®-omni-from-generating-its-own-fulfillment-objects-for-store-orders\">How to restrict Manhattan Active® Omni from generating its own fulfillment objects for store orders</a></li><li><a href=\"/release-grouping-and-creation$how-to-consolidate-units-of-the-same-item-on-multiple-release-lines\">How to consolidate units of the same item on multiple release lines</a></li><li><a href=\"/release-grouping-and-creation$related-article-s\">Related Article(s)</a></li></ul></li></ul></div>\r\n\r\n<h3><a name=\"release-grouping\" id=\"release-grouping\"></a>Release Grouping</h3>\r\n\r\n<p>Allocations are grouped into releases based on attributes which logically split allocations into separate shipments.&nbsp;For example,&nbsp;WM packs&nbsp;and ships all quantities from an order which are shipping to the same destination together, but if some units are shipping to a different destination, then they are packed and shipped separately.</p>\r\n\r\n<p>The following allocation and order line&nbsp;attributes are used to group allocations into a release. For example, if two allocations on a single order have all attributes in common except for ship via, then two releases are created. This release grouping logic is inherent and is not configurable.</p>\r\n\r\n<p>Allocation attributes used for grouping:</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">\r\n\t\t\t<p>Allocation Attributes</p>\r\n\t\t\t</th>\r\n\t\t\t<th scope=\"col\">Order Line Attributes</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Order Id</li>\r\n\t\t\t\t<li>Ship From Location Id</li>\r\n\t\t\t\t<li>Ship To Location Id</li>\r\n\t\t\t\t<li>Ship To Address First Name&nbsp;</li>\r\n\t\t\t\t<li>Ship To Address&nbsp;Last Name&nbsp;</li>\r\n\t\t\t\t<li>Ship To Address&nbsp;City&nbsp;</li>\r\n\t\t\t\t<li>Ship To Address&nbsp;Country</li>\r\n\t\t\t\t<li>Ship To Address&nbsp;Postal Code</li>\r\n\t\t\t\t<li>Ship To Address&nbsp;State</li>\r\n\t\t\t\t<li>Carrier Code</li>\r\n\t\t\t\t<li>Mode</li>\r\n\t\t\t\t<li>Service Level Code</li>\r\n\t\t\t\t<li>Ship Via</li>\r\n\t\t\t\t<li>Latest Ship Date</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Order Id</li>\r\n\t\t\t\t<li>Delivery Method</li>\r\n\t\t\t\t<li>Delivery Method Sub Type</li>\r\n\t\t\t\t<li>Fulfillment Group Id&nbsp;</li>\r\n\t\t\t\t<li>Ship From Location Id</li>\r\n\t\t\t\t<li>Ship Via</li>\r\n\t\t\t\t<li>Release Group Id</li>\r\n\t\t\t\t<li>Primary Pickup Detail First Name</li>\r\n\t\t\t\t<li>Primary Pickup Detail&nbsp;Last Name</li>\r\n\t\t\t\t<li>Primary Pickup Detail&nbsp;Email</li>\r\n\t\t\t\t<li>Primary Pickup Detail&nbsp;Phone</li>\r\n\t\t\t\t<li>AllocationType&nbsp;</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<h4><a name=\"ability-to-form-release-group-based-on-an-order-line-attribute-releasegroupid\" id=\"ability-to-form-release-group-based-on-an-order-line-attribute-releasegroupid\"></a>Ability to form Release Group based on an order line attribute - ReleaseGroupId</h4>\r\n\r\n<p>During order creation,&nbsp;<em>ReleaseGroupId</em>&nbsp;can be populated for every&nbsp;order line.&nbsp;If populated, Release Group will be formed as per <em>ReleaseGroupId</em>&nbsp;sent on the order line. This attribute is an additional attribute along with existing allocation and order line attributes used to group allocations into a release. For instance, if two allocations on a single order have all attributes in common but <em>ReleaseGroupId</em>&nbsp;is different, then two releases will be created. Refer to <a href=\"/release-grouping-and-creation$Optional Release Grouping\">Optional Release Grouping</a> section for more details.</p>\r\n\r\n<h3><a name=\"release-creation\" id=\"release-creation\"></a>Release Creation</h3>\r\n\r\n<p>After allocations are grouped into releases, the release entity is created. One release line will exist&nbsp;for each order line included on the release. The release and release line attributes are populated based on the following logic.</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">Release Attribute</th>\r\n\t\t\t<th scope=\"col\">Mapping</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p data-ccp-props=\"{&quot;335559683&quot;:0,&quot;335559685&quot;:450,&quot;335559731&quot;:-450}\" data-indent=\"-450\" lang=\"EN-US\" paraeid=\"{6c9b5f70-32a6-4814-8dfc-89319be62489}{184}\" paraid=\"0\" xml:lang=\"EN-US\">Release Id</p>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<p>Unique identifier of the release</p>\r\n\r\n\t\t\t<ul>\r\n\t\t\t\t<li>For each separate release, a unique release ID&nbsp;is generated. See the list above for attributes which result in separate releases being created.</li>\r\n\t\t\t\t<li>Release IDs are unique across orders, because this is the unique key that fulfillment systems will use to send updates to Active® Omni.</li>\r\n\t\t\t\t<li>The release ID&nbsp;is a concatenation of the order ID&nbsp;and a 1&nbsp;for the first release, 2&nbsp;for the second, and so on.</li>\r\n\t\t\t</ul>\r\n\r\n\t\t\t<p>For example, an order&nbsp;with order ID&nbsp;Order123&nbsp;with a single release will have the release ID of Order1231.</p>\r\n\r\n\t\t\t<p>If this order had two quantities allocated to different locations, then there would be two release IDs, Order1231&nbsp;and Order1232.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p data-ccp-props=\"{&quot;335559683&quot;:0,&quot;335559685&quot;:450,&quot;335559731&quot;:-450}\" data-indent=\"-450\" lang=\"EN-US\" paraeid=\"{6c9b5f70-32a6-4814-8dfc-89319be62489}{187}\" paraid=\"0\" xml:lang=\"EN-US\">Ship From Location Id</p>\r\n\t\t\t</td>\r\n\t\t\t<td>Allocation.ShipFromLocationId</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p data-ccp-props=\"{&quot;335559683&quot;:0,&quot;335559685&quot;:450,&quot;335559731&quot;:-450}\" data-indent=\"-450\" lang=\"EN-US\" paraeid=\"{6c9b5f70-32a6-4814-8dfc-89319be62489}{190}\" paraid=\"0\" xml:lang=\"EN-US\">Ship To Location Id</p>\r\n\t\t\t</td>\r\n\t\t\t<td>Allocation.ShipToLocationId (only populated for pick up in store, ship to store, or merge scenarios)</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p data-ccp-props=\"{&quot;335559683&quot;:0,&quot;335559685&quot;:450,&quot;335559731&quot;:-450}\" data-indent=\"-450\" lang=\"EN-US\" paraeid=\"{6c9b5f70-32a6-4814-8dfc-89319be62489}{199}\" paraid=\"0\" xml:lang=\"EN-US\">Ship Via Id</p>\r\n\t\t\t</td>\r\n\t\t\t<td>Allocation.ShipViaId</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Service Level Code</td>\r\n\t\t\t<td>Allocation.ServiceLevelCode</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p data-ccp-props=\"{&quot;335559683&quot;:0,&quot;335559685&quot;:450,&quot;335559731&quot;:-450}\" data-indent=\"-450\" lang=\"EN-US\" paraeid=\"{6c9b5f70-32a6-4814-8dfc-89319be62489}{202}\" paraid=\"0\" xml:lang=\"EN-US\">Carrier Code</p>\r\n\t\t\t</td>\r\n\t\t\t<td>Allocation.CarrierCode</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p data-ccp-props=\"{&quot;335559683&quot;:0,&quot;335559685&quot;:450,&quot;335559731&quot;:-450}\" data-indent=\"-450\" lang=\"EN-US\" paraeid=\"{6c9b5f70-32a6-4814-8dfc-89319be62489}{205}\" paraid=\"0\" xml:lang=\"EN-US\">Release Type</p>\r\n\t\t\t</td>\r\n\t\t\t<td>Type of release. Currently, defaults to CustomerOrder.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p data-ccp-props=\"{&quot;335559683&quot;:0,&quot;335559685&quot;:450,&quot;335559731&quot;:-450}\" data-indent=\"-450\" lang=\"EN-US\" paraeid=\"{6c9b5f70-32a6-4814-8dfc-89319be62489}{208}\" paraid=\"0\" xml:lang=\"EN-US\">Destination Action</p>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<p>Used when the delivery method is ship to store to differentiate between merge and pickup orders</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p data-ccp-props=\"{&quot;335559683&quot;:0,&quot;335559685&quot;:450,&quot;335559731&quot;:-450}\" data-indent=\"-450\" lang=\"EN-US\" paraeid=\"{6c9b5f70-32a6-4814-8dfc-89319be62489}{211}\" paraid=\"0\" xml:lang=\"EN-US\">Delivery Method Id</p>\r\n\t\t\t</td>\r\n\t\t\t<td>OrderLine.DeliveryMethod</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Order Id</td>\r\n\t\t\t<td>Order.OrderId</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Effective Rank</td>\r\n\t\t\t<td>\r\n\t\t\t<p>The rank of the release is calculated as the highest rank of all release lines. The rank of the release line comes from the rank of the order lines that are computed during the optional prioritization step.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Address Id</p>\r\n\t\t\t</td>\r\n\t\t\t<td>orderLine.addressId - populated only if&nbsp;<a href=\"https://omni.helpdocsonline.com/postreleasemodification$update-of-partially-released-lines\">Update of Partially Released Lines</a>&nbsp;feature is enabled for order lines with delivery method ship to address and destination action merge at the time of creating the release.</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p><a data-sessionid=\"d1f88bd9-548d-2a10-34d3-7e1c9c846b64\" data-shapeids=\"8\" data-slideid=\"\">&nbsp;</a></p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">Release Line Attribute</th>\r\n\t\t\t<th scope=\"col\">Mapping</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p data-ccp-props=\"{&quot;335559683&quot;:0,&quot;335559685&quot;:450,&quot;335559731&quot;:-450}\" data-indent=\"-450\" lang=\"EN-US\" paraeid=\"{6c9b5f70-32a6-4814-8dfc-89319be62489}{184}\" paraid=\"0\" xml:lang=\"EN-US\">Release Line Id</p>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<p>Unique identifier of the release line.&nbsp;</p>\r\n\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Release line IDs&nbsp;are next-up numbers beginning with&nbsp;1, 2, … n, n + 1.</li>\r\n\t\t\t\t<li>Release line IDs are unique within an order, but are not unique across orders.</li>\r\n\t\t\t\t<li>For example, if an order had three items grouped into a single release, meaning all allocation attributes are the same, then the release line IDs will be 1, 2, and 3.</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Allocation Id</td>\r\n\t\t\t<td>Allocation.AllocationId</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Item Id</td>\r\n\t\t\t<td>Allocation.ItemId</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Quantity</td>\r\n\t\t\t<td>Quantity being released</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>UOM</td>\r\n\t\t\t<td>Allocation.UOM</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Effective Rank</td>\r\n\t\t\t<td>OrderLine.Effective Rank</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p data-ccp-props=\"{&quot;335559683&quot;:0,&quot;335559685&quot;:450,&quot;335559731&quot;:-450}\" data-indent=\"-450\" lang=\"EN-US\" paraeid=\"{6c9b5f70-32a6-4814-8dfc-89319be62489}{187}\" paraid=\"0\" xml:lang=\"EN-US\">Order Line Id</p>\r\n\t\t\t</td>\r\n\t\t\t<td>OrderLine.OrderLineId</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Release Dependency Id</p>\r\n\t\t\t</td>\r\n\t\t\t<td>If the release destination action is \"Delivery\" and order line delivery method = ship to address, this attribute is mapped to&nbsp;Release Id of the merge leg, that is the release for the order line with Destination Action = merge from which the current delivery leg release was generated.</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><a name=\"configuration\" id=\"configuration\"></a><a id=\"release_configuration\" name=\"release_configuration\"></a>Configuration</h3>\r\n\r\n<p><a href=\"https://omni.helpdocsonline.com/order-fulfillment-configuration-2\">Release Configuration UI</a>&nbsp;is used for configuring release rules.&nbsp;</p>\r\n\r\n<h4><a name=\"demand-type\" id=\"demand-type\"></a>Demand Type</h4>\r\n\r\n<p>Each Release Configuration must specify a Demand Type, which can be set to either&nbsp;'Allocation' or 'Allocation and Future.'&nbsp;The Demand Type indicates what type of supply a&nbsp;unit&nbsp;must be allocated against in order for the unit to be eligible for release. For example, let's say Demand Type is set to 'Allocation.' An order is placed with two lines where order line&nbsp;1 is allocated to On Order inventory and order line 2 is allocated to On Hand Available inventory, only order line 2&nbsp;will be eligible for release. If Demand Type was set to 'Allocation and Future' for the same order, then both order line 1 and 2 would be eligible for release.</p>\r\n\r\n<p>Because&nbsp;supply type&nbsp;is not saved on the allocation entity in the order, the release service determines the supply type via&nbsp;the reservation request match records in the inventory component.&nbsp;If the supply type is eligible for release, then a release is created. If the supply type is not eligible for release, then the allocation is not released. The allocation is released when the supply type becomes eligible for release.</p>\r\n\r\n<p>For example, consider two demand types:</p>\r\n\r\n<ul>\r\n\t<li>“Allocation” that&nbsp;includes on hand supply types</li>\r\n\t<li>“Allocation and Future” that&nbsp;includes on hand, in-transit, and future supply types</li>\r\n</ul>\r\n\r\n<p>An order config is configured with demand type \"Allocation and Future\", and a corresponding release configuration is configured with demand type \"Allocation\".<br>\r\nThis is so the business can reserve in-transit and future inventory, but only release orders to the distribution center once inventory is on hand.<br>\r\nIf an order line uses this order config&nbsp;and allocates against an in-transit supply type, then the allocation fails to release, because in-transit&nbsp;supply is not eligible in the release configuration. Once the in-transit&nbsp;inventory is received and becomes on hand, then the allocation is released.</p>\r\n\r\n<p><u>Examples:</u></p>\r\n\r\n<p><em><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-1\" class=\"toggle-content\"><span class=\"toggle-title\">Example 1: An order is created with 3 lines. All quantities are allocated but release demand type on one of the allocation supply does not match</span></a></p><div id=\"tg-1\"><p>An order is created with 3 lines. All quantities are allocated but release demand type on one of the allocation supply does not match.</p>\n\n<p><strong>Result:</strong>&nbsp;All allocations on order are eligible for release because at least one line meets filter criteria. Lines with same origin facility are grouped together. Two&nbsp;releases are created:</p>\n\n<ul>\n\t<li>Release1: Allocations for DC1: A1, A3, A5</li>\n\t<li>Release2: Allocations for DC2: A2</li>\n</ul>\n\n<p><img alt=\"\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/Group%20Allocation%20for%20Release%20by%20Order(2).png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL0dyb3VwJTIwQWxsb2NhdGlvbiUyMGZvciUyMFJlbGVhc2UlMjBieSUyME9yZGVyKDIpLnBuZyIsIkNvbmRpdGlvbiI6eyJEYXRlTGVzc1RoYW4iOnsiQVdTOkVwb2NoVGltZSI6MTc1NDc1MTc0Mn19fV19&Signature=NS5QaN-BachPZOOZKUkShgy6q~faxGwRT~L~VsaG9qde9cf2vcGyXKSey95wZC4SM0gZtXNg1WjCwS4tSG4nmzBahGJ-qmWdyHXO00kVqwHVhUB0kmadd3gDMLcG5c6jompcAD~NW1WEMH14Aa7Gdf1gkBE6GebPeYyQ7gg8HHsjFMvcCFfmj0OO1QTXzIW9IwOM2Qiy8KVSrG-emLb1QJ5JkypUtLQGg6HyxD0YMLXjdXPaHUtHCz6ByL8utd0o-aq36kNOj-2rp8E71fOMEUZfrPSQA-uSC7d1MBST0eyUgcEC3LnuexT53yBIvdDMZy8KOhZ2UJObQQailwf-sw__&Key-Pair-Id=K2TK3EG287XSFC\" /></p>\n</div></div></em></p>\r\n\r\n<h4><a name=\"optional-release-grouping\" id=\"optional-release-grouping\"></a><a id=\"Optional Release Grouping\" name=\"Optional Release Grouping\"></a>Optional Release Grouping</h4>\r\n\r\n<p>Additional optional configurations are&nbsp;available to hold the release of units until certain qualifications are met. These are called \"Consolidation Constraints\" in the UI and are listed below.</p>\r\n\r\n<ul>\r\n\t<li>Hold the release until all the units are allocated for the&nbsp;Order</li>\r\n\t<li>Hold the release until the units allocated across all locations are eligible By Fulfillment Group</li>\r\n\t<li>Hold the release until all the units are eligible for the final shipment (Minimize Shipment)</li>\r\n</ul>\r\n\r\n<p>These parameters can be&nbsp;configured in combination with eachother and are found in the <a href=\"https://omni.helpdocsonline.com/order-fulfillment-configuration-2$grouping-logic\">Release configuration UI</a>.</p>\r\n\r\n<h5><a name=\"hold-the-release-until-all-the-units-on-the-order-are-allocated\" id=\"hold-the-release-until-all-the-units-on-the-order-are-allocated\"></a><strong>Hold the release until all the units on the Order are allocated</strong></h5>\r\n\r\n<p>If configured at the ‘Order’ level, then no units are released until every unit on the order is allocated (regardless of Demand Type the units are allocated to). If configured in combination with Fill Rate, then Fill Rate takes precedence for the first release, while the second and final release will not occur until all remaining units on the order are allocated (regardless of Demand Type).</p>\r\n\r\n<p>This feature can also be enabled at the Customer level using the <a href=\"https://omni.helpdocsonline.com/account-management$hold-release-until-all-units-allocated-configuration\">'Release Grouping Strategy.'</a> If 'Release Grouping Strategy' is configured, then it takes precedence over this Release Configuration consolidation constraint.&nbsp;</p>\r\n\r\n<p><u>Examples:</u></p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-2\" class=\"toggle-content\"><span class=\"toggle-title\">Example 1: An order is created with 3 lines. All quantities are allocated. Group by order is selected and release demand type matches allocation supply type</span></a></p><div id=\"tg-2\"><p><strong>Result:</strong>&nbsp;All allocations on order are eligible for release because at least one line meets filter criteria. Lines with same origin facility are grouped together. Two releases are created:</p>\n\n<ul>\n\t<li>Release 1: Allocations for DC1: A1, A3, A5</li>\n\t<li>Release 2: Allocations for DC2: A2, A4</li>\n</ul>\n\n<p><img src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/Group%20Allocation%20for%20Release%20by%20Order(1).png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL0dyb3VwJTIwQWxsb2NhdGlvbiUyMGZvciUyMFJlbGVhc2UlMjBieSUyME9yZGVyKDEpLnBuZyIsIkNvbmRpdGlvbiI6eyJEYXRlTGVzc1RoYW4iOnsiQVdTOkVwb2NoVGltZSI6MTc1NDc1MTc0Mn19fV19&Signature=B8cVYn97JeB6lT9lhk98L~729lzPu77E217gjpiP7fIyUVDK7f05e85npJ9w2ddtIQLx8dZZnQjUMfVzIL1nXpKOgvljEnV1O0kTA-d4MnkamK~GF4HKIVu0lwvDrAJkZRme1~z1juGS8G0b9vlvci9YFjFQjyScuC-8LWi9iPCQ2jxXGpxITMJ-1EVyGlRnTXWrHupziHxkAU9FMIEDJipgIKNEwHxtuPcTSJU7pNLFl-VqHPxnRkVZZgCgHstVeedBVn3PUcnh0pUBLqh0hWaTSsnjBZMSXUZ1qhT4YowPM9rWEFMVWKlrtiQ8GE10YBcfqlcu7EsLrU9kuqoQVw__&Key-Pair-Id=K2TK3EG287XSFC\" /></p>\n</div></div></p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-3\" class=\"toggle-content\"><span class=\"toggle-title\">Example 2:  An order is created with 3 lines. Allocations are created for all but release demand type does not match allocation supply type. Group by order is selected</span></a></p><div id=\"tg-3\"><p><strong>Result:</strong>&nbsp;No release is created until the allocated unit supply type matches the release demand type supply type.</p>\n</div></div></p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-4\" class=\"toggle-content\"><span class=\"toggle-title\">Example 3:  An order is created with 3 lines. Allocations are created for all but 1 unit. Group by order is selected</span></a></p><div id=\"tg-4\"><p><strong>Result:&nbsp;</strong>Not all quantities on the order are allocated, so no release is created until the unit is allocated.</p>\n\n<p><img alt=\"\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/Group%20by%20order%20and%20order%20is%20backordered.png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL0dyb3VwJTIwYnklMjBvcmRlciUyMGFuZCUyMG9yZGVyJTIwaXMlMjBiYWNrb3JkZXJlZC5wbmciLCJDb25kaXRpb24iOnsiRGF0ZUxlc3NUaGFuIjp7IkFXUzpFcG9jaFRpbWUiOjE3NTQ3NTE3NDJ9fX1dfQ__&Signature=q87ewVkp8J~dUTKxL1nvWcQDoxjCdO9tVt9Lj2dcUoK7rcLPrioAFecIbUVmKIaMQfek88XGORb8x47ovg3nPXcbMjqKF2uMX-PLMamYpQNt8qMfmBgwLmqClw1sqTLa1b7H26xGpS6AdbvpI4XYAiAfRkJXA5ztmvBhAhqXMBVnrkCn6dn~xCGifM05eTUc8aa8z7kjGUY3m5dXfEXmy8~68O-f9EuBKQM~oIucoXQ3JAK8g3yh6ulxNC5ImkbPwOgKjIYwuRaP9vv93bKeJBcmsLiZb5gMkFvT0xOrYC1-ENeAO58ti-Xwf~tPueuNUxVCqiElGWhhwXOwzELWww__&Key-Pair-Id=K2TK3EG287XSFC\" /></p>\n</div></div></p>\r\n\r\n<hr>\r\n<h5><a name=\"hold-the-release-until-the-units-allocated-across-all-locations-are-eligible\" id=\"hold-the-release-until-the-units-allocated-across-all-locations-are-eligible\"></a><strong>Hold the release until the units allocated across all locations are eligible</strong></h5>\r\n\r\n<p>If configured ‘By Fulfillment Group’, then no units are released in a given Fulfillment Group until every allocated unit in a Fulfillment Group is allocated to the eligible supply as indicated by the Demand Type configured for the same Release Configuration. In case of merge scenarios, hold the release when shipping the first leg(s) of an order.&nbsp;<em>For instance: if an order is allocated against DC1 and DC2, then wait until all lines are allocated against available soon supply before releasing the first legs to the DCs.&nbsp;</em>When this configuration is enabled, \"Hold the release until all the units are eligible for the final shipment (Minimize Shipment)” is also applied by default.&nbsp;If configured in combination with Fill Rate, then Fill Rate takes precedence.</p>\r\n\r\n<p>This feature can also be enabled at the Customer level using the <a href=\"https://omni.helpdocsonline.com/account-management$single-delivery-nbsp-releases\">'Deliver Together Strategy.'</a> If 'Deliver Together Strategy'&nbsp;is configured in Customer, then it takes precedence over this Release Configuration consolidation constraint.&nbsp;</p>\r\n\r\n<div class=\"tip\">\"Fulfillment Group\" is a combination of \"deliveryMethod\" , \"shipToLocationId\", \"addressId\" and \"shippingMethod\"</div>\r\n\r\n<p>Below are the illustrations</p>\r\n\r\n<p>#1 Order is created with multiple lines allocated from DC1 and DC2. All lines belong to the same \"Fulfillment Group\".</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">Order</th>\r\n\t\t\t<th scope=\"col\">item</th>\r\n\t\t\t<th scope=\"col\">Quantity</th>\r\n\t\t\t<th scope=\"col\">Origin Location</th>\r\n\t\t\t<th scope=\"col\">Allocated Quantity</th>\r\n\t\t\t<th scope=\"col\">Allocated Supply</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Line 1</td>\r\n\t\t\t<td>Door</td>\r\n\t\t\t<td>1</td>\r\n\t\t\t<td>DC1</td>\r\n\t\t\t<td>1</td>\r\n\t\t\t<td>On Hand = 1</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Line 2</td>\r\n\t\t\t<td>Window</td>\r\n\t\t\t<td>4</td>\r\n\t\t\t<td>DC1</td>\r\n\t\t\t<td>4</td>\r\n\t\t\t<td>On Order = 4</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Line 3</td>\r\n\t\t\t<td>Curtain</td>\r\n\t\t\t<td>4</td>\r\n\t\t\t<td>DC2</td>\r\n\t\t\t<td>4</td>\r\n\t\t\t<td>On Hand = 4</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p><img height=\"350\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/DeliverTogether_ProProf_Image1(3).jpg?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL0RlbGl2ZXJUb2dldGhlcl9Qcm9Qcm9mX0ltYWdlMSgzKS5qcGciLCJDb25kaXRpb24iOnsiRGF0ZUxlc3NUaGFuIjp7IkFXUzpFcG9jaFRpbWUiOjE3NTQ3NTE3NDJ9fX1dfQ__&Signature=jaZ6-vz7XsgSa3vBOx5jygdfvc7GZEWWLnoDmwI72af11ShLH0jk1OnRs8M4rRe95hcX0fUqHrj9Wcj7aekOZ64nbG0LlO~HyblTkzjkuGjo4E5m9SQ~qsM5wDHoxXKvMqBqdW~wNYk~PwTPhVpP762ChkQfoXzao1cxZrW54-j3kWAGcytXABoXG6cbeiJ~PVcpAWunu7VhtBocKY0XMCkpqL~J90p-vFzFMOEfneNODfQ3~OHWs~zB23zHtJCRv~~RbzW5yQv8NAAZfRClearltUpAlsfHPUwOikpjZxsaC5ZnIfbz1RiX0Y224puSvX2QcxD0og9awph9VMPhVA__&Key-Pair-Id=K2TK3EG287XSFC\" width=\"500\"></p>\r\n\r\n<p>#2&nbsp;Order is created with multiple lines allocated from DC1 and DC2 shipped to a consolidation HUB. All lines belong to same \"Fulfillment Group\".&nbsp;</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">Order</th>\r\n\t\t\t<th scope=\"col\">item</th>\r\n\t\t\t<th scope=\"col\">Quantity</th>\r\n\t\t\t<th scope=\"col\">Origin Location</th>\r\n\t\t\t<th scope=\"col\">Merge Location</th>\r\n\t\t\t<th scope=\"col\">Allocated Quantity (Origin Leg)</th>\r\n\t\t\t<th scope=\"col\">Allocated Supply (Origin Leg)</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Line 1</td>\r\n\t\t\t<td>Door</td>\r\n\t\t\t<td>1</td>\r\n\t\t\t<td>DC1</td>\r\n\t\t\t<td>HUB</td>\r\n\t\t\t<td>1</td>\r\n\t\t\t<td>On Hand = 1</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Line 2</td>\r\n\t\t\t<td>Window</td>\r\n\t\t\t<td>4</td>\r\n\t\t\t<td>DC1</td>\r\n\t\t\t<td>HUB</td>\r\n\t\t\t<td>4</td>\r\n\t\t\t<td>On Order&nbsp; = 4</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Line 3</td>\r\n\t\t\t<td>Curtain</td>\r\n\t\t\t<td>4</td>\r\n\t\t\t<td>DC2</td>\r\n\t\t\t<td>HUB</td>\r\n\t\t\t<td>4</td>\r\n\t\t\t<td>On Hand = 4</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img height=\"364\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/DeliverTogether_ProProf_Image2.jpg?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL0RlbGl2ZXJUb2dldGhlcl9Qcm9Qcm9mX0ltYWdlMi5qcGciLCJDb25kaXRpb24iOnsiRGF0ZUxlc3NUaGFuIjp7IkFXUzpFcG9jaFRpbWUiOjE3NTQ3NTE3NDN9fX1dfQ__&Signature=RLWrOMUwBuveKqs0I95jZ~gfF5zcB3KeWvbxQGceSLNr2-nrjVmKRsx6M-87b3scqUkBxtFUz82-iAPjCvBvcsdV7MIz3zDY4GOPDQgVpXMUh8B5ki6~T8Vi35xJAE19qLMotyR8SuR7yrpcVaFEBuWlq6keBb7vv1xDUdzN0rOWRWMnD9Vk4D5HdGkxx1ApMGHzlxLPr0gWuGE5W8LEiqGggjjMa99JHiVEfRErJD2AUoDlP8xuRZS6HpmGdH6z7JrPNPXtE7I3Tinc1oQxHyV1cfjFv8HHKrS1VxtbQqmyWBCuhidMCfFiyKpsk9sfj0EJqauvG1PZarwDuPBi7Q__&Key-Pair-Id=K2TK3EG287XSFC\" width=\"610\"></p>\r\n\r\n<p>This constraint can achieve the following.</p>\r\n\r\n<ul>\r\n\t<li>Ensure all inventory being shipped to the customer from one or many locations is shipped or delivered at relatively the same time.</li>\r\n\t<li>Ensure no inventory is shipped to the Consolidation Hub until all the lines are on hand, regardless of where they are being fulfilled from. Also, ensure no inventory is shipped to the customer from Consolidation Hub until all lines are on hand, to minimize shipments from the Hub.</li>\r\n\t<li>Ensure Ship to Store lines from multiple locations and against future inventory arrive at the store at \"nearly the same time\".</li>\r\n</ul>\r\n\r\n<p>The 'Release Config Template' provides capability to group the release lines, however the rules can be overridden. Check Overriding Release Grouping Config for more details.</p>\r\n\r\n<h6><a name=\"grouping-override\" id=\"grouping-override\"></a>Grouping Override</h6>\r\n\r\n<p>To apply this consolidation constraint on all or few lines irrespective of Fulfillment Group, override value can be sent during order creation for order lines. Release Group will be formed as per \"ReleaseGroupId\" sent on order line.</p>\r\n\r\n<p><img height=\"490\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/DeliverTogether_ProProf_Image3.png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL0RlbGl2ZXJUb2dldGhlcl9Qcm9Qcm9mX0ltYWdlMy5wbmciLCJDb25kaXRpb24iOnsiRGF0ZUxlc3NUaGFuIjp7IkFXUzpFcG9jaFRpbWUiOjE3NTQ3NTE3NDN9fX1dfQ__&Signature=Xw-NQLhd2jxkSJ5LMO3kStNpazC26yWx86Kbir~xDcwJJb23c62uSpZipJbkRIbJZcLGBnIYT-1OUrpPhPiWrgY~Bcidazr2dgqJDaqTw2zeEdaQi0UrcZp0dHe~ltFd~OutEcSccO3i44Gw6YBMsrWtQgfOm~N4WTWjQEaHJgzwXHU37Bfe4bJHBPXXBmOx~heBmPgCwmke3E~OFHT~kpnDzzTWw60rRo9hzgtmXJ7EbdghZK6Vl3LQ2ifyecmWxM2TiBfC8TMjPVoKe3d0PuSe0Pa~nt7AUMsd6XGYC10-yY5zU3TEGeLJDgJYs43qVtgHOQ6FBNxgq2Gn~FlGkQ__&Key-Pair-Id=K2TK3EG287XSFC\" width=\"954\"></p>\r\n\r\n<h5><a name=\"hold-the-release-until-all-the-units-are-eligible-for-the-final-shipment-minimize-shipment\" id=\"hold-the-release-until-all-the-units-are-eligible-for-the-final-shipment-minimize-shipment\"></a><a id=\"hold-the-release-until-all-the-units-are-eligible-for-the-final-shipment-minimize-shipment\" name=\"hold-the-release-until-all-the-units-are-eligible-for-the-final-shipment-minimize-shipment\"></a><strong>Hold the release until all the units are eligible for the final shipment (Minimize Shipment)</strong></h5>\r\n\r\n<p>If true, then no units are released for the final shipment leg until every allocated unit in a fulfillment group is allocated to inventory in the Demand Type configured in the Release Configuration. This config applies to the final leg of the shipment.&nbsp;If configured in combination with Fill Rate, then Fill Rate takes precedence.</p>\r\n\r\n<p>This feature can also be enabled at the Customer level using the <a href=\"https://omni.helpdocsonline.com/account-management$single-delivery-nbsp-releases\">'Deliver Together Strategy.'</a> If 'Deliver Together Strategy'&nbsp;is configured in Customer, then it takes precedence over this Release Configuration consolidation constraint. 'Deliver Together Strategy' applies to both merge and final shipment leg. In other words, Deliver Together Strategy in Customer is a combination of two release consolidation constraints: 'Hold the release until all the units are eligible for the final shipment'&nbsp;and 'Hold the release until the units allocated across all locations are eligible.'</p>\r\n\r\n<p><img height=\"370\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/DeliverTogether_ProProf_Image5(1).png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL0RlbGl2ZXJUb2dldGhlcl9Qcm9Qcm9mX0ltYWdlNSgxKS5wbmciLCJDb25kaXRpb24iOnsiRGF0ZUxlc3NUaGFuIjp7IkFXUzpFcG9jaFRpbWUiOjE3NTQ3NTE3NDN9fX1dfQ__&Signature=Iv~F6kLcZPYVrzXjxjPzqkjy9gSo2CzeJZ0JgJh9cKSd4dtr244baYnGSbiflcpnSsj5SV3tpktYHgjdpW~lRUugQIsVNLP88ITzjWx~-8~dNsdH3-Sb2NMvAj5F4kbjXN8ntv8IZG8bkOLadVeZFPfXb9MejZQmE4t8acvc8GQyl6ntaBZ4SI2-BROiOXw-cr4BZiTpfoHRPGi8nFoEga9nNfFa192ME1olMstF-fnb-L2wxZZmWvGSJUmCCipRweVRc1--I5qFIZHXszgF8ceRCLvHDl165NpGrDGiirJO9Dt3TKpQt~mk4mD~xTNJuIRtcZDshc1lyyW4bKEdOQ__&Key-Pair-Id=K2TK3EG287XSFC\" width=\"640\"></p>\r\n\r\n<p>If any consolidation constraint&nbsp;is selected and ReleaseDemandType is configured as \"Allocation and Future\", then certain additional steps are needed to&nbsp;ensure&nbsp;that merge legs are released together with non-merge legs. Refer to<a href=\"/release-grouping-and-creation$Consolidate Releases when using merge shipment\">&nbsp;\"Consolidate Releases when using Merge Shipment\"</a>.&nbsp;If configured in combination with Fill Rate, then Fill Rate takes precedence.</p>\r\n\r\n<p>This feature can also be enabled at the Customer level using the 'Deliver Together Strategy.' If 'Deliver Together Strategy'&nbsp;is configured in Customer, then it takes precedence over this Release Configuration consolidation constraint.&nbsp;</p>\r\n\r\n<h4><a name=\"fill-rates\" id=\"fill-rates\"></a><a id=\"Optional Release Grouping\" name=\"Optional Release Grouping\"></a>Fill Rates</h4>\r\n\r\n<p>The Fill Rate&nbsp;feature provides the ability to prevent any units from releasing until a certain percent of the units on the Order or Order Line are allocated against inventory indicated by the Demand Type.</p>\r\n\r\n<p>There are two possible Fill Rate strategies: 'Order' and 'Order Line.' The 'Order' strategy can be used if no units should get released until a certain percent of units across the entire order are allocated to inventory in the Demand Type. 'Order Line' strategy can be used if no units should get released until a certain percent of units on each Order Line are allocated against inventory in the Demand Type.&nbsp;For Order Line strategy, every single Order Line must meet the fill rate before any units on the order get released.</p>\r\n\r\n<p>There is a corresponding Fill Rates configuration at the Customer level which overrides the Fill Rate configuration at the Release Configuration.</p>\r\n\r\n<h5><a name=\"fill-rates-configuration\" id=\"fill-rates-configuration\"></a>Fill Rates Configuration</h5>\r\n\r\n<p><strong>Fill Rate Strategy: </strong>Indicates whether the fill rate is honored at the order level or order line level. If Fill Rate Strategy is 'Order', no units are released until the fill rate is met, considering total units of the order across all lines. If Fill Rate Strategy is 'Order Line', no units are released until every line in the order meets the fill rate. 'FillRateType' and 'FillRateValue' must be populated as well for the Fill Rate feature to be honored.</p>\r\n\r\n<p><strong>Fill Rate Type:</strong>&nbsp;Indicates the type of Fill Rate that should be used. For example, if Fill Rate Type is 'PercentUnits', then the 'FillRateValue' will represent the percent of units that must be allocated to releasable inventory before any units on the order are released. 'FillRateValue' and 'FillRateStrategy' must be populated as well for the Fill Rate feature to be honored.</p>\r\n\r\n<p><strong>Fill Rate Threshold:</strong>&nbsp;Indicates the fill rate threshold. For example, if Fill Rate Type is 'PercentUnits', then the Fill Rate Value represents the percent of units that must be allocated to releasable inventory before any units on the order are released (if 70% is the fill rate, then populate Fill Rate Value as '70'). 'FillRateType' and 'FillRateStrategy' must be populated as well for the Fill Rate feature to be honored.</p>\r\n\r\n<h3><a name=\"implementation-flavors\" id=\"implementation-flavors\"></a>Implementation Flavors</h3>\r\n\r\n<h4><a name=\"how-to-add-existing-attributes-to-the-release-filter\" id=\"how-to-add-existing-attributes-to-the-release-filter\"></a>How to add existing attributes to the release filter</h4>\r\n\r\n<p>Similar to Extended Attributes,&nbsp;if you have a requirement to add an existing field in the available attributes section, follow the steps below. The only difference between the Release and Prioritization templates is that in the Release template, AvailableEntityId is parentOrderLine and in the Prioritization template, AvailableEntityId is orderLine. This section can be used to add attributes to any config filters which use the rules framework.</p>\r\n\r\n<div class=\"tip\"><strong>Note:</strong><br>\r\n• Not all existing attributes can be added to filters<br>\r\n• Base only supports criteria for entities that are at the order level and data type should not be a list. For example, order notes are not supported as a filter as they are a list.<br>\r\n• If you want to use a value that is inside a list but not part of the base filters, you will need to duplicate it into an extended attribute and use that extended attribute in the filter.&nbsp;</div>\r\n\r\n<ol>\r\n\t<li>Create an Available Entity called Return Type</li>\r\n</ol>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">API</th>\r\n\t\t\t<th scope=\"col\">{{url}}/order/api/rules/availableEntity/save</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>HTTP Method</td>\r\n\t\t\t<td>POST</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Token to be used</td>\r\n\t\t\t<td>SystemAdmin Token</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Content-Type</td>\r\n\t\t\t<td>application/json</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Request Body</td>\r\n\t\t\t<td>\r\n\t\t\t<div class=\"computer_code\">{<br>\r\n\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;\"AvailableEntityId\": \"ReturnType\",<br>\r\n\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;\"EntityLabel\": \"ReturnType\",<br>\r\n\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;\"Translations\": {<br>\r\n\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"en\": {<br>\r\n\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"EntityLabel\": \"ReturnType\"<br>\r\n\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n\t\t\t}</div>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<ol start=\"2\">\r\n\t<li>Create an Available Attribute called ReturnType. This sample is given for the Prioritization template, and for the Release template, replace AvailableEntityId as parentOrderLine.</li>\r\n</ol>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">API</th>\r\n\t\t\t<th scope=\"col\">{{url}}/order/api/rules/availableAttribute/save</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>HTTP Method</td>\r\n\t\t\t<td>POST</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Token to be used</td>\r\n\t\t\t<td>SystemAdmin Token</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Content-Type</td>\r\n\t\t\t<td>application/json</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Request Body</td>\r\n\t\t\t<td>\r\n\t\t\t<div class=\"computer_code\">{<br>\r\n\t\t\t&nbsp; &nbsp; \"AvailableEntityId\": \"orderLine\",<br>\r\n\t\t\t&nbsp; &nbsp; \"AttributeLabel\": \"ReturnType\",<br>\r\n\t\t\t&nbsp; &nbsp; \"AttributeDataType\": {<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; \"AttributeDataTypeId\": \"object\"<br>\r\n\t\t\t&nbsp; &nbsp; },<br>\r\n\t\t\t&nbsp; &nbsp; \"AvailableAttributeId\": \"returnType\",<br>\r\n\t\t\t&nbsp; &nbsp; \"Translations\": {<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; \"en\": {<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"AttributeLabel\": \"ReturnType\"<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; }<br>\r\n\t\t\t&nbsp; &nbsp; }<br>\r\n\t\t\t}</div>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<ol start=\"3\">\r\n\t<li>Create an Available Attribute called ReturnTypeId</li>\r\n</ol>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">API</th>\r\n\t\t\t<th scope=\"col\">{{url}}/order/api/rules/availableAttribute/save</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>HTTP Method</td>\r\n\t\t\t<td>POST</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Token to be used</td>\r\n\t\t\t<td>SystemAdmin Token</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Content-Type</td>\r\n\t\t\t<td>application/json</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Request Body</td>\r\n\t\t\t<td>\r\n\t\t\t<div class=\"computer_code\">{<br>\r\n\t\t\t&nbsp; &nbsp; \"AvailableEntityId\": \"returnType\",<br>\r\n\t\t\t&nbsp; &nbsp; \"Process\": null,<br>\r\n\t\t\t&nbsp; &nbsp; \"AttributeLabel\": \"Return Type ID\",<br>\r\n\t\t\t&nbsp; &nbsp; \"AttributeDataType\": {<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; \"AttributeDataTypeId\": \"text\"<br>\r\n\t\t\t&nbsp; &nbsp; },<br>\r\n\t\t\t&nbsp; &nbsp; \"AvailableAttributeId\": \"returnTypeId\",<br>\r\n\t\t\t&nbsp; &nbsp; \"isInUse\": true,<br>\r\n\t\t\t&nbsp; &nbsp; \"Translations\": {<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; \"en\": {<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"AttributeLabel\": \"Return Type ID\"<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; }<br>\r\n\t\t\t&nbsp; &nbsp; }<br>\r\n\t\t\t}</div>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4><a name=\"how-to-add-extended-attributes-to-the-release-filter\" id=\"how-to-add-extended-attributes-to-the-release-filter\"></a>How to add extended attributes to the release filter</h4>\r\n\r\n<ol>\r\n\t<li>\r\n\t<p>Create an Available Entity called \"Extended\"</p>\r\n\t</li>\r\n</ol>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">API</th>\r\n\t\t\t<th scope=\"col\">{{url}}/order/api/rules/availableEntity/save</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>HTTP Method</td>\r\n\t\t\t<td>POST</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Token to be used</td>\r\n\t\t\t<td>SystemAdmin Token</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Content-Type</td>\r\n\t\t\t<td>application/json</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Request Body</td>\r\n\t\t\t<td>\r\n\t\t\t<div class=\"computer_code\">{<br>\r\n\t\t\t&nbsp; &nbsp; \"AvailableEntityId\": \"extended\",<br>\r\n\t\t\t&nbsp; &nbsp; \"EntityLabel\": \"Extended\",<br>\r\n\t\t\t&nbsp; &nbsp; \"Translations\": {<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; \"en\": {<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"EntityLabel\": \"Extended\"<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; }<br>\r\n\t\t\t&nbsp; &nbsp; }<br>\r\n\t\t\t}</div>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol start=\"2\">\r\n\t<li>Create an Available Attribute called \"Extended\" and apply it to the appropriate entity. Refer to one of the following request bodies depending on where your extended attribute has been applied:</li>\r\n</ol>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">API</th>\r\n\t\t\t<th scope=\"col\">{{url}}/order/api/rules/availableAttribute/save</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>HTTP Method</td>\r\n\t\t\t<td>POST</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Token to be used</td>\r\n\t\t\t<td>SystemAdmin Token</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Content-Type</td>\r\n\t\t\t<td>application/json</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Request Body:</p>\r\n\r\n\t\t\t<p><strong>Order Attribute</strong></p>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<div class=\"computer_code\">{<br>\r\n\t\t\t&nbsp; &nbsp; \"AvailableEntityId\": \"parentOrder\",<br>\r\n\t\t\t&nbsp; &nbsp; \"AttributeLabel\": \"Extended\",<br>\r\n\t\t\t&nbsp; &nbsp; \"AttributeDataType\": {<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; \"AttributeDataTypeId\": \"object\"<br>\r\n\t\t\t&nbsp; &nbsp; },<br>\r\n\t\t\t&nbsp; &nbsp; \"AvailableAttributeId\": \"extended\",<br>\r\n\t\t\t&nbsp; &nbsp; \"Translations\": {<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; \"en\": {<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"AttributeLabel\": \"Extended\"<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; }<br>\r\n\t\t\t&nbsp; &nbsp; }<br>\r\n\t\t\t}</div>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Request Body:</p>\r\n\r\n\t\t\t<p><strong>Order Line Attribute</strong></p>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<div class=\"computer_code\">{<br>\r\n\t\t\t&nbsp; &nbsp; \"AvailableEntityId\": \"parentOrderLine\",<br>\r\n\t\t\t&nbsp; &nbsp; \"AttributeLabel\": \"Extended\",<br>\r\n\t\t\t&nbsp; &nbsp; \"AttributeDataType\": {<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; \"AttributeDataTypeId\": \"object\"<br>\r\n\t\t\t&nbsp; &nbsp; },<br>\r\n\t\t\t&nbsp; &nbsp; \"AvailableAttributeId\": \"extended\",<br>\r\n\t\t\t&nbsp; &nbsp; \"Translations\": {<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; \"en\": {<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"AttributeLabel\": \"Extended\"<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; }<br>\r\n\t\t\t&nbsp; &nbsp; }<br>\r\n\t\t\t}</div>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Request Body:</p>\r\n\r\n\t\t\t<p><strong>Allocation&nbsp;Attribute</strong></p>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<div class=\"computer_code\">{<br>\r\n\t\t\t&nbsp; &nbsp; \"AvailableEntityId\": \"allocation\",<br>\r\n\t\t\t&nbsp; &nbsp; \"AttributeLabel\": \"Extended\",<br>\r\n\t\t\t&nbsp; &nbsp; \"AttributeDataType\": {<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; \"AttributeDataTypeId\": \"object\"<br>\r\n\t\t\t&nbsp; &nbsp; },<br>\r\n\t\t\t&nbsp; &nbsp; \"AvailableAttributeId\": \"extended\",<br>\r\n\t\t\t&nbsp; &nbsp; \"Translations\": {<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; \"en\": {<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"AttributeLabel\": \"Extended\"<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; }<br>\r\n\t\t\t&nbsp; &nbsp; }<br>\r\n\t\t\t}</div>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol start=\"3\">\r\n\t<li>Create an Available Attribute for your extended attribute. For example,&nbsp;\"IsReleasable\".</li>\r\n</ol>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">API</th>\r\n\t\t\t<th scope=\"col\">{{url}}/order/api/rules/availableAttribute/save</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>HTTP Method</td>\r\n\t\t\t<td>POST</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Token to be used</td>\r\n\t\t\t<td>SystemAdmin Token</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Content-Type</td>\r\n\t\t\t<td>application/json</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Request Body</td>\r\n\t\t\t<td>\r\n\t\t\t<div class=\"computer_code\">{<br>\r\n\t\t\t&nbsp; &nbsp; \"AvailableEntityId\": \"extended\",<br>\r\n\t\t\t&nbsp; &nbsp; \"AttributeLabel\": \"Is Releasable\",<br>\r\n\t\t\t&nbsp; &nbsp; \"AttributeDataType\": {<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; \"AttributeDataTypeId\": \"boolean\"<br>\r\n\t\t\t&nbsp; &nbsp; },<br>\r\n\t\t\t&nbsp; &nbsp; \"AvailableAttributeId\": \"IsReleasable\",<br>\r\n\t\t\t&nbsp; &nbsp; \"Translations\": {<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; \"en\": {<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"AttributeLabel\": \"Is Releasable\"<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; }<br>\r\n\t\t\t&nbsp; &nbsp; }<br>\r\n\t\t\t}</div>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div class=\"warning\">The Extended section of the UI has a limitation and can only display attributes from either the Order or from the Order Line. If you want to display extended attributes from both Order and Order Line entities, then there is a workaround:</div>\r\n\r\n<div class=\"warning\">You can create an available attribute with availableAttributeId such as \"parentOrder.extended.isCancelled\", where the attribute Id contains the exact path of the attribute. This attribute will be displayed within the Order entity (not the Extended section), so you can name the label with an indicator like \"Extended Cancelled\" if you want to better identify it.</div>\r\n\r\n<p>Refer to <a href=\"https://omni.helpdocsonline.com/release-grouping-and-creation$how-to-add-extended-attributes-in-the-release-filter-for-both-order-and-order-line-level\">How to add extended attributes in the release filter for both Order and OrderLine level&nbsp;</a>for further details.</p>\r\n\r\n<h4><a name=\"how-to-add-extended-attributes-in-the-release-filter-for-both-order-and-order-line-level\" id=\"how-to-add-extended-attributes-in-the-release-filter-for-both-order-and-order-line-level\"></a>How to add extended attributes in the release filter for both order and order line level</h4>\r\n\r\n<ol>\r\n\t<li>Follow steps 1, 2, and 3 from <a href=\"https://omni.helpdocsonline.com/release-grouping-and-creation$how-to-add-extended-attributes-in-the-release-filter-nbsp\">How to add extended attributes</a> section&nbsp;for the order line extended attribute.</li>\r\n\t<li>For the order extended attribute, assume you have \"EnforceFillRate\" extended property on the Order header level.&nbsp;</li>\r\n</ol>\r\n\r\n<div class=\"computer_code\">{<br>\r\n&nbsp; &nbsp; \"OrderId\": \"Order1\",<br>\r\n&nbsp; &nbsp; \"Extended\": {<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; \"EnforceFillRate\": \"Value1\"<br>\r\n&nbsp; &nbsp; }<br>\r\n}</div>\r\n\r\n<ol start=\"3\">\r\n\t<li>Create an Available Attribute called Extended under the \"parentOrder\" entity.</li>\r\n</ol>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">API</th>\r\n\t\t\t<th scope=\"col\">{{url}}/order/api/rules/availableAttribute/save</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>HTTP Method</td>\r\n\t\t\t<td>POST</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Token to be used</td>\r\n\t\t\t<td>SystemAdmin Token</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Content-Type</td>\r\n\t\t\t<td>application/json</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Request Body</td>\r\n\t\t\t<td>\r\n\t\t\t<div class=\"computer_code\">{<br>\r\n\t\t\t&nbsp; &nbsp; \"AvailableEntityId\": \"parentOrder\",<br>\r\n\t\t\t&nbsp; &nbsp; \"AttributeLabel\": \"Extended\",<br>\r\n\t\t\t&nbsp; &nbsp; \"AttributeDataType\": {<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; \"AttributeDataTypeId\": \"object\"<br>\r\n\t\t\t&nbsp; &nbsp; },<br>\r\n\t\t\t&nbsp; &nbsp; \"AvailableAttributeId\": \"extended\",<br>\r\n\t\t\t&nbsp; &nbsp; \"Translations\": {<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; \"en\": {<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"AttributeLabel\": \"Extended\"<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; }<br>\r\n\t\t\t&nbsp; &nbsp; }<br>\r\n\t\t\t}</div>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol start=\"4\">\r\n\t<li>Create an Available Attribute, for example, \"EnforceFillRate\" under the extended entity</li>\r\n</ol>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">API</th>\r\n\t\t\t<th scope=\"col\">{{url}}/order/api/rules/availableAttribute/save</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>HTTP Method</td>\r\n\t\t\t<td>POST</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Token to be used</td>\r\n\t\t\t<td>SystemAdmin Token</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Content-Type</td>\r\n\t\t\t<td>application/json</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Request Body</td>\r\n\t\t\t<td>\r\n\t\t\t<div class=\"computer_code\">{<br>\r\n\t\t\t&nbsp; &nbsp; \"AvailableEntityId\": \"extended\",<br>\r\n\t\t\t&nbsp; &nbsp; \"AttributeLabel\": \"EnforceFillRate\",<br>\r\n\t\t\t&nbsp; &nbsp; \"AttributeDataType\": {<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; \"AttributeDataTypeId\": \"text\"<br>\r\n\t\t\t&nbsp; &nbsp; },<br>\r\n\t\t\t&nbsp; &nbsp; \"AvailableAttributeId\": \"EnforceFillRate\",<br>\r\n\t\t\t&nbsp; &nbsp; \"Translations\": {<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; \"en\": {<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"AttributeLabel\": \"EnforceFillRate\"<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; }<br>\r\n\t\t\t&nbsp; &nbsp; }<br>\r\n\t\t\t}</div>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol start=\"5\">\r\n\t<li>Create the same Available Attribute under parentOrder</li>\r\n</ol>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">API</th>\r\n\t\t\t<th scope=\"col\">{{url}}/order/api/rules/availableAttribute/save</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>HTTP Method</td>\r\n\t\t\t<td>POST</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Token to be used</td>\r\n\t\t\t<td>SystemAdmin Token</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Content-Type</td>\r\n\t\t\t<td>application/json</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Request Body</td>\r\n\t\t\t<td>\r\n\t\t\t<div class=\"computer_code\">{<br>\r\n\t\t\t&nbsp; &nbsp; \"AvailableEntityId\": \"parentOrder\",<br>\r\n\t\t\t&nbsp; &nbsp; \"AttributeLabel\": \"EnforceFillRate\",<br>\r\n\t\t\t&nbsp; &nbsp; \"AttributeDataType\": {<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; \"AttributeDataTypeId\": \"text\"<br>\r\n\t\t\t&nbsp; &nbsp; },<br>\r\n\t\t\t&nbsp; &nbsp; \"AvailableAttributeId\": \"extended.EnforceFillRate\",<br>\r\n\t\t\t&nbsp; &nbsp; \"Translations\": {<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; \"en\": {<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"AttributeLabel\": \"EnforceFillRate\"<br>\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; }<br>\r\n\t\t\t&nbsp; &nbsp; }<br>\r\n\t\t\t}</div>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<div class=\"tip\"><strong>Note</strong>: The reason only Order level extended values need to be added this way is because the Extended section on the ReleaseConfig UI depicts the parentOrderLine extended attributes only. So you will find the line level attribute under the extended section and the order level extended attribute under the Order section. Make sure you have appropriate labels for the same.</div>\r\n\r\n<div class=\"tip\">When the condition is formed as \"parentOrder.extended.EnforceFillRate\", rules FW looks for the relationship between 'EnforceFillRate' and 'extended' AND 'extended' and 'parentOrder'. Hence, steps 3 and 4 are important and cannot be missed.</div>\r\n\r\n<h4><a name=\"how-to-add-extended-attribute-to-an-existing-entity\" id=\"how-to-add-extended-attribute-to-an-existing-entity\"></a>How to add extended attribute to an existing entity</h4>\r\n\r\n<p>{url}}/order/api/rules/availableEntity/save</p>\r\n\r\n<div class=\"computer_code\">{<br>\r\n&nbsp; &nbsp; \"AvailableEntityId\": \"orderLinePromisingInfo\",<br>\r\n&nbsp; &nbsp; \"EntityLabel\": \"OrderLinePromisingInfo\",<br>\r\n&nbsp; &nbsp; \"EntityName\": \"OrderLinePromisingInfo\"<br>\r\n}</div>\r\n\r\n<p>{{url}}/order/api/rules/availableAttribute/save</p>\r\n\r\n<div class=\"computer_code\">{<br>\r\n&nbsp; &nbsp; \"AttributeLabel\": \"OrderLinePromisingInfo\",<br>\r\n&nbsp; &nbsp; \"AvailableEntityId\": \"parentOrderLine\",<br>\r\n&nbsp; &nbsp; \"AttributeDataType\": {<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; \"AttributeDataTypeId\": \"object\"<br>\r\n&nbsp; &nbsp; },<br>\r\n&nbsp; &nbsp; \"AvailableAttributeId\": \"orderLinePromisingInfo\"<br>\r\n}</div>\r\n\r\n<p>{{url}}/order/api/rules/availableAttribute/save</p>\r\n\r\n<div class=\"computer_code\">{<br>\r\n&nbsp; &nbsp; \"AvailableEntityId\": \"orderLinePromisingInfo\",<br>\r\n&nbsp; &nbsp; \"AttributeLabel\": \"ExternalRouteId\",<br>\r\n&nbsp; &nbsp; \"AttributeDataType\": {<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; \"AttributeDataTypeId\": \"text\"<br>\r\n&nbsp; &nbsp; },<br>\r\n&nbsp; &nbsp; \"AvailableAttributeId\": \"ExternalRouteId\"<br>\r\n}</div>\r\n\r\n<p>It will evaluate conditions as something like the below.</p>\r\n\r\n<p>allocation.parentOrderLine.orderLinePromisingInfo.ExternalRouteId = \\\"Route\\\"\"</p>\r\n\r\n<h4><a name=\"triggering-release-when-holds-are-removed\" id=\"triggering-release-when-holds-are-removed\"></a>Triggering Release when Holds are Removed</h4>\r\n\r\n<p><u>Requirement:</u> How to trigger release when an order or order line is unheld</p>\r\n\r\n<p>If the order and order line \"OnHold\" are conﬁgured as false in the release template ﬁlter, then the order/order line which are on hold will not be released. To release such orders when the hold is removed, the user should configure to resubmit the pipeline.</p>\r\n\r\n<p>For example, if an allocated order is on hold for any reason, including fraud hold, address veriﬁcation failure, etc., then the order should be released when the hold is removed (assuming the remorse period has ended). To accomplish this, conﬁgure the Modiﬁcation Rules in the Order Conﬁguration to include \"ResubmitPipeline\" = true for ModTypeId\": \"OrderLine::OrderLineHold::Resolve. Additionally, ensure that the system holding and unholding the order is using the OrderHold&nbsp;and OrderLineHold entities in addition to the IsOnHold boolean ﬁeld.</p>\r\n\r\n<p>For example, to hold an order for AVS failure:</p>\r\n\r\n<div class=\"computer_code\">\"OrderHold\": [{<br>\r\n\"HoldTypeId\": \"AddressVerificationFailed\", \"StatusId\": \"1000\"<br>\r\n}],</div>\r\n\r\n<p>To unhold the order:</p>\r\n\r\n<div class=\"computer_code\">\"OrderHold\": [{<br>\r\n\"HoldTypeId\": \"AddressVerificationFailed\", \"StatusId\": \"2000\"<br>\r\n}],</div>\r\n\r\n<h4><a name=\"consolidate-releases-when-using-merge-shipment\" id=\"consolidate-releases-when-using-merge-shipment\"></a><a id=\"Consolidate Releases when using merge shipment\" name=\"Consolidate Releases when using merge shipment\"></a>Consolidate Releases when using Merge Shipment</h4>\r\n\r\n<p><u><strong>Requirement:</strong></u></p>\r\n\r\n<p>A customer orders two items, and one is coming from a vendor (who merges at the DC)&nbsp;and the other from the DC. Both items should be shipped together to the customer, so the retailer wants to consolidate the items at the DC before shipping to the customer.</p>\r\n\r\n<ul>\r\n\t<li>Allocations:\r\n\t<ul>\r\n\t\t<li>Allocation 1: DC &gt; Customer Home</li>\r\n\t\t<li>Allocation 2: Vendor &gt; DC (merge leg)</li>\r\n\t\t<li>Allocation 3: DC &gt; Customer Home (second leg of allocation 2)</li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<p>When allocation 2 ships, the retailer wants allocation 3 and allocation 1 to be included in a single release to the DC, so that they can ship together</p>\r\n\r\n<p><u><strong>Implementation:</strong></u></p>\r\n\r\n<p>To accomplish this, configure the following:</p>\r\n\r\n<p>1. Enable 'minimize shipments'&nbsp;in the release template</p>\r\n\r\n<p>2. Add a new service which ensures that merge legs are released together with non-merge legs. Without this configuration, the default service will release the merged items on their own as they are received at the DC, without consolidating them with the non-merge items.</p>\r\n\r\n<div class=\"computer_code\">POST: url/order/api/ServiceDefinition/serviceDefinition/save</div>\r\n\r\n<div class=\"computer_code\"><code>{<br>\r\n&nbsp;&nbsp;&nbsp; \"ComponentId\": \"Order\",<br>\r\n&nbsp;&nbsp;&nbsp; \"ServiceId\": \"&lt;customercode&gt;ReleaseOrderOnAllocStatusChange\",<br>\r\n&nbsp;&nbsp;&nbsp; \"BeanName\": \"releaseMapServiceImpl\",<br>\r\n&nbsp;&nbsp;&nbsp; \"BusinessMethod\": \"releaseOrderForAllocationList\",<br>\r\n&nbsp;&nbsp;&nbsp; \"Url\": null<br>\r\n}</code></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div class=\"computer_code\">POST: url/order/api/ServiceDefinition/extensionHandler/save</div>\r\n\r\n<div class=\"computer_code\"><code>{<br>\r\n&nbsp;&nbsp;&nbsp; \"ExtensionHandlerId\": \"AllocationListStatusChangeReleaseExtensionHandler\",<br>\r\n&nbsp;&nbsp;&nbsp; \"ProfileId\": \"dummyOrg\",<br>\r\n&nbsp;&nbsp;&nbsp; \"ExtensionhandlerRoute\": [{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"ExtensionhandlerRouteId\": \"AllocationListStatusChangeExtensionHandlerRouteId\",<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"Source\": \"ON_EVENT\",<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"Destination\": \"&lt;customercode&gt;ReleaseOrderOnAllocStatusChange\",<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"IsSync\": \"true\"<br>\r\n&nbsp;&nbsp;&nbsp; }],<br>\r\n&nbsp;&nbsp;&nbsp; \"RegisteredExtensionPoints\": [{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"ExtensionPointId\": \"Order:Allocation:Event:OnMultiplePickUpStatusChange\",<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"EntryCondition\": null<br>\r\n&nbsp;&nbsp;&nbsp; }]<br>\r\n}</code></div>\r\n\r\n<h4><a name=\"how-to-restrict-manhattan-active®-omni-from-generating-its-own-fulfillment-objects-for-store-orders\" id=\"how-to-restrict-manhattan-active®-omni-from-generating-its-own-fulfillment-objects-for-store-orders\"></a>How to restrict Manhattan Active® Omni from generating its own fulfillment objects for store orders</h4>\r\n\r\n<p><strong>Requirement</strong>: How to restrict Manhattan Active® Omni from generating its own fulfillment objects for store orders when a third party fulfillment object is bridged with Active Omni</p>\r\n\r\n<p><strong>Implementation</strong>:</p>\r\n\r\n<ol>\r\n\t<li>Reroute release to an ExtPointId intended for an external service</li>\r\n\t<li>Reroute the ExtPointToMsgPoint to an ObMsgType intended for an external service</li>\r\n\t<li>Reroute the ObMsgType to an RMQ consumed by XINT for GCP, rather than Fulfillment</li>\r\n</ol>\r\n\r\n<h4><a name=\"how-to-consolidate-units-of-the-same-item-on-multiple-release-lines\" id=\"how-to-consolidate-units-of-the-same-item-on-multiple-release-lines\"></a>How to consolidate units of the same item on multiple release lines</h4>\r\n\r\n<p>Occasionally, there may be units on a particular order line that are split into multiple allocations. For example, if inventory is available at a particular location for some units at time T1, and additional inventory becomes available for the remaining units at the same location at time T2. In this case, there will be two allocations for the same item and location combination. If a 3rd party fulfillment system cannot process a release with multiple release lines containing the same item, the following flow can be implemented.</p>\r\n\r\n<ol>\r\n\t<li>Implement the \"PostAllocationCorrectionForContAllocation\" user exit</li>\r\n\t<li>Update the inventory reservation to combine the units with the same item + location combination and delete the extra reservation detail</li>\r\n\t<li>Update the order allocation&nbsp;to combine the units with the same item + location combination and delete the extra order allocation</li>\r\n</ol>\r\n\r\n<h4><a name=\"related-article-s\" id=\"related-article-s\"></a>Related Article(s)</h4>\r\n\r\n<div class=\"info\"><ul class=\"related-articles\"><li><a href=\"/order-release-troubleshooting\" hqid=\"2588629\">Troubleshooting</a></li><li><a href=\"/order-release-rest-apis-and-user-exits\" hqid=\"2588628\">REST APIs and User Exits</a></li><li><a href=\"/massrelease\" hqid=\"2846683\">Mass Release</a></li><li><a href=\"/publish-release\" hqid=\"2588627\">Publish Release</a></li><li><a href=\"/how-release-works\" hqid=\"2588625\">How Release Works</a></li><li><a href=\"/order-release-overview\" hqid=\"2588624\">Overview</a></li></ul></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n\t  </div>\r\n </div>\r\n <div id=\"ui-page-fb-wrap\"></div>\r\n <div class=\"hiq-footer-wrap\">\r\n    \r\n                \r\n  </div>\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n",
  "content_length": 61686,
  "scraped_at": "2025-08-09T21:57:23.091833",
  "content_clean": "Home ››Manhattan Active® Omni››Order Management››Process & Configuration Guides››Order Processing››Order Fulfillment››Order Release ››Release Grouping and Creation Release Grouping and Creation Previous I Next Regardless of which of the three methods of release is used, the release service works by picking allocations, grouping them into releases based on origin, destination, and other parameters, and creating releases. Release GroupingAbility to form Release Group based on an order line attribute - ReleaseGroupIdRelease CreationConfigurationDemand TypeOptional Release GroupingHold the release until all the units on the Order are allocatedHold the release until the units allocated across all locations are eligibleGrouping OverrideHold the release until all the units are eligible for the final shipment (Minimize Shipment)Fill RatesFill Rates ConfigurationImplementation FlavorsHow to add existing attributes to the release filterHow to add extended attributes to the release filterHow to add extended attributes in the release filter for both order and order line levelHow to add extended attribute to an existing entityTriggering Release when Holds are RemovedConsolidate Releases when using Merge ShipmentHow to restrict Manhattan Active® Omni from generating its own fulfillment objects for store ordersHow to consolidate units of the same item on multiple release linesRelated Article(s) Release Grouping Allocations are grouped into releases based on attributes which logically split allocations into separate shipments. For example, WM packs and ships all quantities from an order which are shipping to the same destination together, but if some units are shipping to a different destination, then they are packed and shipped separately. The following allocation and order line attributes are used to group allocations into a release. For example, if two allocations on a single order have all attributes in common except for ship via, then two releases are created. This release grouping logic is inherent and is not configurable. Allocation attributes used for grouping: Allocation Attributes Order Line Attributes Order Id Ship From Location Id Ship To Location Id Ship To Address First Name Ship To Address Last Name Ship To Address City Ship To Address Country Ship To Address Postal Code Ship To Address State Carrier Code Mode Service Level Code Ship Via Latest Ship Date Order Id Delivery Method Delivery Method Sub Type Fulfillment Group Id Ship From Location Id Ship Via Release Group Id Primary Pickup Detail First Name Primary Pickup Detail Last Name Primary Pickup Detail Email Primary Pickup Detail Phone AllocationType Ability to form Release Group based on an order line attribute - ReleaseGroupId During order creation, ReleaseGroupId can be populated for every order line. If populated, Release Group will be formed as per ReleaseGroupId sent on the order line. This attribute is an additional attribute along with existing allocation and order line attributes used to group allocations into a release. For instance, if two allocations on a single order have all attributes in common but ReleaseGroupId is different, then two releases will be created. Refer to Optional Release Grouping section for more details. Release Creation After allocations are grouped into releases, the release entity is created. One release line will exist for each order line included on the release. The release and release line attributes are populated based on the following logic. Release Attribute Mapping Release Id Unique identifier of the release For each separate release, a unique release ID is generated. See the list above for attributes which result in separate releases being created. Release IDs are unique across orders, because this is the unique key that fulfillment systems will use to send updates to Active® Omni. The release ID is a concatenation of the order ID and a 1 for the first release, 2 for the second, and so on. For example, an order with order ID Order123 with a single release will have the release ID of Order1231. If this order had two quantities allocated to different locations, then there would be two release IDs, Order1231 and Order1232. Ship From Location Id Allocation.ShipFromLocationId Ship To Location Id Allocation.ShipToLocationId (only populated for pick up in store, ship to store, or merge scenarios) Ship Via Id Allocation.ShipViaId Service Level Code Allocation.ServiceLevelCode Carrier Code Allocation.CarrierCode Release Type Type of release. Currently, defaults to CustomerOrder. Destination Action Used when the delivery method is ship to store to differentiate between merge and pickup orders Delivery Method Id OrderLine.DeliveryMethod Order Id Order.OrderId Effective Rank The rank of the release is calculated as the highest rank of all release lines. The rank of the release line comes from the rank of the order lines that are computed during the optional prioritization step. Address Id orderLine.addressId - populated only if Update of Partially Released Lines feature is enabled for order lines with delivery method ship to address and destination action merge at the time of creating the release. Release Line Attribute Mapping Release Line Id Unique identifier of the release line. Release line IDs are next-up numbers beginning with 1, 2, … n, n + 1. Release line IDs are unique within an order, but are not unique across orders. For example, if an order had three items grouped into a single release, meaning all allocation attributes are the same, then the release line IDs will be 1, 2, and 3. Allocation Id Allocation.AllocationId Item Id Allocation.ItemId Quantity Quantity being released UOM Allocation.UOM Effective Rank OrderLine.Effective Rank Order Line Id OrderLine.OrderLineId Release Dependency Id If the release destination action is \"Delivery\" and order line delivery method = ship to address, this attribute is mapped to Release Id of the merge leg, that is the release for the order line with Destination Action = merge from which the current delivery leg release was generated. Configuration Release Configuration UI is used for configuring release rules. Demand Type Each Release Configuration must specify a Demand Type, which can be set to either 'Allocation' or 'Allocation and Future.' The Demand Type indicates what type of supply a unit must be allocated against in order for the unit to be eligible for release. For example, let's say Demand Type is set to 'Allocation.' An order is placed with two lines where order line 1 is allocated to On Order inventory and order line 2 is allocated to On Hand Available inventory, only order line 2 will be eligible for release. If Demand Type was set to 'Allocation and Future' for the same order, then both order line 1 and 2 would be eligible for release. Because supply type is not saved on the allocation entity in the order, the release service determines the supply type via the reservation request match records in the inventory component. If the supply type is eligible for release, then a release is created. If the supply type is not eligible for release, then the allocation is not released. The allocation is released when the supply type becomes eligible for release. For example, consider two demand types: “Allocation” that includes on hand supply types “Allocation and Future” that includes on hand, in-transit, and future supply types An order config is configured with demand type \"Allocation and Future\", and a corresponding release configuration is configured with demand type \"Allocation\". This is so the business can reserve in-transit and future inventory, but only release orders to the distribution center once inventory is on hand. If an order line uses this order config and allocates against an in-transit supply type, then the allocation fails to release, because in-transit supply is not eligible in the release configuration. Once the in-transit inventory is received and becomes on hand, then the allocation is released. Examples: Example 1: An order is created with 3 lines. All quantities are allocated but release demand type on one of the allocation supply does not matchAn order is created with 3 lines. All quantities are allocated but release demand type on one of the allocation supply does not match. Result: All allocations on order are eligible for release because at least one line meets filter criteria. Lines with same origin facility are grouped together. Two releases are created: Release1: Allocations for DC1: A1, A3, A5 Release2: Allocations for DC2: A2 Optional Release Grouping Additional optional configurations are available to hold the release of units until certain qualifications are met. These are called \"Consolidation Constraints\" in the UI and are listed below. Hold the release until all the units are allocated for the Order Hold the release until the units allocated across all locations are eligible By Fulfillment Group Hold the release until all the units are eligible for the final shipment (Minimize Shipment) These parameters can be configured in combination with eachother and are found in the Release configuration UI. Hold the release until all the units on the Order are allocated If configured at the ‘Order’ level, then no units are released until every unit on the order is allocated (regardless of Demand Type the units are allocated to). If configured in combination with Fill Rate, then Fill Rate takes precedence for the first release, while the second and final release will not occur until all remaining units on the order are allocated (regardless of Demand Type). This feature can also be enabled at the Customer level using the 'Release Grouping Strategy.' If 'Release Grouping Strategy' is configured, then it takes precedence over this Release Configuration consolidation constraint. Examples: Example 1: An order is created with 3 lines. All quantities are allocated. Group by order is selected and release demand type matches allocation supply typeResult: All allocations on order are eligible for release because at least one line meets filter criteria. Lines with same origin facility are grouped together. Two releases are created: Release 1: Allocations for DC1: A1, A3, A5 Release 2: Allocations for DC2: A2, A4 Example 2:  An order is created with 3 lines. Allocations are created for all but release demand type does not match allocation supply type. Group by order is selectedResult: No release is created until the allocated unit supply type matches the release demand type supply type. Example 3:  An order is created with 3 lines. Allocations are created for all but 1 unit. Group by order is selectedResult: Not all quantities on the order are allocated, so no release is created until the unit is allocated. Hold the release until the units allocated across all locations are eligible If configured ‘By Fulfillment Group’, then no units are released in a given Fulfillment Group until every allocated unit in a Fulfillment Group is allocated to the eligible supply as indicated by the Demand Type configured for the same Release Configuration. In case of merge scenarios, hold the release when shipping the first leg(s) of an order. For instance: if an order is allocated against DC1 and DC2, then wait until all lines are allocated against available soon supply before releasing the first legs to the DCs. When this configuration is enabled, \"Hold the release until all the units are eligible for the final shipment (Minimize Shipment)” is also applied by default. If configured in combination with Fill Rate, then Fill Rate takes precedence. This feature can also be enabled at the Customer level using the 'Deliver Together Strategy.' If 'Deliver Together Strategy' is configured in Customer, then it takes precedence over this Release Configuration consolidation constraint. \"Fulfillment Group\" is a combination of \"deliveryMethod\" , \"shipToLocationId\", \"addressId\" and \"shippingMethod\" Below are the illustrations #1 Order is created with multiple lines allocated from DC1 and DC2. All lines belong to the same \"Fulfillment Group\". Order item Quantity Origin Location Allocated Quantity Allocated Supply Line 1 Door 1 DC1 1 On Hand = 1 Line 2 Window 4 DC1 4 On Order = 4 Line 3 Curtain 4 DC2 4 On Hand = 4 #2 Order is created with multiple lines allocated from DC1 and DC2 shipped to a consolidation HUB. All lines belong to same \"Fulfillment Group\". Order item Quantity Origin Location Merge Location Allocated Quantity (Origin Leg) Allocated Supply (Origin Leg) Line 1 Door 1 DC1 HUB 1 On Hand = 1 Line 2 Window 4 DC1 HUB 4 On Order  = 4 Line 3 Curtain 4 DC2 HUB 4 On Hand = 4 This constraint can achieve the following. Ensure all inventory being shipped to the customer from one or many locations is shipped or delivered at relatively the same time. Ensure no inventory is shipped to the Consolidation Hub until all the lines are on hand, regardless of where they are being fulfilled from. Also, ensure no inventory is shipped to the customer from Consolidation Hub until all lines are on hand, to minimize shipments from the Hub. Ensure Ship to Store lines from multiple locations and against future inventory arrive at the store at \"nearly the same time\". The 'Release Config Template' provides capability to group the release lines, however the rules can be overridden. Check Overriding Release Grouping Config for more details. Grouping Override To apply this consolidation constraint on all or few lines irrespective of Fulfillment Group, override value can be sent during order creation for order lines. Release Group will be formed as per \"ReleaseGroupId\" sent on order line. Hold the release until all the units are eligible for the final shipment (Minimize Shipment) If true, then no units are released for the final shipment leg until every allocated unit in a fulfillment group is allocated to inventory in the Demand Type configured in the Release Configuration. This config applies to the final leg of the shipment. If configured in combination with Fill Rate, then Fill Rate takes precedence. This feature can also be enabled at the Customer level using the 'Deliver Together Strategy.' If 'Deliver Together Strategy' is configured in Customer, then it takes precedence over this Release Configuration consolidation constraint. 'Deliver Together Strategy' applies to both merge and final shipment leg. In other words, Deliver Together Strategy in Customer is a combination of two release consolidation constraints: 'Hold the release until all the units are eligible for the final shipment' and 'Hold the release until the units allocated across all locations are eligible.' If any consolidation constraint is selected and ReleaseDemandType is configured as \"Allocation and Future\", then certain additional steps are needed to ensure that merge legs are released together with non-merge legs. Refer to \"Consolidate Releases when using Merge Shipment\". If configured in combination with Fill Rate, then Fill Rate takes precedence. This feature can also be enabled at the Customer level using the 'Deliver Together Strategy.' If 'Deliver Together Strategy' is configured in Customer, then it takes precedence over this Release Configuration consolidation constraint. Fill Rates The Fill Rate feature provides the ability to prevent any units from releasing until a certain percent of the units on the Order or Order Line are allocated against inventory indicated by the Demand Type. There are two possible Fill Rate strategies: 'Order' and 'Order Line.' The 'Order' strategy can be used if no units should get released until a certain percent of units across the entire order are allocated to inventory in the Demand Type. 'Order Line' strategy can be used if no units should get released until a certain percent of units on each Order Line are allocated against inventory in the Demand Type. For Order Line strategy, every single Order Line must meet the fill rate before any units on the order get released. There is a corresponding Fill Rates configuration at the Customer level which overrides the Fill Rate configuration at the Release Configuration. Fill Rates Configuration Fill Rate Strategy: Indicates whether the fill rate is honored at the order level or order line level. If Fill Rate Strategy is 'Order', no units are released until the fill rate is met, considering total units of the order across all lines. If Fill Rate Strategy is 'Order Line', no units are released until every line in the order meets the fill rate. 'FillRateType' and 'FillRateValue' must be populated as well for the Fill Rate feature to be honored. Fill Rate Type: Indicates the type of Fill Rate that should be used. For example, if Fill Rate Type is 'PercentUnits', then the 'FillRateValue' will represent the percent of units that must be allocated to releasable inventory before any units on the order are released. 'FillRateValue' and 'FillRateStrategy' must be populated as well for the Fill Rate feature to be honored. Fill Rate Threshold: Indicates the fill rate threshold. For example, if Fill Rate Type is 'PercentUnits', then the Fill Rate Value represents the percent of units that must be allocated to releasable inventory before any units on the order are released (if 70% is the fill rate, then populate Fill Rate Value as '70'). 'FillRateType' and 'FillRateStrategy' must be populated as well for the Fill Rate feature to be honored. Implementation Flavors How to add existing attributes to the release filter Similar to Extended Attributes, if you have a requirement to add an existing field in the available attributes section, follow the steps below. The only difference between the Release and Prioritization templates is that in the Release template, AvailableEntityId is parentOrderLine and in the Prioritization template, AvailableEntityId is orderLine. This section can be used to add attributes to any config filters which use the rules framework. Note: • Not all existing attributes can be added to filters • Base only supports criteria for entities that are at the order level and data type should not be a list. For example, order notes are not supported as a filter as they are a list. • If you want to use a value that is inside a list but not part of the base filters, you will need to duplicate it into an extended attribute and use that extended attribute in the filter. Create an Available Entity called Return Type API {{url}}/order/api/rules/availableEntity/save HTTP Method POST Token to be used SystemAdmin Token Content-Type application/json Request Body { \"AvailableEntityId\": \"ReturnType\", \"EntityLabel\": \"ReturnType\", \"Translations\": { \"en\": { \"EntityLabel\": \"ReturnType\" } } } Create an Available Attribute called ReturnType. This sample is given for the Prioritization template, and for the Release template, replace AvailableEntityId as parentOrderLine. API {{url}}/order/api/rules/availableAttribute/save HTTP Method POST Token to be used SystemAdmin Token Content-Type application/json Request Body { \"AvailableEntityId\": \"orderLine\", \"AttributeLabel\": \"ReturnType\", \"AttributeDataType\": { \"AttributeDataTypeId\": \"object\" }, \"AvailableAttributeId\": \"returnType\", \"Translations\": { \"en\": { \"AttributeLabel\": \"ReturnType\" } } } Create an Available Attribute called ReturnTypeId API {{url}}/order/api/rules/availableAttribute/save HTTP Method POST Token to be used SystemAdmin Token Content-Type application/json Request Body { \"AvailableEntityId\": \"returnType\", \"Process\": null, \"AttributeLabel\": \"Return Type ID\", \"AttributeDataType\": { \"AttributeDataTypeId\": \"text\" }, \"AvailableAttributeId\": \"returnTypeId\", \"isInUse\": true, \"Translations\": { \"en\": { \"AttributeLabel\": \"Return Type ID\" } } } How to add extended attributes to the release filter Create an Available Entity called \"Extended\" API {{url}}/order/api/rules/availableEntity/save HTTP Method POST Token to be used SystemAdmin Token Content-Type application/json Request Body { \"AvailableEntityId\": \"extended\", \"EntityLabel\": \"Extended\", \"Translations\": { \"en\": { \"EntityLabel\": \"Extended\" } } } Create an Available Attribute called \"Extended\" and apply it to the appropriate entity. Refer to one of the following request bodies depending on where your extended attribute has been applied: API {{url}}/order/api/rules/availableAttribute/save HTTP Method POST Token to be used SystemAdmin Token Content-Type application/json Request Body: Order Attribute { \"AvailableEntityId\": \"parentOrder\", \"AttributeLabel\": \"Extended\", \"AttributeDataType\": { \"AttributeDataTypeId\": \"object\" }, \"AvailableAttributeId\": \"extended\", \"Translations\": { \"en\": { \"AttributeLabel\": \"Extended\" } } } Request Body: Order Line Attribute { \"AvailableEntityId\": \"parentOrderLine\", \"AttributeLabel\": \"Extended\", \"AttributeDataType\": { \"AttributeDataTypeId\": \"object\" }, \"AvailableAttributeId\": \"extended\", \"Translations\": { \"en\": { \"AttributeLabel\": \"Extended\" } } } Request Body: Allocation Attribute { \"AvailableEntityId\": \"allocation\", \"AttributeLabel\": \"Extended\", \"AttributeDataType\": { \"AttributeDataTypeId\": \"object\" }, \"AvailableAttributeId\": \"extended\", \"Translations\": { \"en\": { \"AttributeLabel\": \"Extended\" } } } Create an Available Attribute for your extended attribute. For example, \"IsReleasable\". API {{url}}/order/api/rules/availableAttribute/save HTTP Method POST Token to be used SystemAdmin Token Content-Type application/json Request Body { \"AvailableEntityId\": \"extended\", \"AttributeLabel\": \"Is Releasable\", \"AttributeDataType\": { \"AttributeDataTypeId\": \"boolean\" }, \"AvailableAttributeId\": \"IsReleasable\", \"Translations\": { \"en\": { \"AttributeLabel\": \"Is Releasable\" } } } The Extended section of the UI has a limitation and can only display attributes from either the Order or from the Order Line. If you want to display extended attributes from both Order and Order Line entities, then there is a workaround: You can create an available attribute with availableAttributeId such as \"parentOrder.extended.isCancelled\", where the attribute Id contains the exact path of the attribute. This attribute will be displayed within the Order entity (not the Extended section), so you can name the label with an indicator like \"Extended Cancelled\" if you want to better identify it. Refer to How to add extended attributes in the release filter for both Order and OrderLine level for further details. How to add extended attributes in the release filter for both order and order line level Follow steps 1, 2, and 3 from How to add extended attributes section for the order line extended attribute. For the order extended attribute, assume you have \"EnforceFillRate\" extended property on the Order header level. { \"OrderId\": \"Order1\", \"Extended\": { \"EnforceFillRate\": \"Value1\" } } Create an Available Attribute called Extended under the \"parentOrder\" entity. API {{url}}/order/api/rules/availableAttribute/save HTTP Method POST Token to be used SystemAdmin Token Content-Type application/json Request Body { \"AvailableEntityId\": \"parentOrder\", \"AttributeLabel\": \"Extended\", \"AttributeDataType\": { \"AttributeDataTypeId\": \"object\" }, \"AvailableAttributeId\": \"extended\", \"Translations\": { \"en\": { \"AttributeLabel\": \"Extended\" } } } Create an Available Attribute, for example, \"EnforceFillRate\" under the extended entity API {{url}}/order/api/rules/availableAttribute/save HTTP Method POST Token to be used SystemAdmin Token Content-Type application/json Request Body { \"AvailableEntityId\": \"extended\", \"AttributeLabel\": \"EnforceFillRate\", \"AttributeDataType\": { \"AttributeDataTypeId\": \"text\" }, \"AvailableAttributeId\": \"EnforceFillRate\", \"Translations\": { \"en\": { \"AttributeLabel\": \"EnforceFillRate\" } } } Create the same Available Attribute under parentOrder API {{url}}/order/api/rules/availableAttribute/save HTTP Method POST Token to be used SystemAdmin Token Content-Type application/json Request Body { \"AvailableEntityId\": \"parentOrder\", \"AttributeLabel\": \"EnforceFillRate\", \"AttributeDataType\": { \"AttributeDataTypeId\": \"text\" }, \"AvailableAttributeId\": \"extended.EnforceFillRate\", \"Translations\": { \"en\": { \"AttributeLabel\": \"EnforceFillRate\" } } } Note: The reason only Order level extended values need to be added this way is because the Extended section on the ReleaseConfig UI depicts the parentOrderLine extended attributes only. So you will find the line level attribute under the extended section and the order level extended attribute under the Order section. Make sure you have appropriate labels for the same. When the condition is formed as \"parentOrder.extended.EnforceFillRate\", rules FW looks for the relationship between 'EnforceFillRate' and 'extended' AND 'extended' and 'parentOrder'. Hence, steps 3 and 4 are important and cannot be missed. How to add extended attribute to an existing entity {url}}/order/api/rules/availableEntity/save { \"AvailableEntityId\": \"orderLinePromisingInfo\", \"EntityLabel\": \"OrderLinePromisingInfo\", \"EntityName\": \"OrderLinePromisingInfo\" } {{url}}/order/api/rules/availableAttribute/save { \"AttributeLabel\": \"OrderLinePromisingInfo\", \"AvailableEntityId\": \"parentOrderLine\", \"AttributeDataType\": { \"AttributeDataTypeId\": \"object\" }, \"AvailableAttributeId\": \"orderLinePromisingInfo\" } {{url}}/order/api/rules/availableAttribute/save { \"AvailableEntityId\": \"orderLinePromisingInfo\", \"AttributeLabel\": \"ExternalRouteId\", \"AttributeDataType\": { \"AttributeDataTypeId\": \"text\" }, \"AvailableAttributeId\": \"ExternalRouteId\" } It will evaluate conditions as something like the below. allocation.parentOrderLine.orderLinePromisingInfo.ExternalRouteId = \\\"Route\\\"\" Triggering Release when Holds are Removed Requirement: How to trigger release when an order or order line is unheld If the order and order line \"OnHold\" are conﬁgured as false in the release template ﬁlter, then the order/order line which are on hold will not be released. To release such orders when the hold is removed, the user should configure to resubmit the pipeline. For example, if an allocated order is on hold for any reason, including fraud hold, address veriﬁcation failure, etc., then the order should be released when the hold is removed (assuming the remorse period has ended). To accomplish this, conﬁgure the Modiﬁcation Rules in the Order Conﬁguration to include \"ResubmitPipeline\" = true for ModTypeId\": \"OrderLine::OrderLineHold::Resolve. Additionally, ensure that the system holding and unholding the order is using the OrderHold and OrderLineHold entities in addition to the IsOnHold boolean ﬁeld. For example, to hold an order for AVS failure: \"OrderHold\": [{ \"HoldTypeId\": \"AddressVerificationFailed\", \"StatusId\": \"1000\" }], To unhold the order: \"OrderHold\": [{ \"HoldTypeId\": \"AddressVerificationFailed\", \"StatusId\": \"2000\" }], Consolidate Releases when using Merge Shipment Requirement: A customer orders two items, and one is coming from a vendor (who merges at the DC) and the other from the DC. Both items should be shipped together to the customer, so the retailer wants to consolidate the items at the DC before shipping to the customer. Allocations: Allocation 1: DC > Customer Home Allocation 2: Vendor > DC (merge leg) Allocation 3: DC > Customer Home (second leg of allocation 2) When allocation 2 ships, the retailer wants allocation 3 and allocation 1 to be included in a single release to the DC, so that they can ship together Implementation: To accomplish this, configure the following: 1. Enable 'minimize shipments' in the release template 2. Add a new service which ensures that merge legs are released together with non-merge legs. Without this configuration, the default service will release the merged items on their own as they are received at the DC, without consolidating them with the non-merge items. POST: url/order/api/ServiceDefinition/serviceDefinition/save { \"ComponentId\": \"Order\", \"ServiceId\": \"<customercode>ReleaseOrderOnAllocStatusChange\", \"BeanName\": \"releaseMapServiceImpl\", \"BusinessMethod\": \"releaseOrderForAllocationList\", \"Url\": null } POST: url/order/api/ServiceDefinition/extensionHandler/save { \"ExtensionHandlerId\": \"AllocationListStatusChangeReleaseExtensionHandler\", \"ProfileId\": \"dummyOrg\", \"ExtensionhandlerRoute\": [{ \"ExtensionhandlerRouteId\": \"AllocationListStatusChangeExtensionHandlerRouteId\", \"Source\": \"ON_EVENT\", \"Destination\": \"<customercode>ReleaseOrderOnAllocStatusChange\", \"IsSync\": \"true\" }], \"RegisteredExtensionPoints\": [{ \"ExtensionPointId\": \"Order:Allocation:Event:OnMultiplePickUpStatusChange\", \"EntryCondition\": null }] } How to restrict Manhattan Active® Omni from generating its own fulfillment objects for store orders Requirement: How to restrict Manhattan Active® Omni from generating its own fulfillment objects for store orders when a third party fulfillment object is bridged with Active Omni Implementation: Reroute release to an ExtPointId intended for an external service Reroute the ExtPointToMsgPoint to an ObMsgType intended for an external service Reroute the ObMsgType to an RMQ consumed by XINT for GCP, rather than Fulfillment How to consolidate units of the same item on multiple release lines Occasionally, there may be units on a particular order line that are split into multiple allocations. For example, if inventory is available at a particular location for some units at time T1, and additional inventory becomes available for the remaining units at the same location at time T2. In this case, there will be two allocations for the same item and location combination. If a 3rd party fulfillment system cannot process a release with multiple release lines containing the same item, the following flow can be implemented. Implement the \"PostAllocationCorrectionForContAllocation\" user exit Update the inventory reservation to combine the units with the same item + location combination and delete the extra reservation detail Update the order allocation to combine the units with the same item + location combination and delete the extra order allocation Related Article(s) TroubleshootingREST APIs and User ExitsMass ReleasePublish ReleaseHow Release WorksOverview"
}