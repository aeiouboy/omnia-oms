{
  "id": "3423235",
  "permalink": "pos-aggregation-framework-customization",
  "title": "POS Metrics Customization - Aggregation Framework",
  "type": "topic",
  "level": 6,
  "path": "Manhattan Active® Omni/Store/Process & Configuration Guides/Point of Sale/POS Classic Guides/POS Metrics - Aggregation Framework/POS Metrics Customization - Aggregation Framework",
  "raw_item": {
    "id": "3423235",
    "text": "POS Metrics Customization - Aggregation Framework",
    "title": "POS Metrics Customization - Aggregation Framework",
    "permalink": "pos-aggregation-framework-customization",
    "leaf": false,
    "droppable": true,
    "expanded": true,
    "closed": true,
    "visible": true,
    "editable": true,
    "type": "topic",
    "topicType": "0",
    "status": "1",
    "iconCls": "icon-topic",
    "cls": "",
    "folder_id": "430387",
    "parent": "f;430387",
    "created_date": "1718137486",
    "modified_date": "1738947288",
    "instructor_id": null,
    "loaded": true,
    "haschildren": false,
    "callout": "0",
    "order": "2"
  },
  "success": true,
  "content": "\r\n\r\n\r\n<div class=\"hiq-page-wrap\">\r\n<div class=\"hiq-t-wrap\">\r\n\t\t\r\n  \t  <div class=\"hiq-t \">\r\n\t\t\t\t<ul class=\"breadcrumbs\"><li><a class=\"breadcrumb-links\" hqid=\"1788908\"  href=\"/home\">Home</a></li> <li><span>&rsaquo;&rsaquo;</span><a hqid=\"3500940\" href=\"/omni\" class=\"breadcrumb-links\">Manhattan Active® Omni</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"3426481\" href=\"/store-3\" class=\"breadcrumb-links\">Store</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158412\" href=\"/process-configuration-guides-3\" class=\"breadcrumb-links\">Process & Configuration Guides</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158737\" href=\"/point-of-sale\" class=\"breadcrumb-links\">Point of Sale</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2225114\" href=\"/process-configuration-guides-4\" class=\"breadcrumb-links\">POS Classic Guides</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"3433343\" href=\"/pos-metrics-aggregation-framework-2\" class=\"breadcrumb-links\">POS Metrics - Aggregation Framework</a></li><li> <span>››</span>POS Metrics Customization - Aggregation Framework</li></ul>  \t\r\n\t\t<h2>POS Metrics Customization - Aggregation Framework</h2>\r\n\r\n<div class=\"info\"><ul><li><a href=\"/pos-aggregation-framework-customization$customizing-aggregation-event-in-agg-omni-component\">Customizing Aggregation Event in agg-omni component</a><ul><li><a href=\"/pos-aggregation-framework-customization$finding-the-right-aggregation-event\">Finding the right Aggregation Event</a></li><li><a href=\"/pos-aggregation-framework-customization$what-is-not-allowed-to-be-modified-in-an-aggregationevent\">What is not allowed to be modified in an aggregationEvent</a></li><li><a href=\"/pos-aggregation-framework-customization$aggregationeventgroupby-cannot-be-changed-as-its-the-business-key-of-targetauditentity-and-targetentity\">AggregationEventGroupBy Cannot be changed as its the business key of TargetAuditEntity and TargetEntity</a></li><li><a href=\"/pos-aggregation-framework-customization$what-is-allowed-to-be-modified-in-an-aggregationevent\">What is allowed to be modified in an aggregationEvent</a></li><li><a href=\"/pos-aggregation-framework-customization$adding-new-aggregation-event-rule\">Adding new Aggregation Event Rule</a></li><li><a href=\"/pos-aggregation-framework-customization$fields-that-are-included-in-order-payload-sent-to-agg-omni\">Fields that are included in order payload sent to agg-omni</a></li><li><a href=\"/pos-aggregation-framework-customization$customising-reportconfig-event-in-commonutil-component\">Customising ReportConfig Event in commonutil component</a><ul><li><a href=\"/pos-aggregation-framework-customization$allowed-modification-in-reportconfig\">Allowed modification in reportConfig</a></li></ul></li></ul></li><li><a href=\"/pos-aggregation-framework-customization$sample-use-cases-for-customization\">Sample Use cases for customization</a><ul><li><a href=\"/pos-aggregation-framework-customization$use-case-1-ignore-ecom-sales-calculation-nbsp-return-metrics-sent-to-net-sales\">Use case 1: Ignore ecom sales calculation&nbsp;return metrics sent to net sales</a></li><li><a href=\"/pos-aggregation-framework-customization$use-case-2-ignore-nbsp-returns-of-sales-from-other-stores\">Use case 2: Ignore&nbsp;returns of sales from other stores</a></li><li><a href=\"/pos-aggregation-framework-customization$use-case-3-show-new-field\">Use case 3: Show new field</a></li></ul></li></ul></div>\r\n\r\n<p data-renderer-start-pos=\"3353\">Metrics captured using aggregation framework can be customized by services and end users. This space will provide the customization details&nbsp;and how to achieve the customization of metrics and all steps involved with it.</p>\r\n\r\n<h3 data-renderer-start-pos=\"3353\" id=\"Customising-Aggregation-Event-in-agg-omni-component\"><a name=\"customizing-aggregation-event-in-agg-omni-component\" id=\"customizing-aggregation-event-in-agg-omni-component\"></a>Customizing Aggregation Event in agg-omni component</h3>\r\n\r\n<h5><a name=\"finding-the-right-aggregation-event\" id=\"finding-the-right-aggregation-event\"></a><strong>Finding the right Aggregation Event</strong></h5>\r\n\r\n<p>Fetch the current aggregation event for entity using below API.</p>\r\n\r\n<p>GET - {{url}}/com-manh-cp-agg-omni/api/fw-entity-aggregation/aggregationEvent?query=EntitysName = &#39;&lt;Entity Name&gt;&#39;</p>\r\n\r\n<p><em>EntitysNameField</em> = <em>Order:&nbsp;</em>&nbsp;Querying based on Entity name will help in identifying the right aggregationEvent</p>\r\n\r\n<p>Eg : {{url}}/com-manh-cp-agg-omni/api/fw-entity-aggregation/aggregationEvent?query=EntitysName = &#39;Order&#39;</p>\r\n\r\n<p>Sample aggregationEvent below</p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-1\" class=\"toggle-content\"><span class=\"toggle-title\">SampleAggregationEvent</span></a></p><div id=\"tg-1\"><pre>\n<code class=\"json\">{\n  &quot;EntitysName&quot;: &quot;Order&quot;,\n  &quot;EventName&quot;: &quot;ConfirmedOrderStats&quot;,\n  &quot;SourceUniqueKey&quot;: &quot;OrderId&quot;,\n  &quot;AggregationEventRule&quot;: [\n    {\n      &quot;TargetEntity&quot;: &quot;ConfirmedOrderStats&quot;,\n      &quot;TargetAuditEntity&quot;: &quot;ConfirmedOrderStatsAudit&quot;,\n      &quot;RuleName&quot;: &quot;ConfirmedOrderStatsRule&quot;,\n      &quot;SummarizationMsgType&quot;: &quot;ConfirmedOrderStatsMsgType&quot;,\n      &quot;TemporalLevel&quot;: &quot;Daily&quot;,\n      &quot;SourceTemporalFieldName&quot;: &quot;CreatedTimestamp&quot;,\n      &quot;TargetTemporalFieldName&quot;: &quot;AggregationDateTime&quot;,\n      &quot;LeafLevel&quot;: &quot;Order&quot;,\n      &quot;AggregationEventFilter&quot;: [\n        {\n          &quot;FilterPath&quot;: &quot;Order&quot;,\n          &quot;FilterCondition&quot;: &quot;SellingChannel = &#39;Store&#39; AND IsConfirmed = true AND IsPostVoid = false AND IsCancelled = false AND (MerchSaleLineCount &gt; 0 OR MerchReturnLineCount &gt; 0)&quot;\n        }\n      ],\n      &quot;AggregationEventMeasure&quot;: [\n        {\n          &quot;SourceFieldName&quot;: &quot;Order.OrderId&quot;,\n          &quot;SourceAggregationType&quot;: &quot;Counter&quot;,\n          &quot;TargetFieldName&quot;: &quot;MerchTotalOrderCount&quot;,\n          &quot;TargetAggregationType&quot;: &quot;Sum&quot;\n        }\n      ],\n      &quot;AggregationEventGroupBy&quot;: [\n        {\n          &quot;SourceFieldName&quot;: &quot;Order.SellingLocationId&quot;,\n          &quot;TargetFieldName&quot;: &quot;SellingLocationId&quot;\n        }\n      ]\n    }\n  ]\n}</code></pre>\n</div></div></p>\r\n\r\n<h5><a name=\"what-is-not-allowed-to-be-modified-in-an-aggregationevent\" id=\"what-is-not-allowed-to-be-modified-in-an-aggregationevent\"></a><strong>What is not allowed to be modified in an aggregationEvent</strong></h5>\r\n\r\n<h5><a name=\"aggregationeventgroupby-cannot-be-changed-as-its-the-business-key-of-targetauditentity-and-targetentity\" id=\"aggregationeventgroupby-cannot-be-changed-as-its-the-business-key-of-targetauditentity-and-targetentity\"></a><code data-renderer-mark=\"true\">AggregationEventGroupBy</code> Cannot be changed as its the business key of <code data-renderer-mark=\"true\">TargetAuditEntity</code> and <code data-renderer-mark=\"true\">TargetEntity</code></h5>\r\n\r\n<h5><a name=\"what-is-allowed-to-be-modified-in-an-aggregationevent\" id=\"what-is-allowed-to-be-modified-in-an-aggregationevent\"></a><strong>What is allowed to be modified in an aggregationEvent</strong></h5>\r\n\r\n<p>AggregationEventFilter can be modified. Existing condition can be modified to suit the needs.&nbsp;</p>\r\n\r\n<p>Sample: Removed the MerchSaleLineCount &gt; 0 OR MerchReturnLineCount &gt; 0 part from query</p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-2\" class=\"toggle-content\"><span class=\"toggle-title\">AggregationEventFilter</span></a></p><div id=\"tg-2\"><pre>\n<code class=\"json\">{\n  &quot;FilterPath&quot;: &quot;Order&quot;,\n  &quot;FilterCondition&quot;: &quot;SellingChannel = &#39;Store&#39; AND IsConfirmed = true AND IsPostVoid = false AND IsCancelled = false&quot;\n}</code></pre>\n</div></div></p>\r\n\r\n<p>Sample:&nbsp;Adding a new filter condition even on child entities is allowed as below. In this case make sure to change the <strong data-renderer-mark=\"true\">LeafLevel </strong>(lowest level of grouping in the aggregation process) to <strong data-renderer-mark=\"true\">OrderLine</strong></p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-3\" class=\"toggle-content\"><span class=\"toggle-title\">New Filter - Aggregation Event</span></a></p><div id=\"tg-3\"><pre>\n<code class=\"json\">&quot;LeafLevel&quot;: &quot;OrderLine&quot;,\n&quot;AggregationEventFilter&quot;: [\n    {\n      &quot;FilterPath&quot;: &quot;Order&quot;,\n      &quot;FilterCondition&quot;: &quot;SellingChannel = &#39;Store&#39; AND IsConfirmed = true AND IsPostVoid = false AND IsCancelled = false AND (MerchSaleLineCount &gt; 0 OR MerchReturnLineCount &gt; 0)&quot;\n    },\n    {\n      &quot;FilterPath&quot;: &quot;Order.OrderLine&quot;,\n      &quot;FilterCondition&quot;: &quot;IsCancelled = false AND IsNonMerchandise = false AND IsReturn = false&quot;\n    }\n]</code></pre>\n</div></div></p>\r\n\r\n<p>AggregationEventMeasure can be modified. Its an array and multiple EventMeasures can be added. Just note AggregationEventFilter condition will remain same for all AggregationEventMeasure&#39;s. If different filter condition is required add a new AggregationEventRule.&nbsp;</p>\r\n\r\n<p>New Targets can be added along with existing.&nbsp;</p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-4\" class=\"toggle-content\"><span class=\"toggle-title\">Aggregation Event Measure</span></a></p><div id=\"tg-4\"><pre>\n<code class=\"json\">&quot;AggregationEventMeasure&quot;: [\n        {\n          &quot;SourceFieldName&quot;: &quot;Order.OrderId&quot;,\n          &quot;SourceAggregationType&quot;: &quot;Counter&quot;,\n          &quot;TargetFieldName&quot;: &quot;MerchTotalOrderCount&quot;,\n          &quot;TargetAggregationType&quot;: &quot;Sum&quot;\n        },\n        {\n              &quot;SourceFieldName&quot;: &quot;Order.OrderLine.Quantity&quot;,\n              &quot;SourceAggregationType&quot;: &quot;Sum&quot;,\n              &quot;TargetFieldName&quot;: &quot;NbrOfMerchItemsSold&quot;,\n              &quot;TargetAggregationType&quot;: &quot;Sum&quot;\n        }\n      ]</code></pre>\n</div></div></p>\r\n\r\n<p>Target can be modified to point to another existing base field in TargetAuditEntity and TargetEntity.</p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-5\" class=\"toggle-content\"><span class=\"toggle-title\">Aggregation - Modify Target</span></a></p><div id=\"tg-5\"><pre>\n<code class=\"json\">{\n          &quot;SourceFieldName&quot;: &quot;Order.OrderId&quot;,\n          &quot;SourceAggregationType&quot;: &quot;Counter&quot;,\n          &quot;TargetFieldName&quot;: &quot;&lt;Existing Base entityfield&gt;&quot;,\n          &quot;TargetAggregationType&quot;: &quot;Sum&quot;\n}</code></pre>\n</div></div></p>\r\n\r\n<p>Target can be modified to point to new Extended Attribute in TargetAuditEntity and TargetEntity. Make sure to add extended attribute in both TargetAuditEntity and TargetEntity.</p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-6\" class=\"toggle-content\"><span class=\"toggle-title\">Aggregation - Modify target with new ext attribute</span></a></p><div id=\"tg-6\"><pre>\n<code class=\"json\">&quot;AggregationEventMeasure&quot;: [\n    {\n      &quot;SourceFieldName&quot;: &quot;Order.OrderId&quot;,\n      &quot;SourceAggregationType&quot;: &quot;Sum&quot;,\n      &quot;TargetFieldName&quot;: &quot;Extended.SameStoreSaleCount&quot;,\n      &quot;TargetAggregationType&quot;: &quot;Sum&quot;\n    }\n  ]</code></pre>\n</div></div></p>\r\n\r\n<h5><a name=\"adding-new-aggregation-event-rule\" id=\"adding-new-aggregation-event-rule\"></a><strong>Adding new Aggregation Event Rule</strong></h5>\r\n\r\n<p>It is allowed to add new custom AggregationEventRule. While adding newAggregationEventRule, make sure to keep AggregationEventGroupBy same as that in base AggregationEventRule, as Group by fields is businessKey of TargetAuditEntity and TargetEntity and will not work correctly if different group by is used.</p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-7\" class=\"toggle-content\"><span class=\"toggle-title\">New Aggregation Event Rule</span></a></p><div id=\"tg-7\"><pre>\n<code class=\"json\">&quot;AggregationEventRule&quot;:[\n{\n  &quot;TargetEntity&quot;: &quot;ConfirmedOrderStats&quot;,\n  &quot;TargetAuditEntity&quot;: &quot;ConfirmedOrderStatsAudit&quot;,\n  &quot;RuleName&quot;: &quot;ConfirmedOrderStatsRule&quot;,\n  &quot;SummarizationMsgType&quot;: &quot;ConfirmedOrderStatsMsgType&quot;,\n  &quot;TemporalLevel&quot;: &quot;Daily&quot;,\n  &quot;SourceTemporalFieldName&quot;: &quot;CreatedTimestamp&quot;,\n  &quot;TargetTemporalFieldName&quot;: &quot;AggregationDateTime&quot;,\n  &quot;LeafLevel&quot;: &quot;Order&quot;,\n  &quot;AggregationEventFilter&quot;: [\n    {\n      &quot;FilterPath&quot;: &quot;Order&quot;,\n      &quot;FilterCondition&quot;: &quot;SellingChannel = &#39;Store&#39; AND IsConfirmed = true AND IsPostVoid = false AND IsCancelled = false AND (MerchSaleLineCount &gt; 0 OR MerchReturnLineCount &gt; 0)&quot;\n    }\n  ],\n  &quot;AggregationEventMeasure&quot;: [\n    {\n      &quot;SourceFieldName&quot;: &quot;Order.Extended.SameStoreSaleCount&quot;,\n      &quot;SourceAggregationType&quot;: &quot;Sum&quot;,\n      &quot;TargetFieldName&quot;: &quot;Extended.SameStoreSaleCount&quot;,\n      &quot;TargetAggregationType&quot;: &quot;Sum&quot;\n    }\n  ],\n  &quot;AggregationEventGroupBy&quot;: [\n    {\n      &quot;SourceFieldName&quot;: &quot;Order.SellingLocationId&quot;,\n      &quot;TargetFieldName&quot;: &quot;SellingLocationId&quot;\n    }\n  ]\n}\n]</code></pre>\n</div></div></p>\r\n\r\n<p>Extended fields can be used as source fields</p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-8\" class=\"toggle-content\"><span class=\"toggle-title\">Aggregation Event - Ext Field as source</span></a></p><div id=\"tg-8\"><pre>\n<code> &quot;AggregationEventMeasure&quot;: [\n    {\n      &quot;SourceFieldName&quot;: &quot;Order.Extended.SameStoreSaleCount&quot;,\n      &quot;SourceAggregationType&quot;: &quot;Sum&quot;,\n      &quot;TargetFieldName&quot;: &quot;Extended.SameStoreSaleCount&quot;,\n      &quot;TargetAggregationType&quot;: &quot;Sum&quot;\n    }\n  ]</code></pre>\n</div></div></p>\r\n\r\n<p>SourceTemporalFieldName can be changed to use any dateTime field. Only BusinessDate with date field is allowed for now.</p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-9\" class=\"toggle-content\"><span class=\"toggle-title\">Aggregation - SourceField</span></a></p><div id=\"tg-9\"><pre>\n<code class=\"json\"> &quot;SourceTemporalFieldName&quot;: &quot;UpdatedTimestamp&quot;\n &quot;SourceTemporalFieldName&quot;: &quot;BusinessDate&quot;</code></pre>\n</div></div></p>\r\n\r\n<h5><a name=\"fields-that-are-included-in-order-payload-sent-to-agg-omni\" id=\"fields-that-are-included-in-order-payload-sent-to-agg-omni\"></a><strong>Fields that are included in order payload sent to agg-omni</strong></h5>\r\n\r\n<p data-renderer-start-pos=\"9737\">Payload published by order component is controlled through below responseTemplate. If additional fields are required override the template at specific org level. For Example if we need to use Extended Attributes in AggregationEvent or reportConfig then add in this template.</p>\r\n\r\n<p data-renderer-start-pos=\"10013\"><em>{url}/order/api/fwcore/responseTemplate/save</em></p>\r\n\r\n<p data-renderer-start-pos=\"10061\">Update the<code data-renderer-mark=\"true\">OrgId</code> field in payload</p>\r\n\r\n<p data-renderer-start-pos=\"10061\"><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-10\" class=\"toggle-content\"><span class=\"toggle-title\">Aggregation - Order Payload to agg-omni</span></a></p><div id=\"tg-10\"><pre>\n<code class=\"json\">{\n    &quot;TemplateId&quot;: &quot;ConfirmedOrderStatsTemplate&quot;,\n    &quot;OrgId&quot; : &lt;OrganizationId for which template needs to be overridden&gt;\n    &quot;TemplateJson&quot;: {\n        &quot;IsConfirmed&quot;: null,\n        &quot;IsCancelled&quot;: null,\n        &quot;IsPostVoided&quot;: null,\n        &quot;OrderId&quot;: null,\n        &quot;SellingChannel&quot;:null,\n        &quot;BusinessDate&quot;: null,\n        &quot;CreatedTimestamp&quot;: null,\n        &quot;MerchSaleLineCount&quot;: null,\n        &quot;MerchReturnLineCount&quot;: null,\n        &quot;CustomerId&quot;: null,\n        &quot;SellingLocationId&quot;: null,\n        &quot;OrganizationId&quot;: null,\n        &quot;OrderLine&quot;: {\n            &quot;IsCancelled&quot;: null,\n            &quot;IsNonMerchandise&quot;: null,\n            &quot;IsReturn&quot;: null,\n            &quot;OrderLineSubtotalWithDiscount&quot;:null,\n            &quot;OrderLineSubTotal&quot;: null,\n            &quot;TotalDiscountOnItem&quot;: null,\n            &quot;Quantity&quot;: null\n        }\n    }\n}</code></pre>\n</div></div></p>\r\n\r\n<h4><a name=\"customising-reportconfig-event-in-commonutil-component\" id=\"customising-reportconfig-event-in-commonutil-component\"></a>Customising ReportConfig Event in commonutil component</h4>\r\n\r\n<div class=\"info\">Do not remove any base ReportFieldConfig with FieldType as Input. It is not allowed to be modified in reportConfig.</div>\r\n\r\n<h5><a name=\"allowed-modification-in-reportconfig\" id=\"allowed-modification-in-reportconfig\"></a><strong>Allowed modification in reportConfig</strong></h5>\r\n\r\n<p>New ReportFieldConfig with fieldType as Input can be added. This can be added if additional filtering is needed while fetching records from TargetEntity. FieldName should be a field in all entities from which data is pulled, basically entities are GroupName of all ReportFieldConfig&rsquo;s with FieldType Output and GroupName populated .</p>\r\n\r\n<p>New ReportFieldConfig with fieldType as Output and with either GroupName or Expression can be added. GroupName should be an entity present in agg-omni component and FieldName should be a filed in entity.&nbsp;</p>\r\n\r\n<p>Extended attribute field of TargetEntity can be configured as output Field with GroupName populated. It can be a new ReportFieldConfig or even base output ReportFieldConfig can be edited. Sample ReportFieldConfig below.</p>\r\n\r\n<p>&nbsp;{Url}/commonutil/api/commonutil/reportConfig/save</p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-11\" class=\"toggle-content\"><span class=\"toggle-title\">Aggregation - Allowed reportConfig modification</span></a></p><div id=\"tg-11\"><pre>\n<code>{\n  &quot;ReportName&quot;: &quot;SaleMetricsReport&quot;,\n  &quot;Description&quot;: &quot;Base Sale Metric Report&quot;,\n  &quot;PurgeAfterDays&quot;: 2555,\n  &quot;FetchRealTimeData&quot;: true,\n  &quot;ReportFieldConfig&quot;: [\n    {\n      &quot;FieldName&quot;: &quot;Extended.SameStoreSaleCount&quot;,\n      &quot;FieldType&quot;: &quot;Output&quot;,\n      &quot;FieldDataType&quot;: {\n        &quot;FieldDataTypeId&quot;: &quot;Integer&quot;\n      },\n      &quot;DisplayName&quot;: &quot;Total Order Count from Same Store&quot;,\n      &quot;GroupName&quot;: &quot;ConfirmedOrderStats&quot;\n    }\n  ]\n}</code></pre>\n</div></div></p>\r\n\r\n<p>In output SameStoreSaleCount will be returned without Extended. See example below.</p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-12\" class=\"toggle-content\"><span class=\"toggle-title\">Aggregation - SameStoreSaleCount</span></a></p><div id=\"tg-12\"><pre>\n<code>{\n    &quot;success&quot;: true,\n    &quot;header&quot;: null,\n    &quot;data&quot;: {\n        &quot;MerchTotalOrderCount&quot;: 6,\n        &quot;SameStoreSaleCount&quot;: 3\n    }\n}</code></pre>\n</div></div></p>\r\n\r\n<p>Above configured output field using Extended Attribute can be utilised in expressions. To have Extended field as an expression, modify the ReportConfig in commonutil. Make sure to remove &ldquo;Extended.&rdquo; from expressions. Eg below SameStoreSaleCount value is read from Extended.SameStoreSaleCount, but in expression it should have only SameStoreSaleCount. Any expressions supported by exp4j 0.4.8 API can be used.&nbsp;</p>\r\n\r\n<p>{URL}/commonutil/api/commonutil/reportConfig/save</p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-13\" class=\"toggle-content\"><span class=\"toggle-title\">Aggregation - Using ext fields</span></a></p><div id=\"tg-13\"><pre>\n<code>{\n  &quot;ReportName&quot;: &quot;SaleMetricsReport&quot;,\n  &quot;Description&quot;: &quot;Base Sale Metric Report&quot;,\n  &quot;PurgeAfterDays&quot;: 2555,\n  &quot;FetchRealTimeData&quot;: true,\n  &quot;ReportFieldConfig&quot;: [\n    {\n      &quot;FieldName&quot;: &quot;Extended.SameStoreSaleCount&quot;,\n      &quot;FieldType&quot;: &quot;Output&quot;,\n      &quot;FieldDataType&quot;: {\n        &quot;FieldDataTypeId&quot;: &quot;Integer&quot;\n      },\n      &quot;DisplayName&quot;: &quot;Total Order Count from Same Store&quot;,\n      &quot;GroupName&quot;: &quot;ConfirmedOrderStats&quot;\n    },\n    {\n      &quot;FieldName&quot;: &quot;FlashSales&quot;,\n      &quot;FieldType&quot;: &quot;Output&quot;,\n      &quot;FieldDataType&quot;: {\n        &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;\n      },\n      &quot;Expression&quot;: &quot;TotalOrderCount- abs(SameStoreSaleCount)&quot;, &lt;Should remove Extended. and use only field in expressions.&gt;\n      &quot;DisplayName&quot;: &quot;Flash Sales&quot;\n    }\n  ]\n}</code></pre>\n</div></div></p>\r\n\r\n<h3><a name=\"sample-use-cases-for-customization\" id=\"sample-use-cases-for-customization\"></a>Sample Use cases for customization</h3>\r\n\r\n<h4><a name=\"use-case-1-ignore-ecom-sales-calculation-nbsp-return-metrics-sent-to-net-sales\" id=\"use-case-1-ignore-ecom-sales-calculation-nbsp-return-metrics-sent-to-net-sales\"></a>Use case 1: Ignore ecom sales calculation&nbsp;return metrics sent to net sales</h4>\r\n\r\n<p><strong>Custom Requirement</strong> : Net Sales = [Sales from my store today] &ndash; [Returns where the sale originated from any store] (If a original order is a ecom order which was returned in store, this should be ignored). Note, this should ignore/exclude any returns from sales that were made from a different channel (ecomm, call center)</p>\r\n\r\n<p><strong>Challenge:&nbsp;</strong>Parent order details are not published by event producer Framework to agg-omni component. Only parentOrderId will be present in payload and whether return is from same store or ecom cannot be determined directly.&nbsp;</p>\r\n\r\n<p><strong>Solution</strong>: Add an extended attribute in orderLine entity and populate it during order confirmation, say boolean field StoreSaleItem. ( Loop through all orderLines with IsReturn = True and determine if sale was performed from store. Fetch parent order using parentOrderId present in orderLine and verify if order is from store based on SellingChannel in OrderLine. Then populate Extended.StoreSaleItem field in OrderLine).</p>\r\n\r\n<p>Update ConfirmedOrderStatsTemplate responseTemplate in order to include extended attributes. . Refer What all fields are included in Order Payload sent to agg-omni section.</p>\r\n\r\n<p>FlashSales is shown in UI using the formula &quot;MerchSaleItemsSubtotal- abs(MerchReturnItemsSubtotal)&quot;.ReportFieldConfig below</p>\r\n\r\n<pre>\r\n<code>{\r\n          &quot;FieldName&quot;: &quot;FlashSales&quot;,\r\n          &quot;FieldType&quot;: &quot;Output&quot;,\r\n          &quot;FieldDataType&quot;: {\r\n            &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;\r\n          },\r\n          &quot;Expression&quot;: &quot;MerchSaleItemsSubtotal- abs(MerchReturnItemsSubtotal)&quot;,\r\n          &quot;DisplayName&quot;: &quot;Flash Sales&quot;\r\n        }</code>\r\n</pre>\r\n\r\n<p>Modify AggregationEventRule in agg-omni aggregationEvent entity. Add StoreSaleItem field in OrderLine AggregationEventFilter. Change is in line 17 below</p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-14\" class=\"toggle-content\"><span class=\"toggle-title\">Aggregation Framework - UseCase1</span></a></p><div id=\"tg-14\"><pre>\n<code>{\n          &quot;TargetEntity&quot;: &quot;ConfirmedOrderLineStats&quot;,\n          &quot;TargetAuditEntity&quot;: &quot;ConfirmedOrderLineStatsAudit&quot;,\n          &quot;RuleName&quot;: &quot;MerchReturnItemsSubtotalRule&quot;,\n          &quot;TemporalLevel&quot;: &quot;Daily&quot;,\n          &quot;SourceTemporalFieldName&quot;: &quot;BusinessDate&quot;,\n          &quot;TargetTemporalFieldName&quot;: &quot;AggregationDateTime&quot;,\n          &quot;LeafLevel&quot;: &quot;Order.OrderLine&quot;,\n          &quot;AggregationEventFilter&quot;: [\n            {\n              &quot;FilterPath&quot;: &quot;Order&quot;,\n              &quot;FilterCondition&quot;: &quot;SellingChannel.SellingChannelId = &#39;Store&#39; AND IsConfirmed = true AND IsPostVoided = false AND IsCancelled = false&quot;\n            },\n            {\n              &quot;FilterPath&quot;: &quot;Order.OrderLine&quot;,\n              &quot;FilterCondition&quot;: &quot;IsCancelled = false AND IsNonMerchandise = false AND IsReturn = true AND Extended.StoreSaleItem = true&quot;\n            }\n          ],\n          &quot;AggregationEventMeasure&quot;: [\n            {\n              &quot;SourceFieldName&quot;: &quot;Order.OrderLine.OrderLineSubtotalWithDiscount&quot;,\n              &quot;SourceAggregationType&quot;: &quot;Sum&quot;,\n              &quot;TargetFieldName&quot;: &quot;MerchReturnItemsSubtotal&quot;,\n              &quot;TargetAggregationType&quot;: &quot;Sum&quot;\n            }\n          ],\n          &quot;AggregationEventGroupBy&quot;: [\n            {\n              &quot;SourceFieldName&quot;: &quot;Order.SellingLocationId&quot;,\n              &quot;TargetFieldName&quot;: &quot;LocationId&quot;\n            }\n          ]\n        }</code></pre>\n</div></div></p>\r\n\r\n<h4><a name=\"use-case-2-ignore-nbsp-returns-of-sales-from-other-stores\" id=\"use-case-2-ignore-nbsp-returns-of-sales-from-other-stores\"></a>Use case 2: Ignore&nbsp;returns of sales from other stores</h4>\r\n\r\n<p><strong>Custom requirement </strong>: Net Sales = [Sales from my store today] &ndash; [Returns where the sale originated from my store] (returns made were original order is not from current store should be ignored). Note, this should ignore/exclude any returns from sales that were made from a different channel (ecomm, call center) or from a different store</p>\r\n\r\n<p><strong>Challenge</strong>: Parent order details are not published by event producer Framework to agg-omni component. Only parentOrderId will be present in payload and whether return is from same store or ecom cannot be determined directly.&nbsp;</p>\r\n\r\n<p><strong>Solution</strong>: Add an extended attribute in orderLine entity and populate it during order confirmation, say boolean field SameStoreSaleItem. ( Loop through all orderLines with IsReturn = True and determine if sale was performed from same store. Fetch parent order using parentOrderId present in orderLine and verify if order is from same store based on SellingLocationId in parent order. Then populate Extended.SameStoreSaleItem field in OrderLine).</p>\r\n\r\n<p>Update ConfirmedOrderStatsTemplate responseTemplate in order to include extended attributes. . Refer What all fields are included in Order Payload sent to agg-omni section.</p>\r\n\r\n<p>FlashSales is shown in UI using the formula &quot;MerchSaleItemsSubtotal- abs(MerchReturnItemsSubtotal)&quot;.ReportFieldConfig below</p>\r\n\r\n<pre>\r\n<code>{\r\n          &quot;FieldName&quot;: &quot;FlashSales&quot;,\r\n          &quot;FieldType&quot;: &quot;Output&quot;,\r\n          &quot;FieldDataType&quot;: {\r\n            &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;\r\n          },\r\n          &quot;Expression&quot;: &quot;MerchSaleItemsSubtotal- abs(MerchReturnItemsSubtotal)&quot;,\r\n          &quot;DisplayName&quot;: &quot;Flash Sales&quot;\r\n        }</code></pre>\r\n\r\n<p>Modify AggregationEventRule in agg-omni aggregationEvent entity. Add SameStoreSaleItem field in OrderLine AggregationEventFilter. &nbsp;Change is in line 17 below.</p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-15\" class=\"toggle-content\"><span class=\"toggle-title\">Aggregation - UseCase2</span></a></p><div id=\"tg-15\"><pre>\n<code>{\n          &quot;TargetEntity&quot;: &quot;ConfirmedOrderLineStats&quot;,\n          &quot;TargetAuditEntity&quot;: &quot;ConfirmedOrderLineStatsAudit&quot;,\n          &quot;RuleName&quot;: &quot;MerchReturnItemsSubtotalRule&quot;,\n          &quot;TemporalLevel&quot;: &quot;Daily&quot;,\n          &quot;SourceTemporalFieldName&quot;: &quot;BusinessDate&quot;,\n          &quot;TargetTemporalFieldName&quot;: &quot;AggregationDateTime&quot;,\n          &quot;LeafLevel&quot;: &quot;Order.OrderLine&quot;,\n          &quot;AggregationEventFilter&quot;: [\n            {\n              &quot;FilterPath&quot;: &quot;Order&quot;,\n              &quot;FilterCondition&quot;: &quot;SellingChannel.SellingChannelId = &#39;Store&#39; AND IsConfirmed = true AND IsPostVoided = false AND IsCancelled = false&quot;\n            },\n            {\n              &quot;FilterPath&quot;: &quot;Order.OrderLine&quot;,\n              &quot;FilterCondition&quot;: &quot;IsCancelled = false AND IsNonMerchandise = false AND IsReturn = true AND Extended.SameStoreSaleItem = true&quot;\n            }\n          ],\n          &quot;AggregationEventMeasure&quot;: [\n            {\n              &quot;SourceFieldName&quot;: &quot;Order.OrderLine.OrderLineSubtotalWithDiscount&quot;,\n              &quot;SourceAggregationType&quot;: &quot;Sum&quot;,\n              &quot;TargetFieldName&quot;: &quot;MerchReturnItemsSubtotal&quot;,\n              &quot;TargetAggregationType&quot;: &quot;Sum&quot;\n            }\n          ],\n          &quot;AggregationEventGroupBy&quot;: [\n            {\n              &quot;SourceFieldName&quot;: &quot;Order.SellingLocationId&quot;,\n              &quot;TargetFieldName&quot;: &quot;LocationId&quot;\n            }\n          ]\n        }</code></pre>\n</div></div></p>\r\n\r\n<h4><a name=\"use-case-3-show-new-field\" id=\"use-case-3-show-new-field\"></a>Use case 3: Show new field</h4>\r\n\r\n<p><strong>Custom requirement:</strong>&nbsp;Display new field Returns Total from same store in sale metrics screen. [Returns where the sale originated from my store] (returns made were original order is not from current store should be ignored). Note, this should ignore/exclude any returns from sales that were made from a different channel (ecomm, call center) or from a different store.</p>\r\n\r\n<p><strong>Challenge</strong>: Parent order details are not published by event producer Framework to agg-omni component. Only parentOrderId will be present in payload and whether return is from same store or ecom cannot be determined directly.&nbsp;</p>\r\n\r\n<div class=\"warning\">UI customisation is not supported currently to display additional fields on either Classic or Iris POS screens.</div>\r\n\r\n<p><strong>Solution</strong>: Add an extended attribute in orderLine entity and populate it during order confirmation, say boolean field SameStoreSaleItem. ( Loop through all orderLines with IsReturn = True and determine if sale was performed from same store. Fetch parent order using parentOrderId present in orderLine and verify if order is from same store based on SellingLocationId in parent order. Then populate Extended.SameStoreSaleItem field in OrderLine).</p>\r\n\r\n<p>Update ConfirmedOrderStatsTemplate responseTemplate in order to include extended attributes. . Refer What all fields are included in Order Payload sent to agg-omni section.</p>\r\n\r\n<p>Modify AggregationEventRule in agg-omni aggregationEvent entity. Add SameStoreSaleItem field in OrderLine AggregationEventFilter. &nbsp;Change is in line 17 below.</p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-16\" class=\"toggle-content\"><span class=\"toggle-title\">Aggregation - Use case 3 modify event rule</span></a></p><div id=\"tg-16\"><pre>\n<code>    {\n          &quot;TargetEntity&quot;: &quot;ConfirmedOrderLineStats&quot;,\n          &quot;TargetAuditEntity&quot;: &quot;ConfirmedOrderLineStatsAudit&quot;,\n          &quot;RuleName&quot;: &quot;MerchReturnItemsSubtotalRule&quot;,\n          &quot;TemporalLevel&quot;: &quot;Daily&quot;,\n          &quot;SourceTemporalFieldName&quot;: &quot;BusinessDate&quot;,\n          &quot;TargetTemporalFieldName&quot;: &quot;AggregationDateTime&quot;,\n          &quot;LeafLevel&quot;: &quot;Order.OrderLine&quot;,\n          &quot;AggregationEventFilter&quot;: [\n            {\n              &quot;FilterPath&quot;: &quot;Order&quot;,\n              &quot;FilterCondition&quot;: &quot;SellingChannel.SellingChannelId = &#39;Store&#39; AND IsConfirmed = true AND IsPostVoided = false AND IsCancelled = false&quot;\n            },\n            {\n              &quot;FilterPath&quot;: &quot;Order.OrderLine&quot;,\n              &quot;FilterCondition&quot;: &quot;IsCancelled = false AND IsNonMerchandise = false AND IsReturn = true AND Extended.SameStoreSaleItem = true&quot;\n            }\n          ],\n          &quot;AggregationEventMeasure&quot;: [\n            {\n              &quot;SourceFieldName&quot;: &quot;Order.OrderLine.OrderLineSubtotalWithDiscount&quot;,\n              &quot;SourceAggregationType&quot;: &quot;Sum&quot;,\n              &quot;TargetFieldName&quot;: &quot;Extended.SameStoreMerchReturnItemsSubtotal&quot;,\n              &quot;TargetAggregationType&quot;: &quot;Sum&quot;\n            }\n          ],\n          &quot;AggregationEventGroupBy&quot;: [\n            {\n              &quot;SourceFieldName&quot;: &quot;Order.SellingLocationId&quot;,\n              &quot;TargetFieldName&quot;: &quot;LocationId&quot;\n            }\n          ]\n        }</code></pre>\n</div></div></p>\r\n\r\n<p>Add Extended Attribute in TargetEntity and TargetAuditEntity of agg-omni. In above example its the TargetFieldName that needs to be added as extended attribute in both entities which is Extended.SameStoreMerchReturnItemsSubtotal.</p>\r\n\r\n<p>Modify commonutil reportConfig and add a new Output ReportFieldConfig. If needs to be used as output add the first ReportFieldConfig entry alone. &nbsp;If need to be used as an expression, then add both ReportFieldConfig as from below example.</p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-17\" class=\"toggle-content\"><span class=\"toggle-title\">Aggregatioin - UseCase3</span></a></p><div id=\"tg-17\"><pre>\n<code>{\n  &quot;ReportName&quot;: &quot;SaleMetricsReport&quot;,\n  &quot;Description&quot;: &quot;Base Sale Metric Report&quot;,\n  &quot;PurgeAfterDays&quot;: 2555,\n  &quot;FetchRealTimeData&quot;: true,\n  &quot;ReportFieldConfig&quot;: [\n    {\n      &quot;FieldName&quot;: &quot;Extended.SameStoreMerchReturnItemsSubtotal&quot;,\n      &quot;FieldType&quot;: &quot;Output&quot;,\n      &quot;FieldDataType&quot;: {\n        &quot;FieldDataTypeId&quot;: &quot;Integer&quot;\n      },\n      &quot;DisplayName&quot;: &quot;Total Order Count from Same Store&quot;,\n      &quot;GroupName&quot;: &quot;ConfirmedOrderStats&quot;\n    },\n    {\n      &quot;FieldName&quot;: &quot;FlashSales&quot;,\n      &quot;FieldType&quot;: &quot;Output&quot;,\n      &quot;FieldDataType&quot;: {\n        &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;\n      },\n      &quot;Expression&quot;: &quot;TotalOrderCount- abs(SameStoreMerchReturnItemsSubtotal)&quot;, &lt;Should remove Extended. and use only field in expressions.&gt;\n      &quot;DisplayName&quot;: &quot;Flash Sales&quot;\n    }\n  ]\n}</code></pre>\n</div></div></p>\r\n\r\n\t  </div>\r\n </div>\r\n <div id=\"ui-page-fb-wrap\"></div>\r\n <div class=\"hiq-footer-wrap\">\r\n    \r\n                \r\n  </div>\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n",
  "content_length": 35706,
  "scraped_at": "2025-08-09T22:03:10.523102",
  "content_clean": "Home ››Manhattan Active® Omni››Store››Process & Configuration Guides››Point of Sale››POS Classic Guides››POS Metrics - Aggregation Framework ››POS Metrics Customization - Aggregation Framework POS Metrics Customization - Aggregation Framework Customizing Aggregation Event in agg-omni componentFinding the right Aggregation EventWhat is not allowed to be modified in an aggregationEventAggregationEventGroupBy Cannot be changed as its the business key of TargetAuditEntity and TargetEntityWhat is allowed to be modified in an aggregationEventAdding new Aggregation Event RuleFields that are included in order payload sent to agg-omniCustomising ReportConfig Event in commonutil componentAllowed modification in reportConfigSample Use cases for customizationUse case 1: Ignore ecom sales calculation return metrics sent to net salesUse case 2: Ignore returns of sales from other storesUse case 3: Show new field Metrics captured using aggregation framework can be customized by services and end users. This space will provide the customization details and how to achieve the customization of metrics and all steps involved with it. Customizing Aggregation Event in agg-omni component Finding the right Aggregation Event Fetch the current aggregation event for entity using below API. GET - {{url}}/com-manh-cp-agg-omni/api/fw-entity-aggregation/aggregationEvent?query=EntitysName = '<Entity Name>' EntitysNameField = Order:  Querying based on Entity name will help in identifying the right aggregationEvent Eg : {{url}}/com-manh-cp-agg-omni/api/fw-entity-aggregation/aggregationEvent?query=EntitysName = 'Order' Sample aggregationEvent below SampleAggregationEvent { \"EntitysName\": \"Order\", \"EventName\": \"ConfirmedOrderStats\", \"SourceUniqueKey\": \"OrderId\", \"AggregationEventRule\": [ { \"TargetEntity\": \"ConfirmedOrderStats\", \"TargetAuditEntity\": \"ConfirmedOrderStatsAudit\", \"RuleName\": \"ConfirmedOrderStatsRule\", \"SummarizationMsgType\": \"ConfirmedOrderStatsMsgType\", \"TemporalLevel\": \"Daily\", \"SourceTemporalFieldName\": \"CreatedTimestamp\", \"TargetTemporalFieldName\": \"AggregationDateTime\", \"LeafLevel\": \"Order\", \"AggregationEventFilter\": [ { \"FilterPath\": \"Order\", \"FilterCondition\": \"SellingChannel = 'Store' AND IsConfirmed = true AND IsPostVoid = false AND IsCancelled = false AND (MerchSaleLineCount > 0 OR MerchReturnLineCount > 0)\" } ], \"AggregationEventMeasure\": [ { \"SourceFieldName\": \"Order.OrderId\", \"SourceAggregationType\": \"Counter\", \"TargetFieldName\": \"MerchTotalOrderCount\", \"TargetAggregationType\": \"Sum\" } ], \"AggregationEventGroupBy\": [ { \"SourceFieldName\": \"Order.SellingLocationId\", \"TargetFieldName\": \"SellingLocationId\" } ] } ] } What is not allowed to be modified in an aggregationEvent AggregationEventGroupBy Cannot be changed as its the business key of TargetAuditEntity and TargetEntity What is allowed to be modified in an aggregationEvent AggregationEventFilter can be modified. Existing condition can be modified to suit the needs. Sample: Removed the MerchSaleLineCount > 0 OR MerchReturnLineCount > 0 part from query AggregationEventFilter { \"FilterPath\": \"Order\", \"FilterCondition\": \"SellingChannel = 'Store' AND IsConfirmed = true AND IsPostVoid = false AND IsCancelled = false\" } Sample: Adding a new filter condition even on child entities is allowed as below. In this case make sure to change the LeafLevel (lowest level of grouping in the aggregation process) to OrderLine New Filter - Aggregation Event \"LeafLevel\": \"OrderLine\", \"AggregationEventFilter\": [ { \"FilterPath\": \"Order\", \"FilterCondition\": \"SellingChannel = 'Store' AND IsConfirmed = true AND IsPostVoid = false AND IsCancelled = false AND (MerchSaleLineCount > 0 OR MerchReturnLineCount > 0)\" }, { \"FilterPath\": \"Order.OrderLine\", \"FilterCondition\": \"IsCancelled = false AND IsNonMerchandise = false AND IsReturn = false\" } ] AggregationEventMeasure can be modified. Its an array and multiple EventMeasures can be added. Just note AggregationEventFilter condition will remain same for all AggregationEventMeasure's. If different filter condition is required add a new AggregationEventRule. New Targets can be added along with existing. Aggregation Event Measure \"AggregationEventMeasure\": [ { \"SourceFieldName\": \"Order.OrderId\", \"SourceAggregationType\": \"Counter\", \"TargetFieldName\": \"MerchTotalOrderCount\", \"TargetAggregationType\": \"Sum\" }, { \"SourceFieldName\": \"Order.OrderLine.Quantity\", \"SourceAggregationType\": \"Sum\", \"TargetFieldName\": \"NbrOfMerchItemsSold\", \"TargetAggregationType\": \"Sum\" } ] Target can be modified to point to another existing base field in TargetAuditEntity and TargetEntity. Aggregation - Modify Target { \"SourceFieldName\": \"Order.OrderId\", \"SourceAggregationType\": \"Counter\", \"TargetFieldName\": \"<Existing Base entityfield>\", \"TargetAggregationType\": \"Sum\" } Target can be modified to point to new Extended Attribute in TargetAuditEntity and TargetEntity. Make sure to add extended attribute in both TargetAuditEntity and TargetEntity. Aggregation - Modify target with new ext attribute \"AggregationEventMeasure\": [ { \"SourceFieldName\": \"Order.OrderId\", \"SourceAggregationType\": \"Sum\", \"TargetFieldName\": \"Extended.SameStoreSaleCount\", \"TargetAggregationType\": \"Sum\" } ] Adding new Aggregation Event Rule It is allowed to add new custom AggregationEventRule. While adding newAggregationEventRule, make sure to keep AggregationEventGroupBy same as that in base AggregationEventRule, as Group by fields is businessKey of TargetAuditEntity and TargetEntity and will not work correctly if different group by is used. New Aggregation Event Rule \"AggregationEventRule\":[ { \"TargetEntity\": \"ConfirmedOrderStats\", \"TargetAuditEntity\": \"ConfirmedOrderStatsAudit\", \"RuleName\": \"ConfirmedOrderStatsRule\", \"SummarizationMsgType\": \"ConfirmedOrderStatsMsgType\", \"TemporalLevel\": \"Daily\", \"SourceTemporalFieldName\": \"CreatedTimestamp\", \"TargetTemporalFieldName\": \"AggregationDateTime\", \"LeafLevel\": \"Order\", \"AggregationEventFilter\": [ { \"FilterPath\": \"Order\", \"FilterCondition\": \"SellingChannel = 'Store' AND IsConfirmed = true AND IsPostVoid = false AND IsCancelled = false AND (MerchSaleLineCount > 0 OR MerchReturnLineCount > 0)\" } ], \"AggregationEventMeasure\": [ { \"SourceFieldName\": \"Order.Extended.SameStoreSaleCount\", \"SourceAggregationType\": \"Sum\", \"TargetFieldName\": \"Extended.SameStoreSaleCount\", \"TargetAggregationType\": \"Sum\" } ], \"AggregationEventGroupBy\": [ { \"SourceFieldName\": \"Order.SellingLocationId\", \"TargetFieldName\": \"SellingLocationId\" } ] } ] Extended fields can be used as source fields Aggregation Event - Ext Field as source \"AggregationEventMeasure\": [ { \"SourceFieldName\": \"Order.Extended.SameStoreSaleCount\", \"SourceAggregationType\": \"Sum\", \"TargetFieldName\": \"Extended.SameStoreSaleCount\", \"TargetAggregationType\": \"Sum\" } ] SourceTemporalFieldName can be changed to use any dateTime field. Only BusinessDate with date field is allowed for now. Aggregation - SourceField \"SourceTemporalFieldName\": \"UpdatedTimestamp\" \"SourceTemporalFieldName\": \"BusinessDate\" Fields that are included in order payload sent to agg-omni Payload published by order component is controlled through below responseTemplate. If additional fields are required override the template at specific org level. For Example if we need to use Extended Attributes in AggregationEvent or reportConfig then add in this template. {url}/order/api/fwcore/responseTemplate/save Update theOrgId field in payload Aggregation - Order Payload to agg-omni { \"TemplateId\": \"ConfirmedOrderStatsTemplate\", \"OrgId\" : <OrganizationId for which template needs to be overridden> \"TemplateJson\": { \"IsConfirmed\": null, \"IsCancelled\": null, \"IsPostVoided\": null, \"OrderId\": null, \"SellingChannel\":null, \"BusinessDate\": null, \"CreatedTimestamp\": null, \"MerchSaleLineCount\": null, \"MerchReturnLineCount\": null, \"CustomerId\": null, \"SellingLocationId\": null, \"OrganizationId\": null, \"OrderLine\": { \"IsCancelled\": null, \"IsNonMerchandise\": null, \"IsReturn\": null, \"OrderLineSubtotalWithDiscount\":null, \"OrderLineSubTotal\": null, \"TotalDiscountOnItem\": null, \"Quantity\": null } } } Customising ReportConfig Event in commonutil component Do not remove any base ReportFieldConfig with FieldType as Input. It is not allowed to be modified in reportConfig. Allowed modification in reportConfig New ReportFieldConfig with fieldType as Input can be added. This can be added if additional filtering is needed while fetching records from TargetEntity. FieldName should be a field in all entities from which data is pulled, basically entities are GroupName of all ReportFieldConfig’s with FieldType Output and GroupName populated . New ReportFieldConfig with fieldType as Output and with either GroupName or Expression can be added. GroupName should be an entity present in agg-omni component and FieldName should be a filed in entity. Extended attribute field of TargetEntity can be configured as output Field with GroupName populated. It can be a new ReportFieldConfig or even base output ReportFieldConfig can be edited. Sample ReportFieldConfig below. {Url}/commonutil/api/commonutil/reportConfig/save Aggregation - Allowed reportConfig modification { \"ReportName\": \"SaleMetricsReport\", \"Description\": \"Base Sale Metric Report\", \"PurgeAfterDays\": 2555, \"FetchRealTimeData\": true, \"ReportFieldConfig\": [ { \"FieldName\": \"Extended.SameStoreSaleCount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"Integer\" }, \"DisplayName\": \"Total Order Count from Same Store\", \"GroupName\": \"ConfirmedOrderStats\" } ] } In output SameStoreSaleCount will be returned without Extended. See example below. Aggregation - SameStoreSaleCount { \"success\": true, \"header\": null, \"data\": { \"MerchTotalOrderCount\": 6, \"SameStoreSaleCount\": 3 } } Above configured output field using Extended Attribute can be utilised in expressions. To have Extended field as an expression, modify the ReportConfig in commonutil. Make sure to remove “Extended.” from expressions. Eg below SameStoreSaleCount value is read from Extended.SameStoreSaleCount, but in expression it should have only SameStoreSaleCount. Any expressions supported by exp4j 0.4.8 API can be used. {URL}/commonutil/api/commonutil/reportConfig/save Aggregation - Using ext fields { \"ReportName\": \"SaleMetricsReport\", \"Description\": \"Base Sale Metric Report\", \"PurgeAfterDays\": 2555, \"FetchRealTimeData\": true, \"ReportFieldConfig\": [ { \"FieldName\": \"Extended.SameStoreSaleCount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"Integer\" }, \"DisplayName\": \"Total Order Count from Same Store\", \"GroupName\": \"ConfirmedOrderStats\" }, { \"FieldName\": \"FlashSales\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"Expression\": \"TotalOrderCount- abs(SameStoreSaleCount)\", <Should remove Extended. and use only field in expressions.> \"DisplayName\": \"Flash Sales\" } ] } Sample Use cases for customization Use case 1: Ignore ecom sales calculation return metrics sent to net sales Custom Requirement : Net Sales = [Sales from my store today] – [Returns where the sale originated from any store] (If a original order is a ecom order which was returned in store, this should be ignored). Note, this should ignore/exclude any returns from sales that were made from a different channel (ecomm, call center) Challenge: Parent order details are not published by event producer Framework to agg-omni component. Only parentOrderId will be present in payload and whether return is from same store or ecom cannot be determined directly. Solution: Add an extended attribute in orderLine entity and populate it during order confirmation, say boolean field StoreSaleItem. ( Loop through all orderLines with IsReturn = True and determine if sale was performed from store. Fetch parent order using parentOrderId present in orderLine and verify if order is from store based on SellingChannel in OrderLine. Then populate Extended.StoreSaleItem field in OrderLine). Update ConfirmedOrderStatsTemplate responseTemplate in order to include extended attributes. . Refer What all fields are included in Order Payload sent to agg-omni section. FlashSales is shown in UI using the formula \"MerchSaleItemsSubtotal- abs(MerchReturnItemsSubtotal)\".ReportFieldConfig below { \"FieldName\": \"FlashSales\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"Expression\": \"MerchSaleItemsSubtotal- abs(MerchReturnItemsSubtotal)\", \"DisplayName\": \"Flash Sales\" } Modify AggregationEventRule in agg-omni aggregationEvent entity. Add StoreSaleItem field in OrderLine AggregationEventFilter. Change is in line 17 below Aggregation Framework - UseCase1 { \"TargetEntity\": \"ConfirmedOrderLineStats\", \"TargetAuditEntity\": \"ConfirmedOrderLineStatsAudit\", \"RuleName\": \"MerchReturnItemsSubtotalRule\", \"TemporalLevel\": \"Daily\", \"SourceTemporalFieldName\": \"BusinessDate\", \"TargetTemporalFieldName\": \"AggregationDateTime\", \"LeafLevel\": \"Order.OrderLine\", \"AggregationEventFilter\": [ { \"FilterPath\": \"Order\", \"FilterCondition\": \"SellingChannel.SellingChannelId = 'Store' AND IsConfirmed = true AND IsPostVoided = false AND IsCancelled = false\" }, { \"FilterPath\": \"Order.OrderLine\", \"FilterCondition\": \"IsCancelled = false AND IsNonMerchandise = false AND IsReturn = true AND Extended.StoreSaleItem = true\" } ], \"AggregationEventMeasure\": [ { \"SourceFieldName\": \"Order.OrderLine.OrderLineSubtotalWithDiscount\", \"SourceAggregationType\": \"Sum\", \"TargetFieldName\": \"MerchReturnItemsSubtotal\", \"TargetAggregationType\": \"Sum\" } ], \"AggregationEventGroupBy\": [ { \"SourceFieldName\": \"Order.SellingLocationId\", \"TargetFieldName\": \"LocationId\" } ] } Use case 2: Ignore returns of sales from other stores Custom requirement : Net Sales = [Sales from my store today] – [Returns where the sale originated from my store] (returns made were original order is not from current store should be ignored). Note, this should ignore/exclude any returns from sales that were made from a different channel (ecomm, call center) or from a different store Challenge: Parent order details are not published by event producer Framework to agg-omni component. Only parentOrderId will be present in payload and whether return is from same store or ecom cannot be determined directly. Solution: Add an extended attribute in orderLine entity and populate it during order confirmation, say boolean field SameStoreSaleItem. ( Loop through all orderLines with IsReturn = True and determine if sale was performed from same store. Fetch parent order using parentOrderId present in orderLine and verify if order is from same store based on SellingLocationId in parent order. Then populate Extended.SameStoreSaleItem field in OrderLine). Update ConfirmedOrderStatsTemplate responseTemplate in order to include extended attributes. . Refer What all fields are included in Order Payload sent to agg-omni section. FlashSales is shown in UI using the formula \"MerchSaleItemsSubtotal- abs(MerchReturnItemsSubtotal)\".ReportFieldConfig below { \"FieldName\": \"FlashSales\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"Expression\": \"MerchSaleItemsSubtotal- abs(MerchReturnItemsSubtotal)\", \"DisplayName\": \"Flash Sales\" } Modify AggregationEventRule in agg-omni aggregationEvent entity. Add SameStoreSaleItem field in OrderLine AggregationEventFilter.  Change is in line 17 below. Aggregation - UseCase2 { \"TargetEntity\": \"ConfirmedOrderLineStats\", \"TargetAuditEntity\": \"ConfirmedOrderLineStatsAudit\", \"RuleName\": \"MerchReturnItemsSubtotalRule\", \"TemporalLevel\": \"Daily\", \"SourceTemporalFieldName\": \"BusinessDate\", \"TargetTemporalFieldName\": \"AggregationDateTime\", \"LeafLevel\": \"Order.OrderLine\", \"AggregationEventFilter\": [ { \"FilterPath\": \"Order\", \"FilterCondition\": \"SellingChannel.SellingChannelId = 'Store' AND IsConfirmed = true AND IsPostVoided = false AND IsCancelled = false\" }, { \"FilterPath\": \"Order.OrderLine\", \"FilterCondition\": \"IsCancelled = false AND IsNonMerchandise = false AND IsReturn = true AND Extended.SameStoreSaleItem = true\" } ], \"AggregationEventMeasure\": [ { \"SourceFieldName\": \"Order.OrderLine.OrderLineSubtotalWithDiscount\", \"SourceAggregationType\": \"Sum\", \"TargetFieldName\": \"MerchReturnItemsSubtotal\", \"TargetAggregationType\": \"Sum\" } ], \"AggregationEventGroupBy\": [ { \"SourceFieldName\": \"Order.SellingLocationId\", \"TargetFieldName\": \"LocationId\" } ] } Use case 3: Show new field Custom requirement: Display new field Returns Total from same store in sale metrics screen. [Returns where the sale originated from my store] (returns made were original order is not from current store should be ignored). Note, this should ignore/exclude any returns from sales that were made from a different channel (ecomm, call center) or from a different store. Challenge: Parent order details are not published by event producer Framework to agg-omni component. Only parentOrderId will be present in payload and whether return is from same store or ecom cannot be determined directly. UI customisation is not supported currently to display additional fields on either Classic or Iris POS screens. Solution: Add an extended attribute in orderLine entity and populate it during order confirmation, say boolean field SameStoreSaleItem. ( Loop through all orderLines with IsReturn = True and determine if sale was performed from same store. Fetch parent order using parentOrderId present in orderLine and verify if order is from same store based on SellingLocationId in parent order. Then populate Extended.SameStoreSaleItem field in OrderLine). Update ConfirmedOrderStatsTemplate responseTemplate in order to include extended attributes. . Refer What all fields are included in Order Payload sent to agg-omni section. Modify AggregationEventRule in agg-omni aggregationEvent entity. Add SameStoreSaleItem field in OrderLine AggregationEventFilter.  Change is in line 17 below. Aggregation - Use case 3 modify event rule { \"TargetEntity\": \"ConfirmedOrderLineStats\", \"TargetAuditEntity\": \"ConfirmedOrderLineStatsAudit\", \"RuleName\": \"MerchReturnItemsSubtotalRule\", \"TemporalLevel\": \"Daily\", \"SourceTemporalFieldName\": \"BusinessDate\", \"TargetTemporalFieldName\": \"AggregationDateTime\", \"LeafLevel\": \"Order.OrderLine\", \"AggregationEventFilter\": [ { \"FilterPath\": \"Order\", \"FilterCondition\": \"SellingChannel.SellingChannelId = 'Store' AND IsConfirmed = true AND IsPostVoided = false AND IsCancelled = false\" }, { \"FilterPath\": \"Order.OrderLine\", \"FilterCondition\": \"IsCancelled = false AND IsNonMerchandise = false AND IsReturn = true AND Extended.SameStoreSaleItem = true\" } ], \"AggregationEventMeasure\": [ { \"SourceFieldName\": \"Order.OrderLine.OrderLineSubtotalWithDiscount\", \"SourceAggregationType\": \"Sum\", \"TargetFieldName\": \"Extended.SameStoreMerchReturnItemsSubtotal\", \"TargetAggregationType\": \"Sum\" } ], \"AggregationEventGroupBy\": [ { \"SourceFieldName\": \"Order.SellingLocationId\", \"TargetFieldName\": \"LocationId\" } ] } Add Extended Attribute in TargetEntity and TargetAuditEntity of agg-omni. In above example its the TargetFieldName that needs to be added as extended attribute in both entities which is Extended.SameStoreMerchReturnItemsSubtotal. Modify commonutil reportConfig and add a new Output ReportFieldConfig. If needs to be used as output add the first ReportFieldConfig entry alone.  If need to be used as an expression, then add both ReportFieldConfig as from below example. Aggregatioin - UseCase3 { \"ReportName\": \"SaleMetricsReport\", \"Description\": \"Base Sale Metric Report\", \"PurgeAfterDays\": 2555, \"FetchRealTimeData\": true, \"ReportFieldConfig\": [ { \"FieldName\": \"Extended.SameStoreMerchReturnItemsSubtotal\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"Integer\" }, \"DisplayName\": \"Total Order Count from Same Store\", \"GroupName\": \"ConfirmedOrderStats\" }, { \"FieldName\": \"FlashSales\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"Expression\": \"TotalOrderCount- abs(SameStoreMerchReturnItemsSubtotal)\", <Should remove Extended. and use only field in expressions.> \"DisplayName\": \"Flash Sales\" } ] }"
}