{
  "success": true,
  "permalink": "outbound-message-types",
  "title": "Outbound Message Types",
  "content": "\r\n\r\n\r\n<div class=\"hiq-page-wrap\">\r\n<div class=\"hiq-t-wrap\">\r\n\t\t\r\n  \t  <div class=\"hiq-t \">\r\n\t\t\t\t<ul class=\"breadcrumbs\"><li><a class=\"breadcrumb-links\" hqid=\"1788908\"  href=\"/home\">Home</a></li> <li><span>&rsaquo;&rsaquo;</span><a hqid=\"2161445\" href=\"/administrators\" class=\"breadcrumb-links\">Administrator Tools</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"3528006\" href=\"/global-utilities\" class=\"breadcrumb-links\">Global Utilities</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"3589448\" href=\"/message-types\" class=\"breadcrumb-links\">Message Types</a></li><li> <span>››</span>Outbound Message Types</li></ul>  \t\r\n\t\t<h2>Outbound Message Types</h2>\r\n\r\n<p></p>\r\n\r\n<div class=\"info\"><ul><li><a href=\"/outbound-message-types$overview\">Overview</a></li><li><a href=\"/outbound-message-types$accessing-nbsp-the-outbound-message-type-ui-nbsp\">Accessing&nbsp;the Outbound Message Type UI&nbsp;</a></li><li><a href=\"/outbound-message-types$applying-filters-on-nbsp-onbound-message-type-page\">Applying Filters on&nbsp;Onbound Message Type Page</a></li><li><a href=\"/outbound-message-types$editing-and-viewing-outbound-message-type-nbsp\">Editing and Viewing Outbound Message Type&nbsp;</a></li><li><a href=\"/outbound-message-types$outbound-message-type-attributes\">Outbound Message Type Attributes</a></li><li><a href=\"/outbound-message-types$outbounddeliveryconfig-attributes\">OutboundDeliveryConfig Attributes</a></li></ul></div>\r\n\r\n<h3 data-renderer-start-pos=\"1\" id=\"Overview\"><a name=\"overview\" id=\"overview\"></a>Overview</h3>\r\n\r\n<p>OutBoundMessageTypes represent the types of messages a component sends out. Each message type is linked to a specific queue in the broker, where you can configure how it should be sent.</p>\r\n\r\n<p>The OutBoundMessageType UI provides a simple interface to manage these message types for each component. It replaces tools like Postman, offering a more user-friendly and efficient way to handle message publishing.</p>\r\n\r\n<h3 data-renderer-start-pos=\"250\"><a name=\"accessing-nbsp-the-outbound-message-type-ui-nbsp\" id=\"accessing-nbsp-the-outbound-message-type-ui-nbsp\"></a>Accessing&nbsp;the Outbound Message Type UI&nbsp;</h3>\r\n\r\n<ol>\r\n\t<li>Search and select &#39;ProActive&#39; from the main menu.&nbsp;</li>\r\n\t<li>Navigate to Messaging &gt; Outbound Message Types.</li>\r\n</ol>\r\n\r\n<h3><a name=\"applying-filters-on-nbsp-onbound-message-type-page\" id=\"applying-filters-on-nbsp-onbound-message-type-page\"></a>Applying Filters on&nbsp;Onbound Message Type Page</h3>\r\n\r\n<p>The left navigation pane of the&nbsp;Outbound Message Type UI enables you to filter outbound message types using the OuntBoundMessageType entity&rsquo;s attributes.</p>\r\n\r\n<p>To filter the outbound types, enter the values in the corresponding text box in the filter panel and press enter to display the corresponding outbound message type.</p>\r\n\r\n<h3><a name=\"editing-and-viewing-outbound-message-type-nbsp\" id=\"editing-and-viewing-outbound-message-type-nbsp\"></a>Editing and Viewing Outbound Message Type&nbsp;</h3>\r\n\r\n<p>Search and select the outbound message type you want to view or edit&nbsp;on the Outbound Message Type UI.</p>\r\n\r\n<ul>\r\n\t<li>Click <strong>Detail </strong>to view the outbound message type details</li>\r\n\t<li>Click <strong>Edit </strong>to update the outbound message type details.</li>\r\n</ul>\r\n\r\n<h3><a name=\"outbound-message-type-attributes\" id=\"outbound-message-type-attributes\"></a>Outbound Message Type Attributes</h3>\r\n\r\n<p>The OutBoundMessageTypes has the following attributes</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width: 930px;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\" style=\"width: 182px;\"><strong>Attribute Name</strong></th>\r\n\t\t\t<th scope=\"col\" style=\"width: 744px;\"><strong>Description</strong></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 168px;\">Message Type</td>\r\n\t\t\t<td style=\"width: 729px;\">This field acts as a unique identifier for an OutBoundMessageType, working together with the profile ID.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 168px;\">\r\n\t\t\t<p>Queue</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width: 729px;\">The queue name that the message type is mapped to. The user can specify what the queue name should be. If not specified, the queue name is defaulted to the message type itself.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 168px;\">\r\n\t\t\t<p>Broker</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width: 729px;\">\r\n\t\t\t<p>This field specifies the name of the broker (the system that manages message communication, like Kafka, SQS, or Google Kafka). It&rsquo;s used when a specific broker needs to be configured or when certain properties of the default broker setup need to be overridden. If left empty, the system will assume RabbitMQ as the default broker.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 168px;\">\r\n\t\t\t<p>Label</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width: 729px;\">\r\n\t\t\t<p>This field identifies the visibility type of the broker to connect to, whether it is a private broker in a resident&#39;s room or a shared broker. Supported values are private, shared, or null. A null value implies a shared broker</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 168px;\">\r\n\t\t\t<p>Is Disabled</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width: 729px;\">This flag can be enabled to avoid sending messages to the outbound message type.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 168px;\">\r\n\t\t\t<p>Is User Override&nbsp;</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width: 729px;\">\r\n\t\t\t<p>This flag lets you change the default user associated with a message listener. Normally, the system uses the user and organization from the current transaction context to ensure consistency across all related actions, even in asynchronous processes. For example, if a user creates an order, all updates tied to that order are processed under the same user for better traceability.</p>\r\n\r\n\t\t\t<p>However, in some cases, like when different components handle the message asynchronously, this setup can cause issues. If the original user doesn&rsquo;t have the necessary permissions in the consumer component, some updates might fail.</p>\r\n\r\n\t\t\t<p>To avoid this, you can use a system-level user (system-msg-user) for the consumer component by including it in the message headers. To enable this, set the isUserOverride flag to true in the OutBoundMessageType.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 168px;\">\r\n\t\t\t<p>Transactional</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width: 729px;\">\r\n\t\t\t<p>This flag indicates if the message type is transactional or not. If the message is supposed to participate in the parent transaction that produces it, only then should this field be set to true. A transactional message will not be sent until the parent transaction is committed. If it rolls back, the message also will not be sent.</p>\r\n\r\n\t\t\t<p>On the other hand, a non-transactional (this flag set to false) message will be sent irrespective of whether the transaction is successfully committed or not. But there are different flavors to the non-transactional behavior:</p>\r\n\r\n\t\t\t<p>In case a transaction is active while sending a non-transactional message, the message will be delayed till the beforeCommit hook of the parent transaction.</p>\r\n\r\n\t\t\t<p>In case there is no transaction active, the non-transactional message will be sent immediately.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 168px;\">\r\n\t\t\t<p>Persist to Message Store</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width: 729px;\">\r\n\t\t\t<p>Setting this flag to true will ensure that the message is stored in the elastic. The entire message content and summary (status etc.) will be stored for future reference and reconciliation if needed. This flag drives the TRANLOG feature and should be used judiciously to avoid un-necessary load on the system.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 168px;\">\r\n\t\t\t<p>Message Category</p>\r\n\r\n\t\t\t<p>&nbsp;</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width: 729px;\">\r\n\t\t\t<p>Categorizes a message. For.e.g batch message, functional message etc. Users can categorize the messages based on their needs. But this field is mostly used for messages produced by a batch job. It is mandated that the batch job messages should have batchmsg &nbsp;as a category. The behavior of the batch messages is little different from any other message. For e.g. a messageType which has &#39;batchmsg&#39; as the category, is intrinsically non-transactional and non-Persistent</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 168px;\">\r\n\t\t\t<p>Sequence Key Json Path</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width: 729px;\">\r\n\t\t\t<p>This is the JsonPath in the message payload used to find the key that ensures Kafka sends messages to the same partition, maintaining their order.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 168px;\">\r\n\t\t\t<p>Compression Type</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width: 729px;\">\r\n\t\t\t<p>Indicates the compression algorithm to use when sending compressed payloads to queues. The presence of this field denotes that compression will happen for all payloads sent to this message type.</p>\r\n\r\n\t\t\t<p>Currently, only RabbitMQ and Google PubSub Brokers support compression.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 168px;\">\r\n\t\t\t<p>Payload Type</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width: 729px;\">\r\n\t\t\t<p>Indicates the data type of the payload. This will be used for deciding how to serialize the payload. Any null or non-supported value will be treated as the default of json&nbsp;</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 168px;\">\r\n\t\t\t<p>Condition Expression&nbsp;</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width: 729px;\">An MVEL condition string or environment variable that decides at runtime whether messages will be sent to this message type or not.</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><a name=\"outbounddeliveryconfig-attributes\" id=\"outbounddeliveryconfig-attributes\"></a>OutboundDeliveryConfig Attributes</h3>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width: 930px;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\" style=\"width: 182px;\"><strong>Attribute Name</strong></th>\r\n\t\t\t<th scope=\"col\" style=\"width: 744px;\"><strong>Description</strong></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 168px;\">\r\n\t\t\t<p>Outbound Delivery Config Id&nbsp;</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width: 729px;\">A unique identifier for the outbound delivery configuration. This is the business key of this entity.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 168px;\">\r\n\t\t\t<p>Delivery Delay</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width: 729px;\">The interval for delaying the message. The values can be &#39;30 minute&#39;, &#39;1 hour&#39;, &#39;2 day&#39;, and so on.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 168px;\">\r\n\t\t\t<p>Grouping Type</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width: 729px;\">\r\n\t\t\t<p>The type of grouping is either DEDUPLICATION or CONSOLIDATION.&nbsp;</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 168px;\">\r\n\t\t\t<p>Grouping Keys</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width: 729px;\">\r\n\t\t\t<p>A single JSON path or CSV of JSON paths pointing to a value on the payload. The value defined by this path will be used to group the messages.&nbsp;</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 168px;\">\r\n\t\t\t<p>Grouping Interval</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width: 729px;\">The time interval for grouping messages. The values can be &#39;30 minute&#39;, &#39;1 hour&#39;, etc.&nbsp;</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 168px;\">\r\n\t\t\t<p>Consolidation Max Size</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width: 729px;\">The number of individual records to be sent in one consolidated message.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 168px;\">\r\n\t\t\t<p>Deduplication Delivery Mode</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width: 729px;\">Mode of Deduplication - [BEGINNING, ENDING, BOTH(BEGINNING and ENDING)]. This determines when the deduplication message will be sent. Either at the beginning of the window, the end of the window, or both the beginning and the end.&nbsp;</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n\t  </div>\r\n </div>\r\n <div id=\"ui-page-fb-wrap\"></div>\r\n <div class=\"hiq-footer-wrap\">\r\n    \r\n                \r\n  </div>\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n",
  "content_length": 12058,
  "scraped_at": "2025-08-09T22:39:26.525328"
}