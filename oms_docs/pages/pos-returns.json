{
  "id": "3571962",
  "permalink": "pos-returns",
  "title": "POS Returns",
  "type": "topic",
  "level": 5,
  "path": "Manhattan Active® Omni/Store/Process & Configuration Guides/Point of Sale/POS Guides/POS Returns",
  "raw_item": {
    "id": "3571962",
    "text": "POS Returns",
    "title": "POS Returns",
    "permalink": "pos-returns",
    "leaf": false,
    "droppable": true,
    "expanded": true,
    "closed": true,
    "visible": true,
    "editable": true,
    "type": "topic",
    "topicType": "0",
    "status": "1",
    "iconCls": "icon-topic",
    "cls": "",
    "folder_id": "430379",
    "parent": "f;430379",
    "created_date": "1741370548",
    "modified_date": "1753964975",
    "instructor_id": null,
    "loaded": true,
    "haschildren": false,
    "callout": "0",
    "order": "3"
  },
  "success": true,
  "content": "\r\n\r\n\r\n<div class=\"hiq-page-wrap\">\r\n<div class=\"hiq-t-wrap\">\r\n\t\t\r\n  \t  <div class=\"hiq-t \">\r\n\t\t\t\t<ul class=\"breadcrumbs\"><li><a class=\"breadcrumb-links\" hqid=\"1788908\"  href=\"/home\">Home</a></li> <li><span>&rsaquo;&rsaquo;</span><a hqid=\"3500940\" href=\"/omni\" class=\"breadcrumb-links\">Manhattan Active® Omni</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"3426481\" href=\"/store-3\" class=\"breadcrumb-links\">Store</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158412\" href=\"/process-configuration-guides-3\" class=\"breadcrumb-links\">Process & Configuration Guides</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158737\" href=\"/point-of-sale\" class=\"breadcrumb-links\">Point of Sale</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"3433322\" href=\"/pos-iris-guides\" class=\"breadcrumb-links\">POS Guides</a></li><li> <span>››</span>POS Returns</li></ul>  \t\r\n\t\t<h1><a name=\"pos-returns-and-nbsp-exchange-guide\" id=\"pos-returns-and-nbsp-exchange-guide\"></a>POS Returns and&nbsp;Exchange Guide</h1>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ul><li><a href=\"/pos-returns$pos-returns-and-nbsp-exchange-guide\">POS Returns and&nbsp;Exchange Guide</a><ul><li><a href=\"/pos-returns$types-of-returns\">Types of Returns</a><ul><li><a href=\"/pos-returns$validated-return\">Validated Return</a></li><li><a href=\"/pos-returns$non-validated-or-standalone-return\">Non-Validated or Standalone return</a></li><li><a href=\"/pos-returns$mixed-returns-combination-of-validated-and-standalone\">Mixed Returns - Combination of Validated and Standalone</a></li><li><a href=\"/pos-returns$ship-to-address-return-pick-up-in-store-return-nbsp\">Ship To Address Return/Pick-up In Store Return&nbsp;</a></li></ul></li><li><a href=\"/pos-returns$return-mode\">Return Mode</a><ul><li><a href=\"/pos-returns$transaction-detail-quantity-field\">Transaction Detail Quantity field</a></li><li><a href=\"/pos-returns$exchange\">Exchange</a></li></ul></li><li><a href=\"/pos-returns$matching\">Matching</a><ul><li><a href=\"/pos-returns$general-item-and-orderline-isreturnable-attributes\">General Item and orderLine isReturnable Attributes</a><ul><li><a href=\"/pos-returns$gift-card-returnability\">Gift Card Returnability</a></li></ul></li><li><a href=\"/pos-returns$special-order-age-policy-matching-rule\">Special Order Age Policy Matching Rule</a></li><li><a href=\"/pos-returns$automatch-return-items-for-attached-customer\">Automatch Return Items for Attached Customer</a></li><li><a href=\"/pos-returns$tie-breaker-during-matching\">Tie Breaker during Matching</a><ul><li><a href=\"/pos-returns$price-rank-in-price-tie-break-logic\">Price Rank in Price Tie-break Logic</a></li></ul></li></ul></li><li><a href=\"/pos-returns$refund-price-determination\">Refund Price Determination</a><ul><li><a href=\"/pos-returns$validated-pricing\">Validated pricing</a></li><li><a href=\"/pos-returns$stand-alone-item-pricing\">Stand alone item pricing</a></li></ul></li><li><a href=\"/pos-returns$flow-variations\">Flow Variations</a><ul><li><a href=\"/pos-returns$return-reason-code-and-disposition\">Return reason code and disposition</a></li><li><a href=\"/pos-returns$return-fees-restocking-fees\">Return Fees (\"Restocking\" fees)</a><ul><li><a href=\"/pos-returns$order-and-orderline-nbsp-return-fees\">Order and Orderline&nbsp;return fees</a></li><li><a href=\"/pos-returns$return-fee-at-item-level\">Return fee at item level</a></li></ul></li></ul></li><li><a href=\"/pos-returns$refund-process\">Refund Process</a><ul><li><a href=\"/pos-returns$payment-type-selection-rules\">Payment Type Selection Rules</a><ul><li><a href=\"/pos-returns$rules-for-validated-returns\">Rules for Validated Returns</a></li><li><a href=\"/pos-returns$rules-for-unvalidated-stand-alone-returns\">Rules for Unvalidated Stand Alone Returns</a></li><li><a href=\"/pos-returns$other-related-nbsp-configurations-governing-refund-payment-types\">Other related&nbsp;Configurations Governing Refund Payment Types</a><ul><li><a href=\"/pos-returns$maximum-refund-nbsp-limit-during-returns\">Maximum refund&nbsp;limit during returns</a></li><li><a href=\"/pos-returns$refund-threshold\">Refund Threshold</a></li><li><a href=\"/pos-returns$alternate-refund-payment-types-for-override-tender\">Alternate refund payment types for Override Tender</a></li><li><a href=\"/pos-returns$allow-cash-refund-above-till-amount\">Allow Cash Refund Above Till Amount</a></li></ul></li><li><a href=\"/pos-returns$complex-refund-payment-type-recommendations\">Complex Refund Payment Type recommendations</a></li><li><a href=\"/pos-returns$payment-form-support-in-refund\">Payment Form Support In Refund</a></li></ul></li><li><a href=\"/pos-returns$processing-refund-via-terminal\">Processing Refund via Terminal</a></li></ul></li><li><a href=\"/pos-returns$refund-failure\">Refund Failure</a></li><li><a href=\"/pos-returns$return-order-edit-following-checkout\">Return order edit following Checkout</a></li></ul></li></ul>\r\n<p>The Return/Exchange function allows customers to return previously purchased items. Associates may create a Return sub-transaction within a cart at any time. An order can be partially or entirely returned.</p>\r\n\r\n<p><!--[if gte vml 1]><v:shapetype\r\n id=\"_x0000_t75\" coordsize=\"21600,21600\" o:spt=\"75\" o:preferrelative=\"t\"\r\n path=\"m@4@5l@4@11@9@11@9@5xe\" filled=\"f\" stroked=\"f\">\r\n <v:stroke joinstyle=\"miter\"/>\r\n <v:formulas>\r\n  <v:f eqn=\"if lineDrawn pixelLineWidth 0\"/>\r\n  <v:f eqn=\"sum @0 1 0\"/>\r\n  <v:f eqn=\"sum 0 0 @1\"/>\r\n  <v:f eqn=\"prod @2 1 2\"/>\r\n  <v:f eqn=\"prod @3 21600 pixelWidth\"/>\r\n  <v:f eqn=\"prod @3 21600 pixelHeight\"/>\r\n  <v:f eqn=\"sum @0 0 1\"/>\r\n  <v:f eqn=\"prod @6 1 2\"/>\r\n  <v:f eqn=\"prod @7 21600 pixelWidth\"/>\r\n  <v:f eqn=\"sum @8 21600 0\"/>\r\n  <v:f eqn=\"prod @7 21600 pixelHeight\"/>\r\n  <v:f eqn=\"sum @10 21600 0\"/>\r\n </v:formulas>\r\n <v:path o:extrusionok=\"f\" gradientshapeok=\"t\" o:connecttype=\"rect\"/>\r\n <o:lock v:ext=\"edit\" aspectratio=\"t\"/>\r\n</v:shapetype><v:shape id=\"Picture_x0020_1\" o:spid=\"_x0000_i1025\" type=\"#_x0000_t75\"\r\n style='width:11.5pt;height:11.5pt;visibility:visible;mso-wrap-style:square'>\r\n <v:imagedata src=\"file:///C:/Users/RTHOTT~1/AppData/Local/Temp/msohtmlclip1/01/clip_image001.gif\"\r\n  o:title=\"\"/>\r\n</v:shape><![endif]--><!--[if gte vml 1]><v:shapetype\r\n id=\"_x0000_t75\" coordsize=\"21600,21600\" o:spt=\"75\" o:preferrelative=\"t\"\r\n path=\"m@4@5l@4@11@9@11@9@5xe\" filled=\"f\" stroked=\"f\">\r\n <v:stroke joinstyle=\"miter\"/>\r\n <v:formulas>\r\n  <v:f eqn=\"if lineDrawn pixelLineWidth 0\"/>\r\n  <v:f eqn=\"sum @0 1 0\"/>\r\n  <v:f eqn=\"sum 0 0 @1\"/>\r\n  <v:f eqn=\"prod @2 1 2\"/>\r\n  <v:f eqn=\"prod @3 21600 pixelWidth\"/>\r\n  <v:f eqn=\"prod @3 21600 pixelHeight\"/>\r\n  <v:f eqn=\"sum @0 0 1\"/>\r\n  <v:f eqn=\"prod @6 1 2\"/>\r\n  <v:f eqn=\"prod @7 21600 pixelWidth\"/>\r\n  <v:f eqn=\"sum @8 21600 0\"/>\r\n  <v:f eqn=\"prod @7 21600 pixelHeight\"/>\r\n  <v:f eqn=\"sum @10 21600 0\"/>\r\n </v:formulas>\r\n <v:path o:extrusionok=\"f\" gradientshapeok=\"t\" o:connecttype=\"rect\"/>\r\n <o:lock v:ext=\"edit\" aspectratio=\"t\"/>\r\n</v:shapetype><v:shape id=\"Picture_x0020_1\" o:spid=\"_x0000_i1025\" type=\"#_x0000_t75\"\r\n style='width:11.5pt;height:11.5pt;visibility:visible;mso-wrap-style:square'>\r\n <v:imagedata src=\"file:///C:/Users/RTHOTT~1/AppData/Local/Temp/msohtmlclip1/01/clip_image001.gif\"\r\n  o:title=\"\"/>\r\n</v:shape><![endif]--></p>\r\n\r\n<p>When a customer is due a refund, the POS system&nbsp;keeps track of how the original order was paid for and determines the appropriate refund method. This can happen automatically (refund to original tender) or the employee can manually choose the refund method from a list of options (override tender list).</p>\r\n\r\n<p>Refer to Order Management - Returns and Exchanges -&nbsp;<a hqid=\"2161123\" href=\"/returns-exchanges-2\">Returns & Exchange Process</a>&nbsp;guide for more information regarding Order return data handling.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><a name=\"types-of-returns\" id=\"types-of-returns\"></a>Types of Returns</h2>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4><a name=\"validated-return\" id=\"validated-return\"></a>Validated Return</h4>\r\n\r\n<p>When a return item can be matched against a previous sale order,&nbsp;it is known as a validated return.&nbsp; The most familiar use case is that the customer has produced a valid receipt with an OrderId from the original sale of the item, but return items can be 'validated' when the order is&nbsp;identified from transaction searches - for example, following transaction search the order details represents a kind of 'virtual' receipt and items can be selected for return from this.&nbsp;</p>\r\n\r\n<p>There are multiple ways to reach a 'Validated' return. Users can perform a transaction search using the transaction tab, scan a receipt, or utilize the auto-search feature to retrieve customer history. When&nbsp;a validated return is initiated, the system&nbsp;automatically links the customer from the&nbsp;<strong>first matching sale invoice-item</strong>&nbsp;to the return transaction. This occurs unless a cashier has manually assigned a different customer to the cart.</p>\r\n\r\n<p>POS Store Config &gt; Store Common Config &gt; Enable Auto Search for Active Customer will automatically search customer's purchase history and associate a return item to the best matching original sales orderId.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4><a name=\"non-validated-or-standalone-return\" id=\"non-validated-or-standalone-return\"></a>Non-Validated or Standalone return</h4>\r\n\r\n<p>Non-Validated or Standalone Returns are return lines with items that cannot be matched to an original order - i.e., \"returns without receipt\".&nbsp;</p>\r\n\r\n<p>Items which are present on a supplied sale order,&nbsp;but:</p>\r\n\r\n<ol>\r\n\t<li>For which the orderLine denotes isReturnable \"False\" - this occurs for POS orders when the item master attributes item&gt;sellingAttributes&gt;returnableAtStore and returnableAtDC are both False at the time the item was included in the sale</li>\r\n\t<li>Which already been returned, or, were not fulfilled - in both cases the orderLine&gt;ReturnableQuantity will be 0.</li>\r\n</ol>\r\n\r\n<p>will also be considered unmatched.</p>\r\n\r\n<p>If they are allowed to be returned by the associate, it will be as unvalidated (\"return&nbsp;without receipt\") even though technically the customer may have presented a receipt.&nbsp;</p>\r\n\r\n<p>Validated cross-border returns are not supported. For example: If you purchase an item in US, then you cannot initiate a validated return in CA and refund to original payment method. This behavior is due to&nbsp;several complexities with currency conversion, taxes,&nbsp;order data visibility across different organization etc.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4><a name=\"mixed-returns-combination-of-validated-and-standalone\" id=\"mixed-returns-combination-of-validated-and-standalone\"></a>Mixed Returns - Combination of Validated and Standalone</h4>\r\n\r\n<p>When the cart has both validated and non-validated returns.</p>\r\n\r\n<p>Mixed&nbsp;Return example: One return item can be associated with an original order paid by credit card (validated return) and another can be standalone, not matched to an original order.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4><a name=\"ship-to-address-return-pick-up-in-store-return-nbsp\" id=\"ship-to-address-return-pick-up-in-store-return-nbsp\"></a>Ship To Address Return/Pick-up In Store Return&nbsp;</h4>\r\n\r\n<p>As noted, Ship to Address, Send Sale&nbsp;and Pick-up In Store&nbsp;items can't be returned as validated against the original sale unless they have been fulfilled for that sale.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><a name=\"return-mode\" id=\"return-mode\"></a>Return Mode</h2>\r\n\r\n<p>Within a Cart, users can&nbsp;invokes the Return&nbsp;Mode at any time by</p>\r\n\r\n<ul>\r\n\t<li>Selecting&nbsp;\"Start A Return\" function in the cart and then entering one or more orderId(s) and return item(s).&nbsp; If auto-search customer is configured and a customer is activated&nbsp;there's no need to explicitly enter an orderID.&nbsp;</li>\r\n\t<li>Typing or scanning the orderID&nbsp;from an original sale receipt - with correct bar code rule setup, the Cart will recognize this as an OrderID and automatically initiate the return mode</li>\r\n\t<li>From searching for the transaction and viewing Order Detail from the Transactions list.&nbsp;</li>\r\n</ul>\r\n\r\n<p>In Return mode, the cart header changes to red with label&nbsp;\"Return\".&nbsp; Once in Return mode the cart remains in that mode (all entered items are considered negative or return items) until the user selects \"Cart Mode\" function to toggle&nbsp;back to the cart sale mode.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3 data-renderer-start-pos=\"3392\"><a name=\"transaction-detail-quantity-field\" id=\"transaction-detail-quantity-field\"></a>Transaction Detail Quantity field</h3>\r\n\r\n<p data-renderer-start-pos=\"3392\">When starting a return from the Transaction details,&nbsp;the section displays all the items which are eligible for return. There is a quantity stepper option added next to the item which allows the users to increase/decrease the item quantity to create a return order.&nbsp;</p>\r\n\r\n<p>By default, the quantity section is set to 1 and the stepper icon is protected by a user grant&nbsp;<strong>\"</strong><b>ui::pos::return::updatequantity</b>”. If the user does not have the grant, the quantity stepper is not displayed. However, the user can still add the item to the return cart, which will add total returnable quantity available for the item.&nbsp;</p>\r\n\r\n<p>The quantity can only be increased to the max returnable quantity available for the item. Once the max returnable quantity is reached, the increase icon is disabled and the user cannot further increase the quantity.&nbsp; If the user manually types number which is higher than the returnable quantity and clicks on Add to Return, the item will be added but with max returnable quantity.&nbsp;</p>\r\n\r\n<p>Once all the returnable items are added to the return cart, the Add to Return button changes to Added to Return, and the quantity stepper is disabled.&nbsp;</p>\r\n\r\n<p>If the user removes an added item from the Return cart, the Order Details section displays the Status as Partially Pending Return and the Add to Return button is activated for the specific item. If there is only one order line added to the return cart and the user removes the item, the return order is canceled and the application returns to the Engage tab.</p>\r\n\r\n<p>Zero is not a valid entry for the item quantity and the stepper does not allow the user to get less than 1 quantity. If the user accidentally adds zero to the quantity stepper and clicks on Add to Return the application will add the item with 1 quantity to the return order.</p>\r\n\r\n<p>There are instances where the same item is added as multiple lines with multiple quantities on each order line. In this scenario, when the user tries to add the item for return, the quantity is usually consumed from the order line which has the highest quantity. To explain further, let's take the example below.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"261\">\r\n\t<tbody>\r\n\t\t<tr height=\"21\">\r\n\t\t\t<td height=\"21\" width=\"87\">Order Line</td>\r\n\t\t\t<td width=\"87\">Item</td>\r\n\t\t\t<td width=\"87\">Returnable Quantity</td>\r\n\t\t</tr>\r\n\t\t<tr height=\"21\">\r\n\t\t\t<td align=\"right\" height=\"21\">1</td>\r\n\t\t\t<td>Item 1</td>\r\n\t\t\t<td align=\"right\">3</td>\r\n\t\t</tr>\r\n\t\t<tr height=\"21\">\r\n\t\t\t<td align=\"right\" height=\"21\">2</td>\r\n\t\t\t<td>Item 1</td>\r\n\t\t\t<td align=\"right\">2</td>\r\n\t\t</tr>\r\n\t\t<tr height=\"21\">\r\n\t\t\t<td align=\"right\" height=\"21\">3</td>\r\n\t\t\t<td>Item 1</td>\r\n\t\t\t<td align=\"right\">1</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>In the above table we can see that Item 1 is added with different quantities on different lines. Let's take the scenario below for return</p>\r\n\r\n<ul>\r\n\t<li>The user clicks on Add to Return on Line 3 for quantity 1 - Item 1 with quantity 1 is added to the return Cart.\r\n\t<ul>\r\n\t\t<li>Quantity is reduced from Line 1 as it has the maximum quantity for Item 1. The returnable quantity on Line 3 will show 1, but on Line 1 the returnable quantity will now be 2.</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li>The user now clicks again on Line 2&nbsp;to add Item 1 for quantity 1. The same behavior is repeated as above and now the Returnable Quantity on Line 1 is equal to 1.</li>\r\n\t<li>Once the Returnable Quantity on Line 1 is 0 the Add to Return becomes Added to Return for Line 1.</li>\r\n\t<li>If the user again selects Item 1 for return either from Line 2 or Line 3 the item will be added to the return cart and the quantity will be reduced from&nbsp;the line with&nbsp;a higher Returnable Quantity.</li>\r\n\t<li>This behavior will follow if the user continues to return Item 1 unless there is no returnable quantity left to return the order.&nbsp;</li>\r\n\t<li>If the user chooses to add all the items from a single&nbsp;line, like in this case, let's say the user adds 3 quantities from Order Line 1 at once, then all the quantities are consumed from the same order line.&nbsp;\r\n\t<ul>\r\n\t\t<li>If the user enters a value higher than 3 on order line lets say 5 then the application looks for the other 2 quantity on the other lines given that they are available on the returnable quantity</li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><a name=\"exchange\" id=\"exchange\"></a>Exchange</h3>\r\n\r\n<p>From the Return mode users can invoke the exchange mode by clicking on the cart mode in more menu.&nbsp;</p>\r\n\r\n<p data-renderer-start-pos=\"3392\">POS allows both switching from Cart to Return mode and vice versa.&nbsp;</p>\r\n\r\n<p>For example, from&nbsp;Return mode, users scan the order and select items for return.&nbsp; After adding return items, the user can switch to Cart mode by clicking the Cart mode button to include items for exchange.&nbsp;</p>\r\n\r\n<p>When a Cart Sale item is added, the cart header dynamically updates to “Exchange.”</p>\r\n\r\n<p>The cart categorizes items into two groups: “Return” and “In-store Purchase.” Under the “Return” group, the order number and return quantity are displayed, while the “In-store Purchase” group shows the quantity of items added as part of in-store purchases.</p>\r\n\r\n<p>It is best to consider that the POS Cart allows entry of Positive (Sale) items as well as Negative (Return) items, but each group of items is independent - there's no automatic linking of an item in a Return group to a positive item in a Sale group as \"exchanges\" of each other.</p>\r\n\r\n<p>Navigation between Return and Cart modes remains intuitive, with the respective mode buttons always available. Once an item is added, these buttons move to the “More” menu for easy access. Additionally, items added in Cart mode persist even when switching back to Return mode, ensuring continuity in the transaction process.</p>\r\n\r\n<p>The cart supports multiple transaction scenarios:</p>\r\n\r\n<ul>\r\n\t<li><strong>Negative balances</strong>: Where the customer receives a refund.</li>\r\n\t<li><strong>Positive balances</strong>: Where the customer owes money for the exchange.</li>\r\n\t<li><strong>Even exchanges</strong>: Where the same item or an item of equivalent value is exchanged, requiring no payment or refund.</li>\r\n</ul>\r\n\r\n<p>This flexible functionality ensures that customer exchanges are handled smoothly and accurately.</p>\r\n\r\n<p>&nbsp; &nbsp; To perform the exchange transaction, when the cashier scans the sale invoice,&nbsp;the cart&nbsp;switches to return mode and as items from the original sale are added to the cart for return, the system intelligently links the customer associated with that sale&nbsp;invoice to the current transaction. This occurs unless a cashier has manually assigned a different customer to the cart.</p>\r\n\r\n<p><strong>Note</strong>: The exchange state and standalone returns are transaction types or conditions flowing organically from the use of the Returns/Exchange function and are not called by separate keys.&nbsp;&nbsp;</p>\r\n\r\n<p>POS does not support returns with forced even exchanges. All mixed cart i.e.&nbsp; returns and sale in a return transaction are uneven exchange and new sale item are priced when added and not copied from original order.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><a name=\"matching\" id=\"matching\"></a>Matching</h2>\r\n\r\n<p>As items and orderIDs are identified in the Return via the methods described, the <strong>match API </strong>is called.&nbsp; Via this API POS&nbsp;matches the item(s) collected in Returns Mode to any original OrderID(s) collected.&nbsp;</p>\r\n\r\n<p>When an item is found in the data for an original order and is returnable, the item receives return pricing, tax information from its matched original order, and the original tender payment type is noted.</p>\r\n\r\n<p>If the item cannot be matched because it's not found on any of the orders collected, or its returnable quantity is not correct due to a previous return or other condition, the associate may choose to collect another Order ID, return the item as a standalone return&nbsp;labeled as \"No order found\" on&nbsp;the cart or remove the item from the transaction.</p>\r\n\r\n<p>In contrast to CLASSIC matching behavior, items are now matched and their refund prices determined as they are added to the Return cart.&nbsp;</p>\r\n\r\n<p>For example, if Item A with current price 15.00 was sold for 10.00 via Order 123:</p>\r\n\r\n<ul>\r\n\t<li>If Order 123 is added to Return Cart followed by Item A and Item B, A will be added to the cart for 10.00 refund matched to Order 123 and B treated as a standalone.</li>\r\n\t<li>If Items A and B are&nbsp;added to the Return Cart, followed by Order 123, Item A&nbsp;will NOT be able to retroactively match at the time it is added.&nbsp; It will be treated as a Standalone return and typically priced for refund at 15.00.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note</strong>:&nbsp; As a consequence, all receipts should be scanned first, followed by the return items, to ensure the best match.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><a name=\"general-item-and-orderline-isreturnable-attributes\" id=\"general-item-and-orderline-isreturnable-attributes\"></a>General Item and orderLine isReturnable Attributes</h3>\r\n\r\n<p>In addition to basic 'matching' of items to original orders (sales), the general returnability of an item at&nbsp;the store in a validated return against a given order is determined at the time of original order creation by a flag&nbsp;in the Order Data for the original sale&nbsp;<b>order&gt;orderLine&gt;IsReturnable.</b>&nbsp; &nbsp;When the order is captured from POS system,&nbsp;<b>order&gt;orderLine&gt;IsReturnable</b>&nbsp;flag is set based on the master data item attribute for the orderline item item&gt;IsReturnableAtDC.&nbsp;&nbsp;</p>\r\n\r\n<p>If that&nbsp; master data flag&nbsp;is&nbsp;set to false, then in any POS order (sale) the item orderLine will be marked as non-returnable for that order - i.e., order&gt;orderLine&gt;isReturnable will be False.&nbsp; &nbsp;Otherwise, if the flag is true, the item orderLine will be marked as returnable for that order (IsReturnable will be set to true<b>).</b></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:&nbsp;</strong>POS does NOT look at the&nbsp;isReturnableAtDC&nbsp;flag&nbsp;directly&nbsp;from the item master at the time of the return; POS uses the orderLine return eligibility set at the time of order creation.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>For example, an item on an orderline is set as returnable (orderline&gt;IsReturnable is set to true<b>)&nbsp;</b>at time of sale.&nbsp; After the order is created, item&gt;IsReturnableAtDC flag is&nbsp;set to false in the item master for that same item.&nbsp;</p>\r\n\r\n<ul>\r\n\t<li>In this situation, the item would be allowed to be returned to the store from that prior order.&nbsp;</li>\r\n\t<li>The new values for item&gt;isReturnableAtDC would affect the returnability of that item in future orders going forward.</li>\r\n\t<li>Vice versa - if the item&nbsp;at order creation was&nbsp;set to be non-returnable&nbsp;and after the order was created, the&nbsp;IsReturnableAtDC flag&nbsp;is set to true in the item master, the item would NOT be allowed to be returned to the store from that particular prior order/receipt.&nbsp;</li>\r\n</ul>\r\n\r\n<p>This allows items to change status over time - new items can be returnable when first introduced, and as they transition to clearance items over time the item attributes can be changed to not returnable.</p>\r\n\r\n<p>Flag will only be validated upon click at checkout. Match and create return API will be called. This API will have all the intelligence to check if isReturnable Flag is true or false for this item and then throw related information back to the user.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note</strong>:&nbsp;&nbsp;Because line item return behavior as described is dependent on an attribute in the original sale order, there is currently no way to enforce returnable/not returnable status on standalone return items which by definition are not validated against an earlier sale order.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>The validation is displayed in the form of Consolidated Error Screen after the scanned items have gone through the&nbsp;Return Match process and thus is not displayed up front while adding the order during the returns - since until the item(s)/Order(s) MATCH occurs, the exact status of each item is now known. Below are the information messages displayed after the validation.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Note: In IRIS, we only have two types for return errors, which is not the same as classic,</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">Error Reason</th>\r\n\t\t\t<th scope=\"col\">Description</th>\r\n\t\t\t<th scope=\"col\">Text displayed on consolidated errors form</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Item matched to order/line but order line is canceled.</td>\r\n\t\t\t<td>If Order Id & LineId is not null and IsMatch=true and provided Order Line is cancelled</td>\r\n\t\t\t<td>No Matching Receipt</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Item not matched to any orders/order lines</td>\r\n\t\t\t<td>If Item doesn't exist in one of the input orders.</td>\r\n\t\t\t<td>No Matching Receipt</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Quantity is not eligible to return</td>\r\n\t\t\t<td>If quantity is more than returnable quantity.</td>\r\n\t\t\t<td>No Matching Receipt</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Unable to find Item id within suggested Order Id.</td>\r\n\t\t\t<td>If Order Id is not null but line id is null and IsMatch=false and Item doesn't exit.</td>\r\n\t\t\t<td>No Matching Receipt</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>ItemId does not match with suggested order Id and Line Id.</td>\r\n\t\t\t<td>If Order Id & LineId is not null and IsMatch=false and ItemId doesn't match with orderId and lineId combination.</td>\r\n\t\t\t<td>No Matching Receipt</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Item UOM does not match with suggested orderId and Line Id.</td>\r\n\t\t\t<td>If Order Id & LineId is not null and IsMatch=false and ItemId UOM doesn't match.</td>\r\n\t\t\t<td>No Matching Receipt</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Item Unit Price doesn't match with suggested orderId and LineId.</td>\r\n\t\t\t<td>If Order Id & LineId, Unit Price is not null and IsMatch=false and ItemId UOM doesn't match.</td>\r\n\t\t\t<td>No Matching Receipt</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Item is not eligible to return because it was purchased more than (configured age policy) days ago.</td>\r\n\t\t\t<td>If item is not allow to return due to return policy.</td>\r\n\t\t\t<td>Past Return Window</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Item matched to order/line but not returnable due to isReturnable flag 'False'.</td>\r\n\t\t\t<td>Able to find item in one of input Order and Item is not returnable because IsReturnable is set false in parent orders.</td>\r\n\t\t\t<td>No Matching Receipt</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4><a name=\"gift-card-returnability\" id=\"gift-card-returnability\"></a>Gift Card Returnability</h4>\r\n\r\n<p>Gift Card order lines that are flagged as orderline.isReturnable=True are eligible for validated returns.&nbsp; User can initiate a return for such orderlines by choosing order line/lines&nbsp;from the Order in the Return mode.&nbsp;</p>\r\n\r\n<p>Successful Activations/Reload is not typically marked as returnable as the value is added to the customer's Gift card, hence user cannot choose them for return&nbsp;purpose.&nbsp; &nbsp;Such Gift Card line items will not be shown in Order Details when browsing an order in Return mode.&nbsp;</p>\r\n\r\n<p>Therefore only failed gift card sale line items are eligible for validated returns.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><a name=\"special-order-age-policy-matching-rule\" id=\"special-order-age-policy-matching-rule\"></a>Special Order Age Policy Matching Rule</h3>\r\n\r\n<p>Retailer can set&nbsp;return match age at the Order Configuration for \"Returns and Exchange\".&nbsp; Orders are considered&nbsp;\"not matched\" if the matching sale is more than the configured \"Days Eligible for Return\". Retailers can override this matching criteria&nbsp;by means of a business flag in POS General Config \"Allow Override on Return Age\".&nbsp; When this is True, a user whose role has new grant&nbsp;\"overrideaccess::posservice::returnage\" can approve matched return of an item to an original sale order when that sale exceeds the configured match age limit.</p>\r\n\r\n<p>In case the current user does not have the mentioned grant then another user with the grant can perform a manager override by entering userID/PIN to perform the action.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><a name=\"automatch-return-items-for-attached-customer\" id=\"automatch-return-items-for-attached-customer\"></a>Automatch Return Items for Attached Customer</h3>\r\n\r\n<p>To enable AutoMatch&nbsp;behavior, posStoreConfig&gt;storeCommonConfig&gt;enableAutoSearchCustomerOrder should be set to TRUE.</p>\r\n\r\n<p>If an Active customer is present in the transaction, the&nbsp;store associate can bypass explicitly scanning receipts (orderId values) into the Return state.&nbsp; Instead when the Match runs, the system will automatically try to match return items to customer past orders by automatically searching the purchase history of that customer, for that item.&nbsp; &nbsp;As with regular Match, the system will identify&nbsp;the order that best matches for that return item, based on the return configuration.&nbsp;</p>\r\n\r\n<p>While searching the customer past purchases, system goes up to the number of days specified under POS store configurations&gt;&gt;Store common config&gt;&gt;Age Limit For Customer Order Search For Returns.&nbsp; If not order is found within this history, user can choose to continue with non-validated return or void the item.</p>\r\n\r\n<p>If a user has presented both the order ID and activated the customer, user entered Order ID takes precedence over any 'automatches'.&nbsp; Once the entered Orderid is used to match return items, if there are still unmatched items, orders from past purchases are used.&nbsp; While matching the orders fetched from the past purchases, the tie breaker rules are applied too.&nbsp;&nbsp;</p>\r\n\r\n<p>There are certain constraints to the number orders to be fetched and time taken to get the orders. Following Order component properties are added for this purpose</p>\r\n\r\n<ul>\r\n\t<li>The number of orders to be looked up for is determined by&nbsp;<strong>customer.past.purchases.page.size</strong>.&nbsp; 3 is the default value.</li>\r\n\t<li data-renderer-start-pos=\"1955\">The timeout duration is governed by&nbsp;<strong>order.fetch.timeout.duration.in.secs.&nbsp;&nbsp;</strong>3 seconds is the default value</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note</strong>: Implementation team is recommended not to increase these values to a much higher number as it can impact the performance of the application.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><a name=\"tie-breaker-during-matching\" id=\"tie-breaker-during-matching\"></a>Tie Breaker during Matching</h3>\r\n\r\n<p>If an item is found in more than one order (or orderlines), the system matches the item to a specific order/orderline&nbsp;based on the \"Match return items to order&nbsp;by\"&nbsp;configuration.&nbsp; This configuration is orderConfiguration&gt;mposConfig&gt;Returns&Exchanges&gt;\"Match Returns to Order by\" configuration.</p>\r\n\r\n<p>This allows retailer to set their own criterion.&nbsp; Either PRICE and/or AGE can be selected, and the order of each (highest vs lowest price,&nbsp;oldest vs newest sale)</p>\r\n\r\n<p>If both criteria are configured -</p>\r\n\r\n<ol>\r\n\t<li>System&nbsp;tries to break the tie first based on price policy.&nbsp;If price policy is set to \"Highest\", the order( or orderline) having the highest selling price is matched for the returned item. Selling price is calculated as&nbsp; (OrderLineSubTotal - TotalDiscountOnItem)/ quantity.&nbsp;</li>\r\n\t<li>If the selling price again results in a tie between order (or&nbsp;orderlines) or price policy is not configured, then age policy is used to break the tie.&nbsp;</li>\r\n\t<li>If&nbsp;neither of them is configured, the oldest order (or orderline) is used to match the item to the order.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>For example:</p>\r\n\r\n<p>John buys Jeans with Buy 1 Get another 30% deal. When he returns one pair of the Jeans&nbsp;with the receipt,&nbsp;the system chooses the orderline&nbsp;based on the Price policy.</p>\r\n\r\n<table border=\"1\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"row\">Order</th>\r\n\t\t\t<th scope=\"col\">Order Line</th>\r\n\t\t\t<th scope=\"col\">Item</th>\r\n\t\t\t<th scope=\"col\">Selling Price in dollars</th>\r\n\t\t\t<th scope=\"col\">Price Policy</th>\r\n\t\t\t<th scope=\"col\">Age policy&nbsp;</th>\r\n\t\t\t<th scope=\"col\">Result</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"row\">1</th>\r\n\t\t\t<td>\r\n\t\t\t<p>1</p>\r\n\r\n\t\t\t<p>2</p>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<p>Jeans</p>\r\n\r\n\t\t\t<p>Jeans</p>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;25.00 (Full price)</p>\r\n\r\n\t\t\t<p>17.50 (30% off)</p>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<p>Highest</p>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<p>Oldest</p>\r\n\t\t\t</td>\r\n\t\t\t<td>Return match API will match the return to order line1</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"row\">1</th>\r\n\t\t\t<td>\r\n\t\t\t<p>1</p>\r\n\r\n\t\t\t<p>2</p>\r\n\r\n\t\t\t<p>3</p>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<p>Jeans</p>\r\n\r\n\t\t\t<p>Jeans</p>\r\n\r\n\t\t\t<p>Tshirt</p>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<p>25.00 (Full price)</p>\r\n\r\n\t\t\t<p>17.50 (30% off)</p>\r\n\r\n\t\t\t<p>10.00</p>\r\n\t\t\t</td>\r\n\t\t\t<td>Lowest</td>\r\n\t\t\t<td>Oldest</td>\r\n\t\t\t<td>Return match API will match the return to order line2</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"row\">1</th>\r\n\t\t\t<td>\r\n\t\t\t<p>1</p>\r\n\r\n\t\t\t<p>2</p>\r\n\r\n\t\t\t<p>3</p>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<p>Jeans</p>\r\n\r\n\t\t\t<p>Jeans</p>\r\n\r\n\t\t\t<p>Jeans</p>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<p>25.00&nbsp;</p>\r\n\r\n\t\t\t<p>17.50(30% off)</p>\r\n\r\n\t\t\t<p>17.50 (30% off)</p>\r\n\t\t\t</td>\r\n\t\t\t<td>Lowest</td>\r\n\t\t\t<td>Oldest</td>\r\n\t\t\t<td>Tie exists between order line 2 and 3. Return match API will match the return to order&nbsp;line2&nbsp;as it is the oldest between order line 2 and 3.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"row\">1</th>\r\n\t\t\t<td>\r\n\t\t\t<p>1</p>\r\n\r\n\t\t\t<p>2</p>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<p>Jeans</p>\r\n\r\n\t\t\t<p>Jeans</p>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<p>25.00&nbsp;</p>\r\n\r\n\t\t\t<p>25.00</p>\r\n\t\t\t</td>\r\n\t\t\t<td>None</td>\r\n\t\t\t<td>None</td>\r\n\t\t\t<td>Systems defaults to use the oldest line which is orderline1</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4><a name=\"price-rank-in-price-tie-break-logic\" id=\"price-rank-in-price-tie-break-logic\"></a>Price Rank in Price Tie-break Logic</h4>\r\n\r\n<p>Price rank allows the retailers to use configure Nth lowest or highest to match the item to the orderlines. This is more prevalent when there are deals for buying an item in multiple units at different price points. During the return, price rank allows the returned item to be matched against the order (or orderline) where the price of the item is ranked as N. This takes effect only when price&nbsp;criteria is configured to break the tie when the retailer wants to break the tie based on price, but doesn't want to favor the extremes (absolute highest or absolute lowest).</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><a name=\"refund-price-determination\" id=\"refund-price-determination\"></a>Refund Price Determination</h2>\r\n\r\n<h3><a name=\"validated-pricing\" id=\"validated-pricing\"></a>Validated pricing</h3>\r\n\r\n<p>For Validated return items, the item pricing including original sale tax and any promotional deals or discounts is obtained from the matched original Order.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><a name=\"stand-alone-item-pricing\" id=\"stand-alone-item-pricing\"></a>Stand alone item pricing</h3>\r\n\r\n<p>For Non-validated stand alone return items, Manhattan Active Omni provides the ability to track the price history of an item at location or web.&nbsp;Retailer can choose to use this to price standalone returns.&nbsp;&nbsp;</p>\r\n\r\n<p>While accepting a return item as \"Standalone\", system picks the least price in last X number of days as specified.</p>\r\n\r\n<p>This feature is available only if price history is maintained. If price history is not maintained, or, if no price history record for that item exists, the&nbsp;current item Selling Price for that item/location&nbsp;is picked.&nbsp;</p>\r\n\r\n<p>Price History is enabled and configured via Application Configuration&gt; Manage Selling Configuration &gt; Selling &gt; Price Configurations.&nbsp; Price History will be maintained as item selling prices are changed when an integer value is provided in the Return Low Price Age field, where that value represents the duration in days for which to maintain the price history.&nbsp; Price History is maintained similar to item price, on behalf of item and location.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><a name=\"flow-variations\" id=\"flow-variations\"></a>Flow Variations</h2>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>The return flow may be configured to require&nbsp;reason codes and/or&nbsp;disposition codes as well as Return Fees if so desired.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3 data-renderer-start-pos=\"3392\"><a name=\"return-reason-code-and-disposition\" id=\"return-reason-code-and-disposition\"></a>Return reason code and disposition</h3>\r\n\r\n<p data-renderer-start-pos=\"3392\">When return lines are added in the UI (by manually adding or scan return lines or by adding it from transaction details), there will be an ability to add the return reason and return disposition codes for the return lines. As a default behavior from base, both return reason code and disposition will be enabled and the fields are mandatory to be populated.</p>\r\n\r\n<p data-renderer-start-pos=\"3392\">This enablement is via cart event and cart form configuration, and Return Reason and Disposition codes are just a specific example of the generic&nbsp;<a href=\"https://omni.helpdocsonline.com/iris-cartform\">Input Form functionality</a>.</p>\r\n\r\n<p data-renderer-start-pos=\"3392\"><strong>Cart Event</strong>: \"postOrderLineAdd-ReturnReasonCaptureEventConfig\"\" and Cart Form: \"ReturnReasonCaptureFormGroup\" are used to bring up the return reason and return disposition form on the UI. To make modification, go to Cart form UI, navigation is here \"Cart Form &gt; CartInputFormGroup &gt; CartInputForm &gt; CartInputFormField\"</p>\r\n\r\n<p data-renderer-start-pos=\"3392\"><strong>Default values</strong>: Default values for picked from pos General config &gt; common config &gt; \"Default Return Reason Code\" and \"Default Dispostion code\".&nbsp;</p>\r\n\r\n<p data-renderer-start-pos=\"3392\"><strong>Drop down values:</strong> \"Disposition\" seed data is coming from \"posReturnDisposition\" entity of posservice component and the return reason is coming from&nbsp;\"reason\" entity where \"ReasonTypeId = Return AND EligibleForPointOfSale = true\" from order component.</p>\r\n\r\n<p data-renderer-start-pos=\"3392\"><strong>Removing a field</strong>: Goto&nbsp;\"Cart Form &gt; CartInputFormGroup &gt; CartInputForm &gt; CartInputFormField\" and remove the form field to remove any one field from the pop-up</p>\r\n\r\n<p data-renderer-start-pos=\"3392\"><strong>Making non-mandatory:</strong>&nbsp;For example, if you want to make return reason as a non-mandatory field, then Goto specific&nbsp; \"Cart Form &gt; CartInputFormGroup &gt; CartInputForm &gt; CartInputFormField\" for form Field Id: \"ReturnReason\" and use Form Field&nbsp; Required = false.</p>\r\n\r\n<p data-renderer-start-pos=\"3392\"><strong>Removing the pop-up:</strong>&nbsp;If you want to totally remove this ability, then you can delete the cart event \"postOrderLineAdd-ReturnReasonCaptureEventConfig\". if you want to modify it to remove one of them or make any of these fields optional, then you can use Cart Form MUP configuration&nbsp;UI to do the modification.&nbsp; You can also refer to&nbsp;<a hqid=\"3484033\" href=\"/pos-cartform\">page</a>&nbsp;for more details.</p>\r\n\r\n<p data-renderer-start-pos=\"3392\">&nbsp;</p>\r\n\r\n<h3 data-renderer-start-pos=\"3392\"><a name=\"return-fees-restocking-fees\" id=\"return-fees-restocking-fees\"></a>Return Fees (\"Restocking\" fees)</h3>\r\n\r\n<h4><a name=\"order-and-orderline-nbsp-return-fees\" id=\"order-and-orderline-nbsp-return-fees\"></a>Order and Orderline&nbsp;return fees</h4>\r\n\r\n<p>See <a href=\"https://omni.helpdocsonline.com/how-does-return-work$return-fees\">How do Returns Work guide</a>. These are enabled and configured at Org level via Order Configurations&gt;Returns and Exchanges.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4><a name=\"return-fee-at-item-level\" id=\"return-fee-at-item-level\"></a><a id=\"return-fee-at-item-level\" name=\"return-fee-at-item-level\"></a>Return fee at item level</h4>\r\n\r\n<p>Several retailers have&nbsp;a requirement to configure return fees based on the&nbsp;unique characteristics of items. This will allow the retailer to configure different types of return such as&nbsp;restocking,&nbsp;overweight, handling fees etc.&nbsp; &nbsp;This process requires the fee to be configured in the Item Price record.</p>\r\n\r\n<p>Read more on process of return fee&nbsp;<a href=\"https://omni.helpdocsonline.com/how-does-return-work$item-level-return-fee\">here</a>, configure of return fee&nbsp;<a href=\"https://omni.helpdocsonline.com/how-does-return-work$return-fees\">here</a>. All items that incur return fees will be allowed to notify the store associate and customer at the time of adding such items to cart. To learn more about the configuration of such notification refer&nbsp;<a href=\"https://omni.helpdocsonline.com/cartprompt$informative-prompts-restocking-fee-on-sale-items\">here</a>.<br>\r\n&nbsp;</p>\r\n\r\n<p data-renderer-start-pos=\"3392\">&nbsp;</p>\r\n\r\n<h2><a name=\"refund-process\" id=\"refund-process\"></a>Refund Process</h2>\r\n\r\n<p>When a validated or un-validated return is created in the store, the store associate can proceed to process a refund after scanning all the items to be returned and clicking on checkout.&nbsp;&nbsp;The store associate is presented with a list of all the available refund options.&nbsp;<br>\r\nThe Payment component has configurable rules governing refunds and which payment types are available for a refund for a given transaction.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><a name=\"payment-type-selection-rules\" id=\"payment-type-selection-rules\"></a>Payment Type Selection Rules</h3>\r\n\r\n<p><br>\r\nSee the <a href=\"https://omni.helpdocsonline.com/pospayment-configuration-2$pos-refund-configuration\">Payment Configuration guide</a> for more detail.&nbsp; At checkout state, POS calls the Expected Refund API which returns the tender type option(s) from payment based on the rules.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4><a name=\"rules-for-validated-returns\" id=\"rules-for-validated-returns\"></a>Rules for Validated Returns</h4>\r\n\r\n<p>Via Payment&gt;Payment Capture Config&gt; Refund Pay Type, for each Payment Type one or more allowed Refund Payment Types are configured.&nbsp; The first sequenced item will always be the 'default' (automatic) refund option, with others of later sequence as alternates.&nbsp; Typically where possible, payment rules prefer to&nbsp;refund back to the original payment type - i.e., a credit to credit, preferably the original card as follow-on. &nbsp;</p>\r\n\r\n<p>Where this is not possible, as when the original tender may have been by Traveler's Check, a different default refund payment type is configured.</p>\r\n\r\n<p>POS will automatically identify these original or default payment types, based on configured options for the original order payment type, during a refund.&nbsp;&nbsp;</p>\r\n\r\n<p>The available refund options are split into two parts: Automatic and Override. The store associate can select a method of refund from either the automatic (the \"default\" or original) or override \"alternate\" options.&nbsp;</p>\r\n\r\n<p>Once a refund method is chosen, the POS application will then try to execute the refund request in the respective method.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4><a name=\"rules-for-unvalidated-stand-alone-returns\" id=\"rules-for-unvalidated-stand-alone-returns\"></a>Rules for Unvalidated Stand Alone Returns</h4>\r\n\r\n<p>In the case in which an&nbsp;original Payment Type cannot be identified due to unvalidated return item, the Refund Pay Type rules above cannot be applied.&nbsp; .</p>\r\n\r\n<p>For stand alone (not matched) returns, multiple potential alternate refund payment types (a default and other options) will be available when the business flag \"Show Alternate Refunds For Return\" is turned on and multiple payment types are flagged via pay capture config&gt;payment capture detail as \"Allow Standalone Return\" True.</p>\r\n\r\n<p>When this business flag is off, regardless of payment capture detail \"Allow Standalone\" flag for individual payment types, only a single default refund&nbsp;override tender as configured in \"Standalone Return Payment Type\" in payment parameters is available.&nbsp; Historically and typically this is Gift Card</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4><a name=\"other-related-nbsp-configurations-governing-refund-payment-types\" id=\"other-related-nbsp-configurations-governing-refund-payment-types\"></a>Other related&nbsp;Configurations Governing Refund Payment Types</h4>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h5><a name=\"maximum-refund-nbsp-limit-during-returns\" id=\"maximum-refund-nbsp-limit-during-returns\"></a>Maximum refund&nbsp;limit during returns</h5>\r\n\r\n<p>&nbsp;Each refund payment type configured has a maximum refund&nbsp;limit defined in payment capture config, The payment rules honor this limit in both return with and without receipt scenario and if any refund is above this limit,&nbsp;rules is move to use next eligible refund type.&nbsp; If no&nbsp;eligible refund is configured then it will move to pick the remaining maxed refund amount to standalone return payment type configured in&nbsp;payment parameters.</p>\r\n\r\n<p>For example:&nbsp;During auto refund, current hard limits are checked i.e If for CC refund type is CC, GC and SC, then max refund limit is first checked for CC then for GC and SC. If refund limit exceed for all then standalone refund from payment parameter is used for remaining amount.</p>\r\n\r\n<p>Automatic/suggested refunds: If for CC refund type with hard limit/&nbsp;maximum refund limit is configured as CC=10, GC=20 and SC=30. And if refund of 100 on original CC payment is tried then it loops through all eligible refund types for CC with hard limits, such as CC=10, GC=20 and SC=30 and standalone refund=40. In above example if standalone refund i.e. cash has hard limit of $15 then existing rules considers is as error scenario i.e. CC=10, GC=20 and SC=30 and Alternate refund=40 is suggested and on processing refund it throw error that 40 is more than 15 and moves to override refund screen.</p>\r\n\r\n<p>&nbsp;Alternatively, the associate may select to override the automatic refund recommendation from a list of permitted optional tenders, also provided by the Expected Refund API. Irrespective of return type i.e. either return with or without&nbsp;receipt&nbsp;the available override tender selection is based on&nbsp;the payment parameters standalone return payment type (single default option&nbsp;such as Gift Card)&nbsp;or&nbsp;multiple override refund tender types based on configuration.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h5><a name=\"refund-threshold\" id=\"refund-threshold\"></a>Refund Threshold</h5>\r\n\r\n<p>User can also have choose to control&nbsp;refunds by payment type and user role&nbsp;via threshold configuration in posservice component.&nbsp; &nbsp;See POS Cart guide, <a href=\"https://omni.helpdocsonline.com/cart-new$pos-refund-nbsp-threshold\">Thresholds section</a> for details.</p>\r\n\r\n<p>This works independent of&nbsp;above hard limit i.e maximum refund limit from payment capture config.&nbsp;This threshold should be configured by payment type and at each user role level, the threshold itself is defined&nbsp;as&nbsp;maximum allowed refund amount. If user is doing refund above the allowed threshold for that role, then manager override credentials from another user with the appropriate permissions is forced.&nbsp; I.E.,&nbsp;such refunds can be overridden by users with threshold more than the required refund amount.&nbsp;Refer to Manager Override & Routing process&nbsp;and configuration&nbsp;guide for additional information.</p>\r\n\r\n<p>How does refund threshold work with above hard limit/&nbsp;maximum refund limit ?&nbsp;</p>\r\n\r\n<ul>\r\n\t<li>Example:&nbsp;If for CC, refund type with&nbsp;<strong>hard limit/&nbsp;maximum refund limit&nbsp;</strong>is configured as CC=10, GC=20 and Store Credit (SC=30).&nbsp;\r\n\r\n\t<ul>\r\n\t\t<li>Assume that, within the 'hard limit', refund threshold for SC = 25 is configured for store Associate role.</li>\r\n\t\t<li>If store associate logins in and tries a&nbsp;refund of 100 on original CC payment, payment rule will&nbsp;loop&nbsp;through all eligible refund types&nbsp;for CC with hard limits, and suggested refunds as CC=10, GC=20 and SC=30 and standalone refund=40.</li>\r\n\t\t<li>On processing&nbsp;refunds, error is thrown to user since SC of 30 is more than allowed threshold of 25.</li>\r\n\t\t<li>User can choose to&nbsp;use&nbsp;manager override pop-up by providing another user's credentials&nbsp;whose role is associated to threshold more than the required refund of 30 for SC, and process the refunds.</li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h5><a name=\"alternate-refund-payment-types-for-override-tender\" id=\"alternate-refund-payment-types-for-override-tender\"></a>Alternate refund payment types for Override Tender</h5>\r\n\r\n<p>Associate can choose to override the automatic refund recommendation to a configured alternate tenders using the override tender option.&nbsp;The override tender screen will display refund type based on the Validated or Stand Alone configurations as described.</p>\r\n\r\n<p>In either case (validated or standalone) the override tender functionality for refunds is controlled with special <a href=\"https://omni.helpdocsonline.com/pos-resources-2-2$mgroverriderefund\">manager key</a> and <a href=\"https://omni.helpdocsonline.com/pos-resources-2-2$uioverriderefund\">UI visibility</a> grants. Only users with these grants will be able to see and use&nbsp;the automatic&nbsp;refund recommendations.</p>\r\n\r\n<p>If associate does not have the manager key access, then a user with the right grants can give the access&nbsp;with user and pin credentials.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h5><a name=\"allow-cash-refund-above-till-amount\" id=\"allow-cash-refund-above-till-amount\"></a>Allow Cash Refund Above Till Amount</h5>\r\n\r\n<p>Associates can return cash to the customer during returns/exchanges&nbsp;regardless of the amount of cash the system has calculated in the till when posGeneralConfig&gt;commonConfig \"Allow Cash Refund Above Till Amount\" business flag is enabled.&nbsp; There will be no error message displayed to the user that the till does not have enough cash to cover the refund.&nbsp; The system will allow the cash to be returned to the customer without forcing a pay in or loan of cash to the till before allowing the cash refund.&nbsp;&nbsp;</p>\r\n\r\n<p>When Allow Cash Refund Above Till Amount&nbsp;business flag is not enabled, in the event the till has insufficient funds to cover a refund&nbsp;an error will be displayed to the user informing them there is not enough cash in the till and the cash refund will not proceed.</p>\r\n\r\n<ul>\r\n\t<li>This business flag works for both fixed and mobile registers.</li>\r\n\t<li>This is only supported for returns and post-void transactions.</li>\r\n\t<li>The till is allowed to go negative during exchange tenders, gift card cashouts, and payouts.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Note: The prevent-till-negative feature does not apply to partial refunds because the till balance is not updated until the full refund is completed. Since the balance due is not zero, the system does not check if there is enough cash in the till for the next payment. As a result, this flag is not relevant - in effect, the check can be bypassed and the till can go negative - if the associate tenders the refund via multiple partial payments.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4><a name=\"complex-refund-payment-type-recommendations\" id=\"complex-refund-payment-type-recommendations\"></a>Complex Refund Payment Type recommendations</h4>\r\n\r\n<p>There can easily be scenarios in which the rules above result in more than one 'default' refund payment type recommendation.&nbsp; For example if the refund is based on a mixture of validated return items for which the default refund is Credit and stand alone return items for which the default refund is Gift Card, or, if the refund is based on validated items which were purchased via split tender originally.&nbsp;&nbsp;</p>\r\n\r\n<p>In this case, the automatic recommendation may stipulate more than one payment type/amount - i.e., recommend to refund 20.00 in Gift Card and 30.00 in Credit.&nbsp; The alternate payment type options would be derived&nbsp;from the intersection of the two sets of rules.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4><a name=\"payment-form-support-in-refund\" id=\"payment-form-support-in-refund\"></a><a id=\"paymentformsupportinrefund\" name=\"paymentformsupportinrefund\"></a>Payment Form Support In Refund</h4>\r\n\r\n<p>Payment forms are a feature that supports configuring forms that are invoked as part of the payment capture flow. The forms can be used to capture payment information using pinpads, keyboard, micr and scanner. Payment forms are associated to the payment type via the payment capture config. When a payment form is configured for a payment type, the forms are rendered in the application when the user selects that payment type during payment capture.&nbsp;</p>\r\n\r\n<p>In the return process, if an order was paid for using a payment type that contains forms, then the following conditions are checked&nbsp;and the forms are displayed based on the conditions.&nbsp;</p>\r\n\r\n<p><strong>Automatic</strong>:</p>\r\n\r\n<ol>\r\n\t<li>OpenFormsOnAutoRefund flag (Payment capture Config -&gt; <a href=\"https://omni.helpdocsonline.com/pospayment-configuration-2-2$FormRefundConfig\">Payment Input Form</a>) is true.&nbsp;</li>\r\n\t<li>Refund behavior set to New Payment Method.</li>\r\n\t<li>Only supported in Online mode.&nbsp;</li>\r\n</ol>\r\n\r\n<p><strong>Note:&nbsp;</strong>A payment transaction is created when selecting the automatic refund; if the user clicks on close in the forms page, the transaction remains open. If the automatic option is chosen again, the existing refund transaction is used and processed. If the user chooses to override, then the transaction created as part of the automatic refund is canceled.&nbsp;</p>\r\n\r\n<p><strong>Override</strong>:</p>\r\n\r\n<ol>\r\n\t<li>Forms are displayed for override refunds.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><a name=\"processing-refund-via-terminal\" id=\"processing-refund-via-terminal\"></a>Processing Refund via Terminal</h3>\r\n\r\n<p>If the customer chooses a refund method like a card which is set up to be processed via a payment terminal, then the POS application will issue the refund command to the payment terminal and transfer the control to the payment terminal.&nbsp; The customer can then complete the refund by following the instructions on the payment terminal.&nbsp;</p>\r\n\r\n<p>When the refund that is initiated from the POS application is processed successfully, the refund is considered a success and the customer has the amount credited back to their account. In the case of cash, the customer is given the money from the cash drawer.&nbsp; If the return order is fully successfully refunded, then the store associate is taken to the receipt screen, and the store associate can now issue a receipt to the customer in the mode the customer chooses. The transaction is now complete.</p>\r\n\r\n<h2><a name=\"refund-failure\" id=\"refund-failure\"></a>Refund Failure</h2>\r\n\r\n<p>When a refund process is initiated, i.e the POS application has transferred control to a terminal or another peripheral to process the refund.&nbsp; At this point, if the store associate or the customer identifies any issue with the transaction like the amount is not accurate, or the customer chooses to receive the refund in a different payment method, or if the refund transaction fails&nbsp;to be executed in the external payment system, the POS application will receive an error and display the error to the store associate and take the store associate back to the available refund options.&nbsp;</p>\r\n\r\n<p>In a scenario where an automatic refund was attempted, and the refund transaction failed in the payment system, the refund options will not show that method as an available refund option anymore.&nbsp; The store associate can now choose a different method to refund again and try to complete the refund.</p>\r\n\r\n<p>A refund once attempted has to be completed, but possibly via a different payment type. There is no option to go back and edit the return order.</p>\r\n\r\n<p>If the customer is not interested in getting a refund in any other form of payment, then the store associate can cancel the return order.&nbsp; Canceling a return order means the order and the payment are marked as canceled, which cancels any open invoice and the copied payments are rolled back to the parent order. When the associate clicks on the back button from the available refunds screen, the associate will be presented with an option to&nbsp;<strong>Start Over (which will cancel the order)&nbsp;</strong>or Stay Here and complete the created return order.</p>\r\n\r\n<p>The return order can only be canceled if there are no refunds successfully processed against the return order, including partial refunds.&nbsp;</p>\r\n\r\n<p>Note: In the case the return is created in offline mode, the cancelation&nbsp;will simply clear the cart, there is no order cancelation or payment cancelation.&nbsp;</p>\r\n\r\n<p>Note: The&nbsp;<strong>Start Over&nbsp;</strong>button is grant protected and the user needs to have this&nbsp;<a href=\"http://omni.helpdocsonline.com/pos-resources-2-2$return-abort-ui-resource\">grant</a>&nbsp;provisioned.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><a name=\"return-order-edit-following-checkout\" id=\"return-order-edit-following-checkout\"></a><a id=\"return-order-edit\" name=\"return-order-edit\"></a>Return order edit following Checkout</h2>\r\n\r\n<p>A return order can be edited by the store associate and items can be added and removed, make all permissable edits to the order all the way up to the point of attempting a refund to a payment gateway.&nbsp; Once a refund attempt is made to a payment terminal, the order cannot be edited anymore; the back button on the cart is protected with validation.&nbsp;</p>\r\n\r\n<p>If a store associate clicks the back button on a return cart from the checkout page, the following are validated&nbsp;</p>\r\n\r\n<ul>\r\n\t<li>Any payments&nbsp;already attempted</li>\r\n\t<li>Any refund already issued&nbsp;</li>\r\n</ul>\r\n\r\n<p>If even one condition is satisfied, the store associate will be forced to complete a refund for the order and going back to cart is prohibited.</p>\r\n\r\n<p>If both conditions fail, then the store associate is still not allowed to go back to the cart, but the associate must start over the entire return order via&nbsp;<strong>Start Over</strong>.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n\t  </div>\r\n </div>\r\n <div id=\"ui-page-fb-wrap\"></div>\r\n <div class=\"hiq-footer-wrap\">\r\n    \r\n                \r\n  </div>\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n",
  "content_length": 59783,
  "scraped_at": "2025-08-09T22:01:46.206331",
  "content_clean": "Home ››Manhattan Active® Omni››Store››Process & Configuration Guides››Point of Sale››POS Guides ››POS Returns POS Returns and Exchange Guide POS Returns and Exchange GuideTypes of ReturnsValidated ReturnNon-Validated or Standalone returnMixed Returns - Combination of Validated and StandaloneShip To Address Return/Pick-up In Store Return Return ModeTransaction Detail Quantity fieldExchangeMatchingGeneral Item and orderLine isReturnable AttributesGift Card ReturnabilitySpecial Order Age Policy Matching RuleAutomatch Return Items for Attached CustomerTie Breaker during MatchingPrice Rank in Price Tie-break LogicRefund Price DeterminationValidated pricingStand alone item pricingFlow VariationsReturn reason code and dispositionReturn Fees (\"Restocking\" fees)Order and Orderline return feesReturn fee at item levelRefund ProcessPayment Type Selection RulesRules for Validated ReturnsRules for Unvalidated Stand Alone ReturnsOther related Configurations Governing Refund Payment TypesMaximum refund limit during returnsRefund ThresholdAlternate refund payment types for Override TenderAllow Cash Refund Above Till AmountComplex Refund Payment Type recommendationsPayment Form Support In RefundProcessing Refund via TerminalRefund FailureReturn order edit following Checkout The Return/Exchange function allows customers to return previously purchased items. Associates may create a Return sub-transaction within a cart at any time. An order can be partially or entirely returned. When a customer is due a refund, the POS system keeps track of how the original order was paid for and determines the appropriate refund method. This can happen automatically (refund to original tender) or the employee can manually choose the refund method from a list of options (override tender list). Refer to Order Management - Returns and Exchanges - Returns & Exchange Process guide for more information regarding Order return data handling. Types of Returns Validated Return When a return item can be matched against a previous sale order, it is known as a validated return.  The most familiar use case is that the customer has produced a valid receipt with an OrderId from the original sale of the item, but return items can be 'validated' when the order is identified from transaction searches - for example, following transaction search the order details represents a kind of 'virtual' receipt and items can be selected for return from this. There are multiple ways to reach a 'Validated' return. Users can perform a transaction search using the transaction tab, scan a receipt, or utilize the auto-search feature to retrieve customer history. When a validated return is initiated, the system automatically links the customer from the first matching sale invoice-item to the return transaction. This occurs unless a cashier has manually assigned a different customer to the cart. POS Store Config > Store Common Config > Enable Auto Search for Active Customer will automatically search customer's purchase history and associate a return item to the best matching original sales orderId. Non-Validated or Standalone return Non-Validated or Standalone Returns are return lines with items that cannot be matched to an original order - i.e., \"returns without receipt\". Items which are present on a supplied sale order, but: For which the orderLine denotes isReturnable \"False\" - this occurs for POS orders when the item master attributes item>sellingAttributes>returnableAtStore and returnableAtDC are both False at the time the item was included in the sale Which already been returned, or, were not fulfilled - in both cases the orderLine>ReturnableQuantity will be 0. will also be considered unmatched. If they are allowed to be returned by the associate, it will be as unvalidated (\"return without receipt\") even though technically the customer may have presented a receipt. Validated cross-border returns are not supported. For example: If you purchase an item in US, then you cannot initiate a validated return in CA and refund to original payment method. This behavior is due to several complexities with currency conversion, taxes, order data visibility across different organization etc. Mixed Returns - Combination of Validated and Standalone When the cart has both validated and non-validated returns. Mixed Return example: One return item can be associated with an original order paid by credit card (validated return) and another can be standalone, not matched to an original order. Ship To Address Return/Pick-up In Store Return As noted, Ship to Address, Send Sale and Pick-up In Store items can't be returned as validated against the original sale unless they have been fulfilled for that sale. Return Mode Within a Cart, users can invokes the Return Mode at any time by Selecting \"Start A Return\" function in the cart and then entering one or more orderId(s) and return item(s).  If auto-search customer is configured and a customer is activated there's no need to explicitly enter an orderID. Typing or scanning the orderID from an original sale receipt - with correct bar code rule setup, the Cart will recognize this as an OrderID and automatically initiate the return mode From searching for the transaction and viewing Order Detail from the Transactions list. In Return mode, the cart header changes to red with label \"Return\".  Once in Return mode the cart remains in that mode (all entered items are considered negative or return items) until the user selects \"Cart Mode\" function to toggle back to the cart sale mode. Transaction Detail Quantity field When starting a return from the Transaction details, the section displays all the items which are eligible for return. There is a quantity stepper option added next to the item which allows the users to increase/decrease the item quantity to create a return order. By default, the quantity section is set to 1 and the stepper icon is protected by a user grant \"ui::pos::return::updatequantity”. If the user does not have the grant, the quantity stepper is not displayed. However, the user can still add the item to the return cart, which will add total returnable quantity available for the item. The quantity can only be increased to the max returnable quantity available for the item. Once the max returnable quantity is reached, the increase icon is disabled and the user cannot further increase the quantity.  If the user manually types number which is higher than the returnable quantity and clicks on Add to Return, the item will be added but with max returnable quantity. Once all the returnable items are added to the return cart, the Add to Return button changes to Added to Return, and the quantity stepper is disabled. If the user removes an added item from the Return cart, the Order Details section displays the Status as Partially Pending Return and the Add to Return button is activated for the specific item. If there is only one order line added to the return cart and the user removes the item, the return order is canceled and the application returns to the Engage tab. Zero is not a valid entry for the item quantity and the stepper does not allow the user to get less than 1 quantity. If the user accidentally adds zero to the quantity stepper and clicks on Add to Return the application will add the item with 1 quantity to the return order. There are instances where the same item is added as multiple lines with multiple quantities on each order line. In this scenario, when the user tries to add the item for return, the quantity is usually consumed from the order line which has the highest quantity. To explain further, let's take the example below. Order Line Item Returnable Quantity 1 Item 1 3 2 Item 1 2 3 Item 1 1 In the above table we can see that Item 1 is added with different quantities on different lines. Let's take the scenario below for return The user clicks on Add to Return on Line 3 for quantity 1 - Item 1 with quantity 1 is added to the return Cart. Quantity is reduced from Line 1 as it has the maximum quantity for Item 1. The returnable quantity on Line 3 will show 1, but on Line 1 the returnable quantity will now be 2. The user now clicks again on Line 2 to add Item 1 for quantity 1. The same behavior is repeated as above and now the Returnable Quantity on Line 1 is equal to 1. Once the Returnable Quantity on Line 1 is 0 the Add to Return becomes Added to Return for Line 1. If the user again selects Item 1 for return either from Line 2 or Line 3 the item will be added to the return cart and the quantity will be reduced from the line with a higher Returnable Quantity. This behavior will follow if the user continues to return Item 1 unless there is no returnable quantity left to return the order. If the user chooses to add all the items from a single line, like in this case, let's say the user adds 3 quantities from Order Line 1 at once, then all the quantities are consumed from the same order line. If the user enters a value higher than 3 on order line lets say 5 then the application looks for the other 2 quantity on the other lines given that they are available on the returnable quantity Exchange From the Return mode users can invoke the exchange mode by clicking on the cart mode in more menu. POS allows both switching from Cart to Return mode and vice versa. For example, from Return mode, users scan the order and select items for return.  After adding return items, the user can switch to Cart mode by clicking the Cart mode button to include items for exchange. When a Cart Sale item is added, the cart header dynamically updates to “Exchange.” The cart categorizes items into two groups: “Return” and “In-store Purchase.” Under the “Return” group, the order number and return quantity are displayed, while the “In-store Purchase” group shows the quantity of items added as part of in-store purchases. It is best to consider that the POS Cart allows entry of Positive (Sale) items as well as Negative (Return) items, but each group of items is independent - there's no automatic linking of an item in a Return group to a positive item in a Sale group as \"exchanges\" of each other. Navigation between Return and Cart modes remains intuitive, with the respective mode buttons always available. Once an item is added, these buttons move to the “More” menu for easy access. Additionally, items added in Cart mode persist even when switching back to Return mode, ensuring continuity in the transaction process. The cart supports multiple transaction scenarios: Negative balances: Where the customer receives a refund. Positive balances: Where the customer owes money for the exchange. Even exchanges: Where the same item or an item of equivalent value is exchanged, requiring no payment or refund. This flexible functionality ensures that customer exchanges are handled smoothly and accurately. To perform the exchange transaction, when the cashier scans the sale invoice, the cart switches to return mode and as items from the original sale are added to the cart for return, the system intelligently links the customer associated with that sale invoice to the current transaction. This occurs unless a cashier has manually assigned a different customer to the cart. Note: The exchange state and standalone returns are transaction types or conditions flowing organically from the use of the Returns/Exchange function and are not called by separate keys. POS does not support returns with forced even exchanges. All mixed cart i.e.  returns and sale in a return transaction are uneven exchange and new sale item are priced when added and not copied from original order. Matching As items and orderIDs are identified in the Return via the methods described, the match API is called.  Via this API POS matches the item(s) collected in Returns Mode to any original OrderID(s) collected. When an item is found in the data for an original order and is returnable, the item receives return pricing, tax information from its matched original order, and the original tender payment type is noted. If the item cannot be matched because it's not found on any of the orders collected, or its returnable quantity is not correct due to a previous return or other condition, the associate may choose to collect another Order ID, return the item as a standalone return labeled as \"No order found\" on the cart or remove the item from the transaction. In contrast to CLASSIC matching behavior, items are now matched and their refund prices determined as they are added to the Return cart. For example, if Item A with current price 15.00 was sold for 10.00 via Order 123: If Order 123 is added to Return Cart followed by Item A and Item B, A will be added to the cart for 10.00 refund matched to Order 123 and B treated as a standalone. If Items A and B are added to the Return Cart, followed by Order 123, Item A will NOT be able to retroactively match at the time it is added.  It will be treated as a Standalone return and typically priced for refund at 15.00. Note:  As a consequence, all receipts should be scanned first, followed by the return items, to ensure the best match. General Item and orderLine isReturnable Attributes In addition to basic 'matching' of items to original orders (sales), the general returnability of an item at the store in a validated return against a given order is determined at the time of original order creation by a flag in the Order Data for the original sale order>orderLine>IsReturnable.   When the order is captured from POS system, order>orderLine>IsReturnable flag is set based on the master data item attribute for the orderline item item>IsReturnableAtDC. If that  master data flag is set to false, then in any POS order (sale) the item orderLine will be marked as non-returnable for that order - i.e., order>orderLine>isReturnable will be False.   Otherwise, if the flag is true, the item orderLine will be marked as returnable for that order (IsReturnable will be set to true). Note: POS does NOT look at the isReturnableAtDC flag directly from the item master at the time of the return; POS uses the orderLine return eligibility set at the time of order creation. For example, an item on an orderline is set as returnable (orderline>IsReturnable is set to true) at time of sale.  After the order is created, item>IsReturnableAtDC flag is set to false in the item master for that same item. In this situation, the item would be allowed to be returned to the store from that prior order. The new values for item>isReturnableAtDC would affect the returnability of that item in future orders going forward. Vice versa - if the item at order creation was set to be non-returnable and after the order was created, the IsReturnableAtDC flag is set to true in the item master, the item would NOT be allowed to be returned to the store from that particular prior order/receipt. This allows items to change status over time - new items can be returnable when first introduced, and as they transition to clearance items over time the item attributes can be changed to not returnable. Flag will only be validated upon click at checkout. Match and create return API will be called. This API will have all the intelligence to check if isReturnable Flag is true or false for this item and then throw related information back to the user. Note:  Because line item return behavior as described is dependent on an attribute in the original sale order, there is currently no way to enforce returnable/not returnable status on standalone return items which by definition are not validated against an earlier sale order. The validation is displayed in the form of Consolidated Error Screen after the scanned items have gone through the Return Match process and thus is not displayed up front while adding the order during the returns - since until the item(s)/Order(s) MATCH occurs, the exact status of each item is now known. Below are the information messages displayed after the validation. Note: In IRIS, we only have two types for return errors, which is not the same as classic, Error Reason Description Text displayed on consolidated errors form Item matched to order/line but order line is canceled. If Order Id & LineId is not null and IsMatch=true and provided Order Line is cancelled No Matching Receipt Item not matched to any orders/order lines If Item doesn't exist in one of the input orders. No Matching Receipt Quantity is not eligible to return If quantity is more than returnable quantity. No Matching Receipt Unable to find Item id within suggested Order Id. If Order Id is not null but line id is null and IsMatch=false and Item doesn't exit. No Matching Receipt ItemId does not match with suggested order Id and Line Id. If Order Id & LineId is not null and IsMatch=false and ItemId doesn't match with orderId and lineId combination. No Matching Receipt Item UOM does not match with suggested orderId and Line Id. If Order Id & LineId is not null and IsMatch=false and ItemId UOM doesn't match. No Matching Receipt Item Unit Price doesn't match with suggested orderId and LineId. If Order Id & LineId, Unit Price is not null and IsMatch=false and ItemId UOM doesn't match. No Matching Receipt Item is not eligible to return because it was purchased more than (configured age policy) days ago. If item is not allow to return due to return policy. Past Return Window Item matched to order/line but not returnable due to isReturnable flag 'False'. Able to find item in one of input Order and Item is not returnable because IsReturnable is set false in parent orders. No Matching Receipt Gift Card Returnability Gift Card order lines that are flagged as orderline.isReturnable=True are eligible for validated returns.  User can initiate a return for such orderlines by choosing order line/lines from the Order in the Return mode. Successful Activations/Reload is not typically marked as returnable as the value is added to the customer's Gift card, hence user cannot choose them for return purpose.   Such Gift Card line items will not be shown in Order Details when browsing an order in Return mode. Therefore only failed gift card sale line items are eligible for validated returns. Special Order Age Policy Matching Rule Retailer can set return match age at the Order Configuration for \"Returns and Exchange\".  Orders are considered \"not matched\" if the matching sale is more than the configured \"Days Eligible for Return\". Retailers can override this matching criteria by means of a business flag in POS General Config \"Allow Override on Return Age\".  When this is True, a user whose role has new grant \"overrideaccess::posservice::returnage\" can approve matched return of an item to an original sale order when that sale exceeds the configured match age limit. In case the current user does not have the mentioned grant then another user with the grant can perform a manager override by entering userID/PIN to perform the action. Automatch Return Items for Attached Customer To enable AutoMatch behavior, posStoreConfig>storeCommonConfig>enableAutoSearchCustomerOrder should be set to TRUE. If an Active customer is present in the transaction, the store associate can bypass explicitly scanning receipts (orderId values) into the Return state.  Instead when the Match runs, the system will automatically try to match return items to customer past orders by automatically searching the purchase history of that customer, for that item.   As with regular Match, the system will identify the order that best matches for that return item, based on the return configuration. While searching the customer past purchases, system goes up to the number of days specified under POS store configurations>>Store common config>>Age Limit For Customer Order Search For Returns.  If not order is found within this history, user can choose to continue with non-validated return or void the item. If a user has presented both the order ID and activated the customer, user entered Order ID takes precedence over any 'automatches'.  Once the entered Orderid is used to match return items, if there are still unmatched items, orders from past purchases are used.  While matching the orders fetched from the past purchases, the tie breaker rules are applied too. There are certain constraints to the number orders to be fetched and time taken to get the orders. Following Order component properties are added for this purpose The number of orders to be looked up for is determined by customer.past.purchases.page.size.  3 is the default value. The timeout duration is governed by order.fetch.timeout.duration.in.secs.  3 seconds is the default value Note: Implementation team is recommended not to increase these values to a much higher number as it can impact the performance of the application. Tie Breaker during Matching If an item is found in more than one order (or orderlines), the system matches the item to a specific order/orderline based on the \"Match return items to order by\" configuration.  This configuration is orderConfiguration>mposConfig>Returns&Exchanges>\"Match Returns to Order by\" configuration. This allows retailer to set their own criterion.  Either PRICE and/or AGE can be selected, and the order of each (highest vs lowest price, oldest vs newest sale) If both criteria are configured - System tries to break the tie first based on price policy. If price policy is set to \"Highest\", the order( or orderline) having the highest selling price is matched for the returned item. Selling price is calculated as  (OrderLineSubTotal - TotalDiscountOnItem)/ quantity. If the selling price again results in a tie between order (or orderlines) or price policy is not configured, then age policy is used to break the tie. If neither of them is configured, the oldest order (or orderline) is used to match the item to the order. For example: John buys Jeans with Buy 1 Get another 30% deal. When he returns one pair of the Jeans with the receipt, the system chooses the orderline based on the Price policy. Order Order Line Item Selling Price in dollars Price Policy Age policy Result 1 1 2 Jeans Jeans 25.00 (Full price) 17.50 (30% off) Highest Oldest Return match API will match the return to order line1 1 1 2 3 Jeans Jeans Tshirt 25.00 (Full price) 17.50 (30% off) 10.00 Lowest Oldest Return match API will match the return to order line2 1 1 2 3 Jeans Jeans Jeans 25.00 17.50(30% off) 17.50 (30% off) Lowest Oldest Tie exists between order line 2 and 3. Return match API will match the return to order line2 as it is the oldest between order line 2 and 3. 1 1 2 Jeans Jeans 25.00 25.00 None None Systems defaults to use the oldest line which is orderline1 Price Rank in Price Tie-break Logic Price rank allows the retailers to use configure Nth lowest or highest to match the item to the orderlines. This is more prevalent when there are deals for buying an item in multiple units at different price points. During the return, price rank allows the returned item to be matched against the order (or orderline) where the price of the item is ranked as N. This takes effect only when price criteria is configured to break the tie when the retailer wants to break the tie based on price, but doesn't want to favor the extremes (absolute highest or absolute lowest). Refund Price Determination Validated pricing For Validated return items, the item pricing including original sale tax and any promotional deals or discounts is obtained from the matched original Order. Stand alone item pricing For Non-validated stand alone return items, Manhattan Active Omni provides the ability to track the price history of an item at location or web. Retailer can choose to use this to price standalone returns. While accepting a return item as \"Standalone\", system picks the least price in last X number of days as specified. This feature is available only if price history is maintained. If price history is not maintained, or, if no price history record for that item exists, the current item Selling Price for that item/location is picked. Price History is enabled and configured via Application Configuration> Manage Selling Configuration > Selling > Price Configurations.  Price History will be maintained as item selling prices are changed when an integer value is provided in the Return Low Price Age field, where that value represents the duration in days for which to maintain the price history.  Price History is maintained similar to item price, on behalf of item and location. Flow Variations The return flow may be configured to require reason codes and/or disposition codes as well as Return Fees if so desired. Return reason code and disposition When return lines are added in the UI (by manually adding or scan return lines or by adding it from transaction details), there will be an ability to add the return reason and return disposition codes for the return lines. As a default behavior from base, both return reason code and disposition will be enabled and the fields are mandatory to be populated. This enablement is via cart event and cart form configuration, and Return Reason and Disposition codes are just a specific example of the generic Input Form functionality. Cart Event: \"postOrderLineAdd-ReturnReasonCaptureEventConfig\"\" and Cart Form: \"ReturnReasonCaptureFormGroup\" are used to bring up the return reason and return disposition form on the UI. To make modification, go to Cart form UI, navigation is here \"Cart Form > CartInputFormGroup > CartInputForm > CartInputFormField\" Default values: Default values for picked from pos General config > common config > \"Default Return Reason Code\" and \"Default Dispostion code\". Drop down values: \"Disposition\" seed data is coming from \"posReturnDisposition\" entity of posservice component and the return reason is coming from \"reason\" entity where \"ReasonTypeId = Return AND EligibleForPointOfSale = true\" from order component. Removing a field: Goto \"Cart Form > CartInputFormGroup > CartInputForm > CartInputFormField\" and remove the form field to remove any one field from the pop-up Making non-mandatory: For example, if you want to make return reason as a non-mandatory field, then Goto specific  \"Cart Form > CartInputFormGroup > CartInputForm > CartInputFormField\" for form Field Id: \"ReturnReason\" and use Form Field  Required = false. Removing the pop-up: If you want to totally remove this ability, then you can delete the cart event \"postOrderLineAdd-ReturnReasonCaptureEventConfig\". if you want to modify it to remove one of them or make any of these fields optional, then you can use Cart Form MUP configuration UI to do the modification.  You can also refer to page for more details. Return Fees (\"Restocking\" fees) Order and Orderline return fees See How do Returns Work guide. These are enabled and configured at Org level via Order Configurations>Returns and Exchanges. Return fee at item level Several retailers have a requirement to configure return fees based on the unique characteristics of items. This will allow the retailer to configure different types of return such as restocking, overweight, handling fees etc.   This process requires the fee to be configured in the Item Price record. Read more on process of return fee here, configure of return fee here. All items that incur return fees will be allowed to notify the store associate and customer at the time of adding such items to cart. To learn more about the configuration of such notification refer here. Refund Process When a validated or un-validated return is created in the store, the store associate can proceed to process a refund after scanning all the items to be returned and clicking on checkout.  The store associate is presented with a list of all the available refund options. The Payment component has configurable rules governing refunds and which payment types are available for a refund for a given transaction. Payment Type Selection Rules See the Payment Configuration guide for more detail.  At checkout state, POS calls the Expected Refund API which returns the tender type option(s) from payment based on the rules. Rules for Validated Returns Via Payment>Payment Capture Config> Refund Pay Type, for each Payment Type one or more allowed Refund Payment Types are configured.  The first sequenced item will always be the 'default' (automatic) refund option, with others of later sequence as alternates.  Typically where possible, payment rules prefer to refund back to the original payment type - i.e., a credit to credit, preferably the original card as follow-on. Where this is not possible, as when the original tender may have been by Traveler's Check, a different default refund payment type is configured. POS will automatically identify these original or default payment types, based on configured options for the original order payment type, during a refund. The available refund options are split into two parts: Automatic and Override. The store associate can select a method of refund from either the automatic (the \"default\" or original) or override \"alternate\" options. Once a refund method is chosen, the POS application will then try to execute the refund request in the respective method. Rules for Unvalidated Stand Alone Returns In the case in which an original Payment Type cannot be identified due to unvalidated return item, the Refund Pay Type rules above cannot be applied.  . For stand alone (not matched) returns, multiple potential alternate refund payment types (a default and other options) will be available when the business flag \"Show Alternate Refunds For Return\" is turned on and multiple payment types are flagged via pay capture config>payment capture detail as \"Allow Standalone Return\" True. When this business flag is off, regardless of payment capture detail \"Allow Standalone\" flag for individual payment types, only a single default refund override tender as configured in \"Standalone Return Payment Type\" in payment parameters is available.  Historically and typically this is Gift Card Other related Configurations Governing Refund Payment Types Maximum refund limit during returns Each refund payment type configured has a maximum refund limit defined in payment capture config, The payment rules honor this limit in both return with and without receipt scenario and if any refund is above this limit, rules is move to use next eligible refund type.  If no eligible refund is configured then it will move to pick the remaining maxed refund amount to standalone return payment type configured in payment parameters. For example: During auto refund, current hard limits are checked i.e If for CC refund type is CC, GC and SC, then max refund limit is first checked for CC then for GC and SC. If refund limit exceed for all then standalone refund from payment parameter is used for remaining amount. Automatic/suggested refunds: If for CC refund type with hard limit/ maximum refund limit is configured as CC=10, GC=20 and SC=30. And if refund of 100 on original CC payment is tried then it loops through all eligible refund types for CC with hard limits, such as CC=10, GC=20 and SC=30 and standalone refund=40. In above example if standalone refund i.e. cash has hard limit of $15 then existing rules considers is as error scenario i.e. CC=10, GC=20 and SC=30 and Alternate refund=40 is suggested and on processing refund it throw error that 40 is more than 15 and moves to override refund screen. Alternatively, the associate may select to override the automatic refund recommendation from a list of permitted optional tenders, also provided by the Expected Refund API. Irrespective of return type i.e. either return with or without receipt the available override tender selection is based on the payment parameters standalone return payment type (single default option such as Gift Card) or multiple override refund tender types based on configuration. Refund Threshold User can also have choose to control refunds by payment type and user role via threshold configuration in posservice component.   See POS Cart guide, Thresholds section for details. This works independent of above hard limit i.e maximum refund limit from payment capture config. This threshold should be configured by payment type and at each user role level, the threshold itself is defined as maximum allowed refund amount. If user is doing refund above the allowed threshold for that role, then manager override credentials from another user with the appropriate permissions is forced.  I.E., such refunds can be overridden by users with threshold more than the required refund amount. Refer to Manager Override & Routing process and configuration guide for additional information. How does refund threshold work with above hard limit/ maximum refund limit ? Example: If for CC, refund type with hard limit/ maximum refund limit is configured as CC=10, GC=20 and Store Credit (SC=30). Assume that, within the 'hard limit', refund threshold for SC = 25 is configured for store Associate role. If store associate logins in and tries a refund of 100 on original CC payment, payment rule will loop through all eligible refund types for CC with hard limits, and suggested refunds as CC=10, GC=20 and SC=30 and standalone refund=40. On processing refunds, error is thrown to user since SC of 30 is more than allowed threshold of 25. User can choose to use manager override pop-up by providing another user's credentials whose role is associated to threshold more than the required refund of 30 for SC, and process the refunds. Alternate refund payment types for Override Tender Associate can choose to override the automatic refund recommendation to a configured alternate tenders using the override tender option. The override tender screen will display refund type based on the Validated or Stand Alone configurations as described. In either case (validated or standalone) the override tender functionality for refunds is controlled with special manager key and UI visibility grants. Only users with these grants will be able to see and use the automatic refund recommendations. If associate does not have the manager key access, then a user with the right grants can give the access with user and pin credentials. Allow Cash Refund Above Till Amount Associates can return cash to the customer during returns/exchanges regardless of the amount of cash the system has calculated in the till when posGeneralConfig>commonConfig \"Allow Cash Refund Above Till Amount\" business flag is enabled.  There will be no error message displayed to the user that the till does not have enough cash to cover the refund.  The system will allow the cash to be returned to the customer without forcing a pay in or loan of cash to the till before allowing the cash refund. When Allow Cash Refund Above Till Amount business flag is not enabled, in the event the till has insufficient funds to cover a refund an error will be displayed to the user informing them there is not enough cash in the till and the cash refund will not proceed. This business flag works for both fixed and mobile registers. This is only supported for returns and post-void transactions. The till is allowed to go negative during exchange tenders, gift card cashouts, and payouts. Note: The prevent-till-negative feature does not apply to partial refunds because the till balance is not updated until the full refund is completed. Since the balance due is not zero, the system does not check if there is enough cash in the till for the next payment. As a result, this flag is not relevant - in effect, the check can be bypassed and the till can go negative - if the associate tenders the refund via multiple partial payments. Complex Refund Payment Type recommendations There can easily be scenarios in which the rules above result in more than one 'default' refund payment type recommendation.  For example if the refund is based on a mixture of validated return items for which the default refund is Credit and stand alone return items for which the default refund is Gift Card, or, if the refund is based on validated items which were purchased via split tender originally. In this case, the automatic recommendation may stipulate more than one payment type/amount - i.e., recommend to refund 20.00 in Gift Card and 30.00 in Credit.  The alternate payment type options would be derived from the intersection of the two sets of rules. Payment Form Support In Refund Payment forms are a feature that supports configuring forms that are invoked as part of the payment capture flow. The forms can be used to capture payment information using pinpads, keyboard, micr and scanner. Payment forms are associated to the payment type via the payment capture config. When a payment form is configured for a payment type, the forms are rendered in the application when the user selects that payment type during payment capture. In the return process, if an order was paid for using a payment type that contains forms, then the following conditions are checked and the forms are displayed based on the conditions. Automatic: OpenFormsOnAutoRefund flag (Payment capture Config -> Payment Input Form) is true. Refund behavior set to New Payment Method. Only supported in Online mode. Note: A payment transaction is created when selecting the automatic refund; if the user clicks on close in the forms page, the transaction remains open. If the automatic option is chosen again, the existing refund transaction is used and processed. If the user chooses to override, then the transaction created as part of the automatic refund is canceled. Override: Forms are displayed for override refunds. Processing Refund via Terminal If the customer chooses a refund method like a card which is set up to be processed via a payment terminal, then the POS application will issue the refund command to the payment terminal and transfer the control to the payment terminal.  The customer can then complete the refund by following the instructions on the payment terminal. When the refund that is initiated from the POS application is processed successfully, the refund is considered a success and the customer has the amount credited back to their account. In the case of cash, the customer is given the money from the cash drawer.  If the return order is fully successfully refunded, then the store associate is taken to the receipt screen, and the store associate can now issue a receipt to the customer in the mode the customer chooses. The transaction is now complete. Refund Failure When a refund process is initiated, i.e the POS application has transferred control to a terminal or another peripheral to process the refund.  At this point, if the store associate or the customer identifies any issue with the transaction like the amount is not accurate, or the customer chooses to receive the refund in a different payment method, or if the refund transaction fails to be executed in the external payment system, the POS application will receive an error and display the error to the store associate and take the store associate back to the available refund options. In a scenario where an automatic refund was attempted, and the refund transaction failed in the payment system, the refund options will not show that method as an available refund option anymore.  The store associate can now choose a different method to refund again and try to complete the refund. A refund once attempted has to be completed, but possibly via a different payment type. There is no option to go back and edit the return order. If the customer is not interested in getting a refund in any other form of payment, then the store associate can cancel the return order.  Canceling a return order means the order and the payment are marked as canceled, which cancels any open invoice and the copied payments are rolled back to the parent order. When the associate clicks on the back button from the available refunds screen, the associate will be presented with an option to Start Over (which will cancel the order) or Stay Here and complete the created return order. The return order can only be canceled if there are no refunds successfully processed against the return order, including partial refunds. Note: In the case the return is created in offline mode, the cancelation will simply clear the cart, there is no order cancelation or payment cancelation. Note: The Start Over button is grant protected and the user needs to have this grant provisioned. Return order edit following Checkout A return order can be edited by the store associate and items can be added and removed, make all permissable edits to the order all the way up to the point of attempting a refund to a payment gateway.  Once a refund attempt is made to a payment terminal, the order cannot be edited anymore; the back button on the cart is protected with validation. If a store associate clicks the back button on a return cart from the checkout page, the following are validated Any payments already attempted Any refund already issued If even one condition is satisfied, the store associate will be forced to complete a refund for the order and going back to cart is prohibited. If both conditions fail, then the store associate is still not allowed to go back to the cart, but the associate must start over the entire return order via Start Over."
}