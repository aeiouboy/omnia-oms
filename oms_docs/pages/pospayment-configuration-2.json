{
  "id": "3532518",
  "permalink": "pospayment-configuration-2",
  "title": "POS Payment Configuration",
  "type": "topic",
  "level": 6,
  "path": "Manhattan Active® Omni/Store/Process & Configuration Guides/Point of Sale/POS Guides/POS Payment/POS Payment Configuration",
  "raw_item": {
    "id": "3532518",
    "text": "POS Payment Configuration",
    "title": "POS Payment Configuration",
    "permalink": "pospayment-configuration-2",
    "leaf": false,
    "droppable": true,
    "expanded": true,
    "closed": true,
    "visible": true,
    "editable": true,
    "type": "topic",
    "topicType": "0",
    "status": "1",
    "iconCls": "icon-topic",
    "cls": "",
    "folder_id": "448348",
    "parent": "f;448348",
    "created_date": "1734410291",
    "modified_date": "1753978715",
    "instructor_id": null,
    "loaded": true,
    "haschildren": false,
    "callout": "0",
    "order": "2"
  },
  "success": true,
  "content": "\r\n\r\n\r\n<div class=\"hiq-page-wrap\">\r\n<div class=\"hiq-t-wrap\">\r\n\t\t\r\n  \t  <div class=\"hiq-t \">\r\n\t\t\t\t<ul class=\"breadcrumbs\"><li><a class=\"breadcrumb-links\" hqid=\"1788908\"  href=\"/home\">Home</a></li> <li><span>&rsaquo;&rsaquo;</span><a hqid=\"3500940\" href=\"/omni\" class=\"breadcrumb-links\">Manhattan Active® Omni</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"3426481\" href=\"/store-3\" class=\"breadcrumb-links\">Store</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158412\" href=\"/process-configuration-guides-3\" class=\"breadcrumb-links\">Process & Configuration Guides</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158737\" href=\"/point-of-sale\" class=\"breadcrumb-links\">Point of Sale</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"3433322\" href=\"/pos-iris-guides\" class=\"breadcrumb-links\">POS Guides</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"3535922\" href=\"/pos-payment-2\" class=\"breadcrumb-links\">POS Payment</a></li><li> <span>››</span>POS Payment Configuration</li></ul>  \t\r\n\t\t<h2>POS Payment Configuration</h2>\r\n\r\n<p></p>\r\n\r\n<ul><li><a href=\"/pospayment-configuration-2$payment-capture-configuration\">Payment Capture Configuration</a><ul><li><a href=\"/pospayment-configuration-2$payment-capture-config-details\">Payment Capture Config Details</a></li><li><a href=\"/pospayment-configuration-2$paycaptureexclusionconfig\">PayCaptureExclusionConfig</a></li></ul></li><li><a href=\"/pospayment-configuration-2$voice-authorization-configuration\">Voice Authorization Configuration</a></li><li><a href=\"/pospayment-configuration-2$payment-form-configuration\">Payment Form Configuration</a></li><li><a href=\"/pospayment-configuration-2$user-input-form\">User Input Form</a></li><li><a href=\"/pospayment-configuration-2$user-input-form-fields\">User Input Form Fields</a></li><li><a href=\"/pospayment-configuration-2$using-input-forms-to-enable-gift-cards-entry-by-scanning\">Using Input Forms to enable Gift Cards entry by Scanning</a></li><li><a href=\"/pospayment-configuration-2$pay-by-link-configuration\">Pay By Link Configuration</a><ul><li><a href=\"/pospayment-configuration-2$payment-capture-configuration\">Payment Capture Configuration</a></li><li><a href=\"/pospayment-configuration-2$grants\">Grants</a></li><li><a href=\"/pospayment-configuration-2$digital-self-service-configuration-nbsp\">Digital Self Service Configuration&nbsp;</a></li><li><a href=\"/pospayment-configuration-2$selfservice-organizationmapping\">SelfService.OrganizationMapping</a></li><li><a href=\"/pospayment-configuration-2$kv-store-in-consul\">KV store in Consul</a></li><li><a href=\"/pospayment-configuration-2$two-other-payment-side-configurations\">Two other Payment-Side Configurations</a></li></ul></li><li><a href=\"/pospayment-configuration-2$enabling-tap-to-pay\">Enabling Tap to Pay</a><ul><li><a href=\"/pospayment-configuration-2$enabling-tap-to-pay-for-iphone\">Enabling Tap to Pay for iPhone</a></li><li><a href=\"/pospayment-configuration-2$enabling-tap-to-pay-for-nbsp-manhattan-active®-point-of-sale\">Enabling Tap to Pay for&nbsp;Manhattan Active® Point of Sale</a></li><li><a href=\"/pospayment-configuration-2$initializing-iphones-to-accept-tap-to-pay-transactions\">Initializing iPhones to accept Tap to Pay transactions</a></li><li><a href=\"/pospayment-configuration-2$additional-details-in-case-of-any-issues-experienced-during-the-nbsp-enablement\">Additional details in case of any issues experienced during the&nbsp;enablement:</a></li></ul></li><li><a href=\"/pospayment-configuration-2$foreign-or-alternate-currency-configuration\">Foreign (or alternate) Currency Configuration</a></li><li><a href=\"/pospayment-configuration-2$payment-terminal-selection-and-sharing-for-mobile-devices\">Payment Terminal Selection and Sharing for Mobile Devices</a></li><li><a href=\"/pospayment-configuration-2$exchange-tender-configuration\">Exchange Tender configuration</a></li><li><a href=\"/pospayment-configuration-2$pos-refund-configuration\">POS Refund configuration</a></li><li><a href=\"/pospayment-configuration-2$pos-post-void-configuration\">POS Post Void Configuration</a><ul><li><a href=\"/pospayment-configuration-2$post-void-of-refund-transaction\">Post void of refund transaction</a></li></ul></li><li><a href=\"/pospayment-configuration-2$ui-s-and-entities\">UI's and Entities</a></li><li><a href=\"/pospayment-configuration-2$profile-purpose\">Profile Purpose</a></li></ul>\r\n<p>This guide contains the configurations required for payment processing in the POS application.</p>\r\n\r\n<h4><a name=\"payment-capture-configuration\" id=\"payment-capture-configuration\"></a>Payment Capture Configuration</h4>\r\n\r\n<p>The payment capture configuration is used to define settings within each payment type for accepting and issuing payments on different order capture channels. The rules that can be defined within each payment type can vary. For example, some payment methods like cards (credit / debit)&nbsp;can be configured to be captured via a payment terminal and other methods like&nbsp;Check can be captured manually using keyboard input or a MICR reader.&nbsp;</p>\r\n\r\n<p>Payment capture configuration also includes flags that control whether a&nbsp;signature is required, franking required and so on.</p>\r\n\r\n<p>Below are some of the main POS configurations to be made for any payment type.</p>\r\n\r\n<h5><a name=\"payment-capture-config-details\" id=\"payment-capture-config-details\"></a>Payment Capture Config Details</h5>\r\n\r\n<ul>\r\n\t<li><strong>Process Through Terminal (T/F) - </strong>This flag controls whether the payment is processed via the payment terminal. When enabled, the payment request is sent to the payment terminal and input is expected from the payment terminal.&nbsp;</li>\r\n\t<li><strong>Set payment type on gateway request</strong>&nbsp;(T/F) - This flag, when enabled, will set the payment type on the payment request generated to the payment gateway. This must be turned off for a credit card if you want to allow the customer to use a card WITHOUT requiring that they specify CREDIT/DEBIT in advance.&nbsp;</li>\r\n\t<li><strong>POS Custom Payment Page&nbsp;</strong>(T/F)<strong> - This</strong>&nbsp;flag must be enabled for any custom payment type that requires a custom page. When this flag is enabled, when the payment type is selected in the payment options, a blank screen will be shown by default. The retailer can completely customize the page as required.&nbsp;</li>\r\n\t<li><strong>Input Required</strong> (T/F) - Defines how the input will be captured - either it can be from the payment terminal or keyboard entered within&nbsp;the application. Configure this attribute \"inputRequired\" as true if it is through the application. If it is from the payment terminal, then configure \"processThroughTerminal\" = true. Retailers can also configure both to be true, in which case the payment can be captured from either of them.&nbsp;</li>\r\n</ul>\r\n\r\n<p>Note that the Credit and Debit are seeded as \"processThroughTerminal\" = true and cannot be changed to false.</p>\r\n\r\n<ul>\r\n\t<li><strong>Capture Signature</strong>&nbsp;(T/F) - This flag when configured mandates a signature to be captured for any payment type within the application outside the payment terminal. For example: Any custom tender which requires a signature can configure the \"forceCaptureSignature\" to true and capture a signature. The retailers can also configure the message using infoMessageDuringSignature attribute that needs to be displayed on the application on the signature screen.</li>\r\n\t<li><strong><a id=\"include in drawer count\" name=\"include in drawer count\"></a>Include In Drawer Count&nbsp;(T/F) -</strong>&nbsp;Configure True for any payment type which needs to be included in drawer counts during reconciliation.&nbsp; Typically this would be physical paper payment Instruments.\r\n\t<ul>\r\n\t\t<li>If a Payment type is not configured as True, (ex. typically Credit Card), a 10.00 payment with that instrument does not affect the amount recorded in the till/cash drawer and is not displayed during Reconciliation.</li>\r\n\t\t<li>If a Payment type is&nbsp;configured as True (ex. typically Cash, Check), a 10.00 payment with that instrument DOES affect the amount recorded in the till/cash drawer and displayed during Reconciliation,&nbsp; Bank Deposit and on various Back Office Reports can be configured using this flag.\r\n\t\t<ul>\r\n\t\t\t<li>Three payment instruments, CASH, CHECK, and TRAVELERS CHECK, are assumed to be included by default.</li>\r\n\t\t\t<li>Currently, it is a choice of&nbsp;whether or not to display two of these payment instruments, i.e. Traveller's Check and Personal Check on these screens by changing this flag from TRUE (display) to FALSE (do not display).\r\n\t\t\t<ul>\r\n\t\t\t\t<li>If this flag is FALSE, it is assumed that the retailer does not count these two, and they will not be shown or displayed.</li>\r\n\t\t\t\t<li>This would be the case if, for example, the retailer doesn't even accept one or both of these payment types.</li>\r\n\t\t\t</ul>\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\t\t</li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<div class=\"tip\">Note: In Iris,&nbsp; If a “custom” paper based tender is used, the amount will be updated in Cash Section, not in other sections, when closing the till.&nbsp;</div>\r\n\r\n<p>NOTE: CASH will always be displayed on these screens; the flag does not have any impact on the display or inclusion of CASH.</p>\r\n\r\n<ul>\r\n\t<li><strong><a id=\"popdrawer\" name=\"popdrawer\"></a>Pop Cash Drawer (T/F) -&nbsp;</strong>If this is True, any time such a configured payment type is either tendered or refunded, the associated device Cash Drawer will&nbsp;automatically be triggered to open.&nbsp; &nbsp;Typically T for Cash and sometimes for Checks or custom paper tender types such as Gift Certificates if the retailer issues/redeems those.&nbsp;&nbsp;</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>NOTE: In the event of multiple payments by such a payment type - for example, 100.00 purchase with 10.00 cash, followed by 50.00 gift card, followed by 40.00 cash - the cash drawer will be triggered to pop multiple times, once for each such payment type received or issued.&nbsp; In this example, cash drawer will pop twice.&nbsp; However, the till will not be updated until all payments are complete and the balance is 0.00.</p>\r\n\r\n<ul>\r\n\t<li><strong>Restrict Split Payment (T/F) -</strong>&nbsp;A payment type with this configured True must be the only or final payment type.&nbsp;&nbsp;</li>\r\n</ul>\r\n\r\n<p>\"Restrict Split Payment\" flag works on the balance due amount.&nbsp; If you have a 100 dollar amount, and you are first select&nbsp;credit card which, for illustration,&nbsp;has \"Restrict Split Payment\" set to true, you have to pay the total 100 dollars with that credit card. However, for the same order, if you initiallypaid 25 dollars on a gift card, paying the rest with credit card is still allowed - but following the choice of credit card, the remainder of 75 dollars should be paid with that method.&nbsp;&nbsp;</p>\r\n\r\n<ul>\r\n\t<li>\r\n\t<p><strong><a id=\"animationname\" name=\"animationname\"></a>Animation Name -&nbsp;</strong>The attribute will have the animation file name with a path that will be shown on the UI when the particular payment method is processing and interacts with the terminal. If a payment method does not provide this, it will fall back to base default. The custom animationName path would be like /assets/next-gen-ui/assets/ext/{path-to-image}.&nbsp;&nbsp;</p>\r\n\t</li>\r\n</ul>\r\n\r\n<p>NOTE: If a payment type is configured with Process through terminal = false, Pop cash drawer = false and Include in Drawer count = false; then a payment gateway is expected to be configured for processing the payment.&nbsp;</p>\r\n\r\n<h5><a name=\"paycaptureexclusionconfig\" id=\"paycaptureexclusionconfig\"></a>PayCaptureExclusionConfig</h5>\r\n\r\n<p>Allows retailer to control allowed/displayed payment types for a transaction based on order and order line attributes.&nbsp; Currently this functionality is available in base for two types of orders/orderlines:</p>\r\n\r\n<ul>\r\n\t<li>Orders captured on a mobile device (use Exclusion \"Mobile\")</li>\r\n\t<li>Orders which contain at least one Save The Sale item (Ship to Address or Pickup) (use Exclusion \"OmniOrder\")</li>\r\n</ul>\r\n\r\n<p>For example, if a retailer does not want to accept PERSONAL CHECK on Mobile devices, or if the retailer does not want prepaid payment types such as CASH&nbsp;for Omni orders(Ship to address, pick-up at store), add exclusion \"Mobile\" and/or \"OmniOrder\" as Pay Capture Exclusions for those payment types using&nbsp;payCaptureExclusionConfig under Payment Capture Configuration for each.</p>\r\n\r\n<h4><a name=\"voice-authorization-configuration\" id=\"voice-authorization-configuration\"></a>Voice Authorization Configuration</h4>\r\n\r\n<p>The following configuration is added to&nbsp;&nbsp;<em>posStoreConfigurations&gt;&gt;storeCommonConfig&nbsp;</em>to enable Voice Authorization</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">Store common config</th>\r\n\t\t\t<th scope=\"col\">Purpose</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>permitVoiceAuthorization</td>\r\n\t\t\t<td>\r\n\t\t\t<p>If this option is set to True, POS UI application prompts the user to contact the payment support center to get the offline authorization by calling the support number.&nbsp; If set to False, this prompt does not appear.&nbsp; Application displays an error message,&nbsp;“SAF Transaction amount limit exceeded. Transaction declined”. There are no changes to the tenders.&nbsp; Default value=True.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nbsp;</td>\r\n\t\t\t<td>&nbsp;</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>The following configuration is added to&nbsp;paycaptureconfig to indicate if the payment type can be processed when the application is running in offline mode.</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">payCaptureConfig</th>\r\n\t\t\t<th scope=\"col\">Purpose</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>permitInOffline</td>\r\n\t\t\t<td>This flag indicates if the payment method can be processed in offline mode.&nbsp; This is relevant to customer present flows.&nbsp; Typically, Cash and Credit card are the tender types supported in offline application.&nbsp; Default is False.&nbsp;&nbsp;</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>The following key must be added to the payment gateway configuration to define the response codes that should invoke the voice authorization flow. If the attribute is not added, the default code of 59024 will be used.&nbsp;</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">Gateway Attribute</th>\r\n\t\t\t<th scope=\"col\">Purpose</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>VoiceAuthResponseCodes</td>\r\n\t\t\t<td>To provide a comma separated list of response codes that the terminal can respond with and for which the POS application must invoke the voice authorization flow. Eg. 59023,59024,99999 etc</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4><a name=\"payment-form-configuration\" id=\"payment-form-configuration\"></a><a id=\"paymentformconfig\" name=\"paymentformconfig\"></a>Payment Form Configuration</h4>\r\n\r\n<p>A retailer may have multiple payment methods&nbsp;that they can offer to their customers. There can be affiliated payment programs, or pay later programs which typically are completely handled outside in a separate processing application, but reference information is captured in the POS. In order to support such use cases, there is a payment form capability that is supported.&nbsp;</p>\r\n\r\n<p>Payment form capability is also extended for base payment types like credit card, cash and check, controlled by Behavior Change timer,&nbsp;<b>\"</b>POS - Migrate base payments to payment form<b>\"</b>. It will be released in production environments on&nbsp;<b>August 15, 2026</b>, but you can opt-in earlier.&nbsp;.</p>\r\n\r\n<p>Credit card does not require any forms to be configured; However, check will require a form to capture the check&nbsp;details, which can be configured to be read using a MICR reader or input manually using a keyboard.&nbsp;</p>\r\n\r\n<p>The payment form is a simple form or multiple forms to which multiple fields can be added and information can be captured from the customer during the checkout process. All the data that is collected in the forms is persisted back to the payment component as additional attributes and the payment will be processed successfully.</p>\r\n\r\n<p>Note: The form configuration does not have any integration into any external systems and is not performing any systematic authorization or settlement against the provided payment information.</p>\r\n\r\n<p>&nbsp;<em>For example:</em> Check tender, it would be ideal to capture the routing number, check number along with the account number and amount from a MICR reader. For traveler's checks, the details might be irrelevant, and some checks do not come with micro ink to read from a micro reader but can be configured to get details from a keyboard. This will allow the retailer to provide the capability to custom configure the details of the base supported or custom payment type that is accepted. More details on configuration are mentioned below:</p>\r\n\r\n<p>If a user input form is created with no input fields configured, POS UI will show a blank form during the payment process.</p>\r\n\r\n<p>Customer info related fields in payment is not used. They populate only at order header section. It is very unlikely that user captures these multiple times in an order. Even if does happen, the latest information persists.</p>\r\n\r\n<p><strong><a id=\"formrefundconfig\" name=\"formrefundconfig\"></a>Open Form On Auto Refund (T/F)</strong> - Used to control if the form should be displayed when performing an Automatic Refund. The override refund does not use this flag and it&nbsp;uses the Return context flag.</p>\r\n\r\n<h4><a name=\"user-input-form\" id=\"user-input-form\"></a>User Input Form</h4>\r\n\r\n<p>If process through terminal is configured as TRUE for any payment type, for example: credit, debit and so on, then all the details of the payment will be picked from the payment terminal. Retailers need not configure any input forms here unless they are required to capture more details regarding the payment from different hardware or from app. For example, to capture zip code for a gift card payment for authentication, since zip code is not captured by payment terminal, retailers would create new user input form and related fields to input this data from keyboard.</p>\r\n\r\n<p>If the input required is configured as TRUE for any payment type, then the input form and the form field need to be configured. This configuration is necessary to get the payment details, map the payment details to attributes that get saved on the backend system. The required input form configuration is detailed below.</p>\r\n\r\n<ul>\r\n\t<li>Create an input form by providing a form name and form ID.</li>\r\n\t<li>Select interaction mode as \"customer present\" as this payment is for a POS application. Also, set the context for sale or/and return.</li>\r\n\t<li>Configure the form methods to set the mode of capture data.</li>\r\n</ul>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\">\r\n\t<caption>\r\n\t<p>&nbsp;</p>\r\n\t</caption>\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">Flag</th>\r\n\t\t\t<th scope=\"col\">Description</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Is Pinpad Form Method</td>\r\n\t\t\t<td>Set to true if the input must be captured on a pinpad</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;</p>\r\n\t\t\tIs Keyboard Form Method</td>\r\n\t\t\t<td>Set to true, if the input must be captured from the keyboard in the application</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Is Micr Form Method</td>\r\n\t\t\t<td>Set to true, if the input must be captured from a MICR reader (cannot be set to true if ProcessThroughTerminal is true)</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Is Scanner Form Method</td>\r\n\t\t\t<td>Set to true, if the input must be captured from a scanner</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Interaction Mode</td>\r\n\t\t\t<td>\r\n\t\t\t<p data-renderer-start-pos=\"11362\">Interaction Mode for which the Input Form will be displayed:</p>\r\n\r\n\t\t\t<ul data-indent-level=\"1\">\r\n\t\t\t\t<li>\r\n\t\t\t\t<p data-renderer-start-pos=\"11426\">CustomerPresent</p>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t<p data-renderer-start-pos=\"11445\">CustomerNotPresent</p>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Is Sale Context</td>\r\n\t\t\t<td>Define if the Input Form must be displayed during a Sale transaction</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Is Return Context</td>\r\n\t\t\t<td>Define if the Input Form must be displayed during a return transaction</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>User Input Form Sequence</td>\r\n\t\t\t<td>If multiple Input Forms are created, define the sequence to display them</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Failover to Keyboard</td>\r\n\t\t\t<td>Define if it’s allowed to use the Keyboard in case the selected input method is not possible (e.g.: scanner failure)</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Open form on auto refund</td>\r\n\t\t\t<td>Used to control if the form should be displayed when performing an Automatic Refund</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ul>\r\n\t<li>Input form sequence needs to be provided. This will be used by the UI to decide which form needs to be captured first and then which form should be rendered next.&nbsp;</li>\r\n</ul>\r\n\r\n<p><strong>Seed data Snippet of <em>User Input form</em> for \"Check\" payment type:</strong></p>\r\n\r\n<p><br>\r\n<code>&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"PaymentType\": \"Check\",<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"UserInputFormID\": \"CHECKINPUTGROUP\",<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"UserInputFormName\": \"Check Input Group\",<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"InteractionMode\": {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"InteractionModeId\": \"CustomerPresent\"<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"IsSaleContext\": true,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"IsReturnContext\": true,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"IsKeyboardFormMethod\": true,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"IsPinpadFormMethod\": false,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"IsMicrFormMethod\": true,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"IsScannerFormMethod\": false,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"UserInputFormSequence\": 1,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"FailoverToKeyboard\": true,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"InfoMessageDuringPayment\": \"Please input information through the MICR or Keyboard\",<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"UserInputFormField\": [<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"PaymentType\": \"Check\",<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"UserInputFormID\": \"CHECKINPUTGROUP\",<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"UserInputFormFieldID\": {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"UserInputFieldID\": \"CheckNumber\"<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"UserInputFormFieldSize\": 15,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"UserInputFormFieldSequence\": 3<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"PaymentType\": \"Check\",<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"UserInputFormID\": \"CHECKINPUTGROUP\",<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"UserInputFormFieldID\": {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"UserInputFieldID\": \"AccountNumber\"<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"UserInputFormFieldSize\": 20,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"UserInputFormFieldSequence\": 2<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"PaymentType\": \"Check\",<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"UserInputFormID\": \"CHECKINPUTGROUP\",<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"UserInputFormFieldID\": {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"UserInputFieldID\": \"RoutingNumber\"<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"UserInputFormFieldSize\": 9,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"UserInputFormFieldSequence\": 1<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<br>\r\n&nbsp;&nbsp;&nbsp; }</code></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Note:&nbsp;Please note that&nbsp;User Input forms are not being used by Digital Self-Service and Contact Center&nbsp;flows currently.&nbsp;</p>\r\n\r\n<h4><a name=\"user-input-form-fields\" id=\"user-input-form-fields\"></a>User Input Form Fields</h4>\r\n\r\n<p>Once the input form is configured, the form fields must be configured&nbsp;which may need to be captured as part of that input form.</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">Field</th>\r\n\t\t\t<th scope=\"col\">Description</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>User Input Form Field ID</td>\r\n\t\t\t<td>\r\n\t\t\t<p data-renderer-start-pos=\"13143\">Id of the User Input Form Field. Possible values from Seed Data:</p>\r\n\r\n\t\t\t<ul data-indent-level=\"1\">\r\n\t\t\t\t<li>\r\n\t\t\t\t<p data-renderer-start-pos=\"13211\">CheckNumber</p>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t<p data-renderer-start-pos=\"13226\">AccountNumber</p>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t<p data-renderer-start-pos=\"13243\">RoutingNumber</p>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>User Input Form Field Size</td>\r\n\t\t\t<td>The maximum size of the field</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>User Input Form Field Validation</td>\r\n\t\t\t<td>Define if a Regex validation is required for this field</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>User Input Form Field Required</td>\r\n\t\t\t<td>Define if the field is mandatory or not</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>User Input Form Field Sequence</td>\r\n\t\t\t<td>In the case of multiple Input Form Fields, define the sequence to display them</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p><strong>Seed data Snippet of <em>User Input form fields</em> for \"Check\" payment type:</strong></p>\r\n\r\n<p>Note: The \"UserInputFieldID\" should not contain any space or special characters.</p>\r\n\r\n<p><code>{<br>\r\n&nbsp; \"ProfileId\": \"systemAugmentable\",<br>\r\n&nbsp; \"data\": [<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"UserInputFieldID\": \"CheckNumber\",<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"UserInputFieldType\": {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"UserInputFieldTypeID\": \"Numeric\"<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"UserInputFieldName\": \"Check Number\",<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"IsBase\": true,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"EncryptionRequired\": true<br>\r\n&nbsp;&nbsp;&nbsp; },<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"UserInputFieldID\": \"AccountNumber\",<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"UserInputFieldType\": {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"UserInputFieldTypeID\": \"Numeric\"<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"UserInputFieldName\": \"Account Number\",<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"IsBase\": true,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"EncryptionRequired\": true<br>\r\n&nbsp;&nbsp;&nbsp; },<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"UserInputFieldID\": \"RoutingNumber\",<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"UserInputFieldType\": {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"UserInputFieldTypeID\": \"Numeric\"<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"UserInputFieldName\": \"Routing Number\",<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"IsBase\": true,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"EncryptionRequired\": true<br>\r\n&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp; ],<br>\r\n&nbsp; \"RelatedProfiles\": [<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"profilePurpose\": \"pay::paymentCaptureConfig\",<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"profileId\": \"retail\"<br>\r\n&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp; ]<br>\r\n}</code></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4><a name=\"using-input-forms-to-enable-gift-cards-entry-by-scanning\" id=\"using-input-forms-to-enable-gift-cards-entry-by-scanning\"></a>Using Input Forms to enable Gift Cards entry by Scanning</h4>\r\n\r\n<p>POS Payments&gt; Payment Capture Configuration&gt; Select Payment Type&gt; Select User Input Form</p>\r\n\r\n<p>Note: Information below is for Gift Card. Currently, the scanner method is supported for gift card only.</p>\r\n\r\n<p>User Input Form</p>\r\n\r\n<table data-autosize=\"false\" data-layout=\"default\" data-number-column=\"false\" data-table-local-id=\"e992e638-86e3-406c-a9be-c144342bc42c\" data-table-width=\"760\">\r\n\t<colgroup>\r\n\t\t<col>\r\n\t\t<col>\r\n\t</colgroup>\r\n\t<tbody>\r\n\t\t<tr data-prosemirror-content-type=\"node\" data-prosemirror-node-block=\"true\" data-prosemirror-node-name=\"tableRow\">\r\n\t\t\t<th data-prosemirror-content-type=\"node\" data-prosemirror-node-block=\"true\" data-prosemirror-node-name=\"tableHeader\">\r\n\t\t\t<p data-prosemirror-content-type=\"node\" data-prosemirror-node-block=\"true\" data-prosemirror-node-name=\"paragraph\"><strong data-prosemirror-content-type=\"mark\" data-prosemirror-mark-name=\"strong\">User input form Config</strong></p>\r\n\t\t\t</th>\r\n\t\t\t<th data-prosemirror-content-type=\"node\" data-prosemirror-node-block=\"true\" data-prosemirror-node-name=\"tableHeader\">\r\n\t\t\t<p data-prosemirror-content-type=\"node\" data-prosemirror-node-block=\"true\" data-prosemirror-node-name=\"paragraph\"><strong data-prosemirror-content-type=\"mark\" data-prosemirror-mark-name=\"strong\">Camera scan icon display status</strong></p>\r\n\t\t\t</th>\r\n\t\t</tr>\r\n\t\t<tr data-prosemirror-content-type=\"node\" data-prosemirror-node-block=\"true\" data-prosemirror-node-name=\"tableRow\">\r\n\t\t\t<td data-prosemirror-content-type=\"node\" data-prosemirror-node-block=\"true\" data-prosemirror-node-name=\"tableCell\">\r\n\t\t\t<p data-prosemirror-content-type=\"node\" data-prosemirror-node-block=\"true\" data-prosemirror-node-name=\"paragraph\">Only&nbsp;Is Scanner Form Method&nbsp;= True</p>\r\n\t\t\t</td>\r\n\t\t\t<td data-prosemirror-content-type=\"node\" data-prosemirror-node-block=\"true\" data-prosemirror-node-name=\"tableCell\">\r\n\t\t\t<p data-prosemirror-content-type=\"node\" data-prosemirror-node-block=\"true\" data-prosemirror-node-name=\"paragraph\">The text box will be disabled, but users can still click on the scanner icon. However, this does not work on Windows because the text box is disabled, preventing it from receiving focus.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr data-prosemirror-content-type=\"node\" data-prosemirror-node-block=\"true\" data-prosemirror-node-name=\"tableRow\">\r\n\t\t\t<td data-prosemirror-content-type=\"node\" data-prosemirror-node-block=\"true\" data-prosemirror-node-name=\"tableCell\">\r\n\t\t\t<p data-prosemirror-content-type=\"node\" data-prosemirror-node-block=\"true\" data-prosemirror-node-name=\"paragraph\">Is Scanner Form Method&nbsp;= True<br>\r\n\t\t\tIs Keyboard Form Method = True</p>\r\n\t\t\t</td>\r\n\t\t\t<td data-prosemirror-content-type=\"node\" data-prosemirror-node-block=\"true\" data-prosemirror-node-name=\"tableCell\">\r\n\t\t\t<p data-prosemirror-content-type=\"node\" data-prosemirror-node-block=\"true\" data-prosemirror-node-name=\"paragraph\">The text box will be enabled with camera scanner for all form factors.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr data-prosemirror-content-type=\"node\" data-prosemirror-node-block=\"true\" data-prosemirror-node-name=\"tableRow\">\r\n\t\t\t<td data-prosemirror-content-type=\"node\" data-prosemirror-node-block=\"true\" data-prosemirror-node-name=\"tableCell\">\r\n\t\t\t<p data-prosemirror-content-type=\"node\" data-prosemirror-node-block=\"true\" data-prosemirror-node-name=\"paragraph\">Is Scanner Form Method&nbsp;= False<br>\r\n\t\t\tIs Keyboard Form Method = True</p>\r\n\t\t\t</td>\r\n\t\t\t<td data-prosemirror-content-type=\"node\" data-prosemirror-node-block=\"true\" data-prosemirror-node-name=\"tableCell\">\r\n\t\t\t<p data-prosemirror-content-type=\"node\" data-prosemirror-node-block=\"true\" data-prosemirror-node-name=\"paragraph\">The text box will be enabled without the camera scanner for all form factors.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr data-prosemirror-content-type=\"node\" data-prosemirror-node-block=\"true\" data-prosemirror-node-name=\"tableRow\">\r\n\t\t\t<td data-prosemirror-content-type=\"node\" data-prosemirror-node-block=\"true\" data-prosemirror-node-name=\"tableCell\">\r\n\t\t\t<p data-prosemirror-content-type=\"node\" data-prosemirror-node-block=\"true\" data-prosemirror-node-name=\"paragraph\">Is Scanner Form Method&nbsp;= True<br>\r\n\t\t\tIs Keyboard Form Method = True<br>\r\n\t\t\tIs Pinpad Form Method = True</p>\r\n\t\t\t</td>\r\n\t\t\t<td data-prosemirror-content-type=\"node\" data-prosemirror-node-block=\"true\" data-prosemirror-node-name=\"tableCell\">\r\n\t\t\t<p data-prosemirror-content-type=\"node\" data-prosemirror-node-block=\"true\" data-prosemirror-node-name=\"paragraph\">The pinpad is always prioritized when the Pinpad Form Method&nbsp;is true.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4>&nbsp;</h4>\r\n\r\n<h4><a name=\"pay-by-link-configuration\" id=\"pay-by-link-configuration\"></a><a id=\"pblconfig\" name=\"pblconfig\"></a>Pay By Link Configuration</h4>\r\n\r\n<h5><a name=\"payment-capture-configuration\" id=\"payment-capture-configuration\"></a>Payment Capture Configuration</h5>\r\n\r\n<ul>\r\n\t<li><strong>Enable Pay By Link POS</strong>&nbsp;- Retailers can configure to obtain credit/debit/gift card payment&nbsp;using the <strong>Pay By Link POS</strong>&nbsp;flag.&nbsp; If enabled, a link via email&nbsp;can be sent to the customer or a QR code will be generated on the POS terminal (not payment terminal) which the customer can scan with their phone.&nbsp; The customer will open the link,&nbsp;review the order and click on a Pay button on their phone.&nbsp; Based on Manhattan Active® Omni Digital Self-Service functionality, which is <a href=\"https://omni.helpdocsonline.com/paybylink$configurations\">configured outside POS</a>, a&nbsp;3rd party website&nbsp;will be displayed, and the customer will enter the payment information on their phone.&nbsp; POS will obtain the payment status and, if successfully authorized, finalize&nbsp;the order.</li>\r\n</ul>\r\n\r\n<p><strong>Note</strong>: Make sure a&nbsp;new \"Payment Type\" should be defined for&nbsp;\"Pay by link\".</p>\r\n\r\n<p><strong>Note</strong>: Pay By Link will always default to the full balance due and the amount cannot be changed.</p>\r\n\r\n<p><strong>Note</strong>: Pay By Link should only be configured for the Pay By Link tender as it is not logical for other tenders (i.e. Cash, Check, etc.).</p>\r\n\r\n<p><strong>Note</strong>: Pay by Link by SMS/Text is not currently supported out of base POS.&nbsp; This would require further integration with a provider - for example, Twilio.&nbsp; Base deployments should use the \"hide\" metadata extension provided to hide the SMS option on the Order Summary screen, as it is not relevant at this time.</p>\r\n\r\n<h5><a name=\"grants\" id=\"grants\"></a>Grants</h5>\r\n\r\n<ul>\r\n\t<li>digitalselfservice::configuration::admin&nbsp;&nbsp;This grant allows the user access to the DSS configurations.</li>\r\n</ul>\r\n\r\n<h5><a name=\"digital-self-service-configuration-nbsp\" id=\"digital-self-service-configuration-nbsp\"></a>Digital Self Service Configuration&nbsp;</h5>\r\n\r\n<ul>\r\n\t<li>Set Self Service Payment Gateway Id to Cybersource</li>\r\n</ul>\r\n\r\n<h5><a name=\"selfservice-organizationmapping\" id=\"selfservice-organizationmapping\"></a>SelfService.OrganizationMapping</h5>\r\n\r\n<ul>\r\n\t<li>Add Organization/User as the Key/Value pair in Consul for Self-Service Component (SelfService.OrganizationMapping) i.e., \"tm-demo-us\": \"User\": <a href=\"mailto:admin@tm-demo-us.com\">admin@tm-demo-us.com</a> (user name which will send email).</li>\r\n</ul>\r\n\r\n<h5><a name=\"kv-store-in-consul\" id=\"kv-store-in-consul\"></a>KV store in Consul</h5>\r\n\r\n<ul>\r\n\t<li>Add these properties to KV store in Consul:\r\n\t<ul>\r\n\t\t<li>order.selfServiceHostName=[omni-url].&nbsp; &nbsp; ex: order.selfServiceHostName=<a href=\"https://store-mpatgar0101.cp.manh.cloud/\">https://store-mpatgar0101.cp.manh.cloud</a></li>\r\n\t\t<li>email.publishEmailPayload =false</li>\r\n\t\t<li>email.postemailtoqueue=false</li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<h5><a name=\"two-other-payment-side-configurations\" id=\"two-other-payment-side-configurations\"></a>Two other Payment-Side Configurations</h5>\r\n\r\n<ul>\r\n\t<li>Save the payment gateway configuration for Cybersource</li>\r\n\t<li>Upload the payment certificate (for the organization)</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4 data-renderer-start-pos=\"470\"><a name=\"enabling-tap-to-pay\" id=\"enabling-tap-to-pay\"></a>Enabling Tap to Pay</h4>\r\n\r\n<h5 data-renderer-start-pos=\"470\"><a name=\"enabling-tap-to-pay-for-iphone\" id=\"enabling-tap-to-pay-for-iphone\"></a><a id=\"taptopay\" name=\"taptopay\"></a>Enabling Tap to Pay for iPhone</h5>\r\n\r\n<p data-renderer-start-pos=\"470\">This payment functionality is managed through an integration with Adyen&nbsp;as the payment service provider. To enable Tap to Pay on an iPhone, you must configure the feature in Adyen&nbsp;and complete the setup in&nbsp;Manhattan Active® Point of Sale.</p>\r\n\r\n<ul>\r\n\t<li>Compatible devices:&nbsp;iPhone XR, XS, SE Gen 2 and Gen 3, or later. Supported on&nbsp;iPhone iOS version 17.0 and above.</li>\r\n\t<li>Retailers must work with Adyen to turn on Tap to Pay on an iPhone&nbsp;for the retailer's specified Merchant account name, which will be displayed on the payment page of Tap to Pay.&nbsp;They also need to&nbsp;make sure that they&nbsp;use the correct credentials when setting up their Merchant Account in Adyen to work with&nbsp;Manhattan Active® Point of Sale.</li>\r\n\t<li>The iPhone where tap to pay is intended to be used must be linked to an Apple account.\r\n\t<ul>\r\n\t\t<li>The Apple account must be a sandbox account, when&nbsp;using debug build, pointing to stage</li>\r\n\t\t<li>The Apple account must be a non-sandbox&nbsp;account when using the release build pointing to production.</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li>While pointing to stage and production environments, the following points must be considered.\r\n\t<ul>\r\n\t\t<li>The debug (-dev) IPA should be re-signed with retailer development iOS profile and used while testing in stage.</li>\r\n\t\t<li>The release IPA should be re-signed with the customer distribution profile and used while using in production.</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li>Request the Production URL&nbsp;from Adyen Payment Gateway and create the template below using the URL.</li>\r\n</ul>\r\n\r\n<p>URL:&nbsp;{{url}}/payment/api/payment/gateway/save</p>\r\n\r\n<p>Payload:<br>\r\n<br>\r\n{<br>\r\n&nbsp; &nbsp; \"GatewayId\": \"AdyenPayments\",<br>\r\n&nbsp; &nbsp; \"PaymentGatewayTemplate\": [<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; {<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"GatewayPaymentURLTemplate\": \"https://checkout-test.adyen.com/checkout/possdk/v68/sessions\",<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"TransactionType\": \"POSSDK_SESSION\",<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"GatewayResponseTemplate\": \"{{{#installationId}} &nbsp;\\\"InstallationId\\\": \\\"{{installationId}}\\\", &nbsp;{{/installationId}} &nbsp;{{#sdkData}} &nbsp;\\\"SdkData\\\": \\\"{{sdkData}}\\\" {{/sdkData}}}\",<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"GatewayRequestTemplate\": \"{ \\\"merchantAccount\\\": \\\"{{MerchantAccount}}\\\", \\\"setupToken\\\": \\\"{{SetupToken}}\\\", \\\"store\\\": \\\"{{MerchantStore}}\\\" }\"<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; }<br>\r\n&nbsp; &nbsp; ]<br>\r\n}&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong> The above URL can be added to&nbsp;Payment Gateways → AdyenPayments → Payment Gateway Template and make sure you have this template saved for POSSDK_SESSION for the staging environment.</p>\r\n\r\n<ul>\r\n\t<li>If the user<strong data-end=\"117\" data-start=\"91\">'s environment</strong> is running on code drop <strong data-end=\"161\" data-start=\"142\">2.2.13 or later</strong>, the required seed data is already included in the <strong data-end=\"229\" data-start=\"213\">base profile</strong>.&nbsp;The<strong> <strong data-renderer-mark=\"true\">pos::cartEvent</strong></strong>&nbsp;profile purpose can be copied directly from the base profile into the customer’s organizational profile without manual creation.</li>\r\n\t<li>The Adyen Tap to Pay SDK and Terminal API are already integrated into the Manhattan POS application. If users encounter any issues, they should reach out to&nbsp;Adyen <a data-renderer-mark=\"true\" data-testid=\"link-with-safety\" href=\"https://ca-test.adyen.com/ca/ca/contactUs/support.shtml?form=other\" title=\"https://ca-test.adyen.com/ca/ca/contactUs/support.shtml?form=other\">Support Team</a> for assistance with configuring their account for Tap to Pay on iPhone payments, or refer to the&nbsp;<a href=\"https://docs.adyen.com/point-of-sale/mobile-ios/build/tap-to-pay/#requirements\">Adyen Docs</a>&nbsp;for further guidance.</li>\r\n</ul>\r\n\r\n<h5>&nbsp;</h5>\r\n\r\n<h5><a name=\"enabling-tap-to-pay-for-nbsp-manhattan-active®-point-of-sale\" id=\"enabling-tap-to-pay-for-nbsp-manhattan-active®-point-of-sale\"></a>Enabling Tap to Pay for&nbsp;Manhattan Active® Point of Sale</h5>\r\n\r\n<ul>\r\n\t<li>Tap to pay can be enabled using the \"Enable Tap to Pay\" business flag under POS Store Configuration.&nbsp;</li>\r\n\t<li>Make sure the POS App&nbsp;shows the Tap to Pay&nbsp;option at checkout.</li>\r\n\t<li>\r\n\t<p data-renderer-start-pos=\"1535\">Gateway protocol must be set as Local Https and GatewayId must be AdyenPayments</p>\r\n\t</li>\r\n</ul>\r\n\r\n<p>If the \"Enable Tap to Pay\"&nbsp;business flag&nbsp;is turned on and the iPhone supports Tap to Pay, the checkout screen will automatically show Tap to Pay&nbsp;as a payment method. It will always be displayed first on both the payment screen and the refund screen.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h5 id=\"initializing-iphones-to-accept-tap-to-pay-transactions\"><a name=\"initializing-iphones-to-accept-tap-to-pay-transactions\" id=\"initializing-iphones-to-accept-tap-to-pay-transactions\"></a>Initializing iPhones to accept Tap to Pay transactions</h5>\r\n\r\n<p>Each iPhone to accept Tap to Pay transactions must complete an initialization setup.&nbsp;Ensure that Tap to Pay on iPhone has been configured for the store beforehand. Check&nbsp;<a href=\"/pospayment-configuration-2$taptopay\">Enabling Tap to Pay for iPhone</a>.&nbsp;</p>\r\n\r\n<p>Before launching Tap to Pay on iPhone for a new customer, users&nbsp;must first accept the Apple Terms and Conditions (T&Cs) for each merchant account that will be using the feature.&nbsp;On the Apple’s Terms of Use page, select the Merchant Account and accept the Apple Terms and Conditions for tap to pay to process live transactions. This must be done for each Merchant Account that will use Tap to Pay on iPhone.&nbsp;</p>\r\n\r\n<p>The Apple Terms and Conditions apply to production environments only.&nbsp; Manhattan Active® Point of Sale&nbsp;does not provide support for Tap to Pay on iPhone in staging environments.&nbsp;In case users want to test Tap to Pay&nbsp;in a test environment, they need to use the developer IPA app&nbsp;version of the application.</p>\r\n\r\n<p>Note: The timeout is not configurable as it is restricted by Apple and cannot be changed.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:&nbsp;</strong>The first time an iPhone attempts to process a Tap to Pay transaction, the user will be presented with an initialization screen which counts up from 0 to 100. This screen is presented any time the backend Apple application or the POS&nbsp;App has been updated. The initialization screen will only appear for the first transaction and will not display on subsequent transactions.</p>\r\n\r\n<p data-renderer-start-pos=\"470\">Currently, Tap to pay supports below payment flows:</p>\r\n\r\n<ol data-indent-level=\"1\" start=\"1\">\r\n\t<li>\r\n\t<p data-renderer-start-pos=\"365\">In-store transactions</p>\r\n\t</li>\r\n\t<li>\r\n\t<p data-renderer-start-pos=\"396\">Ship to address order (authorization only)</p>\r\n\t</li>\r\n\t<li>\r\n\t<p data-renderer-start-pos=\"437\">Override refund (Follow-on refund behavior)</p>\r\n\t</li>\r\n\t<li>\r\n\t<p data-renderer-start-pos=\"502\">Void tender (auto process void transaction)</p>\r\n\t</li>\r\n\t<li>\r\n\t<p data-renderer-start-pos=\"535\">Automatic Refund (follow-on refund behavior)</p>\r\n\t</li>\r\n</ol>\r\n\r\n<h5 data-end=\"300\" data-start=\"275\"><a name=\"additional-details-in-case-of-any-issues-experienced-during-the-nbsp-enablement\" id=\"additional-details-in-case-of-any-issues-experienced-during-the-nbsp-enablement\"></a>Additional details in case of any issues experienced during the&nbsp;enablement:</h5>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Issues</td>\r\n\t\t\t<td>Troubleshooting Methods</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Which iOS build should be used for testing tap to pay?</td>\r\n\t\t\t<td>\r\n\t\t\t<ul data-indent-level=\"2\">\r\n\t\t\t\t<li>\r\n\t\t\t\t<p data-renderer-start-pos=\"4172\">The iOS development build should be used if you are pointing to the Adyen test account (the X.X.X-dev.ipa found in jfrog is the development build).</p>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t<p data-renderer-start-pos=\"4322\">While using the development build, pointing to the test account, there should be a sandbox account created in the iOS and the iPhone should be logged in to that account.</p>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t<p data-renderer-start-pos=\"4492\">The iOS production build should be used if you are pointing to the Adyen production account (the X.X.X.ipa found in jfrog is the production build).</p>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>If the users have a custom iOS development account and don't want to use the Manhattan iOS profile, what are the changes?</td>\r\n\t\t\t<td>\r\n\t\t\t<ul data-indent-level=\"2\">\r\n\t\t\t\t<li>\r\n\t\t\t\t<p data-renderer-start-pos=\"4772\">Users can request Apple and get the tap to pay entitlement enabled for your iOS profile (development & production). <a data-testid=\"inline-card-resolved-view\" href=\"https://developer.apple.com/tap-to-pay/\" role=\"button\" tabindex=\"0\">Tap to Pay on iPhone - Apple Developer</a></p>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t<p data-renderer-start-pos=\"4883\">If users are using the Manhattan iOS profile, they can use the base builds directly to start using Tap to Pay.</p>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t<p data-renderer-start-pos=\"4990\">In case users are using their&nbsp;own iOS profile, then they&nbsp;need to download the base iOS build, resign the IPA with their&nbsp;iOS profile and then use it for Tap to Pay. The resigning process is described here: <a data-renderer-mark=\"true\" data-testid=\"link-with-safety\" href=\"https://omni.helpdocsonline.com/store-resign-ios\" title=\"https://omni.helpdocsonline.com/store-resign-ios\">https://omni.helpdocsonline.com/store-resign-ios</a></p>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t<p data-renderer-start-pos=\"5232\">While using the development build, pointing to the test account, there should be a sandbox account created for the iOS and the iPhone should be logged in to that account.</p>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>If the users are getting below errors while using tap to pay, what are they&nbsp;missing?</p>\r\n\r\n\t\t\t<p>Error message: \"<em data-renderer-mark=\"true\">Failed attestation: Cannot transact. Make sure you have a network connection and try again\".</em></p>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;</p>\r\n\r\n\t\t\t<p>&nbsp;</p>\r\n\r\n\t\t\t<p data-renderer-start-pos=\"5586\">This error occurs&nbsp;in 3 cases:</p>\r\n\r\n\t\t\t<p data-renderer-start-pos=\"5622\">1. When the users&nbsp;are using a development build and pointing it to the production Adyen account.</p>\r\n\r\n\t\t\t<p data-renderer-start-pos=\"5622\">2. When the users are using a production build and pointing it to test Adyen account</p>\r\n\r\n\t\t\t<p data-renderer-start-pos=\"5787\">3. When the users have not saved the Payment Gateway Template or saved incorrectly for TransactionType POSSDK_SESSION</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>If the users are using an iOS profile which does not have tap to pay entitlement enabled, what will happen?</p>\r\n\r\n\t\t\t<p>Error message: \"<em data-renderer-mark=\"true\"><strong data-renderer-mark=\"true\">AdyenTapToPay</strong>: executeCommand failed with error Tap to Pay is not allowed. Most likely the app is missing an entitlement to use it\".</em></p>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<p>&nbsp;</p>\r\n\r\n\t\t\t<p>&nbsp;</p>\r\n\r\n\t\t\t<p>If the users are&nbsp;using&nbsp;an iOS profile which does not have tap to pay entitlement enabled, then they&nbsp;will see this error in kibana logs when they&nbsp;try to use tap to pay.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4><a name=\"foreign-or-alternate-currency-configuration\" id=\"foreign-or-alternate-currency-configuration\"></a>Foreign (or alternate) Currency Configuration</h4>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note</strong>: Alternate (multi-currency) support is currently only available for Classic POS.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4><a name=\"payment-terminal-selection-and-sharing-for-mobile-devices\" id=\"payment-terminal-selection-and-sharing-for-mobile-devices\"></a>Payment Terminal Selection and Sharing for Mobile Devices</h4>\r\n\r\n<p>Retailers can configure mobile registers to establish a session with a payment terminal at the time of payment, instead of at the beginning of an order. To enable this functionality in mobile registers for a location, set posStoreConfig&gt;storeCommonConfig&gt;delayPTSessionTillPayment = True.</p>\r\n\r\n<p>This allows for multiple registers to be connected to a single payment terminal, and also allows users to easily switch to a different terminal as needed. When configured, the connected payment terminal will be displayed in the screen header of the Cart and Order Summary.</p>\r\n\r\n<p>The session for the device will not begin until the following:</p>\r\n\r\n<ul>\r\n\t<li>User selects a tender on Order Summary which requires the terminal to collect data or to process (credit, debit, gift card, etc.)</li>\r\n\t<li>User selects to issue or reload a gift card from the Cart</li>\r\n\t<li>User selects a \"from\" exchange tender which requires a payment terminal</li>\r\n</ul>\r\n\r\n<p>If a session is started in the Cart, due to a gift card activate or reload, where \"Activate Gift Card in Cart\" is true, the session will not end until the transaction is complete. The same will hold true for Exchange tenders where the \"from\" tender requires the payment terminal. The session release will occur after the receipt has been printed or emailed, and the terminal will then become available for the next transaction.</p>\r\n\r\n<p>Grant:</p>\r\n\r\n<p>ui::pos::devicemanagement::paymentterminalswitch::admin - This is a UI action to allow user to change the payment terminl within the tappable header when config is turned on. If user does not have this grant, the selected PT will be visible but not editable from outside POS Settings.</p>\r\n\r\n<p>Note: If a user changes the selected payment terminal in the Cart or Order Summary, it will overwrite the selected device in POS Settings.</p>\r\n\r\n<h4><a name=\"exchange-tender-configuration\" id=\"exchange-tender-configuration\"></a>Exchange Tender configuration</h4>\r\n\r\n<p>Exchange tender in Active Store solution offers the retailers to accept a tender and refund the customer with another tender. Both the tenders i.e. the tender exchanged and the list of available refunded tenders are configurable from payment capture details screen from config UI.</p>\r\n\r\n<p>Payment Type that needs to be eligible for exchange: below are the configurations required to accept a payment type for exchange tender functionality</p>\r\n\r\n<ul>\r\n\t<li>PermitFromExchangeTender - Set it to TRUE, to accept a payment type as eligible tender for exchange.</li>\r\n\t<li>MaxFromExchange - Retailer can set up maximum amount allowed for an exchange for the selected payment type.</li>\r\n\t<li>FromExchngTendrDispSeq - This is to configure the display sequence of the available tender for exchange. It will be used on the Store application.</li>\r\n\t<li>PermitToExchangeTender - Check this flag if this paymentType can be used as an eligible payback/refund tender for any exchange tender.</li>\r\n\t<li>IsBalEqReqFOrExchgTndr - Check this flag if balance enquiry is required before charging the tender to be exchanged. For example: this flag should be true for gift cards, since we do a balance enquiry first to get the available balance amount. This is necessary and tied back to the payment form method, since usually a gift card is processed through the terminal to the get balance, if not processed through terminal, user extension will be used to get balance from thirrd-party applications. If this flag is False, then balance of the gift card needs to be input by the user.</li>\r\n</ul>\r\n\r\n<p><strong>Configure eligible payback/refund for exchange tender transaction</strong></p>\r\n\r\n<p>The list of eligible payback/refund tenders for exchange tender transaction can be configured from the config UI. This list is specific to a tender that is getting exchanged, so this list needs to be configured for all the tenders for which exchange is permitted. The maximum amount of refund allowed can be configured here.</p>\r\n\r\n<p><strong>Code Snippet of list of eligible exchange refund tenders for check:</strong></p>\r\n\r\n<p><code>&nbsp;&nbsp;&nbsp; \"ExchangeTenderRefndType\" :[<br>\r\n{<br>\r\n&nbsp; \"ParentPayCaptureConfigType\": \"Check\",<br>\r\n&nbsp; \"PermitExchgTndrRefndType\": {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"PaymentTypeId\": \"Gift Card\"<br>\r\n&nbsp;&nbsp;&nbsp; },<br>\r\n&nbsp; \"DisplaySequence\": \"1\",<br>\r\n&nbsp; \"InteractionMode\": {<br>\r\n&nbsp;&nbsp; \"InteractionModeId\": \"CustomerPresent\"<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"MaxToExchangeTender\": 5000<br>\r\n},<br>\r\n{<br>\r\n&nbsp; \"ParentPayCaptureConfigType\": \"Check\",<br>\r\n&nbsp; \"PermitExchgTndrRefndType\": {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"PaymentTypeId\": \"Cash\"<br>\r\n&nbsp;&nbsp;&nbsp; },<br>\r\n&nbsp; \"DisplaySequence\": \"2\",<br>\r\n&nbsp; \"InteractionMode\": {<br>\r\n&nbsp;&nbsp; \"InteractionModeId\": \"CustomerPresent\"<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"MaxToExchangeTender\": 9999999.99<br>\r\n},<br>\r\n{<br>\r\n&nbsp; \"ParentPayCaptureConfigType\": \"Check\",<br>\r\n&nbsp; \"PermitExchgTndrRefndType\": {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"PaymentTypeId\": \"Credit Card\"<br>\r\n&nbsp;&nbsp;&nbsp; },<br>\r\n&nbsp; \"DisplaySequence\": \"3\",<br>\r\n&nbsp; \"InteractionMode\": {<br>\r\n&nbsp;&nbsp; \"InteractionModeId\": \"CustomerPresent\"<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"MaxToExchangeTender\": 9999999.99<br>\r\n}<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]</code></p>\r\n\r\n<h4><a name=\"pos-refund-configuration\" id=\"pos-refund-configuration\"></a>POS Refund configuration</h4>\r\n\r\n<ul>\r\n</ul>\r\n\r\n<p><strong>Payment Capture Config</strong></p>\r\n\r\n<ul>\r\n\t<li>Minimum Refund Amount: Specify the minimum amount that can be refunded using this tender type.</li>\r\n\t<li>Maximum Refund Amount: Specify the maximum amount that can be refunded using this tender type. While doing so, ensure that there is one another refund tender type which can be used to refund.</li>\r\n</ul>\r\n\r\n<p><strong>Refund Pay Type - Available Refund Payment types for Validated Returns</strong></p>\r\n\r\n<ul>\r\n\t<li>List of allowed refund tender types: This is the list of allowed refund tender types for a given tender type, used to make purchases. One with sequence 1 and interaction mode=Customer Present is used in case of automatic refunds. In case of override tender, all refund pay types with interaction mode=Customer Present are available. If there are multiple tender types used to make purchases, override refund types are the ones common across all these.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><a id=\"Alternate tenders for Override Tender\" name=\"Alternate tenders for Override Tender\"></a>Refund Pay Type - Available Refund Payment Types for Standalone Returns</strong></p>\r\n\r\n<p>Standalone Returns are return lines with items that cannot be matched to an original order - i.e., \"returns without receipt\". Normally the refund payment types which are recommended either automatically or by override are based on the payment type of the original order. If there is no 'original order' as for standalone, the recommended/available payment types are configured differently as described.</p>\r\n\r\n<p><strong>Payment Parameter Standalone Return Payment Type value - use to configure single Default refund payment type for Standalone Returns</strong></p>\r\n\r\n<ul>\r\n\t<li>Standalone Return Payment Type: Used to specify a single default refund payment type for standalone returns. This parameter is used if no payment types are configured via payment capture configurations as available to be allowed in standalone returns.</li>\r\n\t<li>In this case POS allows one default refund tender type for standalone returns.</li>\r\n\t<li>In case of return order with validated and standalone returns, this gets added to the list of tender types applicable to validated return tender types. Threshold defined for refund tender is not applicable to standalone return payment type.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Pay Capture Config Payment type attribute \"Allow Standalone Return\" - use with Business Flag to configure multiple available refund payment typesfor Standalone Returns</strong></p>\r\n\r\n<ul>\r\n\t<li>Allow Standalone Return: This attribute is on \"payment capture config\" and is used to configure alternate refund type during a override tender scenario.</li>\r\n\t<li>This attribute works with a business flag on pos general config &gt; common config &gt; \"Show Alternate Refunds For Return\" which is false by default. If the business flag remains false, this AllowStandalone returns attribute for each payment type has no function.\r\n\t<ul>\r\n\t\t<li>If Show Alternate Refunds For Return = false, Allow Standalone returns flag for each payment type has no function. A single payment type, taken from that configured in paymentParameters&gt;Standalone Return Payment Type will be used in a standalone refund tender scenario.</li>\r\n\t\t<li>If Show Alternate Refunds For Return = true, Allow Standalone returns flag will be used to show alternate override tenders in a standalone tender scenario.\r\n\t\t<ul>\r\n\t\t\t<li>For an unvalidated return, when the business flag is true, any payment types for which Allow Standalone Return is True will be available as alternate 'override' refund types.</li>\r\n\t\t\t<li>For example, Gift card and Store credit are initially seeded as \"Allow Standalone Return\" = true from base seed data profile. Therefore, if this profile is copied and used for the retailer, Gift card and store credit will be shown as alternate tenders in refund override tender.</li>\r\n\t\t</ul>\r\n\t\t</li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<p><strong>'Mixed' Returns - Combination of Validated and Standalone</strong></p>\r\n\r\n<ul>\r\n\t<li>This logic can be more complicated in a cart containing multiple returns.\r\n\t<ul>\r\n\t\t<li>Multiple Return example: One return item can be associated to an original order paid by Credit card (validated return) and another can be standalone, not matched to an original order.</li>\r\n\t\t<li>In this case, at the Order Summary, if the flags are set to allow multiple alternate standalone refund tenders, the recommendation will be the intersection of refund tenders for each of the returns.\r\n\t\t<ul>\r\n\t\t\t<li>Assume Credit Card is configured to allow refund by Credit, Debit, Gift Card, and Cash.</li>\r\n\t\t\t<li>Assume that the alternative standalone refund types are Gift Card, Cash, and Store Credit.</li>\r\n\t\t\t<li>In the above example, Override refund choices will be the intersection of these two sets of rules: Gift Card and Cash.</li>\r\n\t\t</ul>\r\n\t\t</li>\r\n\t\t<li>In other words, for such a mixed cart return scenario the rules for Standalone override refund types work along with Refund Pay Type of the original payment method. Only the common payment types will be displayed as alternate tenders in refund override tender.</li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4><a name=\"pos-post-void-configuration\" id=\"pos-post-void-configuration\"></a>POS Post Void Configuration</h4>\r\n\r\n<p>Post void is controlled and configured at each payment type, enable \"permit cancel\" under payment capture configuration to support post void for that payment type.</p>\r\n\r\n<p>NOTE In general, cancelling a payment transaction after the fact is not guaranteed of success in all cases, particularly for electronic payment methods, and depends on the gateway and the particular payment implementation for each retailer. If payment types are configured to permit \"cancel\", further work may be required to make this work for that payment type/gateway/provider combination.</p>\r\n\r\n<p>If post void refund is required to be different from original then specify the payment Id under \"Cancel Refund Payment Type\". Along with this configure the cancel behavior under payment type configuration. This indicates the behavior when a payment is canceled during a Post Void. When an order is post voided, the isCancelled flag set to true on corresponding order header, order line and payment header</p>\r\n\r\n<p>For example, some payment types such as cash should have an open void transaction created, so POS can issue cash to the customer and close the transaction. Other payment types like credit cards can have void transactions created and executed in the gateway immediately, since no follow-up action is required by POS. Possible values for cancel behavior include:</p>\r\n\r\n<ol>\r\n\t<li><strong>New payment method</strong>: When a payment method of this payment type is canceled, a new payment method gets created to issue a refund for any closed settlement amounts. For example, follow-on voids against Traveler’s Check is not supported as checks cannot be given back to the customer. So instead of creating a cancel transaction, this flag tells the payment component to create a new payment method. The new payment type is created based on the payment capture configuration called 'Cancel Refund Payment Type.'</li>\r\n\t<li><strong>Create and process cancel against original payment method</strong>: When a payment method of this payment type is canceled, a follow-on void gets created for each closed settlement and refund transaction. The cancel transaction is immediately sent to the gateway to be processed, and the payment header response includes the details of the outcome. For example, when a credit card with a closed settlement is canceled, a follow-on cancel is created against the settlement and executed in the gateway.</li>\r\n\t<li value=\"3\"><strong>Create open cancel against original payment method</strong>: When a payment method of this payment type is canceled, a follow-on void gets created for each closed settlement and refund transaction. The cancel transaction is not sent to a gateway, but instead is left open, so that POS can perform actions and close the transaction. For example, when a cash payment with a closed settlement is canceled, an open follow-on cancel is created against the settlement, and POS is expected to close the cancel transaction after issuing cash to the customer.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h5><a name=\"post-void-of-refund-transaction\" id=\"post-void-of-refund-transaction\"></a><a id=\"PostVoid_Refund_Config\" name=\"PostVoid_Refund_Config\"></a>Post void of refund transaction</h5>\r\n\r\n<p>To enable refund of any payment type, \"permit post void on refunds\" should be turned on for that payment type under payment capture configuration, and it is also mandatory to have the \"permit cancel\" flag enabled for this to work. If this is not enabled, then post void validation will fail and the user will not be allowed to post void the transaction.</p>\r\n\r\n<h4>&nbsp;</h4>\r\n\r\n<h4><a name=\"ui-s-and-entities\" id=\"ui-s-and-entities\"></a>UI's and Entities</h4>\r\n\r\n<p>The configuration UI's mentioned in this document are listed in the following table, along with information to navigate to the API documentation.</p>\r\n\r\n<table>\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">UI Name</th>\r\n\t\t\t<th scope=\"col\">Component</th>\r\n\t\t\t<th scope=\"col\">Group</th>\r\n\t\t\t<th scope=\"col\">Seed Data Present?</th>\r\n\t\t\t<th scope=\"col\">Seed Data Profile</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Payment Capture Config</td>\r\n\t\t\t<td>Payment</td>\r\n\t\t\t<td>PayCaptureConfig services</td>\r\n\t\t\t<td>Yes</td>\r\n\t\t\t<td>Base</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>User Input Form</td>\r\n\t\t\t<td>Payment</td>\r\n\t\t\t<td>UserInputForm services</td>\r\n\t\t\t<td>Yes</td>\r\n\t\t\t<td>Base</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>User Input Form Field</td>\r\n\t\t\t<td>Payment</td>\r\n\t\t\t<td>UserInputForm services</td>\r\n\t\t\t<td>Yes</td>\r\n\t\t\t<td>Base</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>User Input Field</td>\r\n\t\t\t<td>Payment</td>\r\n\t\t\t<td>UserInputField services</td>\r\n\t\t\t<td>Yes</td>\r\n\t\t\t<td>System Augmentable</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>User input Field Type</td>\r\n\t\t\t<td>Payment</td>\r\n\t\t\t<td>UserInputFieldtype services</td>\r\n\t\t\t<td>Yes</td>\r\n\t\t\t<td>Base</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Payment Parameters</td>\r\n\t\t\t<td>Payment</td>\r\n\t\t\t<td>PaymentParameters services</td>\r\n\t\t\t<td>Yes</td>\r\n\t\t\t<td>Base</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Payment Rule</td>\r\n\t\t\t<td>Payment</td>\r\n\t\t\t<td>PaymentRule services</td>\r\n\t\t\t<td>Yes</td>\r\n\t\t\t<td>Base</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Payment Simulator Rule</td>\r\n\t\t\t<td>Payment Gateway</td>\r\n\t\t\t<td>PaymentSimulatorRule services</td>\r\n\t\t\t<td>Yes</td>\r\n\t\t\t<td>Base</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Payment Type</td>\r\n\t\t\t<td>Payment</td>\r\n\t\t\t<td>PaymentType services</td>\r\n\t\t\t<td>Yes</td>\r\n\t\t\t<td>Base</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Payment Type Config</td>\r\n\t\t\t<td>Payment</td>\r\n\t\t\t<td>PaymentTypeConfig services</td>\r\n\t\t\t<td>Yes</td>\r\n\t\t\t<td>Base</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Payment Franking Options</td>\r\n\t\t\t<td>Payment</td>\r\n\t\t\t<td>PaymentFrankingActionServices</td>\r\n\t\t\t<td>Yes</td>\r\n\t\t\t<td>System Augmentable</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nbsp;</td>\r\n\t\t\t<td>Omniutil</td>\r\n\t\t\t<td>CurrencyConversionRate Services</td>\r\n\t\t\t<td>No</td>\r\n\t\t\t<td>&nbsp;</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4><a name=\"profile-purpose\" id=\"profile-purpose\"></a>Profile Purpose</h4>\r\n\r\n<p>The profile purposes of all the configuration entities are listed below. The default profile would be <strong>retail</strong> for these profile purposes.</p>\r\n\r\n<ul>\r\n\t<li>pay::paymentCaptureConfig</li>\r\n\t<li>pay::paymentConfig</li>\r\n\t<li>pay::paymentCoreConfig</li>\r\n</ul>\r\n\r\n\t  </div>\r\n </div>\r\n <div id=\"ui-page-fb-wrap\"></div>\r\n <div class=\"hiq-footer-wrap\">\r\n    \r\n                \r\n  </div>\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n",
  "content_length": 66609,
  "scraped_at": "2025-08-09T22:02:05.042830",
  "content_clean": "Home ››Manhattan Active® Omni››Store››Process & Configuration Guides››Point of Sale››POS Guides››POS Payment ››POS Payment Configuration POS Payment Configuration Payment Capture ConfigurationPayment Capture Config DetailsPayCaptureExclusionConfigVoice Authorization ConfigurationPayment Form ConfigurationUser Input FormUser Input Form FieldsUsing Input Forms to enable Gift Cards entry by ScanningPay By Link ConfigurationPayment Capture ConfigurationGrantsDigital Self Service Configuration SelfService.OrganizationMappingKV store in ConsulTwo other Payment-Side ConfigurationsEnabling Tap to PayEnabling Tap to Pay for iPhoneEnabling Tap to Pay for Manhattan Active® Point of SaleInitializing iPhones to accept Tap to Pay transactionsAdditional details in case of any issues experienced during the enablement:Foreign (or alternate) Currency ConfigurationPayment Terminal Selection and Sharing for Mobile DevicesExchange Tender configurationPOS Refund configurationPOS Post Void ConfigurationPost void of refund transactionUI's and EntitiesProfile Purpose This guide contains the configurations required for payment processing in the POS application. Payment Capture Configuration The payment capture configuration is used to define settings within each payment type for accepting and issuing payments on different order capture channels. The rules that can be defined within each payment type can vary. For example, some payment methods like cards (credit / debit) can be configured to be captured via a payment terminal and other methods like Check can be captured manually using keyboard input or a MICR reader. Payment capture configuration also includes flags that control whether a signature is required, franking required and so on. Below are some of the main POS configurations to be made for any payment type. Payment Capture Config Details Process Through Terminal (T/F) - This flag controls whether the payment is processed via the payment terminal. When enabled, the payment request is sent to the payment terminal and input is expected from the payment terminal. Set payment type on gateway request (T/F) - This flag, when enabled, will set the payment type on the payment request generated to the payment gateway. This must be turned off for a credit card if you want to allow the customer to use a card WITHOUT requiring that they specify CREDIT/DEBIT in advance. POS Custom Payment Page (T/F) - This flag must be enabled for any custom payment type that requires a custom page. When this flag is enabled, when the payment type is selected in the payment options, a blank screen will be shown by default. The retailer can completely customize the page as required. Input Required (T/F) - Defines how the input will be captured - either it can be from the payment terminal or keyboard entered within the application. Configure this attribute \"inputRequired\" as true if it is through the application. If it is from the payment terminal, then configure \"processThroughTerminal\" = true. Retailers can also configure both to be true, in which case the payment can be captured from either of them. Note that the Credit and Debit are seeded as \"processThroughTerminal\" = true and cannot be changed to false. Capture Signature (T/F) - This flag when configured mandates a signature to be captured for any payment type within the application outside the payment terminal. For example: Any custom tender which requires a signature can configure the \"forceCaptureSignature\" to true and capture a signature. The retailers can also configure the message using infoMessageDuringSignature attribute that needs to be displayed on the application on the signature screen. Include In Drawer Count (T/F) - Configure True for any payment type which needs to be included in drawer counts during reconciliation.  Typically this would be physical paper payment Instruments. If a Payment type is not configured as True, (ex. typically Credit Card), a 10.00 payment with that instrument does not affect the amount recorded in the till/cash drawer and is not displayed during Reconciliation. If a Payment type is configured as True (ex. typically Cash, Check), a 10.00 payment with that instrument DOES affect the amount recorded in the till/cash drawer and displayed during Reconciliation,  Bank Deposit and on various Back Office Reports can be configured using this flag. Three payment instruments, CASH, CHECK, and TRAVELERS CHECK, are assumed to be included by default. Currently, it is a choice of whether or not to display two of these payment instruments, i.e. Traveller's Check and Personal Check on these screens by changing this flag from TRUE (display) to FALSE (do not display). If this flag is FALSE, it is assumed that the retailer does not count these two, and they will not be shown or displayed. This would be the case if, for example, the retailer doesn't even accept one or both of these payment types. Note: In Iris,  If a “custom” paper based tender is used, the amount will be updated in Cash Section, not in other sections, when closing the till. NOTE: CASH will always be displayed on these screens; the flag does not have any impact on the display or inclusion of CASH. Pop Cash Drawer (T/F) - If this is True, any time such a configured payment type is either tendered or refunded, the associated device Cash Drawer will automatically be triggered to open.   Typically T for Cash and sometimes for Checks or custom paper tender types such as Gift Certificates if the retailer issues/redeems those. NOTE: In the event of multiple payments by such a payment type - for example, 100.00 purchase with 10.00 cash, followed by 50.00 gift card, followed by 40.00 cash - the cash drawer will be triggered to pop multiple times, once for each such payment type received or issued.  In this example, cash drawer will pop twice.  However, the till will not be updated until all payments are complete and the balance is 0.00. Restrict Split Payment (T/F) - A payment type with this configured True must be the only or final payment type. \"Restrict Split Payment\" flag works on the balance due amount.  If you have a 100 dollar amount, and you are first select credit card which, for illustration, has \"Restrict Split Payment\" set to true, you have to pay the total 100 dollars with that credit card. However, for the same order, if you initiallypaid 25 dollars on a gift card, paying the rest with credit card is still allowed - but following the choice of credit card, the remainder of 75 dollars should be paid with that method. Animation Name - The attribute will have the animation file name with a path that will be shown on the UI when the particular payment method is processing and interacts with the terminal. If a payment method does not provide this, it will fall back to base default. The custom animationName path would be like /assets/next-gen-ui/assets/ext/{path-to-image}. NOTE: If a payment type is configured with Process through terminal = false, Pop cash drawer = false and Include in Drawer count = false; then a payment gateway is expected to be configured for processing the payment. PayCaptureExclusionConfig Allows retailer to control allowed/displayed payment types for a transaction based on order and order line attributes.  Currently this functionality is available in base for two types of orders/orderlines: Orders captured on a mobile device (use Exclusion \"Mobile\") Orders which contain at least one Save The Sale item (Ship to Address or Pickup) (use Exclusion \"OmniOrder\") For example, if a retailer does not want to accept PERSONAL CHECK on Mobile devices, or if the retailer does not want prepaid payment types such as CASH for Omni orders(Ship to address, pick-up at store), add exclusion \"Mobile\" and/or \"OmniOrder\" as Pay Capture Exclusions for those payment types using payCaptureExclusionConfig under Payment Capture Configuration for each. Voice Authorization Configuration The following configuration is added to  posStoreConfigurations>>storeCommonConfig to enable Voice Authorization Store common config Purpose permitVoiceAuthorization If this option is set to True, POS UI application prompts the user to contact the payment support center to get the offline authorization by calling the support number.  If set to False, this prompt does not appear.  Application displays an error message, “SAF Transaction amount limit exceeded. Transaction declined”. There are no changes to the tenders.  Default value=True. The following configuration is added to paycaptureconfig to indicate if the payment type can be processed when the application is running in offline mode. payCaptureConfig Purpose permitInOffline This flag indicates if the payment method can be processed in offline mode.  This is relevant to customer present flows.  Typically, Cash and Credit card are the tender types supported in offline application.  Default is False. The following key must be added to the payment gateway configuration to define the response codes that should invoke the voice authorization flow. If the attribute is not added, the default code of 59024 will be used. Gateway Attribute Purpose VoiceAuthResponseCodes To provide a comma separated list of response codes that the terminal can respond with and for which the POS application must invoke the voice authorization flow. Eg. 59023,59024,99999 etc Payment Form Configuration A retailer may have multiple payment methods that they can offer to their customers. There can be affiliated payment programs, or pay later programs which typically are completely handled outside in a separate processing application, but reference information is captured in the POS. In order to support such use cases, there is a payment form capability that is supported. Payment form capability is also extended for base payment types like credit card, cash and check, controlled by Behavior Change timer, \"POS - Migrate base payments to payment form\". It will be released in production environments on August 15, 2026, but you can opt-in earlier. . Credit card does not require any forms to be configured; However, check will require a form to capture the check details, which can be configured to be read using a MICR reader or input manually using a keyboard. The payment form is a simple form or multiple forms to which multiple fields can be added and information can be captured from the customer during the checkout process. All the data that is collected in the forms is persisted back to the payment component as additional attributes and the payment will be processed successfully. Note: The form configuration does not have any integration into any external systems and is not performing any systematic authorization or settlement against the provided payment information. For example: Check tender, it would be ideal to capture the routing number, check number along with the account number and amount from a MICR reader. For traveler's checks, the details might be irrelevant, and some checks do not come with micro ink to read from a micro reader but can be configured to get details from a keyboard. This will allow the retailer to provide the capability to custom configure the details of the base supported or custom payment type that is accepted. More details on configuration are mentioned below: If a user input form is created with no input fields configured, POS UI will show a blank form during the payment process. Customer info related fields in payment is not used. They populate only at order header section. It is very unlikely that user captures these multiple times in an order. Even if does happen, the latest information persists. Open Form On Auto Refund (T/F) - Used to control if the form should be displayed when performing an Automatic Refund. The override refund does not use this flag and it uses the Return context flag. User Input Form If process through terminal is configured as TRUE for any payment type, for example: credit, debit and so on, then all the details of the payment will be picked from the payment terminal. Retailers need not configure any input forms here unless they are required to capture more details regarding the payment from different hardware or from app. For example, to capture zip code for a gift card payment for authentication, since zip code is not captured by payment terminal, retailers would create new user input form and related fields to input this data from keyboard. If the input required is configured as TRUE for any payment type, then the input form and the form field need to be configured. This configuration is necessary to get the payment details, map the payment details to attributes that get saved on the backend system. The required input form configuration is detailed below. Create an input form by providing a form name and form ID. Select interaction mode as \"customer present\" as this payment is for a POS application. Also, set the context for sale or/and return. Configure the form methods to set the mode of capture data. Flag Description Is Pinpad Form Method Set to true if the input must be captured on a pinpad Is Keyboard Form Method Set to true, if the input must be captured from the keyboard in the application Is Micr Form Method Set to true, if the input must be captured from a MICR reader (cannot be set to true if ProcessThroughTerminal is true) Is Scanner Form Method Set to true, if the input must be captured from a scanner Interaction Mode Interaction Mode for which the Input Form will be displayed: CustomerPresent CustomerNotPresent Is Sale Context Define if the Input Form must be displayed during a Sale transaction Is Return Context Define if the Input Form must be displayed during a return transaction User Input Form Sequence If multiple Input Forms are created, define the sequence to display them Failover to Keyboard Define if it’s allowed to use the Keyboard in case the selected input method is not possible (e.g.: scanner failure) Open form on auto refund Used to control if the form should be displayed when performing an Automatic Refund Input form sequence needs to be provided. This will be used by the UI to decide which form needs to be captured first and then which form should be rendered next. Seed data Snippet of User Input form for \"Check\" payment type: { \"PaymentType\": \"Check\", \"UserInputFormID\": \"CHECKINPUTGROUP\", \"UserInputFormName\": \"Check Input Group\", \"InteractionMode\": { \"InteractionModeId\": \"CustomerPresent\" }, \"IsSaleContext\": true, \"IsReturnContext\": true, \"IsKeyboardFormMethod\": true, \"IsPinpadFormMethod\": false, \"IsMicrFormMethod\": true, \"IsScannerFormMethod\": false, \"UserInputFormSequence\": 1, \"FailoverToKeyboard\": true, \"InfoMessageDuringPayment\": \"Please input information through the MICR or Keyboard\", \"UserInputFormField\": [ { \"PaymentType\": \"Check\", \"UserInputFormID\": \"CHECKINPUTGROUP\", \"UserInputFormFieldID\": { \"UserInputFieldID\": \"CheckNumber\" }, \"UserInputFormFieldSize\": 15, \"UserInputFormFieldSequence\": 3 }, { \"PaymentType\": \"Check\", \"UserInputFormID\": \"CHECKINPUTGROUP\", \"UserInputFormFieldID\": { \"UserInputFieldID\": \"AccountNumber\" }, \"UserInputFormFieldSize\": 20, \"UserInputFormFieldSequence\": 2 }, { \"PaymentType\": \"Check\", \"UserInputFormID\": \"CHECKINPUTGROUP\", \"UserInputFormFieldID\": { \"UserInputFieldID\": \"RoutingNumber\" }, \"UserInputFormFieldSize\": 9, \"UserInputFormFieldSequence\": 1 } ] } Note: Please note that User Input forms are not being used by Digital Self-Service and Contact Center flows currently. User Input Form Fields Once the input form is configured, the form fields must be configured which may need to be captured as part of that input form. Field Description User Input Form Field ID Id of the User Input Form Field. Possible values from Seed Data: CheckNumber AccountNumber RoutingNumber User Input Form Field Size The maximum size of the field User Input Form Field Validation Define if a Regex validation is required for this field User Input Form Field Required Define if the field is mandatory or not User Input Form Field Sequence In the case of multiple Input Form Fields, define the sequence to display them Seed data Snippet of User Input form fields for \"Check\" payment type: Note: The \"UserInputFieldID\" should not contain any space or special characters. { \"ProfileId\": \"systemAugmentable\", \"data\": [ { \"UserInputFieldID\": \"CheckNumber\", \"UserInputFieldType\": { \"UserInputFieldTypeID\": \"Numeric\" }, \"UserInputFieldName\": \"Check Number\", \"IsBase\": true, \"EncryptionRequired\": true }, { \"UserInputFieldID\": \"AccountNumber\", \"UserInputFieldType\": { \"UserInputFieldTypeID\": \"Numeric\" }, \"UserInputFieldName\": \"Account Number\", \"IsBase\": true, \"EncryptionRequired\": true }, { \"UserInputFieldID\": \"RoutingNumber\", \"UserInputFieldType\": { \"UserInputFieldTypeID\": \"Numeric\" }, \"UserInputFieldName\": \"Routing Number\", \"IsBase\": true, \"EncryptionRequired\": true } ], \"RelatedProfiles\": [ { \"profilePurpose\": \"pay::paymentCaptureConfig\", \"profileId\": \"retail\" } ] } Using Input Forms to enable Gift Cards entry by Scanning POS Payments> Payment Capture Configuration> Select Payment Type> Select User Input Form Note: Information below is for Gift Card. Currently, the scanner method is supported for gift card only. User Input Form User input form Config Camera scan icon display status Only Is Scanner Form Method = True The text box will be disabled, but users can still click on the scanner icon. However, this does not work on Windows because the text box is disabled, preventing it from receiving focus. Is Scanner Form Method = True Is Keyboard Form Method = True The text box will be enabled with camera scanner for all form factors. Is Scanner Form Method = False Is Keyboard Form Method = True The text box will be enabled without the camera scanner for all form factors. Is Scanner Form Method = True Is Keyboard Form Method = True Is Pinpad Form Method = True The pinpad is always prioritized when the Pinpad Form Method is true. Pay By Link Configuration Payment Capture Configuration Enable Pay By Link POS - Retailers can configure to obtain credit/debit/gift card payment using the Pay By Link POS flag.  If enabled, a link via email can be sent to the customer or a QR code will be generated on the POS terminal (not payment terminal) which the customer can scan with their phone.  The customer will open the link, review the order and click on a Pay button on their phone.  Based on Manhattan Active® Omni Digital Self-Service functionality, which is configured outside POS, a 3rd party website will be displayed, and the customer will enter the payment information on their phone.  POS will obtain the payment status and, if successfully authorized, finalize the order. Note: Make sure a new \"Payment Type\" should be defined for \"Pay by link\". Note: Pay By Link will always default to the full balance due and the amount cannot be changed. Note: Pay By Link should only be configured for the Pay By Link tender as it is not logical for other tenders (i.e. Cash, Check, etc.). Note: Pay by Link by SMS/Text is not currently supported out of base POS.  This would require further integration with a provider - for example, Twilio.  Base deployments should use the \"hide\" metadata extension provided to hide the SMS option on the Order Summary screen, as it is not relevant at this time. Grants digitalselfservice::configuration::admin  This grant allows the user access to the DSS configurations. Digital Self Service Configuration Set Self Service Payment Gateway Id to Cybersource SelfService.OrganizationMapping Add Organization/User as the Key/Value pair in Consul for Self-Service Component (SelfService.OrganizationMapping) i.e., \"tm-demo-us\": \"User\": admin@tm-demo-us.com (user name which will send email). KV store in Consul Add these properties to KV store in Consul: order.selfServiceHostName=[omni-url].    ex: order.selfServiceHostName=https://store-mpatgar0101.cp.manh.cloud email.publishEmailPayload =false email.postemailtoqueue=false Two other Payment-Side Configurations Save the payment gateway configuration for Cybersource Upload the payment certificate (for the organization) Enabling Tap to Pay Enabling Tap to Pay for iPhone This payment functionality is managed through an integration with Adyen as the payment service provider. To enable Tap to Pay on an iPhone, you must configure the feature in Adyen and complete the setup in Manhattan Active® Point of Sale. Compatible devices: iPhone XR, XS, SE Gen 2 and Gen 3, or later. Supported on iPhone iOS version 17.0 and above. Retailers must work with Adyen to turn on Tap to Pay on an iPhone for the retailer's specified Merchant account name, which will be displayed on the payment page of Tap to Pay. They also need to make sure that they use the correct credentials when setting up their Merchant Account in Adyen to work with Manhattan Active® Point of Sale. The iPhone where tap to pay is intended to be used must be linked to an Apple account. The Apple account must be a sandbox account, when using debug build, pointing to stage The Apple account must be a non-sandbox account when using the release build pointing to production. While pointing to stage and production environments, the following points must be considered. The debug (-dev) IPA should be re-signed with retailer development iOS profile and used while testing in stage. The release IPA should be re-signed with the customer distribution profile and used while using in production. Request the Production URL from Adyen Payment Gateway and create the template below using the URL. URL: {{url}}/payment/api/payment/gateway/save Payload: { \"GatewayId\": \"AdyenPayments\", \"PaymentGatewayTemplate\": [ { \"GatewayPaymentURLTemplate\": \"https://checkout-test.adyen.com/checkout/possdk/v68/sessions\", \"TransactionType\": \"POSSDK_SESSION\", \"GatewayResponseTemplate\": \"{{{#installationId}}  \\\"InstallationId\\\": \\\"{{installationId}}\\\",  {{/installationId}}  {{#sdkData}}  \\\"SdkData\\\": \\\"{{sdkData}}\\\" {{/sdkData}}}\", \"GatewayRequestTemplate\": \"{ \\\"merchantAccount\\\": \\\"{{MerchantAccount}}\\\", \\\"setupToken\\\": \\\"{{SetupToken}}\\\", \\\"store\\\": \\\"{{MerchantStore}}\\\" }\" } ] } Note: The above URL can be added to Payment Gateways → AdyenPayments → Payment Gateway Template and make sure you have this template saved for POSSDK_SESSION for the staging environment. If the user's environment is running on code drop 2.2.13 or later, the required seed data is already included in the base profile. The pos::cartEvent profile purpose can be copied directly from the base profile into the customer’s organizational profile without manual creation. The Adyen Tap to Pay SDK and Terminal API are already integrated into the Manhattan POS application. If users encounter any issues, they should reach out to Adyen Support Team for assistance with configuring their account for Tap to Pay on iPhone payments, or refer to the Adyen Docs for further guidance. Enabling Tap to Pay for Manhattan Active® Point of Sale Tap to pay can be enabled using the \"Enable Tap to Pay\" business flag under POS Store Configuration. Make sure the POS App shows the Tap to Pay option at checkout. Gateway protocol must be set as Local Https and GatewayId must be AdyenPayments If the \"Enable Tap to Pay\" business flag is turned on and the iPhone supports Tap to Pay, the checkout screen will automatically show Tap to Pay as a payment method. It will always be displayed first on both the payment screen and the refund screen. Initializing iPhones to accept Tap to Pay transactions Each iPhone to accept Tap to Pay transactions must complete an initialization setup. Ensure that Tap to Pay on iPhone has been configured for the store beforehand. Check Enabling Tap to Pay for iPhone. Before launching Tap to Pay on iPhone for a new customer, users must first accept the Apple Terms and Conditions (T&Cs) for each merchant account that will be using the feature. On the Apple’s Terms of Use page, select the Merchant Account and accept the Apple Terms and Conditions for tap to pay to process live transactions. This must be done for each Merchant Account that will use Tap to Pay on iPhone. The Apple Terms and Conditions apply to production environments only.  Manhattan Active® Point of Sale does not provide support for Tap to Pay on iPhone in staging environments. In case users want to test Tap to Pay in a test environment, they need to use the developer IPA app version of the application. Note: The timeout is not configurable as it is restricted by Apple and cannot be changed. Note: The first time an iPhone attempts to process a Tap to Pay transaction, the user will be presented with an initialization screen which counts up from 0 to 100. This screen is presented any time the backend Apple application or the POS App has been updated. The initialization screen will only appear for the first transaction and will not display on subsequent transactions. Currently, Tap to pay supports below payment flows: In-store transactions Ship to address order (authorization only) Override refund (Follow-on refund behavior) Void tender (auto process void transaction) Automatic Refund (follow-on refund behavior) Additional details in case of any issues experienced during the enablement: Issues Troubleshooting Methods Which iOS build should be used for testing tap to pay? The iOS development build should be used if you are pointing to the Adyen test account (the X.X.X-dev.ipa found in jfrog is the development build). While using the development build, pointing to the test account, there should be a sandbox account created in the iOS and the iPhone should be logged in to that account. The iOS production build should be used if you are pointing to the Adyen production account (the X.X.X.ipa found in jfrog is the production build). If the users have a custom iOS development account and don't want to use the Manhattan iOS profile, what are the changes? Users can request Apple and get the tap to pay entitlement enabled for your iOS profile (development & production). Tap to Pay on iPhone - Apple Developer If users are using the Manhattan iOS profile, they can use the base builds directly to start using Tap to Pay. In case users are using their own iOS profile, then they need to download the base iOS build, resign the IPA with their iOS profile and then use it for Tap to Pay. The resigning process is described here: https://omni.helpdocsonline.com/store-resign-ios While using the development build, pointing to the test account, there should be a sandbox account created for the iOS and the iPhone should be logged in to that account. If the users are getting below errors while using tap to pay, what are they missing? Error message: \"Failed attestation: Cannot transact. Make sure you have a network connection and try again\". This error occurs in 3 cases: 1. When the users are using a development build and pointing it to the production Adyen account. 2. When the users are using a production build and pointing it to test Adyen account 3. When the users have not saved the Payment Gateway Template or saved incorrectly for TransactionType POSSDK_SESSION If the users are using an iOS profile which does not have tap to pay entitlement enabled, what will happen? Error message: \"AdyenTapToPay: executeCommand failed with error Tap to Pay is not allowed. Most likely the app is missing an entitlement to use it\". If the users are using an iOS profile which does not have tap to pay entitlement enabled, then they will see this error in kibana logs when they try to use tap to pay. Foreign (or alternate) Currency Configuration Note: Alternate (multi-currency) support is currently only available for Classic POS. Payment Terminal Selection and Sharing for Mobile Devices Retailers can configure mobile registers to establish a session with a payment terminal at the time of payment, instead of at the beginning of an order. To enable this functionality in mobile registers for a location, set posStoreConfig>storeCommonConfig>delayPTSessionTillPayment = True. This allows for multiple registers to be connected to a single payment terminal, and also allows users to easily switch to a different terminal as needed. When configured, the connected payment terminal will be displayed in the screen header of the Cart and Order Summary. The session for the device will not begin until the following: User selects a tender on Order Summary which requires the terminal to collect data or to process (credit, debit, gift card, etc.) User selects to issue or reload a gift card from the Cart User selects a \"from\" exchange tender which requires a payment terminal If a session is started in the Cart, due to a gift card activate or reload, where \"Activate Gift Card in Cart\" is true, the session will not end until the transaction is complete. The same will hold true for Exchange tenders where the \"from\" tender requires the payment terminal. The session release will occur after the receipt has been printed or emailed, and the terminal will then become available for the next transaction. Grant: ui::pos::devicemanagement::paymentterminalswitch::admin - This is a UI action to allow user to change the payment terminl within the tappable header when config is turned on. If user does not have this grant, the selected PT will be visible but not editable from outside POS Settings. Note: If a user changes the selected payment terminal in the Cart or Order Summary, it will overwrite the selected device in POS Settings. Exchange Tender configuration Exchange tender in Active Store solution offers the retailers to accept a tender and refund the customer with another tender. Both the tenders i.e. the tender exchanged and the list of available refunded tenders are configurable from payment capture details screen from config UI. Payment Type that needs to be eligible for exchange: below are the configurations required to accept a payment type for exchange tender functionality PermitFromExchangeTender - Set it to TRUE, to accept a payment type as eligible tender for exchange. MaxFromExchange - Retailer can set up maximum amount allowed for an exchange for the selected payment type. FromExchngTendrDispSeq - This is to configure the display sequence of the available tender for exchange. It will be used on the Store application. PermitToExchangeTender - Check this flag if this paymentType can be used as an eligible payback/refund tender for any exchange tender. IsBalEqReqFOrExchgTndr - Check this flag if balance enquiry is required before charging the tender to be exchanged. For example: this flag should be true for gift cards, since we do a balance enquiry first to get the available balance amount. This is necessary and tied back to the payment form method, since usually a gift card is processed through the terminal to the get balance, if not processed through terminal, user extension will be used to get balance from thirrd-party applications. If this flag is False, then balance of the gift card needs to be input by the user. Configure eligible payback/refund for exchange tender transaction The list of eligible payback/refund tenders for exchange tender transaction can be configured from the config UI. This list is specific to a tender that is getting exchanged, so this list needs to be configured for all the tenders for which exchange is permitted. The maximum amount of refund allowed can be configured here. Code Snippet of list of eligible exchange refund tenders for check: \"ExchangeTenderRefndType\" :[ { \"ParentPayCaptureConfigType\": \"Check\", \"PermitExchgTndrRefndType\": { \"PaymentTypeId\": \"Gift Card\" }, \"DisplaySequence\": \"1\", \"InteractionMode\": { \"InteractionModeId\": \"CustomerPresent\" }, \"MaxToExchangeTender\": 5000 }, { \"ParentPayCaptureConfigType\": \"Check\", \"PermitExchgTndrRefndType\": { \"PaymentTypeId\": \"Cash\" }, \"DisplaySequence\": \"2\", \"InteractionMode\": { \"InteractionModeId\": \"CustomerPresent\" }, \"MaxToExchangeTender\": 9999999.99 }, { \"ParentPayCaptureConfigType\": \"Check\", \"PermitExchgTndrRefndType\": { \"PaymentTypeId\": \"Credit Card\" }, \"DisplaySequence\": \"3\", \"InteractionMode\": { \"InteractionModeId\": \"CustomerPresent\" }, \"MaxToExchangeTender\": 9999999.99 } ] POS Refund configuration Payment Capture Config Minimum Refund Amount: Specify the minimum amount that can be refunded using this tender type. Maximum Refund Amount: Specify the maximum amount that can be refunded using this tender type. While doing so, ensure that there is one another refund tender type which can be used to refund. Refund Pay Type - Available Refund Payment types for Validated Returns List of allowed refund tender types: This is the list of allowed refund tender types for a given tender type, used to make purchases. One with sequence 1 and interaction mode=Customer Present is used in case of automatic refunds. In case of override tender, all refund pay types with interaction mode=Customer Present are available. If there are multiple tender types used to make purchases, override refund types are the ones common across all these. Refund Pay Type - Available Refund Payment Types for Standalone Returns Standalone Returns are return lines with items that cannot be matched to an original order - i.e., \"returns without receipt\". Normally the refund payment types which are recommended either automatically or by override are based on the payment type of the original order. If there is no 'original order' as for standalone, the recommended/available payment types are configured differently as described. Payment Parameter Standalone Return Payment Type value - use to configure single Default refund payment type for Standalone Returns Standalone Return Payment Type: Used to specify a single default refund payment type for standalone returns. This parameter is used if no payment types are configured via payment capture configurations as available to be allowed in standalone returns. In this case POS allows one default refund tender type for standalone returns. In case of return order with validated and standalone returns, this gets added to the list of tender types applicable to validated return tender types. Threshold defined for refund tender is not applicable to standalone return payment type. Pay Capture Config Payment type attribute \"Allow Standalone Return\" - use with Business Flag to configure multiple available refund payment typesfor Standalone Returns Allow Standalone Return: This attribute is on \"payment capture config\" and is used to configure alternate refund type during a override tender scenario. This attribute works with a business flag on pos general config > common config > \"Show Alternate Refunds For Return\" which is false by default. If the business flag remains false, this AllowStandalone returns attribute for each payment type has no function. If Show Alternate Refunds For Return = false, Allow Standalone returns flag for each payment type has no function. A single payment type, taken from that configured in paymentParameters>Standalone Return Payment Type will be used in a standalone refund tender scenario. If Show Alternate Refunds For Return = true, Allow Standalone returns flag will be used to show alternate override tenders in a standalone tender scenario. For an unvalidated return, when the business flag is true, any payment types for which Allow Standalone Return is True will be available as alternate 'override' refund types. For example, Gift card and Store credit are initially seeded as \"Allow Standalone Return\" = true from base seed data profile. Therefore, if this profile is copied and used for the retailer, Gift card and store credit will be shown as alternate tenders in refund override tender. 'Mixed' Returns - Combination of Validated and Standalone This logic can be more complicated in a cart containing multiple returns. Multiple Return example: One return item can be associated to an original order paid by Credit card (validated return) and another can be standalone, not matched to an original order. In this case, at the Order Summary, if the flags are set to allow multiple alternate standalone refund tenders, the recommendation will be the intersection of refund tenders for each of the returns. Assume Credit Card is configured to allow refund by Credit, Debit, Gift Card, and Cash. Assume that the alternative standalone refund types are Gift Card, Cash, and Store Credit. In the above example, Override refund choices will be the intersection of these two sets of rules: Gift Card and Cash. In other words, for such a mixed cart return scenario the rules for Standalone override refund types work along with Refund Pay Type of the original payment method. Only the common payment types will be displayed as alternate tenders in refund override tender. POS Post Void Configuration Post void is controlled and configured at each payment type, enable \"permit cancel\" under payment capture configuration to support post void for that payment type. NOTE In general, cancelling a payment transaction after the fact is not guaranteed of success in all cases, particularly for electronic payment methods, and depends on the gateway and the particular payment implementation for each retailer. If payment types are configured to permit \"cancel\", further work may be required to make this work for that payment type/gateway/provider combination. If post void refund is required to be different from original then specify the payment Id under \"Cancel Refund Payment Type\". Along with this configure the cancel behavior under payment type configuration. This indicates the behavior when a payment is canceled during a Post Void. When an order is post voided, the isCancelled flag set to true on corresponding order header, order line and payment header For example, some payment types such as cash should have an open void transaction created, so POS can issue cash to the customer and close the transaction. Other payment types like credit cards can have void transactions created and executed in the gateway immediately, since no follow-up action is required by POS. Possible values for cancel behavior include: New payment method: When a payment method of this payment type is canceled, a new payment method gets created to issue a refund for any closed settlement amounts. For example, follow-on voids against Traveler’s Check is not supported as checks cannot be given back to the customer. So instead of creating a cancel transaction, this flag tells the payment component to create a new payment method. The new payment type is created based on the payment capture configuration called 'Cancel Refund Payment Type.' Create and process cancel against original payment method: When a payment method of this payment type is canceled, a follow-on void gets created for each closed settlement and refund transaction. The cancel transaction is immediately sent to the gateway to be processed, and the payment header response includes the details of the outcome. For example, when a credit card with a closed settlement is canceled, a follow-on cancel is created against the settlement and executed in the gateway. Create open cancel against original payment method: When a payment method of this payment type is canceled, a follow-on void gets created for each closed settlement and refund transaction. The cancel transaction is not sent to a gateway, but instead is left open, so that POS can perform actions and close the transaction. For example, when a cash payment with a closed settlement is canceled, an open follow-on cancel is created against the settlement, and POS is expected to close the cancel transaction after issuing cash to the customer. Post void of refund transaction To enable refund of any payment type, \"permit post void on refunds\" should be turned on for that payment type under payment capture configuration, and it is also mandatory to have the \"permit cancel\" flag enabled for this to work. If this is not enabled, then post void validation will fail and the user will not be allowed to post void the transaction. UI's and Entities The configuration UI's mentioned in this document are listed in the following table, along with information to navigate to the API documentation. UI Name Component Group Seed Data Present? Seed Data Profile Payment Capture Config Payment PayCaptureConfig services Yes Base User Input Form Payment UserInputForm services Yes Base User Input Form Field Payment UserInputForm services Yes Base User Input Field Payment UserInputField services Yes System Augmentable User input Field Type Payment UserInputFieldtype services Yes Base Payment Parameters Payment PaymentParameters services Yes Base Payment Rule Payment PaymentRule services Yes Base Payment Simulator Rule Payment Gateway PaymentSimulatorRule services Yes Base Payment Type Payment PaymentType services Yes Base Payment Type Config Payment PaymentTypeConfig services Yes Base Payment Franking Options Payment PaymentFrankingActionServices Yes System Augmentable Omniutil CurrencyConversionRate Services No Profile Purpose The profile purposes of all the configuration entities are listed below. The default profile would be retail for these profile purposes. pay::paymentCaptureConfig pay::paymentConfig pay::paymentCoreConfig"
}