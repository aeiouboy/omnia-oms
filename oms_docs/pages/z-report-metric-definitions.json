{
  "id": "3307258",
  "permalink": "z-report-metric-definitions",
  "title": "POS Report Metric Definitions and Configurability",
  "type": "topic",
  "level": 6,
  "path": "Manhattan Active® Omni/Store/Process & Configuration Guides/Point of Sale/POS Classic Guides/POS Metrics and App Reports - Wiretap Strategy/Configure POS Report Metric Definitions",
  "raw_item": {
    "id": "3307258",
    "text": "Configure POS Report Metric Definitions",
    "title": "Configure POS Report Metric Definitions",
    "permalink": "z-report-metric-definitions",
    "leaf": false,
    "droppable": true,
    "expanded": true,
    "closed": true,
    "visible": true,
    "editable": true,
    "type": "topic",
    "topicType": "0",
    "status": "1",
    "iconCls": "icon-topic",
    "cls": "",
    "folder_id": "406984",
    "parent": "f;406984",
    "created_date": "1695747720",
    "modified_date": "1703240053",
    "instructor_id": null,
    "loaded": true,
    "haschildren": false,
    "callout": "0",
    "order": "2"
  },
  "success": true,
  "content": "\r\n\r\n\r\n<div class=\"hiq-page-wrap\">\r\n<div class=\"hiq-t-wrap\">\r\n\t\t\r\n  \t  <div class=\"hiq-t \">\r\n\t\t\t\t<ul class=\"breadcrumbs\"><li><a class=\"breadcrumb-links\" hqid=\"1788908\"  href=\"/home\">Home</a></li> <li><span>&rsaquo;&rsaquo;</span><a hqid=\"3500940\" href=\"/omni\" class=\"breadcrumb-links\">Manhattan Active® Omni</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"3426481\" href=\"/store-3\" class=\"breadcrumb-links\">Store</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158412\" href=\"/process-configuration-guides-3\" class=\"breadcrumb-links\">Process & Configuration Guides</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158737\" href=\"/point-of-sale\" class=\"breadcrumb-links\">Point of Sale</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2225114\" href=\"/process-configuration-guides-4\" class=\"breadcrumb-links\">POS Classic Guides</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"3306798\" href=\"/pos-metrics-and-app-reports\" class=\"breadcrumb-links\">POS Metrics and App Reports - Wiretap Strategy</a></li><li> <span>››</span>POS Report Metric Definitions and Configurability</li></ul>  \t\r\n\t\t<h2>Z Report Metric Definitions and Configurability</h2>\r\n\r\n<p></p>\r\n\r\n<div class=\"info\"><ul><li><a href=\"/z-report-metric-definitions$out-of-the-box-metrics\">Out of the Box Metrics</a><ul><li><a href=\"/z-report-metric-definitions$field-definitions\">Field definitions</a><ul><li><a href=\"/z-report-metric-definitions$confirmedorderstats\">ConfirmedOrderStats</a></li><li><a href=\"/z-report-metric-definitions$confirmedorderlinestats\">ConfirmedOrderLineStats</a></li><li><a href=\"/z-report-metric-definitions$confirmedorderlinechargestats\">ConfirmedOrderLineChargeStats</a></li><li><a href=\"/z-report-metric-definitions$confirmedorderchargestats\">ConfirmedOrderChargeStats</a></li><li><a href=\"/z-report-metric-definitions$paymenttransaction\">PaymentTransaction</a></li><li><a href=\"/z-report-metric-definitions$backofficemanageroperations\">BackOfficeManagerOperations</a></li><li><a href=\"/z-report-metric-definitions$tendersummary\">TenderSummary</a></li><li><a href=\"/z-report-metric-definitions$customer-entry-count\">Customer Entry Count</a></li></ul></li></ul></li></ul></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>This document lists out all the fields configured in wiretap component as part of the <a href=\"https://omni.helpdocsonline.com/pos-metrics-and-reporting-framework$enabling-metrics-and-z-report\">Generic Reporting Framework</a>.&nbsp; The reporting framework provides the flexibility to a customer implementation group to configure the reports.</p>\r\n\r\n<p>Reports can configured using two types of fields and the implementation team can modify both types:</p>\r\n\r\n<ul>\r\n\t<li>Specify the out-of-the-box metric fields required for the given report.</li>\r\n\t<li>Specify calculated metric derived by out of out-of-the-box metric fields.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><a name=\"out-of-the-box-metrics\" id=\"out-of-the-box-metrics\"></a>Out of the Box Metrics</h3>\r\n\r\n<p>These metrics fields are calculated using the queries written in wiretap component and persisted &nbsp;in elastic search.&nbsp;&nbsp;</p>\r\n\r\n<p>Queries are configured in commonUtil&gt;reportQueryConfig.&nbsp; Base seed data fields/definitions shown below.&nbsp;&nbsp;</p>\r\n\r\n<p><a id=\"conversionmetric1\" name=\"conversionmetric1\"></a>The ReportFieldConfig entries in the section for Report Name &quot;SaleMetricsReport&quot;&nbsp;&nbsp;define the logic to fetch the data for the POS on demand Sales Metrics display.</p>\r\n\r\n<p>The ReportFieldConfig entries in the section for Report Name &quot;Z Report&quot; define the logic to fetch the data for the End of Day&nbsp;POS Z Report.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div class=\"computer_code\" style=\"margin-left: 40px;\"><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-1\" class=\"toggle-content\"><span class=\"toggle-title\">reportConfig_1</span></a></p><div id=\"tg-1\"><p>{<br />\n&nbsp; &quot;ProfileId&quot;: &quot;base&quot;,<br />\n&nbsp; &quot;Data&quot;: [<br />\n&nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &quot;ReportName&quot;: &quot;SaleMetricsReport&quot;,<br />\n&nbsp; &nbsp; &nbsp; &quot;Description&quot;: &quot;Base Sale Metric Report&quot;,<br />\n&nbsp; &nbsp; &nbsp; &quot;PurgeAfterDays&quot;: 2555,<br />\n&nbsp; &nbsp; &nbsp; &quot;ReportFieldConfig&quot;: [<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;OrganizationId&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Input&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;QueryClauseType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;QueryClauseTypeId&quot;: &quot;Term&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;Text&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;OrganizationId&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;LocationId&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Input&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;QueryClauseType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;QueryClauseTypeId&quot;: &quot;Term&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;Text&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Store Id&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;MerchSaleItemsSubtotal&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Number of Merch Items Sold&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderLineStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;MerchReturnItemsSubtotal&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Number of Merch Items Returned&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderLineStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;NbrOfMerchItemsSold&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Number of Sale Orders&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderLineStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;NbrOfMerchItemsReturned&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Number of Return Orders&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderLineStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;MerchTotalOrderCount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;Integer&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Total Order Count&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;CustomerEntryCount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;Integer&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Number of store customer visits&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;CustomerCounterStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;OrderCountWithActiveCustomer&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;Integer&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;Expression&quot;: &quot;&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Units Per Transaction&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;FlashSales&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;Expression&quot;: &quot;MerchSaleItemsSubtotal- MerchReturnItemsSubtotal&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Flash Sales&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;UnitsPerTransaction&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;Expression&quot;: &quot;(NbrOfMerchItemsSold+NbrOfMerchItemsReturned)/MerchTotalOrderCount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Units Per Transaction&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;ActiveCustomerCount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;Integer&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;Expression&quot;: &quot;round(OrderCountWithActiveCustomer/MerchTotalOrderCount * 100)&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Active Customer Count&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;Conversion&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;Integer&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;Expression&quot;: &quot;round(MerchTotalOrderCount/CustomerEntryCount * 100)&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Conversion Rate&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;DollarsPerTransaction&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;Expression&quot;: &quot;(MerchSaleItemsSubtotal + MerchReturnItemsSubtotal)/MerchTotalOrderCount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Dollars Per Transaction&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; }<br />\n&nbsp; &nbsp; &nbsp; ]<br />\n&nbsp; &nbsp; },<br />\n&nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &quot;ReportName&quot;: &quot;Z Report&quot;,<br />\n&nbsp; &nbsp; &nbsp; &quot;Description&quot;: &quot;Z Report which will be generated right after store close&quot;,<br />\n&nbsp; &nbsp; &nbsp; &quot;SequencingRequired&quot;: true,<br />\n&nbsp; &nbsp; &nbsp; &quot;PurgeAfterDays&quot;: 2555,<br />\n&nbsp; &nbsp; &nbsp; &quot;PersistenceRequired&quot;: true,<br />\n&nbsp; &nbsp; &nbsp; &quot;ReportTemplate&quot;: &quot;&quot;,<br />\n&nbsp; &nbsp; &nbsp; &quot;ReportFieldConfig&quot;: [<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;OrganizationId&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Input&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;QueryClauseType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;QueryClauseTypeId&quot;: &quot;Term&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;Text&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;OrganizationId&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;LocationId&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Input&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;QueryClauseType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;QueryClauseTypeId&quot;: &quot;Term&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;Text&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Store Id&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;BusinessDate&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;KeyDateField&quot;: true<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;SaleOrderCount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;Integer&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Number of Sales Transactions&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;ReturnOrderCount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;Integer&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Number of Return Transactions&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;ExchangeOrderCount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;Integer&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Number of Exchange Transactions&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;MerchTotalOrderCount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;Integer&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Total Order Count&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;NbrOfMerchItemsSold&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;Integer&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Number of Merch Items Sold&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderLineStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;NbrOfMerchItemsReturned&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;Integer&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Number of Merch Items Returned&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderLineStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;MerchSaleItemsSubtotal&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Amount of Merch Items Sold&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderLineStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;NbrOfNonMerchItemsReturned&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Number of Non Merch Items Returned&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderLineStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;MerchReturnItemsSubtotal&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Amount of Merch Items Returned&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderLineStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;UnitsPerTransaction&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;Expression&quot;: &quot;(NbrOfMerchItemsSold+NbrOfMerchItemsReturned)/MerchTotalOrderCount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Average Units Per Transaction&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;MerchSaleItemsSubtotal&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Merchandise Sales&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderLineStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;NbrOfNonMerchItemsSold&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Merchandise Return&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderLineStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;DollarsPerTransaction&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;Expression&quot;: &quot;(MerchSaleItemsSubtotal+MerchReturnItemsSubtotal)/MerchTotalOrderCount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Average Amount Per Transaction&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;NonMerchSaleItemsSubtotal&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Non Merchandise Sales&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderLineStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;NonMerchReturnItemsSubtotal&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Non Merchandise Returns&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderLineStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;VASTotal&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Value Added Services&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderLineChargeStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;NetSalesTotal&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;Expression&quot;: &quot;MerchSaleItemsSubtotal-MerchReturnItemsSubtotal+NonMerchSaleItemsSubtotal-NonMerchReturnItemsSubtotal+VASTotal&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Net Sales Total&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;NbrOfGiftCardIssued&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Number of Gift Cards Issued&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;PaymentTransaction&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;GiftCardIssuedAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Amount of Gift Cards Issued&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;PaymentTransaction&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;NbrOfGiftCardReload&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Number of Gift Card Reloads&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;PaymentTransaction&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;GiftCardReloadAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Amount of Gift Card Reloads&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;PaymentTransaction&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;TaxableSalesTotal&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Taxable Sales&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderLineStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;NonTaxableSalesTotal&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Nontaxable Sales&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderLineStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;NetSalesTaxCollectedTotal&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Sales Tax Collected&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderLineStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;NbrOfVoidTransaction&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Number of Transaction Voids&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;VoidTransactionAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Amount of Transaction Voids&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;NbrOfPostVoid&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Number of Post Voids&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;PostVoidAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Amount of Post Voids&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;NbrOfLineItemVoid&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Number of Line Item Void&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderLineStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;VoidLineItemAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Amount of Line Item Void&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderLineStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;NbrOfNoSale&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Number of No Sales&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;BackOfficeManagerOperations&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;NbrOfPriceOverride&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Merchandise Return&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderLineStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;PriceOverrideAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Merchandise Return&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderLineStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;NbrOfItemDiscount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Merchandise Return&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderLineChargeStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;ItemDiscountAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Merchandise Return&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderLineChargeStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;NbrOfTransactionDiscount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Number of Transaction Discounts&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderChargeStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;TransactionDiscountAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Amount of Transaction Discounts&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderChargeStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;TotalDiscountAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Total Discounts&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderLineChargeStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;NbrOfPickupAtStoreItem&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Number of Pickup at Store Items&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderLineStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;PickupAtStoreItemAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Amount of Pickup at Store Items&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderLineStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;NbrOfShipToStoreItem&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Number of Ship to Store Items&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderLineStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;ShipToStoreItemAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Amount of Ship to Store Items&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderLineStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;NbrOfShipToAddressItem&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Number of Ship to Address Items&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderLineStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;ShipToAddressItemAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Amount of Ship to Address Items&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderLineStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;ShippingChargeAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Shipping Charges&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderLineChargeStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;NbrOfPayIn&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Number of Pay In&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;BackOfficeManagerOperations&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;PayInAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Amount of Pay In&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;BackOfficeManagerOperations&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;NbrOfPayOut&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Number of Pay Out&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;BackOfficeManagerOperations&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;PayOutAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Amount of Pay Out&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;BackOfficeManagerOperations&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;NbrOfTillLoan&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Number of Till Loans&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;BackOfficeManagerOperations&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;TillLoanAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Amount of Till Loans&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;BackOfficeManagerOperations&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;NbrOfTillPickup&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Number of Till Pickups&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;BackOfficeManagerOperations&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;TillPickupAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Amount of Till Pickups&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;BackOfficeManagerOperations&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;ReturnFeeAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Return Fees&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;ConfirmedOrderLineChargeStats&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;CreditVisaAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Credit Visa Amount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;TenderSummary&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;CreditMasterCardAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Credit MasterCard Amount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;TenderSummary&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;CreditDiscoverAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Credit Discover Amount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;TenderSummary&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;CreditAmexAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Credit Amex Amount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;TenderSummary&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;CreditJCBAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Credit JCB Amount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;TenderSummary&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;CreditDinersClubAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Credit DinersClub Amount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;TenderSummary&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;CreditOtherCardAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Credit Other Card Amount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;TenderSummary&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;DebitVisaAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Debit Visa Amount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;TenderSummary&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;DebitMasterCardAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Debit MasterCard Amount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;TenderSummary&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;DebitDiscoverAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Debit Discover Amount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;TenderSummary&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;DebitAmexAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Debit Amex Amount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;TenderSummary&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;DebitJCBAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Debit JCB Amount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;TenderSummary&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;DebitDinersClubAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Debit DinersClub Amount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;TenderSummary&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;DebitOtherCardAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Debit OtherCard Amount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;TenderSummary&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;CashAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Cash Amount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;TenderSummary&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;CheckAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Check Amount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;TenderSummary&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;ECheckAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;ECheck Amount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;TenderSummary&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;TravelersCheckAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Travelers Check Amount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;TenderSummary&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;GiftCardAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;GiftCard Amount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;TenderSummary&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;PayPalAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;PayPal Amount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;TenderSummary&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;StoreCreditAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;StoreCredit Amount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;TenderSummary&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;RefundCheckAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;RefundCheck Amount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;TenderSummary&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;OtherTenderAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Other Tender Amount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;TenderSummary&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;NetAmount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldType&quot;: &quot;Output&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldDataTypeId&quot;: &quot;BigDecimal&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DisplayName&quot;: &quot;Net Amount&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;GroupName&quot;: &quot;TenderSummary&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; }<br />\n&nbsp; &nbsp; &nbsp; ],<br />\n&nbsp; &nbsp; &nbsp; &quot;ReportUniqueFields&quot;: [<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;OrganizationId&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;LocationId&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;BusinessDate&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; }<br />\n&nbsp; &nbsp; &nbsp; ],<br />\n&nbsp; &nbsp; &nbsp; &quot;ReportSeqUniqueFields&quot;: [<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;OrganizationId&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;FieldName&quot;: &quot;LocationId&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; }<br />\n&nbsp; &nbsp; &nbsp; ],<br />\n&nbsp; &nbsp; &nbsp; &quot;ReportDocTypeConfig&quot;: [<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DocType&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;DocTypeId&quot;: &quot;pdf&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />\n&nbsp; &nbsp; &nbsp; &nbsp; }<br />\n&nbsp; &nbsp; &nbsp; ]<br />\n&nbsp; &nbsp; }<br />\n&nbsp; ]<br />\n}<br />\n&nbsp;</p>\n</div></div></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4><a name=\"field-definitions\" id=\"field-definitions\"></a>Field definitions</h4>\r\n\r\n<p><br />\r\nThe fields are calculated, accumulated, and stored in the elastic search. Below is the list of fields currently available today.&nbsp; Implementation group will not have the ability to change the logic for the underlying Wiretap fundamental base queries.</p>\r\n\r\n<h5><a name=\"confirmedorderstats\" id=\"confirmedorderstats\"></a>ConfirmedOrderStats</h5>\r\n\r\n<div class=\"computer_code\" style=\"margin-left: 40px;\"><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-2\" class=\"toggle-content\"><span class=\"toggle-title\">POS Metrics - ConfirmedOrderStats</span></a></p><div id=\"tg-2\"><table data-autosize=\"false\" data-layout=\"default\" data-number-column=\"true\" data-table-local-id=\"7394d5ab-85a8-44fa-9cdc-1d523b8c6763\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th data-colwidth=\"539\">\n\t\t\t<p><strong>Metric Name</strong></p>\n\t\t\t</th>\n\t\t\t<th data-colwidth=\"456\">\n\t\t\t<p><strong>Metric Description</strong></p>\n\t\t\t</th>\n\t\t\t<th data-colwidth=\"589\">\n\t\t\t<p><strong>What query condition will derive this field</strong></p>\n\t\t\t</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-colwidth=\"539\">\n\t\t\t<p>TotalOrderCount</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"456\">\n\t\t\t<p>Total Order Count for the selected selling location.&nbsp;</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"589\">\n\t\t\t<p>Count of&nbsp;<strong>(Order.IsConfirmed = true AND Order.IsPostVoided = false AND Order.isCancelled = false)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-colwidth=\"539\">\n\t\t\t<p>MerchTotalOrderCount</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"456\">\n\t\t\t<p>Merchandise Total Order Count for the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"589\">\n\t\t\t<p>Count of&nbsp;<strong>(Order.IsConfirmed = true AND Order.IsPostVoided = false AND Order.isCancelled = false AND ( Order.MerchSaleLineCount &gt; 0 OR Order.MerchReturnLineCount &gt;0 ))</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-colwidth=\"539\">\n\t\t\t<p>OrderCountWithActiveCustomer</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"456\">\n\t\t\t<p>Total Order Count for the selected selling location where there was a customer activated.</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"589\">\n\t\t\t<p>Count of&nbsp;<strong>(Order.IsConfirmed = true AND Order.IsPostVoided = false AND Order.isCancelled = false AND Order.CustomerId.lenght &gt; 0)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-colwidth=\"539\">\n\t\t\t<p>SaleOrderCount</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"456\">\n\t\t\t<p>Sale Order Count for the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"589\">\n\t\t\t<p>Count of&nbsp;<strong>(Order.IsConfirmed = true AND Order.IsPostVoided = false AND Order.isCancelled = false AND Order.MerchSaleLineCount &gt; 0 AND Order.MerchReturnLineCount =0)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-colwidth=\"539\">\n\t\t\t<p>ReturnOrderCount</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"456\">\n\t\t\t<p>Return Order Count for the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"589\">\n\t\t\t<p>Count of&nbsp;<strong>(Order.IsConfirmed = true AND Order.IsPostVoided = false AND Order.isCancelled = false AND Order.MerchSaleLineCount = 0 AND Order.MerchReturnLineCount &gt; 0)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-colwidth=\"539\">\n\t\t\t<p>ExchangeOrderCount</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"456\">\n\t\t\t<p>Exchange Order Count for the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"589\">\n\t\t\t<p>Count of&nbsp;<strong>(Order.IsConfirmed = true AND Order.IsPostVoided = false AND Order.isCancelled = false AND Order.MerchSaleLineCount &gt; 0 AND Order.MerchReturnLineCount &gt; 0)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-colwidth=\"539\">\n\t\t\t<p>NbrOfPostVoid</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"456\">\n\t\t\t<p>Number Of Post Void transactions done in the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"589\">\n\t\t\t<p>Count of&nbsp;<strong>(Order.IsConfirmed = true AND Order.IsPostVoided = true )</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-colwidth=\"539\">\n\t\t\t<p>PostVoidAmount</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"456\">\n\t\t\t<p>Total Amount for the all the Post Void Transactions for the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"589\">\n\t\t\t<p>Sum of&nbsp;<strong>( Order.CancelledOrderSubTotal + Order.CancelledTotalDiscounts )</strong>&nbsp;where&nbsp;<strong>( Order.IsConfirmed = true AND Order.IsPostVoided = true )</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-colwidth=\"539\">\n\t\t\t<p>NbrOfVoidTransaction</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"456\">\n\t\t\t<p>Number Of Void transactions done in the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"589\">\n\t\t\t<p>Count of&nbsp;<strong>( Order.IsPostVoided = false AND IsCancelled = true AND ( Order.CancelReasonId = null OR CancelReasonId != &lsquo;Suspended&rsquo; ))</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-colwidth=\"539\">\n\t\t\t<p>VoidTransactionAmount</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"456\">\n\t\t\t<p>Total Amount for the all the Void Transactions for the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"589\">\n\t\t\t<p>Sum of&nbsp;<strong>( Order.CancelledOrderSubTotal + Order.CancelledTotalDiscounts )</strong>&nbsp;where&nbsp;<strong>( Order.IsPostVoided = false AND IsCancelled = true</strong>&nbsp;)</p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div></div></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h5><a name=\"confirmedorderlinestats\" id=\"confirmedorderlinestats\"></a>ConfirmedOrderLineStats</h5>\r\n\r\n<div class=\"computer_code\" style=\"margin-left: 40px;\"><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-3\" class=\"toggle-content\"><span class=\"toggle-title\">POS Metrics - ConfirmedOrderLineStats</span></a></p><div id=\"tg-3\"><table data-autosize=\"false\" data-layout=\"default\" data-number-column=\"true\" data-table-local-id=\"b199c5bd-37a3-4676-b774-5a01b766286c\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>\n\t\t\t<p><strong>Metric Name</strong></p>\n\t\t\t</th>\n\t\t\t<th>\n\t\t\t<p><strong>Metric Description</strong></p>\n\t\t\t</th>\n\t\t\t<th>\n\t\t\t<p><strong>What query condition will derive this field</strong></p>\n\t\t\t</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>NbrOfMerchItemsSold</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Number Of Merchandise Items Sold : Total number of Merchandise item sold for the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>( OrderLine.Quantity )</strong>&nbsp;where&nbsp;<strong>( Order.IsConfirmed = true AND OrderLine.IsCancelled = false AND OrderLine.IsNonMerchandise = false AND OrderLine.IsReturn = false )</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>MerchSaleItemsSubtotal</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Merchandise Sale Items SubTotal : Total Amount for all the Merchandise Sales for the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>( OrderLine.OrderLineSubTotal + OrderLine.TotalDiscountOnItem )</strong>&nbsp;where&nbsp;<strong>( Order.IsConfirmed = true AND OrderLine.IsCancelled = false AND OrderLine.IsNonMerchandise = false AND OrderLine.IsReturn = false )</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>NbrOfMerchItemsReturned</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Number Of Merchandise Items Returned : Total number of Merchandise item returned for the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>( OrderLine.Quantity )</strong>&nbsp;where&nbsp;<strong>( Order.IsConfirmed = true AND OrderLine.IsCancelled = false AND OrderLine.IsNonMerchandise = false AND OrderLine.IsReturn = true )</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>MerchReturnItemsSubtotal</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Merchandise Return Items SubTotal : Total Amount for all the Merchandise Return for the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>( OrderLine.OrderLineSubTotal + OrderLine.TotalDiscountOnItem )</strong>&nbsp;where&nbsp;<strong>( Order.IsConfirmed = true AND OrderLine.IsCancelled = false AND OrderLine.IsNonMerchandise = false AND OrderLine.IsReturn = true )</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>NbrOfNonMerchItemsSold</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Number Of NonMerchandise Items Sold : Total number of NonMerchandise item sold for the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>( OrderLine.Quantity )</strong>&nbsp;where&nbsp;<strong>( Order.IsConfirmed = true AND OrderLine.IsCancelled = false AND OrderLine.IsNonMerchandise = true AND OrderLine.IsReturn = false )</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>NonMerchSaleItemsSubtotal</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>NonMerchandise Sale Items SubTotal : Total Amount for all the NonMerchandise Sales for the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>( OrderLine.OrderLineSubTotal + OrderLine.TotalDiscountOnItem )</strong>&nbsp;where&nbsp;<strong>( Order.IsConfirmed = true AND OrderLine.IsCancelled = false AND OrderLine.IsNonMerchandise = true AND OrderLine.IsReturn = false )</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>NbrOfNonMerchItemsReturned</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Number Of NonMerchandise Items Returned : Total number of NonMerchandise item returned for the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>( OrderLine.Quantity )</strong>&nbsp;where&nbsp;<strong>( Order.IsConfirmed = true AND OrderLine.IsCancelled = false AND OrderLine.IsNonMerchandise = true AND OrderLine.IsReturn = true )</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>NonMerchReturnItemsSubtotal</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>NonMerchandise Return Items SubTotal : Total Amount for all the NonMerchandise Return for the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>( OrderLine.OrderLineSubTotal + OrderLine.TotalDiscountOnItem )</strong>&nbsp;where&nbsp;<strong>( Order.IsConfirmed = true AND OrderLine.IsCancelled = false AND OrderLine.IsNonMerchandise = true AND OrderLine.IsReturn = true )</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>NbrOfPickupAtStoreItem</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Number Of Pickup At Store Items : Total Number Of Pickup At Store items for the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>( OrderLine.Quantity )</strong>&nbsp;where (&nbsp;<strong>Order.IsConfirmed = true AND OrderLine.IsCancelled = false</strong>&nbsp;<strong>AND OrderLine.DeliveryMethodId = &lsquo;PickUpAtStore&rsquo; )</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>PickupAtStoreItemAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Pickup At Store Item Amount : Total Amount of Pickup At Store items for the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>( OrderLine.OrderLineSubTotal + OrderLine.TotalDiscountOnItem )&nbsp;</strong>where<strong>&nbsp;( Order.IsConfirmed = true AND OrderLine.IsCancelled = false AND OrderLine.DeliveryMethodId = &lsquo;PickUpAtStore&rsquo; )</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>NbrOfShipToStoreItem</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Number Of Ship To Store Items : Total Number Of Ship To Store items for the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>( OrderLine.Quantity )</strong>&nbsp;where (&nbsp;<strong>Order.IsConfirmed = true AND OrderLine.IsCancelled = false</strong>&nbsp;<strong>AND OrderLine.DeliveryMethodId = &lsquo;ShipToStore&rsquo; )</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>ShipToStoreItemAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Ship To Store Item Amount : Total Amount of Ship To Store items for the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>( OrderLine.OrderLineSubTotal + OrderLine.TotalDiscountOnItem )&nbsp;</strong>where<strong>&nbsp;( Order.IsConfirmed = true AND OrderLine.IsCancelled = false AND OrderLine.DeliveryMethodId = &lsquo;ShipToStore&rsquo; )</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>NbrOfShipToAddressItem</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Number Of Ship To Address Items : Total Number Of Ship To Address items for the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>( OrderLine.Quantity )</strong>&nbsp;where (&nbsp;<strong>Order.IsConfirmed = true AND OrderLine.IsCancelled = false</strong>&nbsp;<strong>AND OrderLine.DeliveryMethodId = &lsquo;ShipToAddress&rsquo; )</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>ShipToAddressItemAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Ship To Address Item Amount : Total Amount of Ship To Address items for the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>( OrderLine.OrderLineSubTotal + OrderLine.TotalDiscountOnItem )&nbsp;</strong>where<strong>&nbsp;( Order.IsConfirmed = true AND OrderLine.IsCancelled = false AND OrderLine.DeliveryMethodId = &lsquo;ShipToAddress&rsquo; )</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>TaxableSalesTotal</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Taxable Sales Total : Total Amount of Taxable Sale for the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>( OrderLine.OrderLineSubTotal + OrderLine.TotalDiscountOnItem )&nbsp;</strong>where&nbsp;<strong>( Order.IsConfirmed = true AND OrderLine.IsCancelled = false AND OrderLine.TotalTaxes != 0 )</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>NonTaxableSalesTotal</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Non Taxable Sales Total : Total Amount of Non Taxable Sale for the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>( OrderLine.OrderLineSubTotal + OrderLine.TotalDiscountOnItem )&nbsp;</strong>where&nbsp;<strong>( Order.IsConfirmed = true AND OrderLine.IsCancelled = false AND OrderLine.TotalTaxes = 0 )</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>NbrOfPriceOverride</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Number Of Price Overrides : Total Number of Price Overridden items for the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Count of&nbsp;<strong>(</strong>&nbsp;<strong>Order.IsConfirmed = true AND OrderLine.IsCancelled = false AND OrderLine.IsPriceOverridden = true AND OrderLine.UnitPrice != OrderLine.OriginalUnitPrice )</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>PriceOverrideAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Price Override Amount : Total Amount for Price Overridden Items for the selected selling location.&nbsp;</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>( OrderLine.UnitPrice - OrderLine.OriginalUnitPrice )&nbsp;</strong>where&nbsp;<strong>(</strong><strong>Order.IsConfirmed = true AND OrderLine.IsCancelled = false AND OrderLine.IsPriceOverridden = true</strong>&nbsp;<strong>)&nbsp;</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>NbrOfLineItemVoid</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Number Of Line Item Void : Total Number of Void Lines for the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Count of&nbsp;<strong>( OrderLine.CancelReasonId != &lsquo;Suspended&rsquo; AND OrderLine.IsCancelled = true )</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>VoidLineItemAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Void Line Item Amount : Total Amount of the Voided Line Items for the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>( OrderLine.CancelledOrderLineSubTotal + OrderLine.CancelledTotalDiscounts )</strong>&nbsp;where&nbsp;<strong>( OrderLine.CancelReasonId != &lsquo;Suspended&rsquo; AND OrderLine.IsCancelled = true )</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div></div></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h5><a name=\"confirmedorderlinechargestats\" id=\"confirmedorderlinechargestats\"></a>ConfirmedOrderLineChargeStats</h5>\r\n\r\n<div class=\"computer_code\" style=\"margin-left: 40px;\"><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-4\" class=\"toggle-content\"><span class=\"toggle-title\">POS Metrics - ConfirmedOrderLineChargeStats</span></a></p><div id=\"tg-4\"><table data-autosize=\"false\" data-layout=\"default\" data-number-column=\"true\" data-table-local-id=\"9ede3e0d-f321-410b-8a8d-d96406e903ff\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>\n\t\t\t<p><strong>Metric Name</strong></p>\n\t\t\t</th>\n\t\t\t<th>\n\t\t\t<p><strong>Metric Description</strong></p>\n\t\t\t</th>\n\t\t\t<th>\n\t\t\t<p><strong>What query condition will derive this field</strong></p>\n\t\t\t</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>VASTotal</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Value Added Service Total : Total Amount of Value Added Services for selected selling location</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>( OrderLineChargeDetail.ChargeTotal )</strong>&nbsp;where&nbsp;<strong>( OrderLineChargeDetail.ChargeTypeId = &lsquo;Value Added Services&rsquo; )</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>ShippingChargeAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Shipping Charge Amount : Total Amount of Shipping Charge for selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>( OrderLineChargeDetail.ChargeTotal )</strong>&nbsp;where&nbsp;<strong>( OrderLineChargeDetail.ChargeTypeId = &lsquo;Shipping&rsquo; )</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>ReturnFeeAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Return Fee Amount : Total Amount of Return Fee for selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>( OrderLineChargeDetail.ChargeTotal )</strong>&nbsp;where&nbsp;<strong>( OrderLineChargeDetail.ChargeTypeId = &lsquo;Return Fee&rsquo; )</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>NbrOfItemDiscount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Number Of Item Discounts : Total number of item discounts for the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Count of&nbsp;<strong>( OrderLineChargeDetail.ChargeTotal &lt; 0 AND OrderLineChargeDetail.IsInformational = false AND OrderLineChargeDetail.HeaderChargeDetailId = null AND OrderLineChargeDetail.RelatedChargeDetailId = null AND OrderLineChargeDetail.RelatedChargeType = null AND OrderLineChargeDetail.ChargeTypeId = &lsquo;Discount&rsquo; )</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>ItemDiscountAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Item Discount Amount : Total Amount of Item discounts for the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>( OrderLineChargeDetail.ChargeTotal )&nbsp;</strong>where&nbsp;<strong>( OrderLineChargeDetail.ChargeTotal &lt; 0 AND OrderLineChargeDetail.IsInformational = false AND OrderLineChargeDetail.HeaderChargeDetailId = null AND OrderLineChargeDetail.RelatedChargeDetailId = null AND OrderLineChargeDetail.RelatedChargeType = null AND OrderLineChargeDetail.ChargeTypeId = &lsquo;Discount&rsquo; )</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>TotalDiscountAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Total Discount Amount : Total Amount of discounts including Item Discount and Transaction Discounts for the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>( OrderLineChargeDetail.ChargeTotal )&nbsp;</strong>where&nbsp;<strong>( OrderLineChargeDetail.ChargeTotal &lt; 0 AND OrderLineChargeDetail.IsInformational = false AND OrderLineChargeDetail.RelatedChargeDetailId = null AND OrderLineChargeDetail.RelatedChargeType = null AND OrderLineChargeDetail.ChargeTypeId = &lsquo;Discount&rsquo; )</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div></div></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h5><a name=\"confirmedorderchargestats\" id=\"confirmedorderchargestats\"></a>ConfirmedOrderChargeStats</h5>\r\n\r\n<div class=\"computer_code\" style=\"margin-left: 40px;\"><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-5\" class=\"toggle-content\"><span class=\"toggle-title\">POS Metrics - ConfirmedOrderChargeStats</span></a></p><div id=\"tg-5\"><table data-autosize=\"false\" data-layout=\"default\" data-number-column=\"true\" data-table-local-id=\"2ee80f25-7852-4146-b6a1-1d2e77e1f632\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>\n\t\t\t<p><strong>Metric Name</strong></p>\n\t\t\t</th>\n\t\t\t<th>\n\t\t\t<p><strong>Metric Description</strong></p>\n\t\t\t</th>\n\t\t\t<th>\n\t\t\t<p><strong>What query condition will derive this field</strong></p>\n\t\t\t</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>NbrOfTransactionDiscount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Number Of Transaction Discount : Total Number of transaction discount for the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Count of&nbsp;<strong>( Order.IsPostVoided = false AND Order.IsCancelled = false AND OrderChargeDetail.ChargeTotal &lt; 0 AND OrderChargeDetail.IsInformational = false AND OrderChargeDetail.RelatedChargeDetailId = null AND OrderChargeDetail.RelatedChargeType = null )</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>TransactionDiscountAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Transaction Discount Amount : Total Amount of transaction discount for the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>(</strong>&nbsp;<strong>OrderChargeDetail.ChargeTotal</strong>&nbsp;<strong>)</strong>&nbsp;where&nbsp;<strong>( Order.IsPostVoided = false AND Order.IsCancelled = false AND OrderChargeDetail.ChargeTotal &lt; 0 AND OrderChargeDetail.IsInformational = false AND OrderChargeDetail.RelatedChargeDetailId = null AND OrderChargeDetail.RelatedChargeType = null )</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div></div></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h5><a name=\"paymenttransaction\" id=\"paymenttransaction\"></a>PaymentTransaction</h5>\r\n\r\n<div class=\"computer_code\" style=\"margin-left: 40px;\"><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-6\" class=\"toggle-content\"><span class=\"toggle-title\">POS Metrics - PaymentTransaction</span></a></p><div id=\"tg-6\"><table data-autosize=\"false\" data-layout=\"default\" data-number-column=\"true\" data-table-local-id=\"96a62a58-cf24-485d-ba7e-1c84b64b1bbc\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>\n\t\t\t<p><strong>Metric Name</strong></p>\n\t\t\t</th>\n\t\t\t<th>\n\t\t\t<p><strong>Metric Description</strong></p>\n\t\t\t</th>\n\t\t\t<th>\n\t\t\t<p><strong>What query condition will derive this field</strong></p>\n\t\t\t</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>NbrOfGiftCardIssued</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Number Of Gift Card Issued : Total number of gift card issued for the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Count of&nbsp;<strong>( PaymentTransaction.TransactionType = &lsquo;Activate&rsquo; )</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>GiftCardIssuedAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Gift Card Issued Amount : Total amount of gift card issued for the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>( PaymentTransaction.ProcessedAmount )&nbsp;</strong>where&nbsp;<strong>( PaymentTransaction.TransactionType = &lsquo;Activate&rsquo; )</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>NbrOfGiftCardReload</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Number Of Gift Card Reload : Total number of gift card reload for the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Count of&nbsp;<strong>( PaymentTransaction.TransactionType = &lsquo;Reload&rsquo; )</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>GiftCardReloadAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Gift Card Reload Amount : Total amount of gift card reload for the selected selling location.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>( PaymentTransaction.ProcessedAmount )&nbsp;</strong>where&nbsp;<strong>( PaymentTransaction.TransactionType = &lsquo;Reload&rsquo; )</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div></div></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h5><a name=\"backofficemanageroperations\" id=\"backofficemanageroperations\"></a>BackOfficeManagerOperations</h5>\r\n\r\n<div class=\"computer_code\" style=\"margin-left: 40px;\"><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-7\" class=\"toggle-content\"><span class=\"toggle-title\">POS Metrics - BackOfficeManagerOperations</span></a></p><div id=\"tg-7\"><table data-autosize=\"false\" data-layout=\"default\" data-number-column=\"true\" data-table-local-id=\"0db5ed92-5494-4f60-87df-82a50c5294a7\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>\n\t\t\t<p><strong>Metric Name</strong></p>\n\t\t\t</th>\n\t\t\t<th>\n\t\t\t<p><strong>Metric Description</strong></p>\n\t\t\t</th>\n\t\t\t<th>\n\t\t\t<p><strong>What query condition will derive this field</strong></p>\n\t\t\t</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>NbrOfNoSale</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Number of No Sale: Count of the No Sale transactions done.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Count of&nbsp;<strong>(BackofficeTransaction.BackofficeTransactionOperationType=&#39;NO_SALE&#39;)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>NbrOfPayIn</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Number of Pay In: Count of the Pay In transactions done.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Count of&nbsp;<strong>(BackofficeTransaction.BackofficeTransactionOperationType=&#39;PAY_IN&#39;)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>PayInAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Pay In Amount : Sum of amount of all pay in transactions done.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>(BackofficeTransactionDetails.Amount)</strong>&nbsp;where&nbsp;<strong>(BackofficeTransaction.BackofficeTranOperationType=&#39;PAY_IN&#39; AND BackofficeTransactionDetails.BackofficeTransactionDetailAmountType=&#39;Entered Amount&#39;)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>NbrOfPayOut</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Number of Pay Out: Count of Pay Out transactions done</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Count of<strong>(BackofficeTransaction.BackofficeTransactionOperationType=&#39;PAY_OUT&rsquo;)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>PayOutAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Pay Out Amount: Sum of amount of all pay out transactions done.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>(BackofficeTransactionDetails.Amount)</strong>&nbsp;where&nbsp;<strong>(BackofficeTransaction.BackofficeTransactionOperationType=&#39;PAY_OUT&#39; AND BackofficeTransactionDetails.BackofficeTransactionDetailAmountType=&#39;Entered Amount&#39;)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>NbrOfTillLoan</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Number of Till Loan: Count of the till loan transactions done.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Count of&nbsp;<strong>(BackofficeTransaction.BackofficeTransactionOperationType=&#39;TILL_LOAN&#39;)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>TillLoanAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Till Loan Amount: Sum of amount of all till loan transactions done.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>(BackofficeTransactionDetails.Amount)</strong>&nbsp;where&nbsp;<strong>(BackofficeTransaction.BackofficeTransactionOperationType=&#39;TILL_LOAN&#39; AND BackofficeTransactionDetails.BackofficeTransactionDetailAmountType=&#39;Entered Amount&#39;)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>NbrOfTillPickup</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Number of Till Pickup: Count of the till pickup transactions done.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Count of&nbsp;<strong>(BackofficeTransaction.BackofficeTransactionOperationType=&#39;TILL_PICKUP&rsquo;)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>TillPickupAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Till Pickup Amount: Sum of amount of all till pickup transactions done.</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>(BackofficeTransactionDetails.Amount)</strong>&nbsp;where&nbsp;<strong>(BackofficeTransaction.BackofficeTransactionOperationType=&#39;TILL_PICKUP&#39; AND BackofficeTransactionDetails.BackofficeTransactionDetailAmountType=&#39;Entered Amount&#39;)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div></div></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h5><a name=\"tendersummary\" id=\"tendersummary\"></a>TenderSummary</h5>\r\n\r\n<div class=\"computer_code\" style=\"margin-left: 40px;\"><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-8\" class=\"toggle-content\"><span class=\"toggle-title\">POS Metrics - TenderSummary</span></a></p><div id=\"tg-8\"><table data-autosize=\"false\" data-layout=\"default\" data-number-column=\"true\" data-table-local-id=\"c9eb4e9b-6866-4b7f-b6f6-9f390cbbaee7\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>\n\t\t\t<p><strong>Metric Name</strong></p>\n\t\t\t</th>\n\t\t\t<th>\n\t\t\t<p><strong>Metric Description</strong></p>\n\t\t\t</th>\n\t\t\t<th>\n\t\t\t<p><strong>What query condition will derive this field</strong></p>\n\t\t\t</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>CreditVisaAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Total amount paid done by visa credit card&nbsp;</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>PaymentMethod.Amount</strong>&nbsp;where&nbsp;<strong>(PaymentMethod.PaymentType = &lsquo;Credit Card&#39; AND PaymentMethod.CardType = &#39;Visa&rsquo;)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>CreditMasterCardAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Total amount paid done by master credit card&nbsp;</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>PaymentMethod.Amount</strong>&nbsp;where&nbsp;<strong>(PaymentMethod.PaymentType = &lsquo;Credit Card&#39; AND PaymentMethod.CardType = &#39;Master&rsquo;)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>CreditDiscoverAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Total amount paid done by discover credit card&nbsp;</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>PaymentMethod.Amount</strong>&nbsp;where&nbsp;<strong>(PaymentMethod.PaymentType = &lsquo;Credit Card&#39; AND PaymentMethod.CardType = &#39;Discover&rsquo;)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>CreditAmexAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Total amount paid done by amex credit card&nbsp;</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>PaymentMethod.Amount</strong>&nbsp;where&nbsp;<strong>(PaymentMethod.PaymentType = &lsquo;Credit Card&#39; AND PaymentMethod.CardType = &#39;Amex&rsquo;)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>CreditJCBAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Total amount paid done by JCB credit card&nbsp;</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>PaymentMethod.Amount</strong>&nbsp;where&nbsp;<strong>(PaymentMethod.PaymentType = &lsquo;Credit Card&#39; AND PaymentMethod.CardType = &#39;JCB&rsquo;)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>CreditDinersClubAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Total amount paid done by dinner club credit card&nbsp;</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>PaymentMethod.Amount</strong>&nbsp;where&nbsp;<strong>(PaymentMethod.PaymentType = &lsquo;Credit Card&#39; AND PaymentMethod.CardType = &#39;DinersClub&rsquo;)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>CreditOtherCardAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Total amount paid done by other than above mentioned credit card&nbsp;</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>PaymentMethod.Amount</strong>&nbsp;where&nbsp;<strong>(PaymentMethod.PaymentType = &lsquo;Credit Card&#39; AND PaymentMethod.CardType != &#39;Visa&rsquo;, &#39;Master&rsquo;, &#39;Discover&rsquo;, &#39;Amex&rsquo;, JCB&rsquo;, &#39;DinersClub&rsquo;)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>DebitVisaAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Total amount paid by visa debit card</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>PaymentMethod.Amount</strong>&nbsp;where&nbsp;<strong>(PaymentMethod.PaymentType = &lsquo;Debit&#39; AND PaymentMethod.CardType = &#39;Visa&rsquo;)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>DebitMasterCardAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Total amount paid by master debit card</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>PaymentMethod.Amount</strong>&nbsp;where&nbsp;<strong>(PaymentMethod.PaymentType = &lsquo;Debit&#39; AND PaymentMethod.CardType = &#39;Master&rsquo;)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>DebitDiscoverAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Total amount paid by Discover debit card</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>(PaymentMethod.Amount where PaymentMethod.PaymentType = &lsquo;Debit&#39; AND PaymentMethod.CardType = &#39;Discover&rsquo;)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>DebitAmexAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Total amount paid by amex debit card</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>PaymentMethod.Amount</strong>&nbsp;where&nbsp;<strong>(PaymentMethod.PaymentType = &lsquo;Debit&#39; AND PaymentMethod.CardType = &#39;Amex&rsquo;)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>DebitJCBAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Total amount paid by JCB debit card</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>PaymentMethod.Amount</strong>&nbsp;where&nbsp;<strong>(PaymentMethod.PaymentType = &lsquo;Debit&#39; AND PaymentMethod.CardType = &#39;JCB&rsquo;)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>DebitDinersClubAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Total amount paid by dinners club debit card</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>PaymentMethod.Amount</strong>&nbsp;where&nbsp;<strong>(PaymentMethod.PaymentType = &lsquo;Debit&#39; AND PaymentMethod.CardType = &#39;DinersClub&rsquo;)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>DebitOtherCardAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Total amount paid by other than above mentioned debit card</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>PaymentMethod.Amount</strong>&nbsp;where&nbsp;<strong>(PaymentMethod.PaymentType = &lsquo;Debit&#39; AND PaymentMethod.CardType != &#39;Visa&rsquo;, &#39;Master&rsquo;, &#39;Discover&rsquo;, &#39;Amex&rsquo;, JCB&rsquo;, &#39;DinersClub&rsquo;)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>CashAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Total amount paid by cash</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>PaymentMethod.Amount</strong>&nbsp;where&nbsp;<strong>(PaymentMethod.PaymentType = &lsquo;Cash&rsquo;)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>CheckAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Total amount paid by check</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>PaymentMethod.Amount</strong>&nbsp;where&nbsp;<strong>(PaymentMethod.PaymentType = &lsquo;Check&rsquo;)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>ECheckAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Total amount by E-Check</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>PaymentMethod.Amount</strong>&nbsp;where&nbsp;<strong>(PaymentMethod.PaymentType = &lsquo;E-Check&rsquo;)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>TravelersCheckAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Total amount paid by traveler&rsquo;s check&nbsp;</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>PaymentMethod.Amount</strong>&nbsp;where&nbsp;<strong>(PaymentMethod.PaymentType = &lsquo;Traverler&rsquo;s Check&rsquo;)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>GiftCardAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Total amount paid by Gift card</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>PaymentMethod.Amount</strong>&nbsp;where&nbsp;<strong>(PaymentMethod.PaymentType = &lsquo;Gift Card&rsquo;)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>PayPalAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Total amount paid by paypal</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of<strong>&nbsp;PaymentMethod.Amount where (PaymentMethod.PaymentType = &lsquo;Paypal&rsquo;)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>StoreCreditAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Total amount paid by store credits</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>PaymentMethod.Amount</strong>&nbsp;where&nbsp;<strong>(PaymentMethod.PaymentType = &lsquo;Store Credit&rsquo;)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>RefundCheckAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Total amount paid by refund check</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>PaymentMethod.Amount</strong>&nbsp;where&nbsp;<strong>(PaymentMethod.PaymentType = &lsquo;Refund Check&rsquo;)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>OtherTenderAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Total amount paid other then Credit Card , Debit , Cash , Check , E-Check , Traveler&#39;s Check, Gift Card, PayPal, Store Credit, Refund Check</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of&nbsp;<strong>PaymentMethod.Amount</strong>&nbsp;where&nbsp;<strong>(PaymentMethod.PaymentType</strong>&nbsp;<strong>!= &#39; Credit Card &#39;, &#39; Debit &#39;, &#39; Cash &#39;, &#39; Check &#39;, &#39; E-Check &#39;, &#39; Traveler&#39;s Check&#39;,&#39;Gift Card&#39;, &#39;PayPal&#39;, &#39;Store Credit&#39;, &#39;Refund Check&#39;)&nbsp;</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>NetAmount</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Total amount paid by any payment type</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Sum of<strong>PaymentMethod.Amount</strong>&nbsp;where (<strong>PaymentMethod.PaymentType</strong>&nbsp;<strong>= &#39; Credit Card &lsquo;, &#39; Debit &#39;, &#39; Cash &#39;, &#39; Check &#39;, &#39; E-Check &#39;, &#39; Traveler&#39;s Check&#39;,&#39;Gift Card&#39;, &#39;PayPal&#39;, &#39;Store Credit&#39;, &#39;Refund Check&#39;, &#39;null&rsquo;)</strong></p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div></div></div>\r\n\r\n<h5>&nbsp;</h5>\r\n\r\n<h5><a name=\"customer-entry-count\" id=\"customer-entry-count\"></a><a id=\"conversionmetric2\" name=\"conversionmetric2\"></a>Customer Entry Count</h5>\r\n\r\n<p style=\"margin-left: 40px;\">Below is&nbsp;the API detail&nbsp;to feed the customer entry data to Manhattan System.</p>\r\n\r\n<div class=\"computer_code\" style=\"margin-left: 40px;\">&nbsp;<div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-9\" class=\"toggle-content\"><span class=\"toggle-title\">Customer_ Entry_ Count</span></a></p><div id=\"tg-9\"><p><code>API:&nbsp;{{url}}/posservice/api/posservice/customerVisitTracker/save</code></p>\n\n<p><code>http method:&nbsp;POST&nbsp;</code></p>\n\n<p><code>//Sample Request payload//</code></p>\n\n<p><code>{ </code></p>\n\n<p><code>&quot;LocationId&quot;: &quot;tm-demo-us:80228-1028&quot;, // LocationId&nbsp;</code></p>\n\n<p><code>&quot;CaptureDateTime&quot;: &quot;2023-11-06T03:15:30&quot;,// DateTime in which the customer entry counter is captured. </code></p>\n\n<p><code>&quot;EntryCount&quot;: 30 //Entry Count between the last captureDateTime and current captureDateTime</code></p>\n\n<p><code>}</code></p>\n</div></div></div>\r\n\r\n<ul>\r\n\t<li style=\"margin-left: 40px;\">This API must be fed by an&nbsp;external service to refresh the customer entry&nbsp;data to the Manhattan system frequently.&nbsp;</li>\r\n\t<li style=\"margin-left: 40px;\">Manhattan Active&reg; Omni Point Of Sale application will use this value to&nbsp;calculate and refresh the conversion metric shown on the Cart screen&nbsp;every 5 minutes.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n\t  </div>\r\n </div>\r\n <div id=\"ui-page-fb-wrap\"></div>\r\n <div class=\"hiq-footer-wrap\">\r\n    \r\n                \r\n  </div>\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n",
  "content_length": 344185,
  "scraped_at": "2025-08-09T22:03:13.884910",
  "content_clean": "Home ››Manhattan Active® Omni››Store››Process & Configuration Guides››Point of Sale››POS Classic Guides››POS Metrics and App Reports - Wiretap Strategy ››POS Report Metric Definitions and Configurability Z Report Metric Definitions and Configurability Out of the Box MetricsField definitionsConfirmedOrderStatsConfirmedOrderLineStatsConfirmedOrderLineChargeStatsConfirmedOrderChargeStatsPaymentTransactionBackOfficeManagerOperationsTenderSummaryCustomer Entry Count This document lists out all the fields configured in wiretap component as part of the Generic Reporting Framework.  The reporting framework provides the flexibility to a customer implementation group to configure the reports. Reports can configured using two types of fields and the implementation team can modify both types: Specify the out-of-the-box metric fields required for the given report. Specify calculated metric derived by out of out-of-the-box metric fields. Out of the Box Metrics These metrics fields are calculated using the queries written in wiretap component and persisted  in elastic search. Queries are configured in commonUtil>reportQueryConfig.  Base seed data fields/definitions shown below. The ReportFieldConfig entries in the section for Report Name \"SaleMetricsReport\"  define the logic to fetch the data for the POS on demand Sales Metrics display. The ReportFieldConfig entries in the section for Report Name \"Z Report\" define the logic to fetch the data for the End of Day POS Z Report. reportConfig_1{ \"ProfileId\": \"base\", \"Data\": [ { \"ReportName\": \"SaleMetricsReport\", \"Description\": \"Base Sale Metric Report\", \"PurgeAfterDays\": 2555, \"ReportFieldConfig\": [ { \"FieldName\": \"OrganizationId\", \"FieldType\": \"Input\", \"QueryClauseType\": { \"QueryClauseTypeId\": \"Term\" }, \"FieldDataType\": { \"FieldDataTypeId\": \"Text\" }, \"DisplayName\": \"OrganizationId\" }, { \"FieldName\": \"LocationId\", \"FieldType\": \"Input\", \"QueryClauseType\": { \"QueryClauseTypeId\": \"Term\" }, \"FieldDataType\": { \"FieldDataTypeId\": \"Text\" }, \"DisplayName\": \"Store Id\" }, { \"FieldName\": \"MerchSaleItemsSubtotal\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Number of Merch Items Sold\", \"GroupName\": \"ConfirmedOrderLineStats\" }, { \"FieldName\": \"MerchReturnItemsSubtotal\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Number of Merch Items Returned\", \"GroupName\": \"ConfirmedOrderLineStats\" }, { \"FieldName\": \"NbrOfMerchItemsSold\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Number of Sale Orders\", \"GroupName\": \"ConfirmedOrderLineStats\" }, { \"FieldName\": \"NbrOfMerchItemsReturned\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Number of Return Orders\", \"GroupName\": \"ConfirmedOrderLineStats\" }, { \"FieldName\": \"MerchTotalOrderCount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"Integer\" }, \"DisplayName\": \"Total Order Count\", \"GroupName\": \"ConfirmedOrderStats\" }, { \"FieldName\": \"CustomerEntryCount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"Integer\" }, \"DisplayName\": \"Number of store customer visits\", \"GroupName\": \"CustomerCounterStats\" }, { \"FieldName\": \"OrderCountWithActiveCustomer\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"Integer\" }, \"Expression\": \"\", \"DisplayName\": \"Units Per Transaction\", \"GroupName\": \"ConfirmedOrderStats\" }, { \"FieldName\": \"FlashSales\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"Expression\": \"MerchSaleItemsSubtotal- MerchReturnItemsSubtotal\", \"DisplayName\": \"Flash Sales\" }, { \"FieldName\": \"UnitsPerTransaction\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"Expression\": \"(NbrOfMerchItemsSold+NbrOfMerchItemsReturned)/MerchTotalOrderCount\", \"DisplayName\": \"Units Per Transaction\" }, { \"FieldName\": \"ActiveCustomerCount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"Integer\" }, \"Expression\": \"round(OrderCountWithActiveCustomer/MerchTotalOrderCount * 100)\", \"DisplayName\": \"Active Customer Count\" }, { \"FieldName\": \"Conversion\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"Integer\" }, \"Expression\": \"round(MerchTotalOrderCount/CustomerEntryCount * 100)\", \"DisplayName\": \"Conversion Rate\" }, { \"FieldName\": \"DollarsPerTransaction\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"Expression\": \"(MerchSaleItemsSubtotal + MerchReturnItemsSubtotal)/MerchTotalOrderCount\", \"DisplayName\": \"Dollars Per Transaction\" } ] }, { \"ReportName\": \"Z Report\", \"Description\": \"Z Report which will be generated right after store close\", \"SequencingRequired\": true, \"PurgeAfterDays\": 2555, \"PersistenceRequired\": true, \"ReportTemplate\": \"\", \"ReportFieldConfig\": [ { \"FieldName\": \"OrganizationId\", \"FieldType\": \"Input\", \"QueryClauseType\": { \"QueryClauseTypeId\": \"Term\" }, \"FieldDataType\": { \"FieldDataTypeId\": \"Text\" }, \"DisplayName\": \"OrganizationId\" }, { \"FieldName\": \"LocationId\", \"FieldType\": \"Input\", \"QueryClauseType\": { \"QueryClauseTypeId\": \"Term\" }, \"FieldDataType\": { \"FieldDataTypeId\": \"Text\" }, \"DisplayName\": \"Store Id\" }, { \"FieldName\": \"BusinessDate\", \"KeyDateField\": true }, { \"FieldName\": \"SaleOrderCount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"Integer\" }, \"DisplayName\": \"Number of Sales Transactions\", \"GroupName\": \"ConfirmedOrderStats\" }, { \"FieldName\": \"ReturnOrderCount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"Integer\" }, \"DisplayName\": \"Number of Return Transactions\", \"GroupName\": \"ConfirmedOrderStats\" }, { \"FieldName\": \"ExchangeOrderCount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"Integer\" }, \"DisplayName\": \"Number of Exchange Transactions\", \"GroupName\": \"ConfirmedOrderStats\" }, { \"FieldName\": \"MerchTotalOrderCount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"Integer\" }, \"DisplayName\": \"Total Order Count\", \"GroupName\": \"ConfirmedOrderStats\" }, { \"FieldName\": \"NbrOfMerchItemsSold\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"Integer\" }, \"DisplayName\": \"Number of Merch Items Sold\", \"GroupName\": \"ConfirmedOrderLineStats\" }, { \"FieldName\": \"NbrOfMerchItemsReturned\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"Integer\" }, \"DisplayName\": \"Number of Merch Items Returned\", \"GroupName\": \"ConfirmedOrderLineStats\" }, { \"FieldName\": \"MerchSaleItemsSubtotal\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Amount of Merch Items Sold\", \"GroupName\": \"ConfirmedOrderLineStats\" }, { \"FieldName\": \"NbrOfNonMerchItemsReturned\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Number of Non Merch Items Returned\", \"GroupName\": \"ConfirmedOrderLineStats\" }, { \"FieldName\": \"MerchReturnItemsSubtotal\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Amount of Merch Items Returned\", \"GroupName\": \"ConfirmedOrderLineStats\" }, { \"FieldName\": \"UnitsPerTransaction\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"Expression\": \"(NbrOfMerchItemsSold+NbrOfMerchItemsReturned)/MerchTotalOrderCount\", \"DisplayName\": \"Average Units Per Transaction\" }, { \"FieldName\": \"MerchSaleItemsSubtotal\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Merchandise Sales\", \"GroupName\": \"ConfirmedOrderLineStats\" }, { \"FieldName\": \"NbrOfNonMerchItemsSold\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Merchandise Return\", \"GroupName\": \"ConfirmedOrderLineStats\" }, { \"FieldName\": \"DollarsPerTransaction\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"Expression\": \"(MerchSaleItemsSubtotal+MerchReturnItemsSubtotal)/MerchTotalOrderCount\", \"DisplayName\": \"Average Amount Per Transaction\" }, { \"FieldName\": \"NonMerchSaleItemsSubtotal\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Non Merchandise Sales\", \"GroupName\": \"ConfirmedOrderLineStats\" }, { \"FieldName\": \"NonMerchReturnItemsSubtotal\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Non Merchandise Returns\", \"GroupName\": \"ConfirmedOrderLineStats\" }, { \"FieldName\": \"VASTotal\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Value Added Services\", \"GroupName\": \"ConfirmedOrderLineChargeStats\" }, { \"FieldName\": \"NetSalesTotal\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"Expression\": \"MerchSaleItemsSubtotal-MerchReturnItemsSubtotal+NonMerchSaleItemsSubtotal-NonMerchReturnItemsSubtotal+VASTotal\", \"DisplayName\": \"Net Sales Total\" }, { \"FieldName\": \"NbrOfGiftCardIssued\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Number of Gift Cards Issued\", \"GroupName\": \"PaymentTransaction\" }, { \"FieldName\": \"GiftCardIssuedAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Amount of Gift Cards Issued\", \"GroupName\": \"PaymentTransaction\" }, { \"FieldName\": \"NbrOfGiftCardReload\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Number of Gift Card Reloads\", \"GroupName\": \"PaymentTransaction\" }, { \"FieldName\": \"GiftCardReloadAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Amount of Gift Card Reloads\", \"GroupName\": \"PaymentTransaction\" }, { \"FieldName\": \"TaxableSalesTotal\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Taxable Sales\", \"GroupName\": \"ConfirmedOrderLineStats\" }, { \"FieldName\": \"NonTaxableSalesTotal\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Nontaxable Sales\", \"GroupName\": \"ConfirmedOrderLineStats\" }, { \"FieldName\": \"NetSalesTaxCollectedTotal\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Sales Tax Collected\", \"GroupName\": \"ConfirmedOrderLineStats\" }, { \"FieldName\": \"NbrOfVoidTransaction\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Number of Transaction Voids\", \"GroupName\": \"ConfirmedOrderStats\" }, { \"FieldName\": \"VoidTransactionAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Amount of Transaction Voids\", \"GroupName\": \"ConfirmedOrderStats\" }, { \"FieldName\": \"NbrOfPostVoid\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Number of Post Voids\", \"GroupName\": \"ConfirmedOrderStats\" }, { \"FieldName\": \"PostVoidAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Amount of Post Voids\", \"GroupName\": \"ConfirmedOrderStats\" }, { \"FieldName\": \"NbrOfLineItemVoid\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Number of Line Item Void\", \"GroupName\": \"ConfirmedOrderLineStats\" }, { \"FieldName\": \"VoidLineItemAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Amount of Line Item Void\", \"GroupName\": \"ConfirmedOrderLineStats\" }, { \"FieldName\": \"NbrOfNoSale\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Number of No Sales\", \"GroupName\": \"BackOfficeManagerOperations\" }, { \"FieldName\": \"NbrOfPriceOverride\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Merchandise Return\", \"GroupName\": \"ConfirmedOrderLineStats\" }, { \"FieldName\": \"PriceOverrideAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Merchandise Return\", \"GroupName\": \"ConfirmedOrderLineStats\" }, { \"FieldName\": \"NbrOfItemDiscount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Merchandise Return\", \"GroupName\": \"ConfirmedOrderLineChargeStats\" }, { \"FieldName\": \"ItemDiscountAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Merchandise Return\", \"GroupName\": \"ConfirmedOrderLineChargeStats\" }, { \"FieldName\": \"NbrOfTransactionDiscount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Number of Transaction Discounts\", \"GroupName\": \"ConfirmedOrderChargeStats\" }, { \"FieldName\": \"TransactionDiscountAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Amount of Transaction Discounts\", \"GroupName\": \"ConfirmedOrderChargeStats\" }, { \"FieldName\": \"TotalDiscountAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Total Discounts\", \"GroupName\": \"ConfirmedOrderLineChargeStats\" }, { \"FieldName\": \"NbrOfPickupAtStoreItem\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Number of Pickup at Store Items\", \"GroupName\": \"ConfirmedOrderLineStats\" }, { \"FieldName\": \"PickupAtStoreItemAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Amount of Pickup at Store Items\", \"GroupName\": \"ConfirmedOrderLineStats\" }, { \"FieldName\": \"NbrOfShipToStoreItem\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Number of Ship to Store Items\", \"GroupName\": \"ConfirmedOrderLineStats\" }, { \"FieldName\": \"ShipToStoreItemAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Amount of Ship to Store Items\", \"GroupName\": \"ConfirmedOrderLineStats\" }, { \"FieldName\": \"NbrOfShipToAddressItem\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Number of Ship to Address Items\", \"GroupName\": \"ConfirmedOrderLineStats\" }, { \"FieldName\": \"ShipToAddressItemAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Amount of Ship to Address Items\", \"GroupName\": \"ConfirmedOrderLineStats\" }, { \"FieldName\": \"ShippingChargeAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Shipping Charges\", \"GroupName\": \"ConfirmedOrderLineChargeStats\" }, { \"FieldName\": \"NbrOfPayIn\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Number of Pay In\", \"GroupName\": \"BackOfficeManagerOperations\" }, { \"FieldName\": \"PayInAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Amount of Pay In\", \"GroupName\": \"BackOfficeManagerOperations\" }, { \"FieldName\": \"NbrOfPayOut\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Number of Pay Out\", \"GroupName\": \"BackOfficeManagerOperations\" }, { \"FieldName\": \"PayOutAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Amount of Pay Out\", \"GroupName\": \"BackOfficeManagerOperations\" }, { \"FieldName\": \"NbrOfTillLoan\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Number of Till Loans\", \"GroupName\": \"BackOfficeManagerOperations\" }, { \"FieldName\": \"TillLoanAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Amount of Till Loans\", \"GroupName\": \"BackOfficeManagerOperations\" }, { \"FieldName\": \"NbrOfTillPickup\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Number of Till Pickups\", \"GroupName\": \"BackOfficeManagerOperations\" }, { \"FieldName\": \"TillPickupAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Amount of Till Pickups\", \"GroupName\": \"BackOfficeManagerOperations\" }, { \"FieldName\": \"ReturnFeeAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Return Fees\", \"GroupName\": \"ConfirmedOrderLineChargeStats\" }, { \"FieldName\": \"CreditVisaAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Credit Visa Amount\", \"GroupName\": \"TenderSummary\" }, { \"FieldName\": \"CreditMasterCardAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Credit MasterCard Amount\", \"GroupName\": \"TenderSummary\" }, { \"FieldName\": \"CreditDiscoverAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Credit Discover Amount\", \"GroupName\": \"TenderSummary\" }, { \"FieldName\": \"CreditAmexAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Credit Amex Amount\", \"GroupName\": \"TenderSummary\" }, { \"FieldName\": \"CreditJCBAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Credit JCB Amount\", \"GroupName\": \"TenderSummary\" }, { \"FieldName\": \"CreditDinersClubAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Credit DinersClub Amount\", \"GroupName\": \"TenderSummary\" }, { \"FieldName\": \"CreditOtherCardAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Credit Other Card Amount\", \"GroupName\": \"TenderSummary\" }, { \"FieldName\": \"DebitVisaAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Debit Visa Amount\", \"GroupName\": \"TenderSummary\" }, { \"FieldName\": \"DebitMasterCardAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Debit MasterCard Amount\", \"GroupName\": \"TenderSummary\" }, { \"FieldName\": \"DebitDiscoverAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Debit Discover Amount\", \"GroupName\": \"TenderSummary\" }, { \"FieldName\": \"DebitAmexAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Debit Amex Amount\", \"GroupName\": \"TenderSummary\" }, { \"FieldName\": \"DebitJCBAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Debit JCB Amount\", \"GroupName\": \"TenderSummary\" }, { \"FieldName\": \"DebitDinersClubAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Debit DinersClub Amount\", \"GroupName\": \"TenderSummary\" }, { \"FieldName\": \"DebitOtherCardAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Debit OtherCard Amount\", \"GroupName\": \"TenderSummary\" }, { \"FieldName\": \"CashAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Cash Amount\", \"GroupName\": \"TenderSummary\" }, { \"FieldName\": \"CheckAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Check Amount\", \"GroupName\": \"TenderSummary\" }, { \"FieldName\": \"ECheckAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"ECheck Amount\", \"GroupName\": \"TenderSummary\" }, { \"FieldName\": \"TravelersCheckAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Travelers Check Amount\", \"GroupName\": \"TenderSummary\" }, { \"FieldName\": \"GiftCardAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"GiftCard Amount\", \"GroupName\": \"TenderSummary\" }, { \"FieldName\": \"PayPalAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"PayPal Amount\", \"GroupName\": \"TenderSummary\" }, { \"FieldName\": \"StoreCreditAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"StoreCredit Amount\", \"GroupName\": \"TenderSummary\" }, { \"FieldName\": \"RefundCheckAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"RefundCheck Amount\", \"GroupName\": \"TenderSummary\" }, { \"FieldName\": \"OtherTenderAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Other Tender Amount\", \"GroupName\": \"TenderSummary\" }, { \"FieldName\": \"NetAmount\", \"FieldType\": \"Output\", \"FieldDataType\": { \"FieldDataTypeId\": \"BigDecimal\" }, \"DisplayName\": \"Net Amount\", \"GroupName\": \"TenderSummary\" } ], \"ReportUniqueFields\": [ { \"FieldName\": \"OrganizationId\" }, { \"FieldName\": \"LocationId\" }, { \"FieldName\": \"BusinessDate\" } ], \"ReportSeqUniqueFields\": [ { \"FieldName\": \"OrganizationId\" }, { \"FieldName\": \"LocationId\" } ], \"ReportDocTypeConfig\": [ { \"DocType\": { \"DocTypeId\": \"pdf\" } } ] } ] } Field definitions The fields are calculated, accumulated, and stored in the elastic search. Below is the list of fields currently available today.  Implementation group will not have the ability to change the logic for the underlying Wiretap fundamental base queries. ConfirmedOrderStats POS Metrics - ConfirmedOrderStats Metric Name Metric Description What query condition will derive this field TotalOrderCount Total Order Count for the selected selling location. Count of (Order.IsConfirmed = true AND Order.IsPostVoided = false AND Order.isCancelled = false) MerchTotalOrderCount Merchandise Total Order Count for the selected selling location. Count of (Order.IsConfirmed = true AND Order.IsPostVoided = false AND Order.isCancelled = false AND ( Order.MerchSaleLineCount > 0 OR Order.MerchReturnLineCount >0 )) OrderCountWithActiveCustomer Total Order Count for the selected selling location where there was a customer activated. Count of (Order.IsConfirmed = true AND Order.IsPostVoided = false AND Order.isCancelled = false AND Order.CustomerId.lenght > 0) SaleOrderCount Sale Order Count for the selected selling location. Count of (Order.IsConfirmed = true AND Order.IsPostVoided = false AND Order.isCancelled = false AND Order.MerchSaleLineCount > 0 AND Order.MerchReturnLineCount =0) ReturnOrderCount Return Order Count for the selected selling location. Count of (Order.IsConfirmed = true AND Order.IsPostVoided = false AND Order.isCancelled = false AND Order.MerchSaleLineCount = 0 AND Order.MerchReturnLineCount > 0) ExchangeOrderCount Exchange Order Count for the selected selling location. Count of (Order.IsConfirmed = true AND Order.IsPostVoided = false AND Order.isCancelled = false AND Order.MerchSaleLineCount > 0 AND Order.MerchReturnLineCount > 0) NbrOfPostVoid Number Of Post Void transactions done in the selected selling location. Count of (Order.IsConfirmed = true AND Order.IsPostVoided = true ) PostVoidAmount Total Amount for the all the Post Void Transactions for the selected selling location. Sum of ( Order.CancelledOrderSubTotal + Order.CancelledTotalDiscounts ) where ( Order.IsConfirmed = true AND Order.IsPostVoided = true ) NbrOfVoidTransaction Number Of Void transactions done in the selected selling location. Count of ( Order.IsPostVoided = false AND IsCancelled = true AND ( Order.CancelReasonId = null OR CancelReasonId != ‘Suspended’ )) VoidTransactionAmount Total Amount for the all the Void Transactions for the selected selling location. Sum of ( Order.CancelledOrderSubTotal + Order.CancelledTotalDiscounts ) where ( Order.IsPostVoided = false AND IsCancelled = true ) ConfirmedOrderLineStats POS Metrics - ConfirmedOrderLineStats Metric Name Metric Description What query condition will derive this field NbrOfMerchItemsSold Number Of Merchandise Items Sold : Total number of Merchandise item sold for the selected selling location. Sum of ( OrderLine.Quantity ) where ( Order.IsConfirmed = true AND OrderLine.IsCancelled = false AND OrderLine.IsNonMerchandise = false AND OrderLine.IsReturn = false ) MerchSaleItemsSubtotal Merchandise Sale Items SubTotal : Total Amount for all the Merchandise Sales for the selected selling location. Sum of ( OrderLine.OrderLineSubTotal + OrderLine.TotalDiscountOnItem ) where ( Order.IsConfirmed = true AND OrderLine.IsCancelled = false AND OrderLine.IsNonMerchandise = false AND OrderLine.IsReturn = false ) NbrOfMerchItemsReturned Number Of Merchandise Items Returned : Total number of Merchandise item returned for the selected selling location. Sum of ( OrderLine.Quantity ) where ( Order.IsConfirmed = true AND OrderLine.IsCancelled = false AND OrderLine.IsNonMerchandise = false AND OrderLine.IsReturn = true ) MerchReturnItemsSubtotal Merchandise Return Items SubTotal : Total Amount for all the Merchandise Return for the selected selling location. Sum of ( OrderLine.OrderLineSubTotal + OrderLine.TotalDiscountOnItem ) where ( Order.IsConfirmed = true AND OrderLine.IsCancelled = false AND OrderLine.IsNonMerchandise = false AND OrderLine.IsReturn = true ) NbrOfNonMerchItemsSold Number Of NonMerchandise Items Sold : Total number of NonMerchandise item sold for the selected selling location. Sum of ( OrderLine.Quantity ) where ( Order.IsConfirmed = true AND OrderLine.IsCancelled = false AND OrderLine.IsNonMerchandise = true AND OrderLine.IsReturn = false ) NonMerchSaleItemsSubtotal NonMerchandise Sale Items SubTotal : Total Amount for all the NonMerchandise Sales for the selected selling location. Sum of ( OrderLine.OrderLineSubTotal + OrderLine.TotalDiscountOnItem ) where ( Order.IsConfirmed = true AND OrderLine.IsCancelled = false AND OrderLine.IsNonMerchandise = true AND OrderLine.IsReturn = false ) NbrOfNonMerchItemsReturned Number Of NonMerchandise Items Returned : Total number of NonMerchandise item returned for the selected selling location. Sum of ( OrderLine.Quantity ) where ( Order.IsConfirmed = true AND OrderLine.IsCancelled = false AND OrderLine.IsNonMerchandise = true AND OrderLine.IsReturn = true ) NonMerchReturnItemsSubtotal NonMerchandise Return Items SubTotal : Total Amount for all the NonMerchandise Return for the selected selling location. Sum of ( OrderLine.OrderLineSubTotal + OrderLine.TotalDiscountOnItem ) where ( Order.IsConfirmed = true AND OrderLine.IsCancelled = false AND OrderLine.IsNonMerchandise = true AND OrderLine.IsReturn = true ) NbrOfPickupAtStoreItem Number Of Pickup At Store Items : Total Number Of Pickup At Store items for the selected selling location. Sum of ( OrderLine.Quantity ) where ( Order.IsConfirmed = true AND OrderLine.IsCancelled = false AND OrderLine.DeliveryMethodId = ‘PickUpAtStore’ ) PickupAtStoreItemAmount Pickup At Store Item Amount : Total Amount of Pickup At Store items for the selected selling location. Sum of ( OrderLine.OrderLineSubTotal + OrderLine.TotalDiscountOnItem ) where ( Order.IsConfirmed = true AND OrderLine.IsCancelled = false AND OrderLine.DeliveryMethodId = ‘PickUpAtStore’ ) NbrOfShipToStoreItem Number Of Ship To Store Items : Total Number Of Ship To Store items for the selected selling location. Sum of ( OrderLine.Quantity ) where ( Order.IsConfirmed = true AND OrderLine.IsCancelled = false AND OrderLine.DeliveryMethodId = ‘ShipToStore’ ) ShipToStoreItemAmount Ship To Store Item Amount : Total Amount of Ship To Store items for the selected selling location. Sum of ( OrderLine.OrderLineSubTotal + OrderLine.TotalDiscountOnItem ) where ( Order.IsConfirmed = true AND OrderLine.IsCancelled = false AND OrderLine.DeliveryMethodId = ‘ShipToStore’ ) NbrOfShipToAddressItem Number Of Ship To Address Items : Total Number Of Ship To Address items for the selected selling location. Sum of ( OrderLine.Quantity ) where ( Order.IsConfirmed = true AND OrderLine.IsCancelled = false AND OrderLine.DeliveryMethodId = ‘ShipToAddress’ ) ShipToAddressItemAmount Ship To Address Item Amount : Total Amount of Ship To Address items for the selected selling location. Sum of ( OrderLine.OrderLineSubTotal + OrderLine.TotalDiscountOnItem ) where ( Order.IsConfirmed = true AND OrderLine.IsCancelled = false AND OrderLine.DeliveryMethodId = ‘ShipToAddress’ ) TaxableSalesTotal Taxable Sales Total : Total Amount of Taxable Sale for the selected selling location. Sum of ( OrderLine.OrderLineSubTotal + OrderLine.TotalDiscountOnItem ) where ( Order.IsConfirmed = true AND OrderLine.IsCancelled = false AND OrderLine.TotalTaxes != 0 ) NonTaxableSalesTotal Non Taxable Sales Total : Total Amount of Non Taxable Sale for the selected selling location. Sum of ( OrderLine.OrderLineSubTotal + OrderLine.TotalDiscountOnItem ) where ( Order.IsConfirmed = true AND OrderLine.IsCancelled = false AND OrderLine.TotalTaxes = 0 ) NbrOfPriceOverride Number Of Price Overrides : Total Number of Price Overridden items for the selected selling location. Count of ( Order.IsConfirmed = true AND OrderLine.IsCancelled = false AND OrderLine.IsPriceOverridden = true AND OrderLine.UnitPrice != OrderLine.OriginalUnitPrice ) PriceOverrideAmount Price Override Amount : Total Amount for Price Overridden Items for the selected selling location. Sum of ( OrderLine.UnitPrice - OrderLine.OriginalUnitPrice ) where (Order.IsConfirmed = true AND OrderLine.IsCancelled = false AND OrderLine.IsPriceOverridden = true ) NbrOfLineItemVoid Number Of Line Item Void : Total Number of Void Lines for the selected selling location. Count of ( OrderLine.CancelReasonId != ‘Suspended’ AND OrderLine.IsCancelled = true ) VoidLineItemAmount Void Line Item Amount : Total Amount of the Voided Line Items for the selected selling location. Sum of ( OrderLine.CancelledOrderLineSubTotal + OrderLine.CancelledTotalDiscounts ) where ( OrderLine.CancelReasonId != ‘Suspended’ AND OrderLine.IsCancelled = true ) ConfirmedOrderLineChargeStats POS Metrics - ConfirmedOrderLineChargeStats Metric Name Metric Description What query condition will derive this field VASTotal Value Added Service Total : Total Amount of Value Added Services for selected selling location Sum of ( OrderLineChargeDetail.ChargeTotal ) where ( OrderLineChargeDetail.ChargeTypeId = ‘Value Added Services’ ) ShippingChargeAmount Shipping Charge Amount : Total Amount of Shipping Charge for selected selling location. Sum of ( OrderLineChargeDetail.ChargeTotal ) where ( OrderLineChargeDetail.ChargeTypeId = ‘Shipping’ ) ReturnFeeAmount Return Fee Amount : Total Amount of Return Fee for selected selling location. Sum of ( OrderLineChargeDetail.ChargeTotal ) where ( OrderLineChargeDetail.ChargeTypeId = ‘Return Fee’ ) NbrOfItemDiscount Number Of Item Discounts : Total number of item discounts for the selected selling location. Count of ( OrderLineChargeDetail.ChargeTotal < 0 AND OrderLineChargeDetail.IsInformational = false AND OrderLineChargeDetail.HeaderChargeDetailId = null AND OrderLineChargeDetail.RelatedChargeDetailId = null AND OrderLineChargeDetail.RelatedChargeType = null AND OrderLineChargeDetail.ChargeTypeId = ‘Discount’ ) ItemDiscountAmount Item Discount Amount : Total Amount of Item discounts for the selected selling location. Sum of ( OrderLineChargeDetail.ChargeTotal ) where ( OrderLineChargeDetail.ChargeTotal < 0 AND OrderLineChargeDetail.IsInformational = false AND OrderLineChargeDetail.HeaderChargeDetailId = null AND OrderLineChargeDetail.RelatedChargeDetailId = null AND OrderLineChargeDetail.RelatedChargeType = null AND OrderLineChargeDetail.ChargeTypeId = ‘Discount’ ) TotalDiscountAmount Total Discount Amount : Total Amount of discounts including Item Discount and Transaction Discounts for the selected selling location. Sum of ( OrderLineChargeDetail.ChargeTotal ) where ( OrderLineChargeDetail.ChargeTotal < 0 AND OrderLineChargeDetail.IsInformational = false AND OrderLineChargeDetail.RelatedChargeDetailId = null AND OrderLineChargeDetail.RelatedChargeType = null AND OrderLineChargeDetail.ChargeTypeId = ‘Discount’ ) ConfirmedOrderChargeStats POS Metrics - ConfirmedOrderChargeStats Metric Name Metric Description What query condition will derive this field NbrOfTransactionDiscount Number Of Transaction Discount : Total Number of transaction discount for the selected selling location. Count of ( Order.IsPostVoided = false AND Order.IsCancelled = false AND OrderChargeDetail.ChargeTotal < 0 AND OrderChargeDetail.IsInformational = false AND OrderChargeDetail.RelatedChargeDetailId = null AND OrderChargeDetail.RelatedChargeType = null ) TransactionDiscountAmount Transaction Discount Amount : Total Amount of transaction discount for the selected selling location. Sum of ( OrderChargeDetail.ChargeTotal ) where ( Order.IsPostVoided = false AND Order.IsCancelled = false AND OrderChargeDetail.ChargeTotal < 0 AND OrderChargeDetail.IsInformational = false AND OrderChargeDetail.RelatedChargeDetailId = null AND OrderChargeDetail.RelatedChargeType = null ) PaymentTransaction POS Metrics - PaymentTransaction Metric Name Metric Description What query condition will derive this field NbrOfGiftCardIssued Number Of Gift Card Issued : Total number of gift card issued for the selected selling location. Count of ( PaymentTransaction.TransactionType = ‘Activate’ ) GiftCardIssuedAmount Gift Card Issued Amount : Total amount of gift card issued for the selected selling location. Sum of ( PaymentTransaction.ProcessedAmount ) where ( PaymentTransaction.TransactionType = ‘Activate’ ) NbrOfGiftCardReload Number Of Gift Card Reload : Total number of gift card reload for the selected selling location. Count of ( PaymentTransaction.TransactionType = ‘Reload’ ) GiftCardReloadAmount Gift Card Reload Amount : Total amount of gift card reload for the selected selling location. Sum of ( PaymentTransaction.ProcessedAmount ) where ( PaymentTransaction.TransactionType = ‘Reload’ ) BackOfficeManagerOperations POS Metrics - BackOfficeManagerOperations Metric Name Metric Description What query condition will derive this field NbrOfNoSale Number of No Sale: Count of the No Sale transactions done. Count of (BackofficeTransaction.BackofficeTransactionOperationType='NO_SALE') NbrOfPayIn Number of Pay In: Count of the Pay In transactions done. Count of (BackofficeTransaction.BackofficeTransactionOperationType='PAY_IN') PayInAmount Pay In Amount : Sum of amount of all pay in transactions done. Sum of (BackofficeTransactionDetails.Amount) where (BackofficeTransaction.BackofficeTranOperationType='PAY_IN' AND BackofficeTransactionDetails.BackofficeTransactionDetailAmountType='Entered Amount') NbrOfPayOut Number of Pay Out: Count of Pay Out transactions done Count of(BackofficeTransaction.BackofficeTransactionOperationType='PAY_OUT’) PayOutAmount Pay Out Amount: Sum of amount of all pay out transactions done. Sum of (BackofficeTransactionDetails.Amount) where (BackofficeTransaction.BackofficeTransactionOperationType='PAY_OUT' AND BackofficeTransactionDetails.BackofficeTransactionDetailAmountType='Entered Amount') NbrOfTillLoan Number of Till Loan: Count of the till loan transactions done. Count of (BackofficeTransaction.BackofficeTransactionOperationType='TILL_LOAN') TillLoanAmount Till Loan Amount: Sum of amount of all till loan transactions done. Sum of (BackofficeTransactionDetails.Amount) where (BackofficeTransaction.BackofficeTransactionOperationType='TILL_LOAN' AND BackofficeTransactionDetails.BackofficeTransactionDetailAmountType='Entered Amount') NbrOfTillPickup Number of Till Pickup: Count of the till pickup transactions done. Count of (BackofficeTransaction.BackofficeTransactionOperationType='TILL_PICKUP’) TillPickupAmount Till Pickup Amount: Sum of amount of all till pickup transactions done. Sum of (BackofficeTransactionDetails.Amount) where (BackofficeTransaction.BackofficeTransactionOperationType='TILL_PICKUP' AND BackofficeTransactionDetails.BackofficeTransactionDetailAmountType='Entered Amount') TenderSummary POS Metrics - TenderSummary Metric Name Metric Description What query condition will derive this field CreditVisaAmount Total amount paid done by visa credit card Sum of PaymentMethod.Amount where (PaymentMethod.PaymentType = ‘Credit Card' AND PaymentMethod.CardType = 'Visa’) CreditMasterCardAmount Total amount paid done by master credit card Sum of PaymentMethod.Amount where (PaymentMethod.PaymentType = ‘Credit Card' AND PaymentMethod.CardType = 'Master’) CreditDiscoverAmount Total amount paid done by discover credit card Sum of PaymentMethod.Amount where (PaymentMethod.PaymentType = ‘Credit Card' AND PaymentMethod.CardType = 'Discover’) CreditAmexAmount Total amount paid done by amex credit card Sum of PaymentMethod.Amount where (PaymentMethod.PaymentType = ‘Credit Card' AND PaymentMethod.CardType = 'Amex’) CreditJCBAmount Total amount paid done by JCB credit card Sum of PaymentMethod.Amount where (PaymentMethod.PaymentType = ‘Credit Card' AND PaymentMethod.CardType = 'JCB’) CreditDinersClubAmount Total amount paid done by dinner club credit card Sum of PaymentMethod.Amount where (PaymentMethod.PaymentType = ‘Credit Card' AND PaymentMethod.CardType = 'DinersClub’) CreditOtherCardAmount Total amount paid done by other than above mentioned credit card Sum of PaymentMethod.Amount where (PaymentMethod.PaymentType = ‘Credit Card' AND PaymentMethod.CardType != 'Visa’, 'Master’, 'Discover’, 'Amex’, JCB’, 'DinersClub’) DebitVisaAmount Total amount paid by visa debit card Sum of PaymentMethod.Amount where (PaymentMethod.PaymentType = ‘Debit' AND PaymentMethod.CardType = 'Visa’) DebitMasterCardAmount Total amount paid by master debit card Sum of PaymentMethod.Amount where (PaymentMethod.PaymentType = ‘Debit' AND PaymentMethod.CardType = 'Master’) DebitDiscoverAmount Total amount paid by Discover debit card Sum of (PaymentMethod.Amount where PaymentMethod.PaymentType = ‘Debit' AND PaymentMethod.CardType = 'Discover’) DebitAmexAmount Total amount paid by amex debit card Sum of PaymentMethod.Amount where (PaymentMethod.PaymentType = ‘Debit' AND PaymentMethod.CardType = 'Amex’) DebitJCBAmount Total amount paid by JCB debit card Sum of PaymentMethod.Amount where (PaymentMethod.PaymentType = ‘Debit' AND PaymentMethod.CardType = 'JCB’) DebitDinersClubAmount Total amount paid by dinners club debit card Sum of PaymentMethod.Amount where (PaymentMethod.PaymentType = ‘Debit' AND PaymentMethod.CardType = 'DinersClub’) DebitOtherCardAmount Total amount paid by other than above mentioned debit card Sum of PaymentMethod.Amount where (PaymentMethod.PaymentType = ‘Debit' AND PaymentMethod.CardType != 'Visa’, 'Master’, 'Discover’, 'Amex’, JCB’, 'DinersClub’) CashAmount Total amount paid by cash Sum of PaymentMethod.Amount where (PaymentMethod.PaymentType = ‘Cash’) CheckAmount Total amount paid by check Sum of PaymentMethod.Amount where (PaymentMethod.PaymentType = ‘Check’) ECheckAmount Total amount by E-Check Sum of PaymentMethod.Amount where (PaymentMethod.PaymentType = ‘E-Check’) TravelersCheckAmount Total amount paid by traveler’s check Sum of PaymentMethod.Amount where (PaymentMethod.PaymentType = ‘Traverler’s Check’) GiftCardAmount Total amount paid by Gift card Sum of PaymentMethod.Amount where (PaymentMethod.PaymentType = ‘Gift Card’) PayPalAmount Total amount paid by paypal Sum of PaymentMethod.Amount where (PaymentMethod.PaymentType = ‘Paypal’) StoreCreditAmount Total amount paid by store credits Sum of PaymentMethod.Amount where (PaymentMethod.PaymentType = ‘Store Credit’) RefundCheckAmount Total amount paid by refund check Sum of PaymentMethod.Amount where (PaymentMethod.PaymentType = ‘Refund Check’) OtherTenderAmount Total amount paid other then Credit Card , Debit , Cash , Check , E-Check , Traveler's Check, Gift Card, PayPal, Store Credit, Refund Check Sum of PaymentMethod.Amount where (PaymentMethod.PaymentType != ' Credit Card ', ' Debit ', ' Cash ', ' Check ', ' E-Check ', ' Traveler's Check','Gift Card', 'PayPal', 'Store Credit', 'Refund Check') NetAmount Total amount paid by any payment type Sum ofPaymentMethod.Amount where (PaymentMethod.PaymentType = ' Credit Card ‘, ' Debit ', ' Cash ', ' Check ', ' E-Check ', ' Traveler's Check','Gift Card', 'PayPal', 'Store Credit', 'Refund Check', 'null’) Customer Entry Count Below is the API detail to feed the customer entry data to Manhattan System. Customer_ Entry_ CountAPI: {{url}}/posservice/api/posservice/customerVisitTracker/save http method: POST //Sample Request payload// { \"LocationId\": \"tm-demo-us:80228-1028\", // LocationId \"CaptureDateTime\": \"2023-11-06T03:15:30\",// DateTime in which the customer entry counter is captured. \"EntryCount\": 30 //Entry Count between the last captureDateTime and current captureDateTime } This API must be fed by an external service to refresh the customer entry data to the Manhattan system frequently. Manhattan Active® Omni Point Of Sale application will use this value to calculate and refresh the conversion metric shown on the Cart screen every 5 minutes."
}