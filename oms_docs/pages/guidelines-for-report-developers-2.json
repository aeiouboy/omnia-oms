{
  "id": "3501644",
  "permalink": "guidelines-for-report-developers-2",
  "title": "Guidelines for Report Developers",
  "type": "topic",
  "level": 4,
  "path": "Manhattan Active® Omni/Supply Chain Intelligence/Supply Chain Intelligence - Supply Chain Planning/SCI Limits and Guidelines/Guidelines for Report Developers",
  "raw_item": {
    "id": "3501644",
    "text": "Guidelines for Report Developers",
    "title": "Guidelines for Report Developers",
    "permalink": "guidelines-for-report-developers-2",
    "leaf": false,
    "droppable": true,
    "expanded": true,
    "closed": true,
    "visible": true,
    "editable": true,
    "type": "topic",
    "topicType": "0",
    "status": "1",
    "iconCls": "icon-topic",
    "cls": "",
    "folder_id": "t;3501643",
    "parent": "3501643",
    "created_date": "1721851466",
    "modified_date": "1722264439",
    "instructor_id": null,
    "loaded": true,
    "haschildren": false,
    "callout": "0",
    "order": "5"
  },
  "success": true,
  "content": "\r\n\r\n\r\n<div class=\"hiq-page-wrap\">\r\n<div class=\"hiq-t-wrap\">\r\n\t\t\r\n  \t  <div class=\"hiq-t \">\r\n\t\t\t\t<ul class=\"breadcrumbs\"><li><a class=\"breadcrumb-links\" hqid=\"1788908\"  href=\"/home\">Home</a></li> <li><span>&rsaquo;&rsaquo;</span><a hqid=\"3500940\" href=\"/omni\" class=\"breadcrumb-links\">Manhattan Active® Omni</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"3501638\" href=\"/supply-chain-intelligence-2\" class=\"breadcrumb-links\">Supply Chain Intelligence</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"3501640\" href=\"/supply-chain-intelligence-3\" class=\"breadcrumb-links\">Supply Chain Intelligence - Supply Chain Planning</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"3501643\" href=\"/sci-limits-and-guidelines-2\" class=\"breadcrumb-links\">SCI Limits and Guidelines</a></li><li> <span>››</span>Guidelines for Report Developers</li></ul>  \t\r\n\t\t<h2>Guidelines for Report Developers</h2>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div class=\"info\"><ul><li><a href=\"/guidelines-for-report-developers-2$filters\">Filters</a></li><li><a href=\"/guidelines-for-report-developers-2$calculations\">Calculations</a></li><li><a href=\"/guidelines-for-report-developers-2$query-items\">Query Items</a></li><li><a href=\"/guidelines-for-report-developers-2$query-optimization\">Query Optimization</a></li><li><a href=\"/guidelines-for-report-developers-2$query-subject-properties-of-report\">Query Subject Properties of Report</a></li><li><a href=\"/guidelines-for-report-developers-2$prompts\">Prompts</a></li><li><a href=\"/guidelines-for-report-developers-2$report-page-optimization\">Report/Page optimization</a></li><li><a href=\"/guidelines-for-report-developers-2$schedules-creation\">Schedules Creation</a></li><li><a href=\"/guidelines-for-report-developers-2$do-39-s-and-don-39-ts\">\r\nDo&#39;s and Don&#39;ts</a></li></ul></div>\r\n\r\n<p>Following established best practices in SCI report development helps prevent performance disruptions and hindrances to the production environment. The guidelines presented on this page cover the proper approach to report filters, calculations, query items, schedule creation, and rules for constructing reports.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>When developing reports, it is crucial to adhere to the following thumb rules to ensure optimal performance and efficiency.</p>\r\n\r\n<h3>&nbsp;</h3>\r\n\r\n<h3><a name=\"filters\" id=\"filters\"></a><strong>Filters</strong></h3>\r\n\r\n<p>Cognos filters help you retrieve specific data per your requirements. To enhance the efficiency and effectiveness of report filters, consider implementing the following best practices:</p>\r\n\r\n<ol>\r\n\t<li><strong>Filter Inclusion</strong>: Ensure that the report contains filters for every query subject. These filters limit retrieving data from the database and increase performance.</li>\r\n\t<li><strong>Query Optimization</strong>: To reduce the query runtime, use &lsquo;=&rsquo; instead of &lsquo;in&rsquo; for single value comparison in filters.&nbsp;</li>\r\n\t<li><strong>Conditional Filter Implementation</strong>: To improve the performance of the filter execution, use the CASE statement instead of IF...ELSE while&nbsp;implementing the conditional filter.&nbsp;</li>\r\n\t<li><strong>Filter Management</strong>: Delete unnecessary filters instead of disabling them.</li>\r\n\t<li><strong>Filter and Prompt Consistency</strong>: To ensure consistency between the filter and prompt, if you apply the mandatory setting&nbsp;in a prompt, the corresponding filter in the query must also have the same setting.&nbsp;</li>\r\n\t<li><strong>Date Filter Best Practices</strong>: Avoid using the CAST function in date filters.&nbsp;</li>\r\n\t<li><strong>Function Limitations in Filter</strong>: To prevent any adverse impact on report performance, abstain from using other functions in filter conditions. Incorporating functions in filters can impede the utilization of available indexes, leading to slower query processing times, even when indexes are present.</li>\r\n\t<li><strong>Source Column Selection</strong>: Always pull filter columns from the original source instead of the data items.</li>\r\n\t<li><strong>Date Filter Conversions</strong>: Whenever filtering data based on converted dates (Facility and User timezone converted dates), including the raw date filter is mandatory because the index on the converted dates is not picked up. You must add an additional day for the raw date filter to avoid data exclusion.<br />\r\n\t<br />\r\n\tFor example:\r\n\t<ol>\r\n\t\t<li><b>Facility converted date filter</b>: [Performance and Throughput].[Employee Day].[Facility - Clock In Date Time] &gt;= ?p_StartDate?<br />\r\n\t\tAND<br />\r\n\t\t[Performance and Throughput].[Employee Day].[Facility - Clock In Date Time] &lt;= ?p_EndDate?)</li>\r\n\t\t<li><b>Raw date filter</b>: [Performance and Throughput].[Employee Day].[Clock In Date Time] &gt;= _add_days(?p_StartDate?, -1)<br />\r\n\t\tand<br />\r\n\t\t[Performance and Throughput].[Employee Day].[Clock In Date Time] &lt;= _add_days(?p_EndDate?, 1)</li>\r\n\t</ol>\r\n\t</li>\r\n\t<li><strong>Static Filter Best Practices</strong>: For static filters, ensure that hardcoded values are in the same format as the used column/data item. For example, Pix Entry of MAWM has a status column as varchar even though the values are numeric, so you must add hardcoded values in quotes (Status = &lsquo;8000&rsquo;).</li>\r\n\t<li><strong>Filter Column Selection</strong>: Always use columns in the filters which have indexes in the database. For example, use STATUS_ID instead of Status Description.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div class=\"tip\"><strong>Note</strong>:<br />\r\n&nbsp;\r\n<p>Generate SQL for every query you construct after adding all the prerequisite filter definitions to the report before invoking report execution, irrespective of whether all filter conditions are pushed to a native database or not. You must push all filters into the database for high performance.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Avoid&nbsp;using Cognos built-in functions incompatible with native query processing (like&nbsp;<strong>_<em>add_</em>hours,&nbsp;<em>add</em>_minutes, _<em>Shift</em>_Timezone</strong>, and more). Ensure that Native SQLs that pass to the database have all the filters (along with the functions) added in the report. It is recommended to double-check whether the query in the report is optimized or not.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>You must ensure the Native SQL is unbroken at any given time. If the generated SQL breaks, it results in a chunk of data being processed in the database and the rest of the data processed in the Cognos Server. This scenario is expensive in processing terms.</p>\r\n<br />\r\n<meta name=\"uuid\" content=\"uuidPUXq4RLgL5JI\" /><meta charset=\"utf-8\" /></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>The following image depicts how Native SQL gets generated without the time filter when &#39;add_hours&#39; is used in the filter section. This scenario leads to performance degradation.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/qu/5191/image.png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL3F1LzUxOTEvaW1hZ2UucG5nIiwiQ29uZGl0aW9uIjp7IkRhdGVMZXNzVGhhbiI6eyJBV1M6RXBvY2hUaW1lIjoxNzU0NzUyMzE3fX19XX0_&Signature=KNi1m5bESVrG8~7nLaCVt~tVj3601Gfu~UbTj0~-a~uDlv2GT0Ghb7dXWgH~S0inNSb4IbH8~5czEZrdjMWVMJcvCQy2rZp5SrDByMNCYMA8AiKr0JtXpbuupun~J9jMr4hl11Wku6M0aSSxh4A6265gtO1IFcRY9985C5Q--WdUTvrE2U4fpf3-MIekansZt90WKZDOMDwo4DZoNE99BvdoJODyBV2Mk8134bcIc9~XRszdbrOkdEYS8h5nK9AXWrsoAs~3SYD7kOZnCuSdgXupDezGUGKPxYkR2ab73GvKq54meU15P4hwoUHJnpSxcQvIVHjA9RdcYyeCDv2NXw__&Key-Pair-Id=K2TK3EG287XSFC\" style=\"border-style: solid; border-width: 1px; width: 791px; height: 367.375px;\" /></p>\r\n\r\n<h3>&nbsp;</h3>\r\n\r\n<h3><a name=\"calculations\" id=\"calculations\"></a><strong>Calculations</strong></h3>\r\n\r\n<p>IBM Cognos provides a wide range of functions to include calculations in a report using data from one or more report items. To ensure optimal report execution and enhanced performance, consider the following best practices:</p>\r\n\r\n<ol>\r\n\t<li><strong>Expressions, In-Built Calculations,&nbsp;and Error Prevention</strong>: Use brackets for IF&hellip;ELSE&rsquo;, &lsquo;CASE, and other expressions. Not using brackets for control structures may result in:<br />\r\n\ta) parsing error<br />\r\n\tb)&nbsp;incorrect calculations of data items<br />\r\n\tc)&nbsp;poor readability of the expressions<br />\r\n\t<br />\r\n\tUse in-built calculations instead of calculating manually, especially for report aggregate functions. This improves performance of the execution of reports with maximum utilization of indexes.</li>\r\n\t<li><strong>Variables Usage</strong>: To show or hide report items, utilize Render variables instead of Style variables. Style variables execute the item on the report page before hiding it, whereas Render variables do not execute items that are not meant to be displayed on the report page. Use Boolean variables instead of string variables unless string variables are unavoidable. Boolean variables execute faster as compared to string variables.</li>\r\n\t<li><strong>Java Script Usage</strong>: Limit the usage of Java Script because it might affect the report performance.</li>\r\n\t<li>Use the function now() instead of current_date/current_timestamp.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><a name=\"query-items\" id=\"query-items\"></a><strong>Query Items</strong></h3>\r\n\r\n<p>A query item represents the smallest unit within the model suitable for inclusion in a report. Adding appropriate query items to your report ensures retrieval of records or data that address your requirements. To optimize the execution quality and ensure efficient data retrieval, consider implementing the following guidelines:</p>\r\n\r\n<ol>\r\n\t<li><strong>Maintaining Report Quality and Execution</strong>: Eliminate all unnecessary objects from the report to improve the quality of its execution and ensure that it fetches data for all data items.</li>\r\n\t<li><strong>Data Items Usage For Runtime Reduction</strong>: Use data items instead of &#39;Calculated members&#39; and &#39;Calculated measures&#39;. To reduce the runtime, you must calculate members in data items.</li>\r\n\t<li><strong>Query Name Best Practices</strong>: Avoid special characters in the query names. Usage of these characters can result in issues in generating the SQL query.</li>\r\n\t<li><strong>Optimizing Query Items Without Calculations</strong>: For the query items that do not include any calculations, set the Aggregate Function and Roll Up Aggregate to NONE. These settings improve&nbsp;the execution of the report.</li>\r\n\t<li><strong>Hardcoded or Custom SQLs Restrictions</strong>: Hardcoded or custom-based SQLs are not allowed because it leads to migration issues. Application of custom SQLs, bypassing FM logic with hardcoded schema names, is not manageable for any future migration scenario.</li>\r\n\t<li><strong>Caution with Cognos-Specific Functions</strong>: Avoid using Cognos specific functions which are not compatible with native query processing in calculations. Instead, use DB specific functions to limit the additional processing at the Cognos server-level.</li>\r\n</ol>\r\n\r\n<h3>&nbsp;</h3>\r\n\r\n<h3><a name=\"query-optimization\" id=\"query-optimization\"></a><strong>Query Optimization</strong></h3>\r\n\r\n<p>To enhance query optimization in report development, consider the following best practices:</p>\r\n\r\n<ol>\r\n\t<li><strong>Optimizing Date Range Filters:&nbsp;</strong>Always apply the date range filters to fetch the data. Use the date filter from the fact table to improve performance.</li>\r\n\t<li><strong>Container and Set Operation Optimization:&nbsp;</strong>Use the minimum or required number of containers and minimize the usage of set operations at the report level, where possible.</li>\r\n\t<li><strong>Avoidance of Local Processing:&nbsp;</strong>Always avoid local processing, as this may override the corresponding governor in the model. And query processing and execution mostly happens at the report server-level, not on the underlying database.</li>\r\n\t<li><strong>Sorting for Filter Optimization:&nbsp;</strong>Sort the input on the column most frequently used in filters to enhance the evaluation.</li>\r\n\t<li><strong>Optimal Joins and Relationships:&nbsp;</strong>Define limited joins and appropriate relationships (cardinality) between queries.</li>\r\n\t<li><strong>Inclusion of Required Filters:&nbsp;</strong>Add as many required filters as possible to the queries and include filters like facility, BU, and more wherever applicable.</li>\r\n\t<li><strong>Strategic Report-Level Joins:&nbsp;</strong>While adding report level, joins always add additional joins to ORG, FACILITY, and BU based on the context of entities.</li>\r\n\t<li><strong>Considerations for Multiple Queries and Joins:&nbsp;</strong>Avoid creating multiple queries and report-level joins as the joined query data is processed at the app server instead of the database. However, depending on the use case and generated SQL, you determine to have single or multiple queries. In some cases, having multiple queries with report-level joins is better in terms of performance than having one.</li>\r\n\t<li><strong>Base Query Filter Placement:&nbsp;</strong>Add filters to the base query rather than adding them to referenced or intermediate queries.</li>\r\n\t<li><strong>Caution with Master-Detail Relationship Feature:&nbsp;</strong>Avoid using the Master-Detail relationship feature. This feature runs the detail query for each of the master records impacting the performance.</li>\r\n\t<li><strong>Efficient Package Usage:&nbsp;</strong>Use a single package instead of multiple or&nbsp;the ALL package&nbsp;when the information is available in a single package. Use the ALL package only when there is a need for cross-package reporting.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><a name=\"query-subject-properties-of-report\" id=\"query-subject-properties-of-report\"></a><strong>Query Subject Properties of Report</strong></h3>\r\n\r\n<p>It is recommended to set the &#39;Execution Method&#39;&nbsp;property for a query subject to &#39;Concurrent&#39;. Concurrent query execution may improve performance.&nbsp;To modify the query hints option of a report, perform the following:</p>\r\n\r\n<ol>\r\n\t<li>View the report in edit mode.</li>\r\n\t<li>Select Report &gt; Queries &gt; Report Query.</li>\r\n\t<li>Set the Execution Method property to Concurrent.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/qu/6077/image.png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL3F1LzYwNzcvaW1hZ2UucG5nIiwiQ29uZGl0aW9uIjp7IkRhdGVMZXNzVGhhbiI6eyJBV1M6RXBvY2hUaW1lIjoxNzU0NzUyMzE3fX19XX0_&Signature=lbs6oo2xlv7jBOWW6r9VP761G07PntvdIAF4UHKqyy-PZPJsj3TGk8CdeL~YIeDWp8VmsqWMXLQWWu2lbg1GTdOcBNlkCpPNU2woJVUsYgsecBD34iMW1oNY3RjMJ3m16P10xTHM4~1kjzTa6erQhfiYc8GVk1jmu3oYdjGImtwsPsjK48riPkTPWnvX39ofhWprjLNi-u5uC2i1X8SY-E6242PfBcqjg53H2-jpOlhkyEsObsleAblc12F60obEe8gfPZL~8NZc5YuW-BtHMBwdljd2nnnqd3FZdWFpH8biNlRYYoXCts6d4p3n-XJD23z1tKze2G86CsRUizRoZA__&Key-Pair-Id=K2TK3EG287XSFC\" /></p>\r\n\r\n<p><img src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/qu/5370/Query%20Subject%20Prop.png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL3F1LzUzNzAvUXVlcnklMjBTdWJqZWN0JTIwUHJvcC5wbmciLCJDb25kaXRpb24iOnsiRGF0ZUxlc3NUaGFuIjp7IkFXUzpFcG9jaFRpbWUiOjE3NTQ3NTIzMTd9fX1dfQ__&Signature=clMDOwyK2rG5YINZ2oFuT9lAEHbKEDikfFclhWBxBtzY3t12gNEDLPAmWFrhM7MJxRuz7eaztCzzVSvatyP~rrFml85e6U0FW71pBqbxtUJGTq6r6VLSHK-uwPC5TbfFg9bFAV~mAR11c01tqjQ1hH5KSvt0hbj4CPBikZhBj14PO2BemNcnHyuLlx-fJy2MExw0f2VDH-10wlI2RdXSMtzfenCGatsew8QoWsPO4GjSVqVrmqwrsWSFnRsTnCjtKJKA3MAcfMlWIWMmnRefl~Kh9C-Z6b5xg5epRk5CiVyka~IgimMlw23bmqHn~iRV48qyXwG5AKmaS8hZohdGkA__&Key-Pair-Id=K2TK3EG287XSFC\" style=\"border-style: solid; border-width: 1px;\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><a name=\"prompts\" id=\"prompts\"></a><strong>Prompts</strong></h3>\r\n\r\n<p>Report prompts enable the selection of suitable criteria for data generation. These prompts may include mandatory and optional fields to align with your requirements. When designing report prompts, it is advisable to adhere to the following best practices:</p>\r\n\r\n<ol>\r\n\t<li><strong>Optimal Prompt Design</strong>: The preferred method of populating any prompts, such as ORG, FACILITY, etc., is to use dimension tables wherever applicable. Avoid using transaction tables to populate this information because a full table scan happens only to provide the dimensional information. Always use dimensions/config tables for prompts wherever applicable.</li>\r\n\t<li><strong>Passing Parameters in SQL Statements:&nbsp;</strong>Sometimes parameters are not passed to the WHERE clause in SQL statements, which severely degrades performance. Make sure that all parameters are passed in the native SQL.</li>\r\n</ol>\r\n\r\n<h3>&nbsp;</h3>\r\n\r\n<h3><a name=\"report-page-optimization\" id=\"report-page-optimization\"></a><b>Report/Page optimization</b></h3>\r\n\r\n<p>To optimize reports and page performance, consider the following guidelines, focusing on page optimization:</p>\r\n\r\n<ol>\r\n\t<li><strong>Optimal Report Performance:&nbsp;</strong>Create two reports, if needed, for summary and detail to avoid any performance issues with the design. Do not create additional joins between queries to get summary-level and detail-level data in a single report.</li>\r\n\t<li><strong>CSV Format for Large Rows:&nbsp;</strong>Run the report in CSV format if it retrieves large rows. While developing, you must not run the report or query in Excel format because it retrieves all records.</li>\r\n\t<li><strong>Removal of Unused Reports:&nbsp;</strong>Remove unwanted bad reports from the environment if not in use to avoid other users executing them because it may impact the environment.</li>\r\n\t<li><strong>Dataset Usage for Frequently Accessed Reports:&nbsp;</strong>Use datasets for reports if multiple users are using the reports frequently on the same day. Set the dataset refresh based on the need for the updated data.</li>\r\n\t<li><b>Avoid calling multiple reports within a single report</b><strong>:</strong> It is not recommended to create reports with&nbsp;multiple reports inside and those being called using&nbsp;HTML item or custom control.&nbsp;HTML items&nbsp;are not used for calling reports in bulk. Also, these HTML items may get disabled in the future.</li>\r\n\t<li><strong>Refresh Reports:</strong><i> </i>Do not refresh pages via HTML items inside the report. This leads to stability issues in the report being generated.</li>\r\n</ol>\r\n\r\n<div class=\"tip\"><strong>Note</strong>:&nbsp;&nbsp; Do not use&nbsp;the <strong>Cognos Jobs</strong> feature, where customers can add many reports to one job and make it concurrent.</div>\r\n\r\n<h3>&nbsp;</h3>\r\n\r\n<h3><a name=\"schedules-creation\" id=\"schedules-creation\"></a><strong>Schedules Creation</strong></h3>\r\n\r\n<p>Exercising due diligence while establishing report schedules is imperative to maintain the overall well being of the SCI environment. Consider the following points while scheduling your reports:</p>\r\n\r\n<ol>\r\n\t<li><strong>Conscious Scheduling for SCI Environment Health:&nbsp;</strong>To maintain the overall health of the SCI environment, avoid scheduling multiple reports concurrently. Instead,&nbsp;analyze the runtime of each report and optimize it before scheduling.</li>\r\n\t<li><strong>Avoid Concurrent Scheduling for Optimization:</strong>To avoid scheduling conflicts, review existing schedules and frequency of reports. Based on this information, schedule new reports during non-peak hours or when there are fewer scheduled reports to run.</li>\r\n\t<li><strong>Consideration of Existing Schedules and Frequency:&nbsp;</strong>For proper resource usage, it is advisable to schedule reports at appropriate frequencies, avoiding triggers that occur too frequently, such as every minute or hour. Instead,&nbsp;setting it to run once a day during non-peak periods is desirable.</li>\r\n\t<li><strong>Mandatory Prompt for Parameter Handling:&nbsp;</strong>If a report has any mandatory prompt parameter, ensure to define its values as required to execute it before you schedule your report run.</li>\r\n\t<li><strong>Staggering Schedules for Multiple Reports</strong>: When scheduling multiple reports to run on the same day, ensure spacing them out by 10 to 15 minute intervals based on each report&#39;s estimated run time.</li>\r\n\t<li><strong>Removal of Schedules for Unoptimized Reports:&nbsp;</strong>Remove the schedule for bad reports until they are optimized. Do not create multiple versions of the report for testing purposes or create a schedule for the non-prod reports to test the performance.</li>\r\n</ol>\r\n\r\n<div class=\"tip\"><strong>Note</strong>: Specific limits/restrictions are subject to data volume, complexity, overall report performance and the application.</div>\r\n\r\n<h3><a name=\"do-39-s-and-don-39-ts\" id=\"do-39-s-and-don-39-ts\"></a><br />\r\n<strong>Do&#39;s and Don&#39;ts</strong></h3>\r\n\r\n<p>The following table summarizes general guidelines for report developers to follow:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 430px;\"><strong>Do&#39;s</strong></td>\r\n\t\t\t<td style=\"width: 506px;\"><strong>Don&#39;ts</strong></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 430px;\">Always ensure to keep limited and optimized queries for reporting purposes</td>\r\n\t\t\t<td style=\"width: 506px;\">Do not create multiple queries which do a complete scan of the table for reporting.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 430px;\">Create two separate reports if needed for summary and detail to avoid any performance issues with design.</td>\r\n\t\t\t<td style=\"width: 506px;\">Do not create more joins between queries to get a summary and detailed level of data in a single report.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 430px;\">Keep only required queries and query items for reporting and remove unwanted ones.</td>\r\n\t\t\t<td style=\"width: 506px;\">Do not create many queries and query items that you do not use in any calculation for reporting.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 430px;\">Use the config/dimension table&rsquo;s column in the filter section because it contains limited data.</td>\r\n\t\t\t<td style=\"width: 506px;\">Do not use the columns of the transactional table in the filter section.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 430px;\">Define limited join and valid relationship (cardinality) between queries.</td>\r\n\t\t\t<td style=\"width: 506px;\">Do not define multiple unions to retrieve data from queries, instead use join</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 430px;\">Run the report in CSV format if it retrieves a number of rows.</td>\r\n\t\t\t<td style=\"width: 506px;\">During the report development, you must not run the report/query in the Excel format because it retrieves all records.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 430px;\">Retain only required and enabled filters and remove disabled filters within the queries.</td>\r\n\t\t\t<td style=\"width: 506px;\">Avoid creating multiple &#39;if-else&#39; statements in the filter section.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 430px;\">Create minimal and valid formatting using Render variables in a report.</td>\r\n\t\t\t<td style=\"width: 506px;\">Do not create multiple styling formats on reports, instead, use the Render variable.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 430px;\">Establish a schedule exclusively for an optimized report with a suitable frequency. For less critical reports, consider scheduling them during non-peak hours.</td>\r\n\t\t\t<td style=\"width: 506px;\">Avoid setting up a schedule with a brief frequency, such as running every 5 or 10 minutes.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 430px;\">Eliminate unnecessary bad reports from the environment if they are not in use. This precaution helps prevent unintended executions by other users, which could potentially impact the overall environment.&nbsp;</td>\r\n\t\t\t<td style=\"width: 506px;\">Do not create multiple versions of the report for testing purposes or create a schedule on the production data to test the performance.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 430px;\">Restrict the data in reports by applying appropriate filters for better performance.</td>\r\n\t\t\t<td style=\"width: 506px;\">Do not leave a mandatory prompt blank because it will fail if it is scheduled. Provide some default value.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 430px;\">Remove the schedule for bad reports until they are optimized.</td>\r\n\t\t\t<td style=\"width: 506px;\">Do not run or schedule bad/unoptimized reports on production.</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n\t  </div>\r\n </div>\r\n <div id=\"ui-page-fb-wrap\"></div>\r\n <div class=\"hiq-footer-wrap\">\r\n    \r\n                \r\n  </div>\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n",
  "content_length": 24983,
  "scraped_at": "2025-08-09T22:06:58.062422",
  "content_clean": "Home ››Manhattan Active® Omni››Supply Chain Intelligence››Supply Chain Intelligence - Supply Chain Planning››SCI Limits and Guidelines ››Guidelines for Report Developers Guidelines for Report Developers FiltersCalculationsQuery ItemsQuery OptimizationQuery Subject Properties of ReportPromptsReport/Page optimizationSchedules Creation Do's and Don'ts Following established best practices in SCI report development helps prevent performance disruptions and hindrances to the production environment. The guidelines presented on this page cover the proper approach to report filters, calculations, query items, schedule creation, and rules for constructing reports. When developing reports, it is crucial to adhere to the following thumb rules to ensure optimal performance and efficiency. Filters Cognos filters help you retrieve specific data per your requirements. To enhance the efficiency and effectiveness of report filters, consider implementing the following best practices: Filter Inclusion: Ensure that the report contains filters for every query subject. These filters limit retrieving data from the database and increase performance. Query Optimization: To reduce the query runtime, use ‘=’ instead of ‘in’ for single value comparison in filters. Conditional Filter Implementation: To improve the performance of the filter execution, use the CASE statement instead of IF...ELSE while implementing the conditional filter. Filter Management: Delete unnecessary filters instead of disabling them. Filter and Prompt Consistency: To ensure consistency between the filter and prompt, if you apply the mandatory setting in a prompt, the corresponding filter in the query must also have the same setting. Date Filter Best Practices: Avoid using the CAST function in date filters. Function Limitations in Filter: To prevent any adverse impact on report performance, abstain from using other functions in filter conditions. Incorporating functions in filters can impede the utilization of available indexes, leading to slower query processing times, even when indexes are present. Source Column Selection: Always pull filter columns from the original source instead of the data items. Date Filter Conversions: Whenever filtering data based on converted dates (Facility and User timezone converted dates), including the raw date filter is mandatory because the index on the converted dates is not picked up. You must add an additional day for the raw date filter to avoid data exclusion. For example: Facility converted date filter: [Performance and Throughput].[Employee Day].[Facility - Clock In Date Time] >= ?p_StartDate? AND [Performance and Throughput].[Employee Day].[Facility - Clock In Date Time] <= ?p_EndDate?) Raw date filter: [Performance and Throughput].[Employee Day].[Clock In Date Time] >= _add_days(?p_StartDate?, -1) and [Performance and Throughput].[Employee Day].[Clock In Date Time] <= _add_days(?p_EndDate?, 1) Static Filter Best Practices: For static filters, ensure that hardcoded values are in the same format as the used column/data item. For example, Pix Entry of MAWM has a status column as varchar even though the values are numeric, so you must add hardcoded values in quotes (Status = ‘8000’). Filter Column Selection: Always use columns in the filters which have indexes in the database. For example, use STATUS_ID instead of Status Description. Note: Generate SQL for every query you construct after adding all the prerequisite filter definitions to the report before invoking report execution, irrespective of whether all filter conditions are pushed to a native database or not. You must push all filters into the database for high performance. Avoid using Cognos built-in functions incompatible with native query processing (like _add_hours, add_minutes, _Shift_Timezone, and more). Ensure that Native SQLs that pass to the database have all the filters (along with the functions) added in the report. It is recommended to double-check whether the query in the report is optimized or not. You must ensure the Native SQL is unbroken at any given time. If the generated SQL breaks, it results in a chunk of data being processed in the database and the rest of the data processed in the Cognos Server. This scenario is expensive in processing terms. The following image depicts how Native SQL gets generated without the time filter when 'add_hours' is used in the filter section. This scenario leads to performance degradation. Calculations IBM Cognos provides a wide range of functions to include calculations in a report using data from one or more report items. To ensure optimal report execution and enhanced performance, consider the following best practices: Expressions, In-Built Calculations, and Error Prevention: Use brackets for IF…ELSE’, ‘CASE, and other expressions. Not using brackets for control structures may result in: a) parsing error b) incorrect calculations of data items c) poor readability of the expressions Use in-built calculations instead of calculating manually, especially for report aggregate functions. This improves performance of the execution of reports with maximum utilization of indexes. Variables Usage: To show or hide report items, utilize Render variables instead of Style variables. Style variables execute the item on the report page before hiding it, whereas Render variables do not execute items that are not meant to be displayed on the report page. Use Boolean variables instead of string variables unless string variables are unavoidable. Boolean variables execute faster as compared to string variables. Java Script Usage: Limit the usage of Java Script because it might affect the report performance. Use the function now() instead of current_date/current_timestamp. Query Items A query item represents the smallest unit within the model suitable for inclusion in a report. Adding appropriate query items to your report ensures retrieval of records or data that address your requirements. To optimize the execution quality and ensure efficient data retrieval, consider implementing the following guidelines: Maintaining Report Quality and Execution: Eliminate all unnecessary objects from the report to improve the quality of its execution and ensure that it fetches data for all data items. Data Items Usage For Runtime Reduction: Use data items instead of 'Calculated members' and 'Calculated measures'. To reduce the runtime, you must calculate members in data items. Query Name Best Practices: Avoid special characters in the query names. Usage of these characters can result in issues in generating the SQL query. Optimizing Query Items Without Calculations: For the query items that do not include any calculations, set the Aggregate Function and Roll Up Aggregate to NONE. These settings improve the execution of the report. Hardcoded or Custom SQLs Restrictions: Hardcoded or custom-based SQLs are not allowed because it leads to migration issues. Application of custom SQLs, bypassing FM logic with hardcoded schema names, is not manageable for any future migration scenario. Caution with Cognos-Specific Functions: Avoid using Cognos specific functions which are not compatible with native query processing in calculations. Instead, use DB specific functions to limit the additional processing at the Cognos server-level. Query Optimization To enhance query optimization in report development, consider the following best practices: Optimizing Date Range Filters: Always apply the date range filters to fetch the data. Use the date filter from the fact table to improve performance. Container and Set Operation Optimization: Use the minimum or required number of containers and minimize the usage of set operations at the report level, where possible. Avoidance of Local Processing: Always avoid local processing, as this may override the corresponding governor in the model. And query processing and execution mostly happens at the report server-level, not on the underlying database. Sorting for Filter Optimization: Sort the input on the column most frequently used in filters to enhance the evaluation. Optimal Joins and Relationships: Define limited joins and appropriate relationships (cardinality) between queries. Inclusion of Required Filters: Add as many required filters as possible to the queries and include filters like facility, BU, and more wherever applicable. Strategic Report-Level Joins: While adding report level, joins always add additional joins to ORG, FACILITY, and BU based on the context of entities. Considerations for Multiple Queries and Joins: Avoid creating multiple queries and report-level joins as the joined query data is processed at the app server instead of the database. However, depending on the use case and generated SQL, you determine to have single or multiple queries. In some cases, having multiple queries with report-level joins is better in terms of performance than having one. Base Query Filter Placement: Add filters to the base query rather than adding them to referenced or intermediate queries. Caution with Master-Detail Relationship Feature: Avoid using the Master-Detail relationship feature. This feature runs the detail query for each of the master records impacting the performance. Efficient Package Usage: Use a single package instead of multiple or the ALL package when the information is available in a single package. Use the ALL package only when there is a need for cross-package reporting. Query Subject Properties of Report It is recommended to set the 'Execution Method' property for a query subject to 'Concurrent'. Concurrent query execution may improve performance. To modify the query hints option of a report, perform the following: View the report in edit mode. Select Report > Queries > Report Query. Set the Execution Method property to Concurrent. Prompts Report prompts enable the selection of suitable criteria for data generation. These prompts may include mandatory and optional fields to align with your requirements. When designing report prompts, it is advisable to adhere to the following best practices: Optimal Prompt Design: The preferred method of populating any prompts, such as ORG, FACILITY, etc., is to use dimension tables wherever applicable. Avoid using transaction tables to populate this information because a full table scan happens only to provide the dimensional information. Always use dimensions/config tables for prompts wherever applicable. Passing Parameters in SQL Statements: Sometimes parameters are not passed to the WHERE clause in SQL statements, which severely degrades performance. Make sure that all parameters are passed in the native SQL. Report/Page optimization To optimize reports and page performance, consider the following guidelines, focusing on page optimization: Optimal Report Performance: Create two reports, if needed, for summary and detail to avoid any performance issues with the design. Do not create additional joins between queries to get summary-level and detail-level data in a single report. CSV Format for Large Rows: Run the report in CSV format if it retrieves large rows. While developing, you must not run the report or query in Excel format because it retrieves all records. Removal of Unused Reports: Remove unwanted bad reports from the environment if not in use to avoid other users executing them because it may impact the environment. Dataset Usage for Frequently Accessed Reports: Use datasets for reports if multiple users are using the reports frequently on the same day. Set the dataset refresh based on the need for the updated data. Avoid calling multiple reports within a single report: It is not recommended to create reports with multiple reports inside and those being called using HTML item or custom control. HTML items are not used for calling reports in bulk. Also, these HTML items may get disabled in the future. Refresh Reports: Do not refresh pages via HTML items inside the report. This leads to stability issues in the report being generated. Note:   Do not use the Cognos Jobs feature, where customers can add many reports to one job and make it concurrent. Schedules Creation Exercising due diligence while establishing report schedules is imperative to maintain the overall well being of the SCI environment. Consider the following points while scheduling your reports: Conscious Scheduling for SCI Environment Health: To maintain the overall health of the SCI environment, avoid scheduling multiple reports concurrently. Instead, analyze the runtime of each report and optimize it before scheduling. Avoid Concurrent Scheduling for Optimization:To avoid scheduling conflicts, review existing schedules and frequency of reports. Based on this information, schedule new reports during non-peak hours or when there are fewer scheduled reports to run. Consideration of Existing Schedules and Frequency: For proper resource usage, it is advisable to schedule reports at appropriate frequencies, avoiding triggers that occur too frequently, such as every minute or hour. Instead, setting it to run once a day during non-peak periods is desirable. Mandatory Prompt for Parameter Handling: If a report has any mandatory prompt parameter, ensure to define its values as required to execute it before you schedule your report run. Staggering Schedules for Multiple Reports: When scheduling multiple reports to run on the same day, ensure spacing them out by 10 to 15 minute intervals based on each report's estimated run time. Removal of Schedules for Unoptimized Reports: Remove the schedule for bad reports until they are optimized. Do not create multiple versions of the report for testing purposes or create a schedule for the non-prod reports to test the performance. Note: Specific limits/restrictions are subject to data volume, complexity, overall report performance and the application. Do's and Don'ts The following table summarizes general guidelines for report developers to follow: Do's Don'ts Always ensure to keep limited and optimized queries for reporting purposes Do not create multiple queries which do a complete scan of the table for reporting. Create two separate reports if needed for summary and detail to avoid any performance issues with design. Do not create more joins between queries to get a summary and detailed level of data in a single report. Keep only required queries and query items for reporting and remove unwanted ones. Do not create many queries and query items that you do not use in any calculation for reporting. Use the config/dimension table’s column in the filter section because it contains limited data. Do not use the columns of the transactional table in the filter section. Define limited join and valid relationship (cardinality) between queries. Do not define multiple unions to retrieve data from queries, instead use join Run the report in CSV format if it retrieves a number of rows. During the report development, you must not run the report/query in the Excel format because it retrieves all records. Retain only required and enabled filters and remove disabled filters within the queries. Avoid creating multiple 'if-else' statements in the filter section. Create minimal and valid formatting using Render variables in a report. Do not create multiple styling formats on reports, instead, use the Render variable. Establish a schedule exclusively for an optimized report with a suitable frequency. For less critical reports, consider scheduling them during non-peak hours. Avoid setting up a schedule with a brief frequency, such as running every 5 or 10 minutes. Eliminate unnecessary bad reports from the environment if they are not in use. This precaution helps prevent unintended executions by other users, which could potentially impact the overall environment. Do not create multiple versions of the report for testing purposes or create a schedule on the production data to test the performance. Restrict the data in reports by applying appropriate filters for better performance. Do not leave a mandatory prompt blank because it will fail if it is scheduled. Provide some default value. Remove the schedule for bad reports until they are optimized. Do not run or schedule bad/unoptimized reports on production."
}