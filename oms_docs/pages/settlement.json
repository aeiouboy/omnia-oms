{
  "success": true,
  "permalink": "settlement",
  "title": "Settlement",
  "content": "\r\n\r\n\r\n<div class=\"hiq-page-wrap\">\r\n<div class=\"hiq-t-wrap\">\r\n\t\t\r\n  \t  <div class=\"hiq-t \">\r\n\t\t\t\t<ul class=\"breadcrumbs\"><li><a class=\"breadcrumb-links\" hqid=\"1788908\"  href=\"/home\">Home</a></li> <li><span>&rsaquo;&rsaquo;</span><a hqid=\"3500940\" href=\"/omni\" class=\"breadcrumb-links\">Manhattan Active® Omni</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158393\" href=\"/order-management\" class=\"breadcrumb-links\">Order Management</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158394\" href=\"/process-configuration-guides\" class=\"breadcrumb-links\">Process & Configuration Guides</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2163646\" href=\"/order-selling-2\" class=\"breadcrumb-links\">Order Selling</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2163647\" href=\"/payment-2\" class=\"breadcrumb-links\">Payment</a></li><li> <span>››</span>Settlement</li></ul>  \t\r\n\t\t<h2>Settlement</h2>\r\n\r\n<p></p>\r\n\r\n<a href=\"/authorization\" hqid=\"2617709\">Previous</a>&nbsp;I&nbsp;<a href=\"/refunds\" hqid=\"2617711\">Next</a>\r\n<p>&nbsp;</p>\r\n\r\n<p>Settlement transactions move&nbsp;funds from the payer's account into the payee's account. For example, when a customer purchases an item from a retailer, a settlement transaction transfers money from the customer to the retailer. This section explains settlements, settlement failures, and settlement expiry.</p>\r\n\r\n<div class=\"info\"><ul><li><a href=\"/settlement$follow-on-vs-standalone-settlements\">Follow-On vs. Standalone Settlements</a></li><li><a href=\"/settlement$settlement-failure\">Settlement Failure</a></li><li><a href=\"/settlement$charge-sequence\">Charge Sequence</a></li><li><a href=\"/settlement$settlement-expiry\">Settlement Expiry</a><ul><li><a href=\"/settlement$testing-settlement-nbsp-expiry\">Testing Settlement&nbsp;Expiry</a></li></ul></li><li><a href=\"/settlement$settlement-transactions-for-advance-authorization\">Settlement transactions for Advance Authorization:</a></li><li><a href=\"/settlement$settlement-retry\">Settlement Retry</a><ul><li><a href=\"/settlement$payment-recovery-nbsp-reminder\">Payment Recovery&nbsp;Reminder</a></li><li><a href=\"/settlement$automatic-write-off-on-payment-failure\">Automatic Write-Off on Payment Failure</a></li><li><a href=\"/settlement$suspend-payment-method-on-partial-settlement-failure\">Suspend Payment Method on Partial Settlement Failure</a></li></ul></li><li><a href=\"/settlement$implementation-flavor\">Implementation Flavor</a><ul><li><a href=\"/settlement$how-to-suppress-final-capture-flag-for-paypal-orders\">How to suppress final capture flag for Paypal Orders</a></li><li><a href=\"/settlement$how-to-use-write-off-balance-due-on-the-order-in-the-following-scenarios\">How to use write-off balance due on the order in the following scenarios:</a><ul><li><a href=\"/settlement$payment-recovery-feature-is-not-configured\">Payment recovery feature is not configured</a></li><li><a href=\"/settlement$payment-method-is-not-configured-to-retry-failures\">Payment method is not configured to retry failures</a></li><li><a href=\"/settlement$settlement-retries-failed-mod-type-is-not-configured-to-send-a-payment-recovery-email\">\"Settlement Retries Failed\" mod type is not configured to send a payment recovery email</a></li></ul></li></ul></li><li><a href=\"/settlement$related-articles\">Related Articles</a></li></ul></div>\r\n\r\n<h3><a name=\"follow-on-vs-standalone-settlements\" id=\"follow-on-vs-standalone-settlements\"></a>Follow-On vs. Standalone Settlements</h3>\r\n\r\n<p>Settlements can be performed as standalone or follow-on transactions. If a settlement is performed against an existing authorization, then it is referred to as a follow-on settlement. For a follow-on settlement to be processed, the unique keys from the initial authorization must be included in the settlement transaction, so that the gateway can decrement the funds being held in the authorization.</p>\r\n\r\n<p>If a settlement is performed without an authorization, then it is a standalone settlement. Standalone settlements are performed in multiple scenarios, including when payment types do not support authorization (for example,&nbsp;cash payments) or when an in store purchase is made for which immediate settlement is required.&nbsp;</p>\r\n\r\n<p style=\"text-align: justify;\">In the scenario a&nbsp;charge back invoice is generated for a return order, a standalone settlement is performed for the payment method whose payment type is configured for generating a charge back settlement transaction. In case there are multiple payment methods existing for the configured payment type, the charge sequence is considered. Such payment transactions will be having&nbsp;isChargeback = true.&nbsp;</p>\r\n\r\n<p style=\"text-align: justify;\">A stand alone payment settlement with&nbsp;isChargeback = true will be copied to the parent order to move the funds back and will not be considered as funds available on the customer order.</p>\r\n\r\n<p>If a settlement is performed on an expired authorization (isActive flag=false and \"TransactionExpiryDate\" is in the past), then it will be considered as a standalone settlement.&nbsp;</p>\r\n\r\n<p>If&nbsp;the 2019&nbsp;Visa Mandate configuration is enabled in the Payment Parameters&nbsp;and Advance Auth Required is disabled for Visa cards, then all Visa settlement transactions processed by CyberSource will have a sequence number populated for each follow-on settlement. For instance, if a $100 authorization has three settlements processed due to split shipments, then the sequence number is populated with 1 for the first settlement transaction, 2 for the second transaction, and 99 for the final settlement transaction against this auth. The sequence number&nbsp;is not populated if&nbsp;Advance Auth Required is enabled for Visa cards.</p>\r\n\r\n<p data-renderer-start-pos=\"59\">The system compares the&nbsp;Payment Method amount to&nbsp;the sum of all settlement transactions to determine if the current transaction is for last shipment or not for populating the Settlement Sequence number.</p>\r\n\r\n<ul data-indent-level=\"1\">\r\n\t<li data-renderer-start-pos=\"59\">If&nbsp;the Payment Method amount is equal to the sum of all settlement transactions, then the system assumes it is the last shipment and the settlement sequence number is populated as 99.&nbsp;</li>\r\n\t<li data-renderer-start-pos=\"59\">If the payment Method amount is less than the sum of all settlement transactions,&nbsp;it is an intermediate shipment and the settlement sequence number is populated by incrementing the maximum settlement sequence number existing for the settlement transactions of the payment method by 1.</li>\r\n</ul>\r\n\r\n<div class=\"tip\">\r\n<p><strong>Note</strong>:</p>\r\n\r\n<ul>\r\n\t<li>Partial settlement transactions will be created in an \"Open\" status, as only the \"Calculate Execution Mode\" will be executed as part of partial scenarios. These transactions can be processed through a custom or by increasing the frequency of the job scheduler.</li>\r\n\t<li>In the case&nbsp;of standalone settlements, FollowOnId (PaymentMethod.PaymentTransaction.FollowOnId) should be set to null.\"</li>\r\n</ul>\r\n</div>\r\n\r\n<h3 id=\"PaymentProcessing-SettlementFailure\"><a name=\"settlement-failure\" id=\"settlement-failure\"></a>Settlement Failure</h3>\r\n\r\n<p>Settlement failure can occur for many reasons such as insufficient funds or a stolen card. If a customer is present, then the store associate or customer care representative can ask for an alternative&nbsp;form of payment. If a customer is not present,&nbsp;then the customer care representative&nbsp;captures new payment information from the customer. When a settlement transaction is updated with response status failure, the following updates are made:</p>\r\n\r\n<ul>\r\n\t<li>Settlement payment transaction processed amount is updated to zero</li>\r\n\t<li>Payment method amount is reduced by the failed settlement amount</li>\r\n\t<li>Payment summary requested settlement amount is reduced based on the failed amount</li>\r\n\t<li>Order payment status is updated to Awaiting Payment Info</li>\r\n</ul>\r\n\r\n<p>The Customer Service UI does not provide a way to write-off invoices, open invoices, or close invoices. Upon settlement failure, a sales posting message is published so that the retailer can perform these functions outside of Active® Omni. When invoices are closed externally, the Close Invoice API can be&nbsp;used to mark the invoice as closed.</p>\r\n\r\n<h3><a name=\"charge-sequence\" id=\"charge-sequence\"></a>Charge Sequence</h3>\r\n\r\n<p>If multiple payment methods exist and a split shipment occurs,&nbsp;then charge sequence is used to select a payment method. For example, if two Visa credit cards exist on an order, and the payment configuration charge sequence for Visa is 2, then the payment method with the minimum&nbsp;charge sequence is charged first.</p>\r\n\r\n<p>Payments are processed using the&nbsp;charge sequence in ascending order. If there is a tie, then the charge sequence populated on the payment method is used to break the tie. The payment transaction charge sequence is populated on transaction import. Configure the charge sequence for each payment type in the Payment Configuration UI.</p>\r\n\r\n<ul data-indent-level=\"1\">\r\n</ul>\r\n\r\n<h3><a name=\"settlement-expiry\" id=\"settlement-expiry\"></a>Settlement Expiry</h3>\r\n\r\n<p>The Settlement Expiration Days attribute indicates the number of days after which a settlement transaction should be considered expired. When a settlement is expired, follow-on refunds can no longer be created against it. For example, if a customer purchases an item in store on day 1, a settlement is processed. If the customer returns the item on day 120, then a payment gateway might no longer support&nbsp;follow-on refunds against the initial settlement, so the payment<em>&nbsp;</em>component creates a standalone refund instead.</p>\r\n\r\n<p>The transaction expiry date on a settlement transaction is read by the calculate service to determine whether a follow-on refund or standalone refund needs to be created. To configure this&nbsp;setting,&nbsp;navigate to the Payment Configuration UI.</p>\r\n\r\n<ul>\r\n\t<li>If settlement expiry days is null, then the transaction expiry date is not updated on settlement payment transactions. This attribute should be set to null if settlements do not expire.</li>\r\n\t<li>If settlement expiry days is not null, then the transaction expiry date is populated on successful, closed settlement payment transactions with the following logic:\r\n\t<ul>\r\n\t\t<li>If the payment transaction expiry date is null, then set transaction expiry date equal to the current date plus the number of settlement expiry days configured. For example, the settlement expiry days attribute is set to 60 days for Visa credit cards. When on January 1, 2017 at 3:00 the payment gateway returns a successful Visa credit card settlement transaction with a null transaction expiry date, then the transaction expiry date is updated to March 2, 2017 at 3:00.</li>\r\n\t\t<li>If transaction expiry date is not null, then the transaction expiry date is honored. For example, a completed order is imported with a successful settlement and a transaction expiry date of January 10, 2017 at 4:30. When this settlement is saved, the settlement expiry days configuration is not used and the imported value is honored.</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li>If a payment does not support refund, then the settlement expiration attribute is not used.</li>\r\n</ul>\r\n\r\n<p>If the existing payment method is completely utilized (all funds have been refunded), a standalone refund transaction will not get created for same payment method. In such scenarios, a new payment method should be provided to process a standalone refund.</p>\r\n\r\n<h4><a name=\"testing-settlement-nbsp-expiry\" id=\"testing-settlement-nbsp-expiry\"></a>Testing Settlement&nbsp;Expiry</h4>\r\n\r\n<p>To test settlement expiry:</p>\r\n\r\n<ol>\r\n\t<li>In the Payment Type Config UI, configure the Settlement Expiration Days</li>\r\n\t<li>To test the behavior when a settlement&nbsp;is expired, set the Settlement Expiration Days&nbsp;to -1, so that newly-created settlements will be considered expired (Note: The system considers 0 as null, so do not use 0 for this configuration for testing purposes)</li>\r\n\t<li>Create and ship an order, so that a settlement is processed successfully</li>\r\n\t<li>Return the order or add an appeasement, which should trigger a standalone refund to be created (as opposed to a follow-on refund, where the follow-on ids would be populated)</li>\r\n</ol>\r\n\r\n<h3><a name=\"settlement-transactions-for-advance-authorization\" id=\"settlement-transactions-for-advance-authorization\"></a>Settlement transactions for Advance Authorization:</h3>\r\n\r\n<p>Base&nbsp;does not support performing settlement&nbsp;transaction for a advance authorization immediately as soon as it is created. However, some third party service provider&nbsp;offer a combo call which performs authorization as well as settlement together in a single call which will require&nbsp;mapping changes in the interface.</p>\r\n\r\n<h3 lang=\"en-US\"><a name=\"settlement-retry\" id=\"settlement-retry\"></a>Settlement Retry</h3>\r\n\r\n<p>The payment auto-retry and pay by link recovery features can be enabled to reduce the need for manual payment recovery from payment failures. For example, user orders an item and pays&nbsp;with a credit card. The payment is authorized, and the order is shipped. However, when the payment attempts to settle, the payment fails due to the card being cancelled for some reason (maybe the card was stolen).&nbsp;Manhattan Active® Omni Order Management retries payment as many times (remainingAttempts) as specified in the configuration. If this fails, then a paybylink email/text outbound message is sent to get a new payment method from the customer.</p>\r\n\r\n<p><img height=\"1284\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/qu/2025/image(7).png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL3F1LzIwMjUvaW1hZ2UoNykucG5nIiwiQ29uZGl0aW9uIjp7IkRhdGVMZXNzVGhhbiI6eyJBV1M6RXBvY2hUaW1lIjoxNzU0NzUzOTY1fX19XX0_&Signature=iI9Ldl9hR~mEE~t~C1hBkDLsfMVO3uarDccMSJLkB~QflojRPoV-GL2tbRw08gzg0WAvpV71LCUu~-XX7dvSI~yvxpWFIwAgprrBczZoDzZC6USaxb7hIO3Zjsq8JU59vUCw6PvVSHTO9hgU5fyPYw~WYeZL366Mqqe8-DwCR2VMMgHIpznFC3NhW~Ph~1V5QX4wN4jAW50zKW7YD8axdQUXawo2tFQ2j-DA4JIuHChtplwElKx9SFFDEMcsyp0bUHNjJnI8~Fuu20a7tdMU2ch~d-qleAc-tqrc7iXWF~Odx-oFEFWQaIpASa6Wi~drOxzW-8fJKE~-NZBmQPX7mw__&Key-Pair-Id=K2TK3EG287XSFC\" style=\"width: 728px; height: 913px;\" width=\"1024\"></p>\r\n\r\n<p>When an open settlement retry transaction is created, the 'ReasonId' attribute is updated with the value 'AutoRetry' to differentiate between regular settlement and retry settlement transactions, which can be used in scheduler queries to filter, schedule, and&nbsp;process the transactions separately. The 'ReasonId' attribute gets updated to 'RetrySettlementSucceeded' when the retry settlement transaction is successful and to 'RetrySettlementFailed' when the retry settlement transaction is unsuccessful.</p>\r\n\r\n<p>Refer to&nbsp;<a href=\"https://omni.helpdocsonline.com/payment-configuration-2$enabling-payment-auto-retries\">Enabling Auto-Retries </a>for configuration details.&nbsp;</p>\r\n\r\n<h4 lang=\"en-US\"><a name=\"payment-recovery-nbsp-reminder\" id=\"payment-recovery-nbsp-reminder\"></a>Payment Recovery&nbsp;Reminder</h4>\r\n\r\n<p lang=\"en-US\">In the event that the system has not received a payment method from the customer within the configured number of hours, the system sends the customer a recovery reminder email or text.</p>\r\n\r\n<p>For example: The reminder threshold (PayByLink Reminder Threshold) is configured as 2 hours. If the PayByLink recovery was sent to the customer at 1:00 p.m. and the customer delays adding payment, the recovery reminder notification via email/text will be sent to the customer by 3:00 p.m.</p>\r\n\r\n<p>Refer to&nbsp;<a hqid=\"1827458\" href=\"/payment-configuration-2$enabling settlement failures - pay by link\">Settlement Failure PaybyLink</a> configurations for enabling payment recovery email and texts, and&nbsp;<a href=\"https://omni.helpdocsonline.com/payment-configuration-2$pay-by-link-reminder-threshold-configuration-nbsp\">Pay by Link and&nbsp;Refund by Link&nbsp;Reminder Threshold Configuration</a>&nbsp;for enabling payment recovery reminder emails.</p>\r\n\r\n<h4><a name=\"automatic-write-off-on-payment-failure\" id=\"automatic-write-off-on-payment-failure\"></a>Automatic Write-Off on Payment Failure</h4>\r\n\r\n<p>When this configuration is set, the open balance due on the order will be auto-written off after a configured&nbsp;number of days from the time payment recovery email was sent to the customer if the balance due has still not been collected. In order for this behavior to take effect, the payment method used with the order needs to be configured to retry failures, and the \"Settlement Retries Failed\" mod type needs to be configured to send a payment recovery email.</p>\r\n\r\n<p>Refer to <a href=\"https://omni.helpdocsonline.com/payment-configuration-2$enabling-auto-write-off\">Enabling&nbsp;Auto Write-off</a> for configuration details.</p>\r\n\r\n<h4><a name=\"suspend-payment-method-on-partial-settlement-failure\" id=\"suspend-payment-method-on-partial-settlement-failure\"></a>Suspend Payment Method on Partial Settlement Failure</h4>\r\n\r\n<p>When this configuration is set, the payment method will be suspended in case of a partial settlement failure, reversing the remaining authorized amount for a particular payment method. This assumes that if an initial attempt to settle an authorized amount is unsuccessful, subsequent attempts to settle against the same authorization will also be unsuccessful. If the payment method is suspended after&nbsp;the initial failure, any pay by link or payment recovery email sent to the customer to add additional payment is based off of the full remaining balance of the order, and not just the failed amount that&nbsp;attempted to settle. This is not required for use during the payment recovery email process, but can be used to prevent multiple payment recovery attempts to the customer for the same order.</p>\r\n\r\n<p>Refer to <a href=\"https://omni.helpdocsonline.com/payment-configuration-2$enabling-auto-write-off\">Enabling&nbsp;</a><a href=\"https://omni.helpdocsonline.com/payment-configuration-2$enabling-suspend-payment-method-on-partial-settlement-failure\">Suspend Payment Method on Partial Settlement Failure</a>&nbsp;for configuration details.</p>\r\n\r\n<h3><a name=\"implementation-flavor\" id=\"implementation-flavor\"></a>Implementation Flavor</h3>\r\n\r\n<h4><a name=\"how-to-suppress-final-capture-flag-for-paypal-orders\" id=\"how-to-suppress-final-capture-flag-for-paypal-orders\"></a>How to suppress final capture flag for Paypal Orders</h4>\r\n\r\n<p>Change the “Value” flag to false under PaymentTransAttribute for IsCompleteFollowOnRequest using the user exit Payment:PaymentGateway:UserExit:CallGateway before calling the Base PayPal API.</p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-1\" class=\"toggle-content\"><span class=\"toggle-title\">Refer to this sample</span></a></p><div id=\"tg-1\"><p><img alt=\"\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/qu/6322/paypal.JPG?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL3F1LzYzMjIvcGF5cGFsLkpQRyIsIkNvbmRpdGlvbiI6eyJEYXRlTGVzc1RoYW4iOnsiQVdTOkVwb2NoVGltZSI6MTc1NDc1Mzk2NX19fV19&Signature=G2s76nB7w8dKvlJoNWJD1bnubCifhVRgd6I7dUJyTDLGBh73j2XV-OWozcJbYwu7uXewePwOCowxx~jbZdxYB2HkC5feqSxP0SSNM5xBp8QfEuqw6bwMGjv6jd7U-XbJVI8riIPy1gTkxVeBmYsVAnQ1VvR5K-A8SHEdaECLAi4VpOiU1nGXtzifJfufs0OYXUDioa855SyKM98TH4FSQyFlE9QGz~iB~4yVuF3-I7Z3hfAkuQ4E9XkRXbzwgqI6TWAJlbWcJvxin9f5ZcWvalE-UtGZAjwIuvuCYqwLWFNB7R3iK8-aOTIEso5zkqZrgD6Yb~wORMtIMILrkEuVww__&Key-Pair-Id=K2TK3EG287XSFC\" style=\"border-style: solid; width: 419px; height: 411px;\" /></p>\r\n</div></div></p>\r\n\r\n<h4><a name=\"how-to-use-write-off-balance-due-on-the-order-in-the-following-scenarios\" id=\"how-to-use-write-off-balance-due-on-the-order-in-the-following-scenarios\"></a>How to use write-off balance due on the order in the following scenarios:</h4>\r\n\r\n<ul>\r\n\t<li>\r\n\t<h5><a name=\"payment-recovery-feature-is-not-configured\" id=\"payment-recovery-feature-is-not-configured\"></a>Payment recovery feature is not configured</h5>\r\n\t</li>\r\n\t<li>\r\n\t<h5><a name=\"payment-method-is-not-configured-to-retry-failures\" id=\"payment-method-is-not-configured-to-retry-failures\"></a>Payment method is not configured to retry failures</h5>\r\n\t</li>\r\n\t<li>\r\n\t<h5><a name=\"settlement-retries-failed-mod-type-is-not-configured-to-send-a-payment-recovery-email\" id=\"settlement-retries-failed-mod-type-is-not-configured-to-send-a-payment-recovery-email\"></a>\"Settlement Retries Failed\" mod type is not configured to send a payment recovery email</h5>\r\n\t</li>\r\n</ul>\r\n\r\n<p>A custom agent can be used to identify such orders that require auto-write off using custom logic and the order.orderAdditional.autoWriteOffDate attribute can be populated with a date on which the system will automatically write off any balance due on such orders.</p>\r\n\r\n<h3><a name=\"related-articles\" id=\"related-articles\"></a>Related Articles</h3>\r\n\r\n<div class=\"info\"><ul class=\"related-articles\"><li><a href=\"/payment-types\" hqid=\"2617707\">Payment Types</a></li><li><a href=\"/payment-gateway-integration\" hqid=\"2617714\">Payment Gateway Integration</a></li><li><a href=\"/payment-fraud\" hqid=\"2617716\">Fraud</a></li><li><a href=\"/authorization\" hqid=\"2617709\">Authorization</a></li><li><a href=\"/how-payment-processing-works\" hqid=\"2617708\">How Payment Processing Works</a></li><li><a href=\"/payment-troubleshooting\" hqid=\"2617718\">Testing & Troubleshooting Payment</a></li><li><a href=\"/payment-schedulers\" hqid=\"2617715\">Payment Schedulers & Batch Processing</a></li><li><a href=\"/other-transaction-types\" hqid=\"2617712\">Other Transaction Types</a></li><li><a href=\"/paymentoverview\" hqid=\"2688302\">Payment Overview</a></li><li><a href=\"/payment-rest-apis-and-user-exits\" hqid=\"2617717\">Rest APIs and User Exits</a></li><li><a href=\"/paymentfailures\" hqid=\"2660553\">Payment Failures</a></li><li><a href=\"/payment-health-dashboard\" hqid=\"3127204\">Payment Health Dashboard</a></li><li><a href=\"/einvoice\" hqid=\"3061519\">eInvoice </a></li><li><a href=\"/refunds\" hqid=\"2617711\">Refunds</a></li><li><a href=\"/capturing-payment\" hqid=\"2617706\">Capturing Payment</a></li><li><a href=\"/invoicing-sales-posting\" hqid=\"2617713\">Invoicing and Sales Posting</a></li></ul></div>\r\n\r\n\t  </div>\r\n </div>\r\n <div id=\"ui-page-fb-wrap\"></div>\r\n <div class=\"hiq-footer-wrap\">\r\n    \r\n                \r\n  </div>\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n",
  "content_length": 22750,
  "scraped_at": "2025-08-09T22:34:25.664887"
}