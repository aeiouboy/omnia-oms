{
  "id": "2617709",
  "permalink": "authorization",
  "title": "Authorization",
  "type": "topic",
  "level": 5,
  "path": "Manhattan Active® Omni/Order Management/Process & Configuration Guides/Order Selling/Payment/Authorization",
  "raw_item": {
    "id": "2617709",
    "text": "Authorization",
    "title": "Authorization",
    "permalink": "authorization",
    "leaf": false,
    "droppable": true,
    "expanded": true,
    "closed": true,
    "visible": true,
    "editable": true,
    "type": "topic",
    "topicType": "0",
    "status": "1",
    "iconCls": "icon-topic",
    "cls": "",
    "folder_id": "129592",
    "parent": "f;129592",
    "created_date": "1597861006",
    "modified_date": "1751618062",
    "instructor_id": null,
    "loaded": true,
    "haschildren": false,
    "callout": "0",
    "order": "5"
  },
  "success": true,
  "content": "\r\n\r\n\r\n<div class=\"hiq-page-wrap\">\r\n<div class=\"hiq-t-wrap\">\r\n\t\t\r\n  \t  <div class=\"hiq-t \">\r\n\t\t\t\t<ul class=\"breadcrumbs\"><li><a class=\"breadcrumb-links\" hqid=\"1788908\"  href=\"/home\">Home</a></li> <li><span>&rsaquo;&rsaquo;</span><a hqid=\"3500940\" href=\"/omni\" class=\"breadcrumb-links\">Manhattan Active® Omni</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158393\" href=\"/order-management\" class=\"breadcrumb-links\">Order Management</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158394\" href=\"/process-configuration-guides\" class=\"breadcrumb-links\">Process & Configuration Guides</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2163646\" href=\"/order-selling-2\" class=\"breadcrumb-links\">Order Selling</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2163647\" href=\"/payment-2\" class=\"breadcrumb-links\">Payment</a></li><li> <span>››</span>Authorization</li></ul>  \t\r\n\t\t<h2>Authorization</h2>\r\n\r\n<p></p>\r\n\r\n<a href=\"/how-payment-processing-works\" hqid=\"2617708\">Previous</a>&nbsp;I&nbsp;<a href=\"/settlement\" hqid=\"2617710\">Next</a>\r\n<p>&nbsp;</p>\r\n\r\n<p>This section explains how authorization, authorization expiry, and authorization reversal transactions work.&nbsp;Authorization transactions reserve&nbsp;funds in the customer's account to be used in a future payment. For example, an authorization is captured when an e-commerce order is placed, and that authorization insures the retailer can get money from the customer when the items are later shipped.&nbsp;The funds are held until one of three things occurs: funds are moved using a settlement transaction, the authorization expires, or the authorization is reversed.</p>\r\n\r\n<div class=\"info\"><ul><li><a href=\"/authorization$enabling-authorization-for-a-payment-type\">Enabling Authorization for a Payment Type</a></li><li><a href=\"/authorization$authorization-reversal\">Authorization Reversal</a><ul><li><a href=\"/authorization$authorization-reversal-vs-refund\">Authorization Reversal vs. Refund</a></li><li><a href=\"/authorization$authorization-reversal-failures\">Authorization Reversal Failures</a></li><li><a href=\"/authorization$authorization-reversals-for-partial-shipments\">Authorization Reversals for Partial Shipments</a></li></ul></li><li><a href=\"/authorization$authorization-expiry-re-authorization\">Authorization Expiry & Re-Authorization</a><ul><li><a href=\"/authorization$authorization-expiry-configuration-and-nbsp-mappings\">Authorization Expiry Configuration and&nbsp;Mappings</a></li><li><a href=\"/authorization$re-authorization-scheduler\">Re-Authorization Scheduler</a></li></ul></li><li><a href=\"/authorization$authorization-failure\">Authorization Failure</a></li><li><a href=\"/authorization$authorization-retry\">Authorization Retry</a><ul><li><a href=\"/authorization$payment-recovery-nbsp-reminder\">Payment Recovery&nbsp;Reminder</a></li><li><a href=\"/authorization$configurations\">Configurations</a></li></ul></li><li><a href=\"/authorization$advance-authorization\">Advance Authorization</a></li><li><a href=\"/authorization$authorization-on-release-for-pre-orders\">Authorization On Release For Pre-Orders</a><ul><li><a href=\"/authorization$authorize-on-capture\">Authorize On Capture</a></li><li><a href=\"/authorization$authorize-on-release\">Authorize On Release</a></li><li><a href=\"/authorization$payment-hints-tracking\">Payment Hints Tracking</a></li></ul></li><li><a href=\"/authorization$charge-sequence\">Charge Sequence</a></li><li><a href=\"/authorization$implementation-flavor\">Implementation Flavor</a><ul><li><a href=\"/authorization$how-to-re-auth-when-an-item-is-ready-for-release-nbsp-if-the-base-reauthorization-job-is-not-enabled\">How to re-auth when an item is ready for release&nbsp;if the base reauthorization job is not enabled</a></li><li><a href=\"/authorization$how-to-reauthorize-transactions-expiring-at-a-future-date\">How to reauthorize transactions expiring at a future date</a></li><li><a href=\"/authorization$why-is-the-reauthorization-for-the-order-failing\">Why is the reauthorization for the order failing?</a></li></ul></li><li><a href=\"/authorization$related-articles\">Related Articles</a></li></ul></div>\r\n\r\n<h3><a name=\"enabling-authorization-for-a-payment-type\" id=\"enabling-authorization-for-a-payment-type\"></a>Enabling Authorization for a Payment Type</h3>\r\n\r\n<p>Authorizations are not required for all payment types. Credit cards require authorization, but payment types like cash and debit do not require authorization. The payment configuration&nbsp;AuthorizationRequired&nbsp;attribute is used to indicate whether a payment type supports/requires authorization.&nbsp;This attribute is used by the calculate service to determine what type of transaction to create for a payment method. To configure this&nbsp;setting,&nbsp;navigate to the <a hqid=\"1827458\" href=\"/payment-configuration-2$payment_type_UI\">Payment Type Config&nbsp;UI</a>.</p>\r\n\r\n<ul>\r\n\t<li>If true, then the calculate service creates an authorization transaction when the payment summary indicates that an authorization is required. For example, a customer places a $36 order for a ship to home item and pays using a credit card. In this scenario, the payment summary book amount is $36, so the calculate service creates an open authorization transaction. If true and the payment summary indicates that a settlement is required, then the calculate service creates a settlement transaction. For example, a customer purchases a $36 item in store and pays using a credit card. In this scenario, the payment summary debit amount is $36, so the calculate service creates an open settlement transaction.</li>\r\n\t<li>If false, then the calculate service creates a settlement transaction each time the payment summary indicates that either an authorization or a settlement is required. For example, a customer places a $36 order for a ship to home item and pays using a debit card. In this scenario, the payment summary book amount is $36, however the calculate service creates an open settlement instead of an authorization, since debit does not require authorization.</li>\r\n\t<li>If a payment type is pre-paid, then the authorization required attribute is not used.</li>\r\n</ul>\r\n\r\n<h3><a name=\"authorization-reversal\" id=\"authorization-reversal\"></a>Authorization Reversal</h3>\r\n\r\n<p>Authorization reversal transactions release the funds being held by an authorization. For example, an authorization is captured when an e-commerce order is placed, but the customer cancels the order. To remove the hold on the customer's account, an authorization reversal is processed against the original authorization.</p>\r\n\r\n<p>Processing of authorization reversals must be done in a custom component.&nbsp;Authorization reversal transactions are created to reduce the authorized amount locally in the payment component,&nbsp;but no integration with third party payment gateways exists to process authorization reversals. For example, consider&nbsp;a $40 order with a $40 authorization that has a discount applied which reduces the order total to $30. An authorization reversal transaction is created for $10, however this transaction is not sent to the payment gateway. The customer's account still has a $40 authorization until the authorization expires. If the authorization expires, then the payment component&nbsp;re-authorizes for only $30.</p>\r\n\r\n<p>Authorization reversals are follow-on transactions performed against an existing authorization. The original amount on the payment method can be used for visibility of the amount originally authorized. When an authorization reversal is closed internally, the transaction reason code is populated with one of the following values</p>\r\n\r\n<ul>\r\n\t<li>Internal closure; Advance authorization created - Indicates that only one settlement is supported against this authorization, and a new authorization has been created for subsequent settlements (for example, in case of partial shipments).</li>\r\n\t<li>Internal closure; Required auth amount decreased - Indicates that the order total has decreased.</li>\r\n\t<li>Internal closure; PayPal honor period expired - Indicates that a PayPal settlement failed, and a new authorization is created to re-attempt settlement.</li>\r\n</ul>\r\n\r\n<p>To process authorization reversals in the payment gateway, custom hooks provide the ability to create the transaction in open status and then execute in a third-party gateway.</p>\r\n\r\n<div class=\"tip\">Note: Partial authorization reversal transactions will be created in an \"Open\" status, as only the \"Calculate Execution Mode\" will be executed as part of partial scenarios. These transactions can be processed through a custom or by increasing the frequency of the job scheduler.</div>\r\n\r\n<h4><a name=\"authorization-reversal-vs-refund\" id=\"authorization-reversal-vs-refund\"></a>Authorization Reversal vs. Refund</h4>\r\n\r\n<p>In some scenarios, an order may have some funds settled and some funds authorized when a reduction in the order total occurs. The 'Refund or Reverse Authorization' attribute indicates whether to refund funds which are already settled or reverse remaining authorized amounts, when the amount due decreases for an order. See<a hqid=\"2617711\" href=\"/refunds$Refund or Reverse Auth\"> this section</a> for more information.</p>\r\n\r\n<h4><a name=\"authorization-reversal-failures\" id=\"authorization-reversal-failures\"></a>Authorization Reversal Failures</h4>\r\n\r\n<p>For any custom execution of authorization reversals, the auth reversal must always be marked as successful regardless of the actual response received by the gateway. Authorization reversal failures are not supported. To capture the actual transaction response, an extended field can be added and used for reporting outside of Active®&nbsp;Omni.</p>\r\n\r\n<h4><a name=\"authorization-reversals-for-partial-shipments\" id=\"authorization-reversals-for-partial-shipments\"></a>Authorization Reversals for Partial Shipments</h4>\r\n\r\n<p>Assume there is a&nbsp;$100 order. $60 worth of items shipped.</p>\r\n\r\n<ul>\r\n\t<li>If the gateway supports multiple settlements per authorization, no&nbsp;new authorization or authorization reversal is created.&nbsp;$60 is settled against the authorization, then later $40 is settled against the same authorization.</li>\r\n\t<li>If the gateway supports only one settlement per authorization, the system creates a&nbsp;$60 settlement and a $40 authorization reversal. The settlement is sent to the gateway and the auth reversal is closed internally (or sent to the gateway, if third party reversals have been implemented). When the settlement response is received, an advance authorization is created for the remaining $40. This authorization remains&nbsp;open until the next re-authorization scheduler service runs.</li>\r\n</ul>\r\n\r\n<h3><a name=\"authorization-expiry-re-authorization\" id=\"authorization-expiry-re-authorization\"></a>Authorization Expiry & Re-Authorization</h3>\r\n\r\n<p>Authorization transactions do not reserve funds&nbsp;indefinitely; Funds are automatically released after a number of days (7 days, 14 days, and so on. - depends on the card type). When authorizations expire, it is required to re-authorize, or secure a new authorization for the value of the expired authorization. Re-authorization is required so that funds are reserved in the customer's account for the value of the goods which the retailer plans to ship.</p>\r\n\r\n<p>For example, if a customer places an order for a special, custom-made dress which costs $350, the retailer authorizes the customer's credit card for $350. Ten days later, that authorization is expired, and the $350 hold is removed from the customer's account. If the retailer takes 3 weeks to ship the items to the customer, then the retailer has no guarantee that the customer has the $350 to pay for the dress unless a re-authorization is done. In order to secure the $350 and ensure the customer can pay when the dress gets shipped, a new authorization is created for $350 on day ten.&nbsp;</p>\r\n\r\n<p>Re-authorization can also be done for a partial authorization amount if the order is already partially settled. For example, if a customer places and order for 2 items of $25 and $75 respectively, the first item ships and settles&nbsp;before authorization expiry so the order now contains a $25 settlement and $75 remaining on the original authorization. If that authorization expires and get re-authorized, it will get re-authorized only for the remaining amount meaning $75.&nbsp;</p>\r\n\r\n<div class=\"tip\"><strong>Note</strong>: Job schedule should have&nbsp;<strong data-renderer-mark=\"true\">ReAuthPartialSettlement</strong> as <strong data-renderer-mark=\"true\">true</strong></div>\r\n\r\n<h4><a name=\"authorization-expiry-configuration-and-nbsp-mappings\" id=\"authorization-expiry-configuration-and-nbsp-mappings\"></a>Authorization Expiry Configuration and&nbsp;Mappings</h4>\r\n\r\n<h5>Authorization Expiry Time Period</h5>\r\n\r\n<p>Authorization expiry periods are configured in the Payment Configuration&nbsp;UI. Different payment configurations can be used for each combination of payment type, card type, and order type. This provides the flexibility for credit cards such as Visa and MasterCard to expire at different intervals. If authorization expiry days is null for a configuration, then the authorization does not expire. For example, e-check payments are authorized but do not require any form of re-authorization, so the e-check payment configuration has a null value for the authorization expiration days setting.</p>\r\n\r\n<p>The Auth&nbsp;Expiration Days attribute indicates the number of days after which an authorization transaction should be considered expired. When an authorization is expired, the calculate service creates an open authorization against the payment method for an amount equal to the open authorization amount.&nbsp;</p>\r\n\r\n<ul>\r\n\t<li>If authorization expiry days is null, then the transaction expiry date is not updated on authorization payment transactions. This attribute should be set to null if authorizations do not expire.</li>\r\n\t<li>If authorization expiry days is not null, then the transaction expiry date is populated on successful, closed authorization payment transactions with the following logic:\r\n\t<ul>\r\n\t\t<li>If the payment transaction expiry date is null, then set the transaction expiry date equal to the current date plus the number of authorization expiry days configured. For example, the authorization expiry days attribute is set to 7 days for Visa credit cards. When, on January 1, 2017 at 3:00 the payment gateway returns a successful Visa credit card authorization transaction with a null transaction expiry date, then the transaction expiry date is updated to January 8, 2017 at 3:00.</li>\r\n\t\t<li>If the transaction expiry date is not null, then the transaction expiry date is honored. For example, an online order is imported with a successful authorization and a transaction expiry date of January 10, 2017 at 4:30. When this authorization is saved, the authorization expiry days configuration is not used and the imported value is honored.</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li>If a payment does not require authorization, then the authorization expiration attribute is not used.</li>\r\n</ul>\r\n\r\n<h5>Transaction Expiry Date</h5>\r\n\r\n<p>Each payment transaction has a Transaction Expiry Date which tells the system how long the transaction can be used.&nbsp;For authorization transactions, the transaction expiry date is used to determine when to re-authorize.</p>\r\n\r\n<p>The payment gateway can optionally include a transaction expiry date on the response sent to the payment component. Often, payment gateways do not include any expiration date in the response, in which case the payment component&nbsp;can populate this value. If the transaction expiry date is null on the gateway response and an authorization expiry period is configured for a given payment, then the payment component&nbsp;populates the transaction expiry date. Transaction expiry date is calculated as system date plus the configured authorization expiration days.&nbsp;</p>\r\n\r\n<p>The expiry date is only populated during the payment gateway integration flow. If a payment transaction is imported from e-commerce, then the transaction expiry date needs to be populated by an external system.</p>\r\n\r\n<h5>Testing Authorization Expiry</h5>\r\n\r\n<p>To test authorization expiry:</p>\r\n\r\n<ol>\r\n\t<li>In the Payment Type Config UI, configure the Auth Expiration Days</li>\r\n\t<li>To test the behavior when an authorization&nbsp;is expired, set the Auth Expiration Days&nbsp;to -1, so that newly-created authorizations&nbsp;will be considered expired (Note: The system considers 0 as null, so do not use 0 for this configuration for testing purposes)</li>\r\n\t<li>Create an order with a new authorization</li>\r\n\t<li>Run the re-authorization scheduler, which should create a new authorization</li>\r\n</ol>\r\n\r\n<h4><a name=\"re-authorization-scheduler\" id=\"re-authorization-scheduler\"></a>Re-Authorization Scheduler</h4>\r\n\r\n<p>Re-authorization is initiated automatically by the re-authorization scheduler, which picks up authorization transactions which are expired and creates a new authorization transaction to secure the funds. This scheduler frequency is configurable, but it is recommended to run re-authorization once daily.&nbsp;Details of the re-authorization scheduler are in the following diagram.</p>\r\n\r\n<p><img src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/Re-Authorization%20Agent.png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL1JlLUF1dGhvcml6YXRpb24lMjBBZ2VudC5wbmciLCJDb25kaXRpb24iOnsiRGF0ZUxlc3NUaGFuIjp7IkFXUzpFcG9jaFRpbWUiOjE3NTQ3NTE4MjF9fX1dfQ__&Signature=C-aTwPly14J09SPCfT7rzdv998njm931HvtC7Sa-nZm347Gpg81fF49r7j2-Aix-uxyGppYs9r30bSPe4CMYQlT1k9dQgqYUkZxt6Uz8vVH-3EUHNG83oAEHpZzmcdh9o8PvfNfLBUBvDXSijroOqLvBkv3Xz0Ty~NPxt82jkp1uWl4u5mh44Tz8jj5FxqjtBD13-8AgN3aD5tnRkrAMm1YQcTyCCPTx0EvXAWnGoLEen2IoPncQoX3ayVChrmNsn5qTbj2OdpMQEj-m8D9ZX7th2pcT19gUKomHVYUuObgwtDM9wM4EqkK6KgqIeZlyZMcPM65XWNACrtseUwAT9w__&Key-Pair-Id=K2TK3EG287XSFC\" style=\"width: 379px; height: 651.656px;\"></p>\r\n\r\n<h5>Sample Job Schedule Configuration</h5>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-1\" class=\"toggle-content\"><span class=\"toggle-title\">reAuthorizationJob Schedule</span></a></p><div id=\"tg-1\"><div class=\"computer_code\">POST&nbsp;{{url}}/payment/api/batch/jobSchedule/save<br />\n<br />\n{<br />\n&nbsp; &nbsp; &quot;IsDisabled&quot;: false,<br />\n&nbsp; &nbsp; &quot;IsAdHoc&quot;: false,<br />\n&nbsp; &nbsp; &quot;TriggerKey&quot;: &quot;ReAuthorizationJobTrigger-1&quot;,<br />\n&nbsp; &nbsp; &quot;TimeZone&quot;: &quot;GMT&quot;,<br />\n&nbsp; &nbsp; &quot;JobTypeId&quot;: &quot;reAuthorizationJob&quot;,<br />\n&nbsp; &nbsp; &quot;CronExpression&quot;: &quot;0 0 22 1/1 * ? &quot;,<br />\n&nbsp; &nbsp; &quot;JobParameters&quot;: [<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;InputValue&quot;: &quot;select pt.parentPaymentMethod.parentPaymentHeader.pk, pt.pk from PaymentTransactionEntity pt where pt.transactionType.paymentTransactionTypeId = &#39;Authorization&#39; and pt.status.paymentTransactionStatusId = &#39;Closed&#39; and pt.isActive = true and pt.transactionExpiryDate &lt; CURRENT_TIMESTAMP and pt.processedAmount &gt; 0 and (pt.followOnProcessedAmount is null or pt.processedAmount &gt; pt.followOnProcessedAmount)&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;InputKey&quot;: &quot;QueryString&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;InputValue&quot;: &quot;2&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;InputKey&quot;: &quot;ChunkSize&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;InputValue&quot;: &quot;true&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;InputKey&quot;: &quot;ReAuthPartialSettlement&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; }<br />\n&nbsp; &nbsp; ],<br />\n&nbsp; &nbsp; &quot;JobScheduleId&quot;: &quot;reAuthorizationJob-1&quot;<br />\n}</div>\n</div></div></p>\r\n\r\n<div class=\"tip\">Note: 'isActive' is a read-only attribute which is true by default..&nbsp;This field is updated to false when an authorization expires.Payment transactions with isActive set to false are ignored for all payment processes, including follow-on settlements, payment summary updates, payment method updates, and payment status.</div>\r\n\r\n<h3><a name=\"authorization-failure\" id=\"authorization-failure\"></a>Authorization Failure</h3>\r\n\r\n<p>Authorization failure can occur for many reasons, such as insufficient funds or a stolen card. If a customer is present (for example,&nbsp;at the POS), then the store associate or customer care representative can ask for an alternative&nbsp;form of payment. If a customer is not present (for example,&nbsp;in contact center),&nbsp;then the customer care representative captures new payment information from the customer. When an authorization transaction is updated with response status as failure, the following updates are made:</p>\r\n\r\n<ul>\r\n\t<li>Authorization payment transaction processed amount is updated to zero</li>\r\n\t<li>Payment method amount is reduced by the failed authorization amount</li>\r\n\t<li>The payment summary requested authorization amount is reduced based on the failed amount</li>\r\n\t<li>Order payment status is updated to Awaiting Payment Info</li>\r\n</ul>\r\n\r\n<p>Authorization failure can happen for re-authorization transactions which are executed by the system on a scheduled basis (as authorizations expire). When this occurs, the order payment status is updated to Awaiting Payment Info. Customer service should continuously monitor for orders in Awaiting Payment Info status, so that they can call the customer to ask for an alternate form of payment.</p>\r\n\r\n<h3><a name=\"authorization-retry\" id=\"authorization-retry\"></a>Authorization Retry</h3>\r\n\r\n<p>The payment auto-retry and pay by link recovery features can be enabled to help reduce the need for manual payment recovery from payment failures.&nbsp;For example, the user orders an item and pays&nbsp;with a credit card. The payment attempts to authorize, the payment fails due to the out of balance or card is expired.&nbsp;Manhattan Active® Omni Order Management retries payment(Authorization) as many times (remainingAttempts) as specified in the configuration. If this fails, then a paybylink (payment recovery) email/text outbound message is sent to get a new payment method from the customer.</p>\r\n\r\n<p><img height=\"1172\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/qu/2025/image(6).png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL3F1LzIwMjUvaW1hZ2UoNikucG5nIiwiQ29uZGl0aW9uIjp7IkRhdGVMZXNzVGhhbiI6eyJBV1M6RXBvY2hUaW1lIjoxNzU0NzUxODIxfX19XX0_&Signature=nC8FGJ8dYQkl0slE60ylp9uXGbSKfOUL48opQAQOk-Qv~xSImKh6VlSmA-K32nGhHDX2362EkoSNPoIyDg7Br~-Bbz2hxcB2BOYb6-QnP4CsXwKZauSsGxBdMguXKp0jPBwWUBT9y-2ggpH-~IqwnlyEQSULeLcwD35UpBaQbs~-ZaINl1JQcGN-OaREugAAEHgw-EfmXDHn5Jh9NrxU-YIVFfFAAuuzK8DlSNsQPOWWQxRRg6alfXzLpfE3iTBvfpk2P-SdqIp2K~9xeLZ-yq0M7RkuZH3hOpCPMiihsq21yZGlOcsEVDX9ear8cSA5kpKzSKVHHh0c58pIztoAHQ__&Key-Pair-Id=K2TK3EG287XSFC\" style=\"width: 819px; height: 937px;\" width=\"1024\"></p>\r\n\r\n<p lang=\"en-US\">When an authorization retry transaction is created, the 'ReasonId' attribute is updated with the value 'AutoRetry' to differentiate between regular authorization and retry authorization transactions, which can be used in scheduler queries to filter, schedule,&nbsp;and process the transactions&nbsp;separately. The 'ReasonId' attribute gets updated to 'RetryAuthSucceeded' when the retry authorization transaction is successful and to 'RetryAuthFailed' when the retry authorization transaction is unsuccessful.</p>\r\n\r\n<p><strong>Note:</strong> If authorization fails during a CSR order capture while a customer is present, the customer care representative can ask for an alternative payment method. To ensure the system knows that we already have valid authorization and don't need to retry, the 'Source' attribute in the payment request should be populated with the value 'CallCenter' during CSR order capture. As a result, the system will not create an open authorization transaction and will not retry for authorization.</p>\r\n\r\n<h4 lang=\"en-US\"><a name=\"payment-recovery-nbsp-reminder\" id=\"payment-recovery-nbsp-reminder\"></a>Payment Recovery&nbsp;Reminder</h4>\r\n\r\n<p lang=\"en-US\">In the event that the system has not received a payment method from the customer within the configured number of hours, the system sends the customer a recovery reminder email or text.</p>\r\n\r\n<p>For example: The reminder threshold (PayByLink Reminder Threshold) is configured as 2 hours. If the PayByLink recovery was sent to the customer at 1:00 p.m. and the customer delays adding payment, the recovery reminder notification via email/text will be sent to the customer by 3:00 p.m.</p>\r\n\r\n<h4><a name=\"configurations\" id=\"configurations\"></a>Configurations</h4>\r\n\r\n<p>Refer to&nbsp;<a href=\"https://omni.helpdocsonline.com/payment-configuration-2$enabling-payment-auto-retries\">Enabling Auto-Retries </a>and <a href=\"https://omni.helpdocsonline.com/payment-configuration-2$enabling-authorization-failures-pay-by-link\">Authorization&nbsp;Failure PaybyLink </a>configurations for enabling Payment retry,&nbsp;Payment recovery and Recovery reminder&nbsp;email/text.&nbsp;</p>\r\n\r\n<p>Refer&nbsp;<a href=\"https://omni.helpdocsonline.com/payment-configuration-2$pay-by-link-reminder-threshold-configuration-nbsp\">here&nbsp;</a>to configure the reminder threshold value in hours</p>\r\n\r\n<h3><a name=\"advance-authorization\" id=\"advance-authorization\"></a>Advance Authorization</h3>\r\n\r\n<p>When an order is fulfilled in multiple shipments and a payment method supports only one settlement against each authorization, then for&nbsp;each shipment a settlement is processed against the authorization. After a settlement is processed, the initial authorization cannot be used for any subsequent settlements, so an advance authorization is required to hold funds for&nbsp;the value of items which have yet to ship.</p>\r\n\r\n<p>If the payment processor supports multiple settlements against a single authorization, then the&nbsp;Advance Authorization Required attribute should be set to false. This attribute is used by the calculate service each time a settlement is created against an authorization. To configure this&nbsp;setting,&nbsp;navigate to the <a hqid=\"1827458\" href=\"/payment-configuration-2$payment_type_UI\">Payment Type Config&nbsp;UI</a>.</p>\r\n\r\n<ul>\r\n\t<li>If true, then the calculate service creates a new authorization when a settlement is created against an authorization. For example, a customer places an online order for one $20 item and one $30 item, and the customer's credit card is authorized for $50. When the $20 item ships, the calculate service creates an open settlement for $20 against the authorization and an open authorization for the remaining $30. When the $30 item ships, the calculate service deletes the existing open authorization and&nbsp;creates an open settlement for $30 for standalone settlement.</li>\r\n\t<li>If false, then the calculate service does not create any new authorizations when a settlement is created against an authorization. For example, a customer places an online order for one $20 item and one $30 item, and the customer's credit card is authorized for $50. When the $20 item ships, the calculate service creates an open settlement for $20 against the authorization. When the $30 item ships, the calculate service creates an open settlement for $30 against the same authorization.</li>\r\n\t<li>If a payment does not require authorization, then the advance authorization attribute is not used. This attribute is not used for standalone settlements.</li>\r\n</ul>\r\n\r\n<h3><a name=\"authorization-on-release-for-pre-orders\" id=\"authorization-on-release-for-pre-orders\"></a>Authorization On Release For Pre-Orders</h3>\r\n\r\n<p>If using authorization on release behavior&nbsp;for a particular order type, meaning the <a href=\"https://omni.helpdocsonline.com/order-orchestration-configuration$payment-configuration\">Process Payment On Release</a>&nbsp;configuration is enabled, the release process is dependent on having a valid authorized amount. This is&nbsp;intended to be used&nbsp;for&nbsp;pre-orders, or orders containing a mix of pre-order items and non-pre-order items. The primary objective is to minimize the amount of payment transactions on orders that have a longer than usual lifecycle, such as an item&nbsp;that is not eligible to ship until 3 months after the order was captured.</p>\r\n\r\n<p>From a payment capture perspective, this flow can work in two&nbsp;ways; authorize on capture or authorize on release.</p>\r\n\r\n<h4><a name=\"authorize-on-capture\" id=\"authorize-on-capture\"></a>Authorize On Capture</h4>\r\n\r\n<p>If the order's payment&nbsp;is authorized upfront at the time of order capture, any items eligible for release from an order and inventory perspective will have an associated total and will simply be cross-checked against the authorized amount to determine if these items can be released. If authorization is done&nbsp;during order capture, re-authorization of expired authorizations will not take place for any amount greater than the amount eligible for release.&nbsp;</p>\r\n\r\n<p><strong>Consider the following example:</strong></p>\r\n\r\n<ul>\r\n\t<li>Order for&nbsp;$100, Authorization for $100, Auth Expiry = T2\r\n\t<ul>\r\n\t\t<li>OL1 - $40 - DoNotReleaseBefore = T1</li>\r\n\t\t<li>OL2 - $60 -&nbsp;DoNotReleaseBefore = T3</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li>At T1, $40 is considered eligible for release, and OL1 is allowed to release as there is $100 authorized.</li>\r\n\t<li>At T2, the authorization&nbsp;is expired and the re-authorization process takes place.\r\n\t<ul>\r\n\t\t<li>A new authorization of $40 is created, the remaining $60 is not re-authorized because it is not yet eligible for release.</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li>At T3, OL2 is considered eligible for release,&nbsp;and a new authorization for $60 is created. If the authorization is successful, OL2 is allowed to release.</li>\r\n</ul>\r\n\r\n<h4><a name=\"authorize-on-release\" id=\"authorize-on-release\"></a>Authorize On Release</h4>\r\n\r\n<div class=\"tip\"><strong>Note</strong>: This is the process for order and payment capture&nbsp;using&nbsp;Manhattan Active® Omni Contact Center</div>\r\n\r\n<p>When authorizing on release, the payment method is authorized once at the moment of the order capture but is not re-authorized until the item is ready for release. When any item is eligible for release from an order and inventory perspective, it will have an associated total used to calculate new authorization transactions when the release process is triggered.</p>\r\n\r\n<p><strong>Consider the following example:</strong></p>\r\n\r\n<ul>\r\n\t<li>Order for&nbsp;$100, Tokenized and authorized&nbsp;payment method for $100\r\n\t<ul>\r\n\t\t<li>OL1 - $40 - DoNotReleaseBefore = T1</li>\r\n\t\t<li>OL2 - $60 -&nbsp;DoNotReleaseBefore = T2</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li>At T0, the original authorization expires but is not re-authorized until the items are eligible for release.</li>\r\n\t<li>At T1, $40 is considered eligible for release. If the original authorization expires, a $40 authorization is created and sent to the payment provider. OL1 is released if the authorization is successful.</li>\r\n\t<li>At T2, $60 is considered eligible for release. If the original authorization expires, a $60 authorization is created and sent to the payment provider.&nbsp;OL2 is released if the authorization is successful.</li>\r\n</ul>\r\n\r\n<h4><a name=\"payment-hints-tracking\" id=\"payment-hints-tracking\"></a>Payment Hints Tracking</h4>\r\n\r\n<p>In order to calculate the amount that can be&nbsp;authorized or settled as part of the release process, the order is retrieved using the \"DefaultOrderTemplateForPaymentRequest\" which includes the&nbsp;\"BasePaymentHint\" object. From there, the attribute \"BookAmountAllocated\" is read to evaluate the amount that can be authorized.</p>\r\n\r\n<p>The book amount allocated is tracked across two groups:</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width: 1001px;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">Group Type</th>\r\n\t\t\t<th scope=\"col\" style=\"width: 723px;\">Description</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>NonRelease</td>\r\n\t\t\t<td style=\"width: 709px;\">\r\n\t\t\t<p>The book amount allocated in the non-release group refers to the amount associated with un-releasable units on the order. When the full amount of the order value is tracked here, no authorization transactions can be created until this amount moves to the \"ReleasableAmount\" bucket.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>ReleasableAmount</td>\r\n\t\t\t<td style=\"width: 709px;\">\r\n\t\t\t<p>The book amount allocated in the releasable amount group refers to the amount associated with the releasable or released units on the order. The calculate&nbsp;payment process cannot create authorization transactions of a greater amount than the book amount allocated in the releasable amount group.&nbsp;</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p><u><strong>Example:</strong></u></p>\r\n\r\n<ul>\r\n\t<li><strong>$50</strong> Order captured at <strong>T0</strong>\r\n\r\n\t<ul>\r\n\t\t<li>OL1 - <strong>$20</strong> - DoNotReleaseBefore = <strong>T1</strong></li>\r\n\t\t<li>OL2 - <strong>$30</strong> - DoNotReleaseBefore = <strong>T2</strong></li>\r\n\t\t<li>Non Release, Book Amount Allocated = <strong>$50</strong></li>\r\n\t\t<li>Releasable Amount, Book Amount Allocated = <strong>$0</strong></li>\r\n\t</ul>\r\n\t</li>\r\n\t<li><strong>T1</strong> - OL1 is release eligible\r\n\t<ul>\r\n\t\t<li>Non Release, Book Amount Allocated = <strong>$30</strong></li>\r\n\t\t<li>Releasable Amount, Book Amount Allocated = <strong>$20</strong></li>\r\n\t</ul>\r\n\t</li>\r\n\t<li><strong>T2</strong> - OL2 is release eliglbe\r\n\t<ul>\r\n\t\t<li>Non Release, Book Amount Allocated = <strong>$0</strong></li>\r\n\t\t<li>Releasable Amount, Book Amount Allocated = <strong>$50</strong></li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<h3><a name=\"charge-sequence\" id=\"charge-sequence\"></a>Charge Sequence</h3>\r\n\r\n<p>If multiple payment methods exist and a split shipment occurs,&nbsp;then the charge sequence is used to select a payment method. For example, if two Visa credit cards exist on an order, and the payment configuration charge sequence for Visa is 2, then the payment method with the minimum&nbsp;charge sequence is charged first.</p>\r\n\r\n<p>Payments are processed using the&nbsp;charge sequence in ascending order. If there is a tie, then the charge sequence populated on the payment method is used to break the tie. Configure the charge sequence for each payment type in the Payment Configuration UI.</p>\r\n\r\n<h3><a name=\"implementation-flavor\" id=\"implementation-flavor\"></a>Implementation Flavor</h3>\r\n\r\n<h4><a name=\"how-to-re-auth-when-an-item-is-ready-for-release-nbsp-if-the-base-reauthorization-job-is-not-enabled\" id=\"how-to-re-auth-when-an-item-is-ready-for-release-nbsp-if-the-base-reauthorization-job-is-not-enabled\"></a>How to re-auth when an item is ready for release&nbsp;if the base reauthorization job is not enabled</h4>\r\n\r\n<p>Call below reauth API in isReleasable UE and then payment header save to find out payment status. If payment status is&nbsp;&gt;= Authorized, set the isReleasable flag&nbsp;as true or else false.</p>\r\n\r\n<p data-renderer-start-pos=\"25\">POST - {{url}}/payment/api/payment/paymentHeader/orderId/{orderId}/reAuth</p>\r\n\r\n<p data-renderer-start-pos=\"100\"><code data-renderer-mark=\"true\">Note: ReAuthPartialSettlement</code>=true,&nbsp;this parameter can be configured for&nbsp;reauthorization of partially settled and expired authorizations.</p>\r\n\r\n<h4><a name=\"how-to-reauthorize-transactions-expiring-at-a-future-date\" id=\"how-to-reauthorize-transactions-expiring-at-a-future-date\"></a>How to reauthorize transactions expiring at a future date</h4>\r\n\r\n<p>Set the expiry date less than the actual expiry date/time to allow frequently running reauthorization job to pick the transactions before expiry.</p>\r\n\r\n<p data-renderer-start-pos=\"100\">For example, if you want to reauthorize one hour before the expiry, set the expiry date of the transaction to expiry date minus one hour. Now, the reauthorization job running every one hour will pick the transactions and reauthorize 1 hour before expiry.</p>\r\n\r\n<h4 data-renderer-start-pos=\"100\"><a name=\"why-is-the-reauthorization-for-the-order-failing\" id=\"why-is-the-reauthorization-for-the-order-failing\"></a>Why is the reauthorization for the order failing?</h4>\r\n\r\n<p data-renderer-start-pos=\"1\">Ensure that you include the NetworkTransactionId as part of the original authorization when bridged into Manhattan&nbsp;Active® Omni. The NetworkTransactionId must be sent by the host system.</p>\r\n\r\n<p data-renderer-start-pos=\"83\">&nbsp;</p>\r\n\r\n<h3><a name=\"related-articles\" id=\"related-articles\"></a>Related Articles</h3>\r\n\r\n<div class=\"info\"><ul class=\"related-articles\"><li><a href=\"/payment-health-dashboard\" hqid=\"3127204\">Payment Health Dashboard</a></li><li><a href=\"/refunds\" hqid=\"2617711\">Refunds</a></li><li><a href=\"/how-payment-processing-works\" hqid=\"2617708\">How Payment Processing Works</a></li><li><a href=\"/payment-gateway-integration\" hqid=\"2617714\">Payment Gateway Integration</a></li><li><a href=\"/payment-schedulers\" hqid=\"2617715\">Payment Schedulers & Batch Processing</a></li><li><a href=\"/payment-rest-apis-and-user-exits\" hqid=\"2617717\">Rest APIs and User Exits</a></li><li><a href=\"/einvoice\" hqid=\"3061519\">eInvoice </a></li><li><a href=\"/other-transaction-types\" hqid=\"2617712\">Other Transaction Types</a></li><li><a href=\"/paymentfailures\" hqid=\"2660553\">Payment Failures</a></li><li><a href=\"/invoicing-sales-posting\" hqid=\"2617713\">Invoicing and Sales Posting</a></li><li><a href=\"/payment-troubleshooting\" hqid=\"2617718\">Testing & Troubleshooting Payment</a></li><li><a href=\"/settlement\" hqid=\"2617710\">Settlement</a></li><li><a href=\"/capturing-payment\" hqid=\"2617706\">Capturing Payment</a></li><li><a href=\"/paymentoverview\" hqid=\"2688302\">Payment Overview</a></li><li><a href=\"/payment-fraud\" hqid=\"2617716\">Fraud</a></li><li><a href=\"/payment-types\" hqid=\"2617707\">Payment Types</a></li></ul></div>\r\n\r\n\t  </div>\r\n </div>\r\n <div id=\"ui-page-fb-wrap\"></div>\r\n <div class=\"hiq-footer-wrap\">\r\n    \r\n                \r\n  </div>\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n",
  "content_length": 38680,
  "scraped_at": "2025-08-09T21:58:41.983341",
  "content_clean": "Home ››Manhattan Active® Omni››Order Management››Process & Configuration Guides››Order Selling››Payment ››Authorization Authorization Previous I Next This section explains how authorization, authorization expiry, and authorization reversal transactions work. Authorization transactions reserve funds in the customer's account to be used in a future payment. For example, an authorization is captured when an e-commerce order is placed, and that authorization insures the retailer can get money from the customer when the items are later shipped. The funds are held until one of three things occurs: funds are moved using a settlement transaction, the authorization expires, or the authorization is reversed. Enabling Authorization for a Payment TypeAuthorization ReversalAuthorization Reversal vs. RefundAuthorization Reversal FailuresAuthorization Reversals for Partial ShipmentsAuthorization Expiry & Re-AuthorizationAuthorization Expiry Configuration and MappingsRe-Authorization SchedulerAuthorization FailureAuthorization RetryPayment Recovery ReminderConfigurationsAdvance AuthorizationAuthorization On Release For Pre-OrdersAuthorize On CaptureAuthorize On ReleasePayment Hints TrackingCharge SequenceImplementation FlavorHow to re-auth when an item is ready for release if the base reauthorization job is not enabledHow to reauthorize transactions expiring at a future dateWhy is the reauthorization for the order failing?Related Articles Enabling Authorization for a Payment Type Authorizations are not required for all payment types. Credit cards require authorization, but payment types like cash and debit do not require authorization. The payment configuration AuthorizationRequired attribute is used to indicate whether a payment type supports/requires authorization. This attribute is used by the calculate service to determine what type of transaction to create for a payment method. To configure this setting, navigate to the Payment Type Config UI. If true, then the calculate service creates an authorization transaction when the payment summary indicates that an authorization is required. For example, a customer places a $36 order for a ship to home item and pays using a credit card. In this scenario, the payment summary book amount is $36, so the calculate service creates an open authorization transaction. If true and the payment summary indicates that a settlement is required, then the calculate service creates a settlement transaction. For example, a customer purchases a $36 item in store and pays using a credit card. In this scenario, the payment summary debit amount is $36, so the calculate service creates an open settlement transaction. If false, then the calculate service creates a settlement transaction each time the payment summary indicates that either an authorization or a settlement is required. For example, a customer places a $36 order for a ship to home item and pays using a debit card. In this scenario, the payment summary book amount is $36, however the calculate service creates an open settlement instead of an authorization, since debit does not require authorization. If a payment type is pre-paid, then the authorization required attribute is not used. Authorization Reversal Authorization reversal transactions release the funds being held by an authorization. For example, an authorization is captured when an e-commerce order is placed, but the customer cancels the order. To remove the hold on the customer's account, an authorization reversal is processed against the original authorization. Processing of authorization reversals must be done in a custom component. Authorization reversal transactions are created to reduce the authorized amount locally in the payment component, but no integration with third party payment gateways exists to process authorization reversals. For example, consider a $40 order with a $40 authorization that has a discount applied which reduces the order total to $30. An authorization reversal transaction is created for $10, however this transaction is not sent to the payment gateway. The customer's account still has a $40 authorization until the authorization expires. If the authorization expires, then the payment component re-authorizes for only $30. Authorization reversals are follow-on transactions performed against an existing authorization. The original amount on the payment method can be used for visibility of the amount originally authorized. When an authorization reversal is closed internally, the transaction reason code is populated with one of the following values Internal closure; Advance authorization created - Indicates that only one settlement is supported against this authorization, and a new authorization has been created for subsequent settlements (for example, in case of partial shipments). Internal closure; Required auth amount decreased - Indicates that the order total has decreased. Internal closure; PayPal honor period expired - Indicates that a PayPal settlement failed, and a new authorization is created to re-attempt settlement. To process authorization reversals in the payment gateway, custom hooks provide the ability to create the transaction in open status and then execute in a third-party gateway. Note: Partial authorization reversal transactions will be created in an \"Open\" status, as only the \"Calculate Execution Mode\" will be executed as part of partial scenarios. These transactions can be processed through a custom or by increasing the frequency of the job scheduler. Authorization Reversal vs. Refund In some scenarios, an order may have some funds settled and some funds authorized when a reduction in the order total occurs. The 'Refund or Reverse Authorization' attribute indicates whether to refund funds which are already settled or reverse remaining authorized amounts, when the amount due decreases for an order. See this section for more information. Authorization Reversal Failures For any custom execution of authorization reversals, the auth reversal must always be marked as successful regardless of the actual response received by the gateway. Authorization reversal failures are not supported. To capture the actual transaction response, an extended field can be added and used for reporting outside of Active® Omni. Authorization Reversals for Partial Shipments Assume there is a $100 order. $60 worth of items shipped. If the gateway supports multiple settlements per authorization, no new authorization or authorization reversal is created. $60 is settled against the authorization, then later $40 is settled against the same authorization. If the gateway supports only one settlement per authorization, the system creates a $60 settlement and a $40 authorization reversal. The settlement is sent to the gateway and the auth reversal is closed internally (or sent to the gateway, if third party reversals have been implemented). When the settlement response is received, an advance authorization is created for the remaining $40. This authorization remains open until the next re-authorization scheduler service runs. Authorization Expiry & Re-Authorization Authorization transactions do not reserve funds indefinitely; Funds are automatically released after a number of days (7 days, 14 days, and so on. - depends on the card type). When authorizations expire, it is required to re-authorize, or secure a new authorization for the value of the expired authorization. Re-authorization is required so that funds are reserved in the customer's account for the value of the goods which the retailer plans to ship. For example, if a customer places an order for a special, custom-made dress which costs $350, the retailer authorizes the customer's credit card for $350. Ten days later, that authorization is expired, and the $350 hold is removed from the customer's account. If the retailer takes 3 weeks to ship the items to the customer, then the retailer has no guarantee that the customer has the $350 to pay for the dress unless a re-authorization is done. In order to secure the $350 and ensure the customer can pay when the dress gets shipped, a new authorization is created for $350 on day ten. Re-authorization can also be done for a partial authorization amount if the order is already partially settled. For example, if a customer places and order for 2 items of $25 and $75 respectively, the first item ships and settles before authorization expiry so the order now contains a $25 settlement and $75 remaining on the original authorization. If that authorization expires and get re-authorized, it will get re-authorized only for the remaining amount meaning $75. Note: Job schedule should have ReAuthPartialSettlement as true Authorization Expiry Configuration and Mappings Authorization Expiry Time Period Authorization expiry periods are configured in the Payment Configuration UI. Different payment configurations can be used for each combination of payment type, card type, and order type. This provides the flexibility for credit cards such as Visa and MasterCard to expire at different intervals. If authorization expiry days is null for a configuration, then the authorization does not expire. For example, e-check payments are authorized but do not require any form of re-authorization, so the e-check payment configuration has a null value for the authorization expiration days setting. The Auth Expiration Days attribute indicates the number of days after which an authorization transaction should be considered expired. When an authorization is expired, the calculate service creates an open authorization against the payment method for an amount equal to the open authorization amount. If authorization expiry days is null, then the transaction expiry date is not updated on authorization payment transactions. This attribute should be set to null if authorizations do not expire. If authorization expiry days is not null, then the transaction expiry date is populated on successful, closed authorization payment transactions with the following logic: If the payment transaction expiry date is null, then set the transaction expiry date equal to the current date plus the number of authorization expiry days configured. For example, the authorization expiry days attribute is set to 7 days for Visa credit cards. When, on January 1, 2017 at 3:00 the payment gateway returns a successful Visa credit card authorization transaction with a null transaction expiry date, then the transaction expiry date is updated to January 8, 2017 at 3:00. If the transaction expiry date is not null, then the transaction expiry date is honored. For example, an online order is imported with a successful authorization and a transaction expiry date of January 10, 2017 at 4:30. When this authorization is saved, the authorization expiry days configuration is not used and the imported value is honored. If a payment does not require authorization, then the authorization expiration attribute is not used. Transaction Expiry Date Each payment transaction has a Transaction Expiry Date which tells the system how long the transaction can be used. For authorization transactions, the transaction expiry date is used to determine when to re-authorize. The payment gateway can optionally include a transaction expiry date on the response sent to the payment component. Often, payment gateways do not include any expiration date in the response, in which case the payment component can populate this value. If the transaction expiry date is null on the gateway response and an authorization expiry period is configured for a given payment, then the payment component populates the transaction expiry date. Transaction expiry date is calculated as system date plus the configured authorization expiration days. The expiry date is only populated during the payment gateway integration flow. If a payment transaction is imported from e-commerce, then the transaction expiry date needs to be populated by an external system. Testing Authorization Expiry To test authorization expiry: In the Payment Type Config UI, configure the Auth Expiration Days To test the behavior when an authorization is expired, set the Auth Expiration Days to -1, so that newly-created authorizations will be considered expired (Note: The system considers 0 as null, so do not use 0 for this configuration for testing purposes) Create an order with a new authorization Run the re-authorization scheduler, which should create a new authorization Re-Authorization Scheduler Re-authorization is initiated automatically by the re-authorization scheduler, which picks up authorization transactions which are expired and creates a new authorization transaction to secure the funds. This scheduler frequency is configurable, but it is recommended to run re-authorization once daily. Details of the re-authorization scheduler are in the following diagram. Sample Job Schedule Configuration reAuthorizationJob SchedulePOST {{url}}/payment/api/batch/jobSchedule/save { \"IsDisabled\": false, \"IsAdHoc\": false, \"TriggerKey\": \"ReAuthorizationJobTrigger-1\", \"TimeZone\": \"GMT\", \"JobTypeId\": \"reAuthorizationJob\", \"CronExpression\": \"0 0 22 1/1 * ? \", \"JobParameters\": [ { \"InputValue\": \"select pt.parentPaymentMethod.parentPaymentHeader.pk, pt.pk from PaymentTransactionEntity pt where pt.transactionType.paymentTransactionTypeId = 'Authorization' and pt.status.paymentTransactionStatusId = 'Closed' and pt.isActive = true and pt.transactionExpiryDate < CURRENT_TIMESTAMP and pt.processedAmount > 0 and (pt.followOnProcessedAmount is null or pt.processedAmount > pt.followOnProcessedAmount)\", \"InputKey\": \"QueryString\" }, { \"InputValue\": \"2\", \"InputKey\": \"ChunkSize\" }, { \"InputValue\": \"true\", \"InputKey\": \"ReAuthPartialSettlement\" } ], \"JobScheduleId\": \"reAuthorizationJob-1\" } Note: 'isActive' is a read-only attribute which is true by default.. This field is updated to false when an authorization expires.Payment transactions with isActive set to false are ignored for all payment processes, including follow-on settlements, payment summary updates, payment method updates, and payment status. Authorization Failure Authorization failure can occur for many reasons, such as insufficient funds or a stolen card. If a customer is present (for example, at the POS), then the store associate or customer care representative can ask for an alternative form of payment. If a customer is not present (for example, in contact center), then the customer care representative captures new payment information from the customer. When an authorization transaction is updated with response status as failure, the following updates are made: Authorization payment transaction processed amount is updated to zero Payment method amount is reduced by the failed authorization amount The payment summary requested authorization amount is reduced based on the failed amount Order payment status is updated to Awaiting Payment Info Authorization failure can happen for re-authorization transactions which are executed by the system on a scheduled basis (as authorizations expire). When this occurs, the order payment status is updated to Awaiting Payment Info. Customer service should continuously monitor for orders in Awaiting Payment Info status, so that they can call the customer to ask for an alternate form of payment. Authorization Retry The payment auto-retry and pay by link recovery features can be enabled to help reduce the need for manual payment recovery from payment failures. For example, the user orders an item and pays with a credit card. The payment attempts to authorize, the payment fails due to the out of balance or card is expired. Manhattan Active® Omni Order Management retries payment(Authorization) as many times (remainingAttempts) as specified in the configuration. If this fails, then a paybylink (payment recovery) email/text outbound message is sent to get a new payment method from the customer. When an authorization retry transaction is created, the 'ReasonId' attribute is updated with the value 'AutoRetry' to differentiate between regular authorization and retry authorization transactions, which can be used in scheduler queries to filter, schedule, and process the transactions separately. The 'ReasonId' attribute gets updated to 'RetryAuthSucceeded' when the retry authorization transaction is successful and to 'RetryAuthFailed' when the retry authorization transaction is unsuccessful. Note: If authorization fails during a CSR order capture while a customer is present, the customer care representative can ask for an alternative payment method. To ensure the system knows that we already have valid authorization and don't need to retry, the 'Source' attribute in the payment request should be populated with the value 'CallCenter' during CSR order capture. As a result, the system will not create an open authorization transaction and will not retry for authorization. Payment Recovery Reminder In the event that the system has not received a payment method from the customer within the configured number of hours, the system sends the customer a recovery reminder email or text. For example: The reminder threshold (PayByLink Reminder Threshold) is configured as 2 hours. If the PayByLink recovery was sent to the customer at 1:00 p.m. and the customer delays adding payment, the recovery reminder notification via email/text will be sent to the customer by 3:00 p.m. Configurations Refer to Enabling Auto-Retries and Authorization Failure PaybyLink configurations for enabling Payment retry, Payment recovery and Recovery reminder email/text. Refer here to configure the reminder threshold value in hours Advance Authorization When an order is fulfilled in multiple shipments and a payment method supports only one settlement against each authorization, then for each shipment a settlement is processed against the authorization. After a settlement is processed, the initial authorization cannot be used for any subsequent settlements, so an advance authorization is required to hold funds for the value of items which have yet to ship. If the payment processor supports multiple settlements against a single authorization, then the Advance Authorization Required attribute should be set to false. This attribute is used by the calculate service each time a settlement is created against an authorization. To configure this setting, navigate to the Payment Type Config UI. If true, then the calculate service creates a new authorization when a settlement is created against an authorization. For example, a customer places an online order for one $20 item and one $30 item, and the customer's credit card is authorized for $50. When the $20 item ships, the calculate service creates an open settlement for $20 against the authorization and an open authorization for the remaining $30. When the $30 item ships, the calculate service deletes the existing open authorization and creates an open settlement for $30 for standalone settlement. If false, then the calculate service does not create any new authorizations when a settlement is created against an authorization. For example, a customer places an online order for one $20 item and one $30 item, and the customer's credit card is authorized for $50. When the $20 item ships, the calculate service creates an open settlement for $20 against the authorization. When the $30 item ships, the calculate service creates an open settlement for $30 against the same authorization. If a payment does not require authorization, then the advance authorization attribute is not used. This attribute is not used for standalone settlements. Authorization On Release For Pre-Orders If using authorization on release behavior for a particular order type, meaning the Process Payment On Release configuration is enabled, the release process is dependent on having a valid authorized amount. This is intended to be used for pre-orders, or orders containing a mix of pre-order items and non-pre-order items. The primary objective is to minimize the amount of payment transactions on orders that have a longer than usual lifecycle, such as an item that is not eligible to ship until 3 months after the order was captured. From a payment capture perspective, this flow can work in two ways; authorize on capture or authorize on release. Authorize On Capture If the order's payment is authorized upfront at the time of order capture, any items eligible for release from an order and inventory perspective will have an associated total and will simply be cross-checked against the authorized amount to determine if these items can be released. If authorization is done during order capture, re-authorization of expired authorizations will not take place for any amount greater than the amount eligible for release. Consider the following example: Order for $100, Authorization for $100, Auth Expiry = T2 OL1 - $40 - DoNotReleaseBefore = T1 OL2 - $60 - DoNotReleaseBefore = T3 At T1, $40 is considered eligible for release, and OL1 is allowed to release as there is $100 authorized. At T2, the authorization is expired and the re-authorization process takes place. A new authorization of $40 is created, the remaining $60 is not re-authorized because it is not yet eligible for release. At T3, OL2 is considered eligible for release, and a new authorization for $60 is created. If the authorization is successful, OL2 is allowed to release. Authorize On Release Note: This is the process for order and payment capture using Manhattan Active® Omni Contact Center When authorizing on release, the payment method is authorized once at the moment of the order capture but is not re-authorized until the item is ready for release. When any item is eligible for release from an order and inventory perspective, it will have an associated total used to calculate new authorization transactions when the release process is triggered. Consider the following example: Order for $100, Tokenized and authorized payment method for $100 OL1 - $40 - DoNotReleaseBefore = T1 OL2 - $60 - DoNotReleaseBefore = T2 At T0, the original authorization expires but is not re-authorized until the items are eligible for release. At T1, $40 is considered eligible for release. If the original authorization expires, a $40 authorization is created and sent to the payment provider. OL1 is released if the authorization is successful. At T2, $60 is considered eligible for release. If the original authorization expires, a $60 authorization is created and sent to the payment provider. OL2 is released if the authorization is successful. Payment Hints Tracking In order to calculate the amount that can be authorized or settled as part of the release process, the order is retrieved using the \"DefaultOrderTemplateForPaymentRequest\" which includes the \"BasePaymentHint\" object. From there, the attribute \"BookAmountAllocated\" is read to evaluate the amount that can be authorized. The book amount allocated is tracked across two groups: Group Type Description NonRelease The book amount allocated in the non-release group refers to the amount associated with un-releasable units on the order. When the full amount of the order value is tracked here, no authorization transactions can be created until this amount moves to the \"ReleasableAmount\" bucket. ReleasableAmount The book amount allocated in the releasable amount group refers to the amount associated with the releasable or released units on the order. The calculate payment process cannot create authorization transactions of a greater amount than the book amount allocated in the releasable amount group. Example: $50 Order captured at T0 OL1 - $20 - DoNotReleaseBefore = T1 OL2 - $30 - DoNotReleaseBefore = T2 Non Release, Book Amount Allocated = $50 Releasable Amount, Book Amount Allocated = $0 T1 - OL1 is release eligible Non Release, Book Amount Allocated = $30 Releasable Amount, Book Amount Allocated = $20 T2 - OL2 is release eliglbe Non Release, Book Amount Allocated = $0 Releasable Amount, Book Amount Allocated = $50 Charge Sequence If multiple payment methods exist and a split shipment occurs, then the charge sequence is used to select a payment method. For example, if two Visa credit cards exist on an order, and the payment configuration charge sequence for Visa is 2, then the payment method with the minimum charge sequence is charged first. Payments are processed using the charge sequence in ascending order. If there is a tie, then the charge sequence populated on the payment method is used to break the tie. Configure the charge sequence for each payment type in the Payment Configuration UI. Implementation Flavor How to re-auth when an item is ready for release if the base reauthorization job is not enabled Call below reauth API in isReleasable UE and then payment header save to find out payment status. If payment status is >= Authorized, set the isReleasable flag as true or else false. POST - {{url}}/payment/api/payment/paymentHeader/orderId/{orderId}/reAuth Note: ReAuthPartialSettlement=true, this parameter can be configured for reauthorization of partially settled and expired authorizations. How to reauthorize transactions expiring at a future date Set the expiry date less than the actual expiry date/time to allow frequently running reauthorization job to pick the transactions before expiry. For example, if you want to reauthorize one hour before the expiry, set the expiry date of the transaction to expiry date minus one hour. Now, the reauthorization job running every one hour will pick the transactions and reauthorize 1 hour before expiry. Why is the reauthorization for the order failing? Ensure that you include the NetworkTransactionId as part of the original authorization when bridged into Manhattan Active® Omni. The NetworkTransactionId must be sent by the host system. Related Articles Payment Health DashboardRefundsHow Payment Processing WorksPayment Gateway IntegrationPayment Schedulers & Batch ProcessingRest APIs and User ExitseInvoice Other Transaction TypesPayment FailuresInvoicing and Sales PostingTesting & Troubleshooting PaymentSettlementCapturing PaymentPayment OverviewFraudPayment Types"
}