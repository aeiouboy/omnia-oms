{
  "id": "3155917",
  "permalink": "adyen-payment-integration",
  "title": "Adyen Payment Integration",
  "type": "topic",
  "level": 6,
  "path": "Manhattan Active® Omni/Order Management/Process & Configuration Guides/Order Selling/Payment/Payment Gateway Integration/Adyen Payment Integration",
  "raw_item": {
    "id": "3155917",
    "text": "Adyen Payment Integration",
    "title": "Adyen Payment Integration",
    "permalink": "adyen-payment-integration",
    "leaf": false,
    "droppable": true,
    "expanded": false,
    "closed": true,
    "visible": true,
    "editable": true,
    "type": "topic",
    "topicType": "0",
    "status": "1",
    "iconCls": "icon-topic",
    "cls": "",
    "folder_id": "t;2617714",
    "parent": "2617714",
    "created_date": "1684326569",
    "modified_date": "1751618021",
    "instructor_id": null,
    "haschildren": true,
    "callout": "0",
    "order": "2"
  },
  "success": true,
  "content": "\r\n\r\n\r\n<div class=\"hiq-page-wrap\">\r\n<div class=\"hiq-t-wrap\">\r\n\t\t\r\n  \t  <div class=\"hiq-t \">\r\n\t\t\t\t<ul class=\"breadcrumbs\"><li><a class=\"breadcrumb-links\" hqid=\"1788908\"  href=\"/home\">Home</a></li> <li><span>&rsaquo;&rsaquo;</span><a hqid=\"3500940\" href=\"/omni\" class=\"breadcrumb-links\">Manhattan Active® Omni</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158393\" href=\"/order-management\" class=\"breadcrumb-links\">Order Management</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158394\" href=\"/process-configuration-guides\" class=\"breadcrumb-links\">Process & Configuration Guides</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2163646\" href=\"/order-selling-2\" class=\"breadcrumb-links\">Order Selling</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2163647\" href=\"/payment-2\" class=\"breadcrumb-links\">Payment</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2617714\" href=\"/payment-gateway-integration\" class=\"breadcrumb-links\">Payment Gateway Integration</a></li><li> <span>››</span>Adyen Payment Integration</li></ul>  \t\r\n\t\t<h2><a name=\"adyen-payment-integration\" id=\"adyen-payment-integration\"></a>Adyen Payment Integration</h2>\r\n\r\n<p></p>\r\n\r\n<div class=\"info\"><ul><li><a href=\"/adyen-payment-integration$adyen-payment-integration\">Adyen Payment Integration</a><ul><li><a href=\"/adyen-payment-integration$overview\">Overview</a></li><li><a href=\"/adyen-payment-integration$process-overview\">Process Overview</a></li><li><a href=\"/adyen-payment-integration$pay-by-link\">Pay By Link</a><ul><li><a href=\"/adyen-payment-integration$initiate-payment\">Initiate Payment</a></li><li><a href=\"/adyen-payment-integration$filter-nbsp-payment-methods\">Filter&nbsp;Payment Methods</a></li></ul></li><li><a href=\"/adyen-payment-integration$supported-payment-types\">Supported Payment Types</a></li><li><a href=\"/adyen-payment-integration$supported-transaction-types\">Supported Transaction Types</a><ul><li><a href=\"/adyen-payment-integration$authorization\">Authorization</a></li><li><a href=\"/adyen-payment-integration$settlement\">Settlement</a></li><li><a href=\"/adyen-payment-integration$refund\">Refund</a></li><li><a href=\"/adyen-payment-integration$authorization-reversal\">Authorization Reversal</a></li><li><a href=\"/adyen-payment-integration$void\">Void</a></li><li><a href=\"/adyen-payment-integration$balance-check\">Balance Check</a></li></ul></li><li><a href=\"/adyen-payment-integration$adyen-specific-processing\">Adyen Specific Processing</a><ul><li><a href=\"/adyen-payment-integration$asynchronous-response-decisions\">Asynchronous Response Decisions</a></li><li><a href=\"/adyen-payment-integration$network-transaction-id\">Network Transaction Id</a></li><li><a href=\"/adyen-payment-integration$authorization-extension\">Authorization Extension</a></li><li><a href=\"/adyen-payment-integration$auto-close-transactions\">Auto Close Transactions</a></li><li><a href=\"/adyen-payment-integration$manual-capture\">Manual Capture</a></li><li><a href=\"/adyen-payment-integration$void-of-refund\">Void of Refund</a></li><li><a href=\"/adyen-payment-integration$risk-profiles-and-fraud-behavior\">Risk Profiles and Fraud Behavior</a></li><li><a href=\"/adyen-payment-integration$minor-units\">Minor Units</a></li><li><a href=\"/adyen-payment-integration$api-idempotency\">API Idempotency</a></li></ul></li><li><a href=\"/adyen-payment-integration$webhook-event-notifications\">Webhook Event Notifications</a><ul><li><a href=\"/adyen-payment-integration$webhook-event-codes\">Webhook Event Codes</a></li><li><a href=\"/adyen-payment-integration$webhook-event-matching\">Webhook Event Matching</a></li></ul></li><li><a href=\"/adyen-payment-integration$configuration\">Configuration</a></li><li><a href=\"/adyen-payment-integration$implementation-flavors\">Implementation Flavors</a><ul><li><a href=\"/adyen-payment-integration$use-the-adyen-payments-gateway-with-an-unsupported-payment-type\">Use the Adyen Payments gateway with an unsupported payment type</a></li><li><a href=\"/adyen-payment-integration$add-additional-data-to-the-adyen-nbsp-payment-request-body\">Add additional data to the Adyen&nbsp;payment request body</a></li><li><a href=\"/adyen-payment-integration$add-notification-retry-logic-when-a-transaction-match-is-not-found\">Add notification retry logic when a transaction match is not found</a></li><li><a href=\"/adyen-payment-integration$add-webhook-in-firewall-restricted-environment\">Add webhook in firewall-restricted environment</a></li></ul></li><li><a href=\"/adyen-payment-integration$troubleshooting\">Troubleshooting</a><ul><li><a href=\"/adyen-payment-integration$payment-transactions-are-stuck-in-open-status\">Payment transactions are stuck in 'open' status</a></li><li><a href=\"/adyen-payment-integration$payment-transactions-are-stuck-in-in-progress-status\">Payment transactions are stuck in 'in-progress' status</a></li></ul></li><li><a href=\"/adyen-payment-integration$related-articles\">Related Articles</a></li></ul></li></ul></div>\r\n\r\n<h3><a name=\"overview\" id=\"overview\"></a>Overview</h3>\r\n\r\n<p>Manhattan Active® Omni provides the capability to integrate with Adyen out of the box for payment processing. This page contains an overview of the process through which the payment gateway interacts with Adyen and details on the specific payment flows that are supported with Adyen. For more details on In-Store payments, refer to <a href=\"https://omni.helpdocsonline.com/pos-adyen-plugin\">POS Documentation</a>.</p>\r\n\r\n<h3><a name=\"process-overview\" id=\"process-overview\"></a>Process Overview</h3>\r\n\r\n<p>At the time a payment request is executed, open payment transactions on the order&nbsp;are sent to the configured payment gateway based on the corresponding payment rule. If the payment type is configured to process through the base Adyen gateway, the following process is invoked.</p>\r\n\r\n<ol>\r\n\t<li>A gateway request is generated&nbsp;containing the payment method, payment transaction, and select order and customer information (base gateway request)</li>\r\n\t<li>The gateway request is converted into an Adyen format.</li>\r\n\t<li>Adyen responds synchronously, which is typically only an acknowledgement that&nbsp;the request has been received.</li>\r\n\t<li>The payment transaction on the payment header is marked as in-progress and excluded from future execution to the&nbsp;gateway.</li>\r\n\t<li>Adyen responds asynchronously via webhook&nbsp;with a response decision for the transaction.</li>\r\n\t<li>The webhook response is stored in a staging table and matched against existing in-progress payment transactions.</li>\r\n\t<li>If a match is found, the transaction response status is updated to closed and the payment transaction is processed according to the response decision.</li>\r\n</ol>\r\n\r\n<div class=\"tip\"><strong>Note</strong>: While this is the typical process of payment transaction processing, there can be specific&nbsp;exceptions to this. Refer to <a href=\"https://omni.helpdocsonline.com/adyen-payment-integration$auto-close-transactions\">Auto Close Transactions</a>&nbsp;for more details.</div>\r\n\r\n<h3><a name=\"pay-by-link\" id=\"pay-by-link\"></a>Pay By Link</h3>\r\n\r\n<p>Out of the box, payment can be captured using Adyen's hosted payment page, launched through&nbsp;Pay by Link email and text messages. This is supported for all payment methods that are also&nbsp;supported out of the box&nbsp;for transaction processing. The pay by link process via Adyen goes as follows:</p>\r\n\r\n<ul>\r\n\t<li>Launch the pay by link page</li>\r\n\t<li>Pre-populate billing information if available on the order</li>\r\n\t<li>Tokenize the payment information and capture it as a payment method against the order</li>\r\n</ul>\r\n\r\n<h4><a name=\"initiate-payment\" id=\"initiate-payment\"></a>Initiate Payment</h4>\r\n\r\n<p>Initiate payment refers to the API used to call Adyen and either tokenize, or tokenize and authorize payment information to be used for order and payment processing. This request includes the request object sent to Adyen, with encrypted payment information, billing address, browser info, and basic order attributes for post-tokenization processing. The response includes the result of the request. If successful, the&nbsp;tokenized payment information, is saved to the payment header an eligible for processing. To ensure all possible information is included on the saved payment method, verify the <a href=\"https://omni.helpdocsonline.com/adyen-payment-configuration$additional-data\">additional data configuration</a> in your Adyen merchant account.</p>\r\n\r\n<p>A successful initiate payment process results in a payment method saved against the order, either already including an authorization or settlement transaction, or without any authorization or settlement transaction, with the intent of creating and executing one upon order confirmation. A failed initiate payment process does not result in any payment information saved back to the order, as this implies that there was a failure to tokenize any payment information and an inability to process any payment.</p>\r\n\r\n<h5>Tokenize Only</h5>\r\n\r\n<p>The default Adyen&nbsp;pay by link behavior is to only tokenize the payment method information, without authorizing any amount up front. In general, this is to allow the full amount to be authorized for the order upon confirmation, to allow for any changes to the order total prior to attempting authorization. During the tokenize only flow, a successful initiate payment response results in a payment method saved to the order in 'CalculateOnly' mode, and creating an open payment transaction which is not immediately sent to Adyen.</p>\r\n\r\n<p>From an Adyen perspective, this takes the form of a 0 amount authorization request, used only to tokenize and save the payment method information. Because this is used as a standalone tokenization call, no payment transaction for 0 is saved to the payment header directly, even when successful. If the request to Adyen is not successful, no payment method is saved to the order at all, as the payment token was not generated, and there is nothing that can be processed against it.</p>\r\n\r\n<div class=\"tip\"><strong>Note:&nbsp;</strong>Adding a gift card in Adyen pay by link always follows the 'tokenize only' process, regardless of how this behavior is configured.</div>\r\n\r\n<h5>Tokenize and Authorize</h5>\r\n\r\n<p>Optionally, pay by link through Adyen can be configured to tokenize and authorize in a single request. When configured, the same request made to Adyen to tokenize the payment includes the full balance of the order at the time the pay by link page is&nbsp;opened. When successful initiate payment call is made in this case, a tokenized payment method and succesful payment transaction are saved directly to the payment header, with no additional payment action required during the order capture process, unless the balance due changes after the payment has been captured.</p>\r\n\r\n<p>Once the authorization has been completed and captured, no changes can be applied to the total. If the order balance is increased after the payment has been captured using this flavor&nbsp;additional payment must be added by the customer to cover the remaining amount.</p>\r\n\r\n<p>This flavor is primarily recommended when using 3DS authentication through Adyen, to avoid displaying&nbsp;a zero currency amount&nbsp;to the customer when the payment provider page is shown to them for additional verification.</p>\r\n\r\n<div class=\"tip\"><strong>Note:&nbsp;</strong>Adding a PayPal method in Adyen pay by link always follows the 'tokenize and authorize' process, regardless of how this behavior is configured.</div>\r\n\r\n<h5>3DS Authentication</h5>\r\n\r\n<p>Out of the box, the pay by link process&nbsp;supports native 3DS authentication through Adyen. No additional enablement is required within&nbsp;Manhattan Active® on top of what is already needed for pay by link usage. The 3DS flow is driven by the specific response given by the payment provider, where, instead of immediately responding with tokenized payment information, indicating a successful transaction, the customer is re-directed to an additional authentication page, hosted by the bank or payment provider. Upon successful verification on that page, the successful or failed response is re-directed back to the pay by link page, as it would be if no 3DS authentication was performed.</p>\r\n\r\n<p>Refer to <a href=\"https://docs.adyen.com/online-payments/3d-secure/native-3ds2/?platform=Web&integration=Drop-in&version=6.0.0+and+later\">Adyen Documentation</a> for additional details.</p>\r\n\r\n<h4><a name=\"filter-nbsp-payment-methods\" id=\"filter-nbsp-payment-methods\"></a>Filter&nbsp;Payment Methods</h4>\r\n\r\n<p>The list of payment methods shown on the pay by link page is based on the payment methods configured in the respective Adyen merchant account. However, this list can be filtered selectively using a configurable list on the respective Adyen payment gateway configuration.</p>\r\n\r\n<p>Refer to <a href=\"https://omni.helpdocsonline.com/adyen-payment-configuration$pay-by-link-configuration\">Adyen Pay By Link Configuration</a>.</p>\r\n\r\n<h3><a name=\"supported-payment-types\" id=\"supported-payment-types\"></a>Supported Payment Types</h3>\r\n\r\n<ul>\r\n\t<li>Credit Card</li>\r\n\t<li>Debit</li>\r\n\t<li>Gift Card</li>\r\n\t<li>Apple Pay</li>\r\n\t<li>PayPal</li>\r\n</ul>\r\n\r\n<p>Refer to <a href=\"https://omni.helpdocsonline.com/payment-gateway-integration$gateways-transactions-supported-out-of-the-box\">Payment Gateway Documentation</a> for a list of supported transactions by payment method.</p>\r\n\r\n<h3><a name=\"supported-transaction-types\" id=\"supported-transaction-types\"></a>Supported Transaction Types</h3>\r\n\r\n<p>The following payment transaction flows are supported within the scope of the Adyen integration. For more details on the internal payment process and configuration, refer to the <a href=\"https://omni.helpdocsonline.com/payment-2\">Payment</a> documentation.</p>\r\n\r\n<div class=\"tip\"><strong>Note</strong>: Supported use cases may be dependent on a specific Adyen merchant account configuration.</div>\r\n\r\n<h4><a name=\"authorization\" id=\"authorization\"></a>Authorization</h4>\r\n\r\n<h5>Supported use cases</h5>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\"><strong>Use Case</strong></th>\r\n\t\t\t<th scope=\"col\"><strong>Description</strong></th>\r\n\t\t\t<th scope=\"col\"><strong>Example</strong></th>\r\n\t\t\t<th scope=\"col\">Payment Types</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>New authorization</td>\r\n\t\t\t<td>Adding&nbsp;a new payment type to an order that has not yet been sent to the payment provider&nbsp;for payment authorization</td>\r\n\t\t\t<td>A hosted payment process saves a tokenized payment method to be authorized upon the next payment calculation and execution.</td>\r\n\t\t\t<td>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Credit Card</li>\r\n\t\t\t\t<li>Debit</li>\r\n\t\t\t\t<li>Gift Card</li>\r\n\t\t\t\t<li>Apple Pay</li>\r\n\t\t\t\t<li>PayPal (Via Pay By Link)</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Re-authorization</td>\r\n\t\t\t<td>Authorizing an amount on an authorized&nbsp;payment method when the initial authorized amount has expired</td>\r\n\t\t\t<td>Ecom system (or POS)&nbsp;sends Active® Omni an order that is already authorized - auth expiry is in 7 days - if the order is still not fulfilled in 7 days, create a new authorization on the same payment method.</td>\r\n\t\t\t<td>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Credit Card</li>\r\n\t\t\t\t<li>Debit</li>\r\n\t\t\t\t<li>Gift Card</li>\r\n\t\t\t\t<li>Apple Pay</li>\r\n\t\t\t\t<li>PayPal</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Advance authorization</td>\r\n\t\t\t<td>Authorizing the remaining&nbsp;value&nbsp;of unfulfilled goods on an order that has been partially settled</td>\r\n\t\t\t<td>The payment type is configured as \"advance authorization required\". An order with payment is authorized and partially fulfilled. At the time of partial fulfillment, the fulfilled amount is settled, the remaining unfulfilled amount is reversed against the initial authorization, and then authorized as part of a new transaction.</td>\r\n\t\t\t<td>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Credit Card</li>\r\n\t\t\t\t<li>Debit</li>\r\n\t\t\t\t<li>Gift Card</li>\r\n\t\t\t\t<li>Apple Pay</li>\r\n\t\t\t\t<li>PayPal</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Authorization extension</td>\r\n\t\t\t<td>Updating the authorization expiration date of an existing authorization during the re-authorization process.</td>\r\n\t\t\t<td>Ecom system (or POS)&nbsp;sends Active® Omni an order that is already authorized - auth expiry is in 7 days - if the order is still not fulfilled in 7 days, send existing authorization to Adyen to extend the authorization.</td>\r\n\t\t\t<td>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Credit Card</li>\r\n\t\t\t\t<li>Debit</li>\r\n\t\t\t\t<li>Apple Pay</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>Please note that&nbsp;for payment types that require authorization, it is important to sync up the authorization expiration days configured under the respective <a href=\"https://omni.helpdocsonline.com/adyen-payment-integration$payment-type-configuration\">Payment Type Configuration</a>&nbsp;with the actual authorization expiration&nbsp;days of the payment provider.</p>\r\n\r\n<p>Refer to the <a href=\"https://omni.helpdocsonline.com/authorization\">Authorization</a>&nbsp;documentation for more details.</p>\r\n\r\n<ul>\r\n</ul>\r\n\r\n<h4><a name=\"settlement\" id=\"settlement\"></a>Settlement</h4>\r\n\r\n<p>Supported use cases</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\"><strong>Use Case</strong></th>\r\n\t\t\t<th scope=\"col\"><strong>Description</strong></th>\r\n\t\t\t<th scope=\"col\" style=\"width: 541px;\"><strong>Example</strong></th>\r\n\t\t\t<th scope=\"col\" style=\"width: 100px;\">Payment Types</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Follow-on settlement</td>\r\n\t\t\t<td>Collecting&nbsp;funds which have already been authorized for goods at the order status during which invoicing is done.</td>\r\n\t\t\t<td style=\"width: 527px;\">The payment type requires authorization and the order payment method is authorized. When the item(s) is fulfilled, an amount, either the complete amount or a partial amount, that has already been authorized is sent to the payment provider for settlement.</td>\r\n\t\t\t<td style=\"width: 85px;\">\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Credit Card</li>\r\n\t\t\t\t<li>Debit</li>\r\n\t\t\t\t<li>Gift Card</li>\r\n\t\t\t\t<li>Apple Pay</li>\r\n\t\t\t\t<li>PayPal</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Standalone settlement</td>\r\n\t\t\t<td>Collecting funds up front when an order is captured using a payment method that does not require authorization.</td>\r\n\t\t\t<td style=\"width: 527px;\">The payment type does not require&nbsp;authorization, the full order total is settled when the order is placed.</td>\r\n\t\t\t<td style=\"width: 85px;\">\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Credit Card</li>\r\n\t\t\t\t<li>Debit</li>\r\n\t\t\t\t<li>Gift Card</li>\r\n\t\t\t\t<li>Apple Pay</li>\r\n\t\t\t\t<li>PayPal</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>Refer to the <a href=\"https://omni.helpdocsonline.com/settlement\">Settlement</a>&nbsp;documentation for more details.</p>\r\n\r\n<h4><a name=\"refund\" id=\"refund\"></a>Refund</h4>\r\n\r\n<h5>Supported use cases</h5>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:1000px;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\" style=\"width: 103px;\"><strong>Use Case</strong></th>\r\n\t\t\t<th scope=\"col\" style=\"width: 253px;\"><strong>Description</strong></th>\r\n\t\t\t<th scope=\"col\" style=\"width: 466px;\"><strong>Example</strong></th>\r\n\t\t\t<th scope=\"col\" style=\"width: 171px;\">Payment Types</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 89px;\">Refund on original order</td>\r\n\t\t\t<td style=\"width: 239px;\">Refunding funds to the original payment method that has already been settled when the order total is reduced</td>\r\n\t\t\t<td style=\"width: 452px;\">Pickup at store order is charged before fulfillment. After the order has been charged, 1 or more items are cancelled and the payment method used to pay for the items is refunded.</td>\r\n\t\t\t<td style=\"width: 157px;\">\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Credit Card</li>\r\n\t\t\t\t<li>Debit</li>\r\n\t\t\t\t<li>Apple Pay</li>\r\n\t\t\t\t<li>PayPal</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 89px;\">Refund on return order</td>\r\n\t\t\t<td style=\"width: 239px;\">Refunding funds to the original payment method when the customer returns item(s) that were charged</td>\r\n\t\t\t<td style=\"width: 452px;\">The payment type does not require&nbsp;authorization, the full order total is settled when the order is placed.</td>\r\n\t\t\t<td style=\"width: 157px;\">\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Credit Card</li>\r\n\t\t\t\t<li>Debit</li>\r\n\t\t\t\t<li>Apple Pay</li>\r\n\t\t\t\t<li>PayPal</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 89px;\">Standalone refund (POS only)</td>\r\n\t\t\t<td style=\"width: 239px;\">Issuing a refund for a newly added payment method when returning items</td>\r\n\t\t\t<td style=\"width: 452px;\">An order is paid for using a credit card, and the customer returns the order to the store and requests a refund to go to a different payment method.</td>\r\n\t\t\t<td style=\"width: 157px;\">Refer to <a href=\"https://omni.helpdocsonline.com/pos-adyen-plugin\">POS Documentation</a> for details</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>Refer to the <a href=\"https://omni.helpdocsonline.com/refunds\">Refund</a>&nbsp;documentation for more details.&nbsp;</p>\r\n\r\n<h4><a name=\"authorization-reversal\" id=\"authorization-reversal\"></a>Authorization Reversal</h4>\r\n\r\n<p>Unlike other base payment integrations, authorization reversal is not an internal transaction when integrating with Adyen. When an authorized amount is reduced from an order total, for example, a unit is cancelled prior to fulfillment, the amount reduced from the order is sent to Adyen as part of an authorization reversal transaction. Depending on whether the authorized amount is being partially reduced, or set to 0, this may be sent to Adyen as a partial amount update to an existing authorization, or an authorization cancel to reverse the full amount.</p>\r\n\r\n<p>Adyen does not support partial amount reversal for non-card payments. If the payment type is not a card (or digital wallet with a card), and the amount to reverse on an authorization is less than the complete remaining&nbsp;authorized amount, this transaction is closed internally. Authorization&nbsp;reversals are all treated as successful internally to update the remaining available authorization amount correctly. If an authorization reversal was ultimately unsuccessful, the response status is tracked under the payment transaction's \"NotificationStatus\" for informational&nbsp;purposes.</p>\r\n\r\n<div class=\"info\"><strong>Note</strong>: It is required to configure your Adyen merchant account to treat all&nbsp;authorizations as \"pre-authorizations\" to allow authorization reversal to work properly.</div>\r\n\r\n<h5>Supported use cases</h5>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:1000px;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\" style=\"width: 103px;\"><strong>Use Case</strong></th>\r\n\t\t\t<th scope=\"col\" style=\"width: 251px;\"><strong>Description</strong></th>\r\n\t\t\t<th scope=\"col\" style=\"width: 474px;\"><strong>Example</strong></th>\r\n\t\t\t<th scope=\"col\" style=\"width: 165px;\">Payment Types</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 89px;\">Authorized order total is reduced</td>\r\n\t\t\t<td style=\"width: 237px;\">An update is made to an order to set the value of the order as less than the amount of payment that is authorized on the order.</td>\r\n\t\t\t<td style=\"width: 460px;\">An order is authorized and released to the fulfillment center. One of the items is cancelled, reducing the amount required to be authorized to settle the complete order total.</td>\r\n\t\t\t<td style=\"width: 150px;\">\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Credit Card</li>\r\n\t\t\t\t<li>Debit</li>\r\n\t\t\t\t<li>Gift Card (Full Reversal)</li>\r\n\t\t\t\t<li>Apple Pay</li>\r\n\t\t\t\t<li>PayPal (Full Reversal)</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 89px;\">Advance authorization</td>\r\n\t\t\t<td style=\"width: 237px;\">Reversing the remaining&nbsp;value&nbsp;of unfulfilled goods prior to re-authorization on an order that has been partially settled</td>\r\n\t\t\t<td style=\"width: 460px;\">The payment type is configured as \"advance authorization required\". An order with payment is authorized and partially fulfilled. At the time of partial fulfillment, the fulfilled amount is settled, the remaining unfulfilled amount is reversed against the initial authorization, and then authorized as part of a new transaction.</td>\r\n\t\t\t<td style=\"width: 150px;\">\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Credit Card</li>\r\n\t\t\t\t<li>Debit</li>\r\n\t\t\t\t<li>Apple Pay</li>\r\n\t\t\t\t<li>PayPal</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>Refer to the <a href=\"https://omni.helpdocsonline.com/authorization$authorization-reversal\">Authorization Reversal</a> documentation for more details.</p>\r\n\r\n<h4><a name=\"void\" id=\"void\"></a>Void</h4>\r\n\r\n<h5>Supported use cases</h5>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width: 1000px;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\" style=\"width: 103px;\"><strong>Use Case</strong></th>\r\n\t\t\t<th scope=\"col\" style=\"width: 253px;\"><strong>Description</strong></th>\r\n\t\t\t<th scope=\"col\" style=\"width: 478px;\"><strong>Example</strong></th>\r\n\t\t\t<th scope=\"col\" style=\"width: 161px;\">Payment Types</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 89px;\">Void of settlement</td>\r\n\t\t\t<td style=\"width: 239px;\">A settlement has been executed to the payment gateway, but not fully processed yet by the payment provider.</td>\r\n\t\t\t<td style=\"width: 464px;\">An order is fulfilled from point of sale, then post-voided within the store. Sending a void transaction to the payment gateway.&nbsp;</td>\r\n\t\t\t<td style=\"width: 146px;\">\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Credit Card</li>\r\n\t\t\t\t<li>Debit</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>Refer to the <a href=\"https://omni.helpdocsonline.com/other-transaction-types$void\">Void&nbsp;</a>documentation for more details.</p>\r\n\r\n<h4><a name=\"balance-check\" id=\"balance-check\"></a>Balance Check</h4>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width: 1000px;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\" style=\"width: 103px;\"><strong>Use Case</strong></th>\r\n\t\t\t<th scope=\"col\" style=\"width: 306px;\"><strong>Description</strong></th>\r\n\t\t\t<th scope=\"col\" style=\"width: 435px;\"><strong>Example</strong></th>\r\n\t\t\t<th scope=\"col\" style=\"width: 149px;\">Payment Types</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 89px;\">Balance check of existing gift card</td>\r\n\t\t\t<td style=\"width: 292px;\">Adding a gift card for use as payment on an order, an upfront check is done on the gift card balance.</td>\r\n\t\t\t<td style=\"width: 421px;\">An order is created in contact center and a gift card is added as payment. The amount stored on the card is returned and stored as the processed amount on the balance check transaction.</td>\r\n\t\t\t<td style=\"width: 134px;\">\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Gift Card</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>Refer to <a href=\"https://omni.helpdocsonline.com/other-transaction-types$balance-check\">Balance Check</a> documentation for more details.</p>\r\n\r\n<h3><a name=\"adyen-specific-processing\" id=\"adyen-specific-processing\"></a>Adyen Specific Processing</h3>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width: 596px;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\" style=\"width: 177px;\">Version Type</th>\r\n\t\t\t<th scope=\"col\" style=\"width: 412px;\">Version</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 163px;\">API Version</td>\r\n\t\t\t<td style=\"width: 398px;\">v70</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 163px;\">Java API Library Version</td>\r\n\t\t\t<td style=\"width: 398px;\">19.0.0</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 163px;\">UI Version</td>\r\n\t\t\t<td style=\"width: 398px;\">5.68.1</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<h4><a name=\"asynchronous-response-decisions\" id=\"asynchronous-response-decisions\"></a>Asynchronous Response Decisions</h4>\r\n\r\n<p>Adyen communicates the response decision of payment transactions asynchronously. This means that when a payment transaction is sent to Adyen for processing, the response sent is only an acknowledgement of the request. To avoid re-execution to the gateway prior to a response decision, these transactions are moved from open to in-progress to wait for the webhook notification from Adyen prior to closure.</p>\r\n\r\n<h4><a name=\"network-transaction-id\" id=\"network-transaction-id\"></a>Network Transaction Id</h4>\r\n\r\n<p>The out of box integration with Adyen relies heavily on tracking the initial payment transaction reference identifier. For example, when a payment is authorized, and subsequently settled as a follow-on of the authorization. Any refund initiated against the settlement references the original authorization identifier. When importing externally processed payment transactions into Manhattan Active® Omni, it is required to populate the network transaction Id in addition to the transaction request Id so that future transactions against that payment method can reference the appropriate identifier when communicating with Adyen.</p>\r\n\r\n<h4><a name=\"authorization-extension\" id=\"authorization-extension\"></a>Authorization Extension</h4>\r\n\r\n<p>When an authorization expires, the default behavior is for the re-authorization job schedule to create a new authorization as a follow on of the original authorization. When an authorization extension is enabled, during the re-auth process, a new authorization is created against the original with Authorization Type = ExtendAuthorization. Despite the newly created authorization transaction in&nbsp;Manhattan Active® Omni, the original authorization request identifier is what is&nbsp;sent to Adyen to invoke&nbsp;the Amount Updates process with the original transaction amount. When a successful response is received from Adyen, the authorization expiration date is updated to the current date + the configured number of authorization expiration days.&nbsp;</p>\r\n\r\n<p>Similar to the standard re-authorization process, the authorization expiration date is required to be in the past in order to initiate the re-authorization flow to perform the authorization&nbsp;extension. This means for payment or card types utilizing auth extension, the configuration for authorization expiry should be set so that the authorization on the Manhattan Active® Omni payment transaction expires before the authorization within Adyen expires.</p>\r\n\r\n<p>Consider the following example:</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:800px;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\"><strong>Time</strong></th>\r\n\t\t\t<th scope=\"col\"><strong>Event</strong></th>\r\n\t\t\t<th scope=\"col\"><strong>Transaction Type</strong></th>\r\n\t\t\t<th scope=\"col\"><strong>Request Id</strong></th>\r\n\t\t\t<th scope=\"col\"><strong>Adyen Follow-On Reference</strong></th>\r\n\t\t\t<th scope=\"col\"><strong>Expiration Date</strong></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>T1</td>\r\n\t\t\t<td>New authorization is saved</td>\r\n\t\t\t<td>Authorization</td>\r\n\t\t\t<td>Auth1</td>\r\n\t\t\t<td>N/A</td>\r\n\t\t\t<td>T2</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>T2</td>\r\n\t\t\t<td>Re-authorization process</td>\r\n\t\t\t<td>Authorization</td>\r\n\t\t\t<td>Auth 2</td>\r\n\t\t\t<td>Auth 1</td>\r\n\t\t\t<td>T3</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>T3</td>\r\n\t\t\t<td>Settlement process</td>\r\n\t\t\t<td>Settlement</td>\r\n\t\t\t<td>Settle 1</td>\r\n\t\t\t<td>Auth 1</td>\r\n\t\t\t<td>N/A</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<div class=\"tip\"><strong>Note:&nbsp;</strong>The payment transaction list shown when viewing the order details will still show multiple authorization transactions. The authorization type field on the transaction drives whether a new authorization was generated by Adyen or if the same authorization was extended to expire at a later date.</div>\r\n\r\n<p>This behavior is disabled by default but can be enabled by setting the \"ExtendAuthExpiry\" to true on the respective Payment&nbsp;Configuration.</p>\r\n\r\n<div class=\"computer_code\">POST&nbsp;/payment/api/payment/paymentTypeConfig/save<br>\r\n<br>\r\n{<br>\r\n&nbsp; &nbsp; \"ExtendAuthExpiry\": true,<br>\r\n&nbsp; &nbsp; \"PaymentTypeConfigId\": \"{PaymentTypeConfigId}\"<br>\r\n}</div>\r\n\r\n<h4><a name=\"auto-close-transactions\" id=\"auto-close-transactions\"></a>Auto Close Transactions</h4>\r\n\r\n<p>Payment gateway configuration allows for the option to automatically close payment&nbsp;transactions once the synchronous acknowledgment is received from Adyen, but before the final response decision is sent via webhook notification. Practically, this means that Manhattan Active® Omni will treat a transaction as successful if the initial validation in Adyen passes,&nbsp;but before the actual response decision has been communicated. This final decision is still communicated via webhook notification like all other response decisions from Adyen. However, if the transaction was processed immediately using this functionality, this decision is only stored for reporting purposes, and not used for payment processing.&nbsp;When enabled, the high level flow works as illustrated below:</p>\r\n\r\n<ol>\r\n\t<li>A refund&nbsp;is created and sent to Adyen</li>\r\n\t<li>The response is received synchronously to indicate that the refund&nbsp;was successfully received and sent for processing to the payment provider.</li>\r\n\t<li>The payment transaction is closed successfully and the functional refund&nbsp;flow is complete.</li>\r\n\t<li>At a later point, a webhook notification is sent from Adyen.&nbsp;\r\n\t<ol start=\"1\" style=\"list-style-type: lower-alpha;\">\r\n\t\t<li>If the refund was successful, the notification status on the payment transaction is updated to match the payment response status.</li>\r\n\t\t<li>If the refund was unsuccessful, the notification status on the payment transaction is marked as a failure, while the payment response status remains successful.</li>\r\n\t</ol>\r\n\t</li>\r\n\t<li>If the refund was ultimately unsuccessful, it will still be treated as successful internally, and reconciliation outside the system is required.</li>\r\n</ol>\r\n\r\n<p>Refer to <a href=\"https://omni.helpdocsonline.com/payment-gateway-integration$adyen-gateway-configuration\">Payment Gateway Configuration</a> for configuration details.</p>\r\n\r\n<div class=\"tip\"><strong>Note: </strong>If you are using&nbsp;Adyen with&nbsp;Manhattan Active® Omni Point of Sale, it is required to process refund and void transactions using auto-closure.</div>\r\n\r\n<h4><a name=\"manual-capture\" id=\"manual-capture\"></a>Manual Capture</h4>\r\n\r\n<p>Payment types in Manhattan Active® Omni can be <a href=\"https://omni.helpdocsonline.com/adyen-payment-configuration$payment-type-configuration\">configured</a> to either settle directly as soon as the payment is captured, or authorize the amount to be paid and charge it when the invoicing process occurs during the order life cycle. Additionally, if payment is added to an order after it has been invoiced, for example, during the payment recovery process, a payment method may attempt settlement directly, irrespective of whether it is configured for authorization.&nbsp;To support both direct and follow-on settlement&nbsp;with Adyen, gateway requests leverage Adyen's manual capture functionality.</p>\r\n\r\n<p>All authorization and direct settlement requests to Adyen include the ManualCapture attribute to retain control on whether Adyen should attempt settlement immediately, or wait for a follow-on settlement request. If any direct settlement behavior is required, <a href=\"https://omni.helpdocsonline.com/adyen-payment-configuration$captures-settlements\">specific configuration is needed in the Adyen merchant account.</a></p>\r\n\r\n<h4><a name=\"void-of-refund\" id=\"void-of-refund\"></a>Void of Refund</h4>\r\n\r\n<p>Adyen does not support a void of a refund transaction. Instead, if a refund is processed, and it is required to void that refund transaction, a settlement is processed against it, similar to a chargeback scenario. This is controlled by the gateway parameter \"createSettlementWhenVoidingRefund\", which can be added to the Adyen payment gateway if voiding refund transactions is a required flow. When enabled, a void transaction is still created against the refund, but internally, the transaction&nbsp;is sent to Adyen as a settlement and the payment method is charged the refunded amount.</p>\r\n\r\n<p>If void of refund is not a required flow, this can be disabled up front at the payment method level.</p>\r\n\r\n<h4><a name=\"risk-profiles-and-fraud-behavior\" id=\"risk-profiles-and-fraud-behavior\"></a>Risk Profiles and Fraud Behavior</h4>\r\n\r\n<p>The Manhattan Active® integration with Adyen includes support to leverage risk profile configuration for additional fraud detection functionality offered by Adyen.</p>\r\n\r\n<p>When an Authorization transaction is saved in \"Fraud\" status, the order is put on a fraud hold while it waits for the final decision of the transaction from the manual review process. Once the manual review process has been completed in Adyen, a notification event is sent to Manhattan Active® Omni to update the authorization status to either \"Success\" or \"Failure\". If the transaction status moves from \"Fraud\" to \"Success\", the hold on the order is automatically resolved. If the transaction status moves from \"Fraud\" to \"Failure\", the order hold is also automatically removed. However, the payment status changes to \"Awaiting Payment Info\" to indicate that new payment information is required.&nbsp;</p>\r\n\r\n<p>These general fraud behavioral assumptions are common for <a href=\"https://omni.helpdocsonline.com/payment-fraud$detecting-fraud-via-the-payment-gateway\">fraud checks by the payment gateway</a>, irrespective&nbsp;of the payment provider.</p>\r\n\r\n<p>The process of flagging an authorization on \"Fraud\" status&nbsp;between Manhattan Active® and Adyen&nbsp;can be broken into two primary flows:</p>\r\n\r\n<h5>Imported Authorization</h5>\r\n\r\n<p>If an external ecommerce&nbsp;system is performing the initial authorization before sending the order and payment data to Manhattan Active, it is required that the Authorization transaction be marked with a response status of \"Fraud\", and an external response code that is mapped to a \"Fraud\" response status. Only transactions that have been sent to Adyen case management for manual review should be marked as \"Fraud\" transactions, as transactions that are rejected without a manual review are considered within Manhattan Active and Adyen as a \"Failure\", and require a new authorization transaction in order to process any payment.</p>\r\n\r\n<h5>New Authorization</h5>\r\n\r\n<p>If Manhattan Active® is performing the initial authorization, during customer service order creation, or during the pay by link process, the authorization response decision&nbsp;from Adyen includes the&nbsp;\"fraudManualReview\" and \"fraudResultType\" fields in the&nbsp;response data. If these fields are \"true\", and \"AMBER\", respectively, the authorization is automatically flagged in Fraud status.&nbsp;This is required to interpret the response requiring the authorization to get flagged in \"Fraud\" status, as the initial response decision is still considered to be a \"Success\".</p>\r\n\r\n<p>For example:</p>\r\n\r\n<div class=\"computer_code\">{<br>\r\n&nbsp; &nbsp;\"notificationItems\": [<br>\r\n&nbsp; &nbsp; &nbsp; {<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"NotificationRequestItem\": {<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"additionalData\": {<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"fraudResultType\": \"AMBER\",<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"fraudManualReview\": \"true\"<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"pspReference\": \"SWPTBM4FD2TL5QT5\",<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"success\": \"true\"<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br>\r\n&nbsp; &nbsp; &nbsp; }<br>\r\n&nbsp; &nbsp;]<br>\r\n}</div>\r\n\r\n<h4><a name=\"minor-units\" id=\"minor-units\"></a>Minor Units</h4>\r\n\r\n<p>Adyen expects all transaction amount values to be sent in minor units. For example, an amount value of \"1000\"&nbsp;corresponds to $10 USD, €10 EUR, or ¥1000 JPY. This is handled automatically by applying a factor&nbsp;to the money amount that is specific to the currency code in order to apply the correct number of decimal places to a value.</p>\r\n\r\n<p>A few examples of this include:</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:350px;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\" style=\"width: 157px;\">Currency Code</th>\r\n\t\t\t<th scope=\"col\" style=\"width: 189px;\">Factor</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 143px;\">USD</td>\r\n\t\t\t<td style=\"width: 175px;\">100</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 143px;\">EUR</td>\r\n\t\t\t<td style=\"width: 175px;\">100</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 143px;\">JPY</td>\r\n\t\t\t<td style=\"width: 175px;\">1</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>Refer to <a href=\"https://docs.adyen.com/development-resources/currency-codes/#minor-units\">Adyen documentation</a> for additional details.</p>\r\n\r\n<h4><a name=\"api-idempotency\" id=\"api-idempotency\"></a>API Idempotency</h4>\r\n\r\n<p>All API requests made to Adyen leverage idempotency to allow the retry of identical requests without performing the same action multiple times. The idempotency key is set at the API request header level, and is generated using a combination of the OrgId and the UniqueTransactionId of the payment transaction corresponding to the API request. For example, when a transaction is marked as unavailable and an additional transaction is created, both transactions share a UniqueTransactionId in case Adyen performed any action. When the new transaction is executed, it is treated as a retry, and an identical response is sent back, without attempting to process any additional payment.</p>\r\n\r\n<p>Refer to <a href=\"https://docs.adyen.com/development-resources/api-idempotency/\">Adyen documentation</a> for additional details.</p>\r\n\r\n<h3><a name=\"webhook-event-notifications\" id=\"webhook-event-notifications\"></a>Webhook Event Notifications</h3>\r\n\r\n<p>Webhook notification events are messages sent by Adyen to asynchronously communicate response decisions for synchronously acknowledging receipt and performing initial validation of the payment request. Different transactions will include different types of webhook event. The typical payment transaction process relies on the notification from Adyen to close the payment transaction with the appropriate response decision and status.</p>\r\n\r\n<p>All webhook events recieved from Adyen&nbsp;are stored in the gateway notification table in Manhattan Active® for a duration for troubleshooting purposes, and can be retrieved using the following API for troubleshooting or customization.</p>\r\n\r\n<div class=\"computer_code\">GET&nbsp;{{url}}/paymentgateway/api/paymentgateway/gatewayNotification</div>\r\n\r\n<p>When a webhook event is inserted into the gateway notification table, a message is sent asynchronously to perform a lookup for a matching, in-progress payment transaction. If a match is found, a second message is sent to update the transaction based on the response decision present in the webhook notification. If a payment transaction match is not found for the webhook event, the event remains in the gateway notification table until it is purged via the standard entity purge process. There is no systematic retry of the webhook event in the event of a match not found. For example, if the order capture system attempts authorization and sends the order&nbsp;with the authorization still in progress, with the assumption that the webhook event from Adyen will close this authorization, the order with in-progress&nbsp;authorization needs to be received by&nbsp;Manhattan Active® Omni before the webhook event. If it is in any way required to retry webhook events that may not have found a match on the first attempt, but may find a match&nbsp;on subsequent attempts, customization is required.</p>\r\n\r\n<h4><a name=\"webhook-event-codes\" id=\"webhook-event-codes\"></a>Webhook Event Codes</h4>\r\n\r\n<p>Refer to the following table for more details on the specific webhook event codes that are used to process payment transactions.</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">Event Code</th>\r\n\t\t\t<th scope=\"col\">Details</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>AUTHORISATION</td>\r\n\t\t\t<td>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>New authorization, advance authorization, re-authorization&nbsp;(via new authorization)</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>AUTHORISATION_ADJUSTMENT</td>\r\n\t\t\t<td>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Partial authorization reversal, re-authorization (via authorization extension)</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>CAPTURE</td>\r\n\t\t\t<td>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Follow-on settlement, direct settlement</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>CAPTURE_FAILED</td>\r\n\t\t\t<td>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Follow-on settlement</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>CANCELLATION</td>\r\n\t\t\t<td>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Authorization reversal</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>REFUND</td>\r\n\t\t\t<td>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Follow-on refund</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>REFUND_FAILED</td>\r\n\t\t\t<td>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Follow-on refund</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>MANUAL_REVIEW_ACCEPT</td>\r\n\t\t\t<td>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Authorization (Fraud &gt; Success)</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>MANUAL_REVIEW_REJECT</td>\r\n\t\t\t<td>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Authorization (Fraud &gt; Failure)</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<h4><a name=\"webhook-event-matching\" id=\"webhook-event-matching\"></a>Webhook Event Matching</h4>\r\n\r\n<h5>Matching by Payment Service Provider(PSP) Reference</h5>\r\n\r\n<p>In the majority of payment transaction flows, the PSP reference sent by Adyen is used to match the webhook event to the payment transaction. In this case, the&nbsp;Adyen PSP reference is set as the payment transaction request Id by the synchronous Adyen response when the transaction is initially sent to Adyen for processing. When the webhook event is received later, the payment transaction status has already been set to \"In Progress\" and the \"RequestId\" has already been stamped with the \"pspReference\", as a result, the PSP reference is used to look up the payment transaction and update it to the appropriate status based on the data in the webhook event.</p>\r\n\r\n<h5>Matching by Merchant Reference</h5>\r\n\r\n<p>Although not applicable to any payment flows provided out of the box, it is possible for some payment flows that Adyen does not provide the PSP reference in the synchronous API response. For example, an authorization is done by re-directing Adyen to another payment provider that requires additional authentication to process the authorization. In this case, the webhook event is sent to Manhattan Active® before a PSP reference is available on the payment transaction. If there is no match found for the Adyen PSP reference on any payment transaction, the transaction is looked up using the Adyen \"merchantReference\" field present on synchronous payment&nbsp;responses and webhook events.</p>\r\n\r\n<p>In order to appropriately use this transaction matching functionality, it is critical that when the initial payment request is sent to Adyen, the format for populating the merchant reference and saving the payment data against the order&nbsp;is done as follows:</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">Attribute</th>\r\n\t\t\t<th scope=\"col\">Value</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>PaymentTransactionId</td>\r\n\t\t\t<td>Any unique string (max 100)</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>merchantReference</td>\r\n\t\t\t<td>OrderId||OrgId||PaymentTransactionId</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div class=\"tip\"><strong>Note: </strong>The originating system that makes the initial request to Adyen and saves the payment data against the order is responsible for populating this information correctly in order to match the Adyen response to the payment transaction in&nbsp;Manhattan Active® Omni.</div>\r\n\r\n<h3><a name=\"configuration\" id=\"configuration\"></a>Configuration</h3>\r\n\r\n<p>For details on configuration, refer to <a href=\"https://omni.helpdocsonline.com/adyen-payment-configuration\">Adyen Payment Configuration.</a></p>\r\n\r\n<h3><a name=\"implementation-flavors\" id=\"implementation-flavors\"></a>Implementation Flavors</h3>\r\n\r\n<h4><a name=\"use-the-adyen-payments-gateway-with-an-unsupported-payment-type\" id=\"use-the-adyen-payments-gateway-with-an-unsupported-payment-type\"></a>Use the Adyen Payments gateway with an unsupported payment type</h4>\r\n\r\n<p>Implement the \"Paymentgateway:Adyen:UserExit:CallAdyenGateway\" extension point, with the appropriate entry condition to only include the required payment type. The input to this extension point is similar to the standard \"CallGateway\" extension point, and includes the:</p>\r\n\r\n<ul>\r\n\t<li>Payment method</li>\r\n\t<li>Open payment transaction</li>\r\n\t<li>Gateway object</li>\r\n\t<li>Order</li>\r\n</ul>\r\n\r\n<p>The output of this user exit should be the raw, synchronous response from Adyen, including (but not limited to):</p>\r\n\r\n<ul>\r\n\t<li>Result code</li>\r\n\t<li>PSP reference</li>\r\n</ul>\r\n\r\n<h4><a name=\"add-additional-data-to-the-adyen-nbsp-payment-request-body\" id=\"add-additional-data-to-the-adyen-nbsp-payment-request-body\"></a>Add additional data to the Adyen&nbsp;payment request body</h4>\r\n\r\n<p>Implement the \"Paymentgateway:Adyen:UserExit:EditAdyenRequest\" extension point. This extension point input&nbsp;includes the standard call gateway request, as well as the Adyen request body. The output should include only the Adyen request, with any additional required attributes added.</p>\r\n\r\n<h4><a name=\"add-notification-retry-logic-when-a-transaction-match-is-not-found\" id=\"add-notification-retry-logic-when-a-transaction-match-is-not-found\"></a>Add notification retry logic when a transaction match is not found</h4>\r\n\r\n<p>If it is expected that Adyen will send a webhook event before a matching&nbsp;payment transaction is created against the payment header, the following custom process can be implemented.</p>\r\n\r\n<ol>\r\n\t<li>Create a custom listener for&nbsp;the&nbsp;PaymentNotificationQueueMSGType.</li>\r\n\t<li>Perform a lookup for a matching payment transaction.</li>\r\n\t<li>If no match is found, send the message to a custom queue with a delay for retry at a later point.</li>\r\n\t<li>If a match is found, send the message back to the base queue for processing.</li>\r\n</ol>\r\n\r\n<h4><a name=\"add-webhook-in-firewall-restricted-environment\" id=\"add-webhook-in-firewall-restricted-environment\"></a>Add webhook in firewall-restricted environment</h4>\r\n\r\n<p>Adyen callback is always performed using dynamic IP's, with no pre-specificied range. If your Manhattan Active® Omni environment&nbsp;is restricted from external traffic by a firewall, additional setup is required to receive webhook notifications from Adyen. At a high level, the webhook endpoint needs to be routed through the self-service component, which allows the firewall to be ignored in lieu of traditional IP whitelisting or DNS lookup.&nbsp;</p>\r\n\r\n<p>After <a href=\"https://omni.helpdocsonline.com/adyen-payment-configuration$adyen-authentication-credentials\">generating the webhook</a> as normal from Manhattan Active® perform the following actions to replace 'paymentgateway' component routing with 'selfservice' component routing.</p>\r\n\r\n<ol>\r\n\t<li>Add the following attributes&nbsp;to the Consul key / value configuration in the 'selfservice' component of the custom repository for the corresponding environment.</li>\r\n</ol>\r\n\r\n<div class=\"computer_code\">manh.command-router.commands.adyenNotify.commandPath=/gateway/adyenpayments/notify/*<br>\r\nmanh.command-router.commands.adyenNotify.targetComponent=com-manh-cp-paymentgateway<br>\r\nmanh.command-router.commands.adyenNotify.targetEndpoint=/api/gateway/adyenpayments/notify</div>\r\n\r\n<ol start=\"2\">\r\n\t<li>Modify the WebhookURL generated on the payment gateway account attribute configuration directly, replacing the 'paymentgateway' URL path with 'selfservice/ui', and append the OrgId as a URL parameter.</li>\r\n</ol>\r\n\r\n<p><strong>Example Generated WebhookURL:</strong></p>\r\n\r\n<div class=\"computer_code\">/paymentgateway/api/gateway/adyenpayments/notify/1a2b3c4d5e6f7g8h9i</div>\r\n\r\n<p><strong>Example Modified WebhookURL:</strong></p>\r\n\r\n<div class=\"computer_code\"><strong>selfservice/ui/api/selfservice/</strong>gateway/adyenpayments/notify/1a2b3c4d5e6f7g8h9i<strong>?orgId=TestOrg</strong></div>\r\n\r\n<div class=\"computer_code\">POST&nbsp;{{url}}/payment/api/payment/gateway/save<br>\r\n{<br>\r\n&nbsp; &nbsp; \"Account\": [<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; {<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"AccountAttribute\": [<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"Value\": \"<strong>selfservice/ui/api/selfservice/gateway/adyenpayments/notify/1a2b3c4d5e6f7g8h9i?orgId=TestOrg\"</strong>,<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"Name\": \"WebhookURL\"<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ],<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"AccountId\": \"<strong>{AccountId}</strong>\"<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; }<br>\r\n&nbsp; &nbsp; ],<br>\r\n&nbsp; &nbsp; \"GatewayId\": \"AdyenPayments\"<br>\r\n}</div>\r\n\r\n<ol start=\"3\">\r\n\t<li>When <a href=\"https://omni.helpdocsonline.com/adyen-payment-configuration$webhook\">configuring the WebhookURL in Adyen</a>, save this modified URL with the 'selfservice' path.</li>\r\n</ol>\r\n\r\n<div class=\"tip\"><strong>Note:&nbsp;</strong>The hostname configured with the webhook in the Adyen portal should hold the value of the self service hostname for the particular environment if it has been modified.</div>\r\n\r\n<h3><a name=\"troubleshooting\" id=\"troubleshooting\"></a>Troubleshooting</h3>\r\n\r\n<h4><a name=\"payment-transactions-are-stuck-in-open-status\" id=\"payment-transactions-are-stuck-in-open-status\"></a>Payment transactions are stuck in 'open' status</h4>\r\n\r\n<p>If your payment transaction has no request Id populated and remains in 'open' status, this means that no&nbsp;synchronous API call has been made successfully&nbsp;to Adyen.</p>\r\n\r\n<ol>\r\n\t<li>Save an additional payment request in 'ExecuteOnly' mode</li>\r\n\t<li>Verify your request&nbsp;is not in the Adyen 'API Logs'. If you do not see&nbsp;any request to Adyen, the issue is likely with the <a href=\"https://omni.helpdocsonline.com/adyen-payment-configuration$adyen-authentication-credentials\">API Key configuration</a>.</li>\r\n</ol>\r\n\r\n<h4><a name=\"payment-transactions-are-stuck-in-in-progress-status\" id=\"payment-transactions-are-stuck-in-in-progress-status\"></a>Payment transactions are stuck in 'in-progress' status</h4>\r\n\r\n<p>If your payment transaction has a request Id populated and has been moved to 'in-progress' status, this means a successful connection with Adyen has been made for synchronous processing, but there may be an issue with the asynchronous webhook event flow between Manhattan Active® and Adyen.</p>\r\n\r\n<ol>\r\n\t<li>Verify the event has been generated in Adyen in their \"Event Logs\" and the response is 'Accepted'. If the response is 'Rejected', the issue is likely with the&nbsp;<a href=\"https://omni.helpdocsonline.com/adyen-payment-configuration$adyen-authentication-credentials\">Webhook and HMAC key configuration</a>.</li>\r\n\t<li>Verify the Adyen webhook event has been stored in the gateway notification table in the respective organization under the transaction RequestId (PSP Reference)\r\n\t<ol start=\"1\" style=\"list-style-type: lower-alpha;\">\r\n\t\t<li>\r\n\t\t<div class=\"computer_code\">POST&nbsp;{{url}}/paymentgateway/api/paymentgateway/gatewayNotification/search<br>\r\n\t\t<br>\r\n\t\t{<br>\r\n\t\t&nbsp; &nbsp; \"Query\": \"RequestId = {RequestId}\"<br>\r\n\t\t}</div>\r\n\t\t</li>\r\n\t</ol>\r\n\t</li>\r\n\t<li>Verify that you are seeing messages process through the <a href=\"https://omni.helpdocsonline.com/adyen-payment-configuration$queues-and-message-types\">relevant queues</a>, and that these message types are not failing.</li>\r\n\t<li>Notification events can be re-attempted manually during troubleshooting using the PK of the \"gatewayNotification\" object from the above-mentioned search.\r\n\t<ol start=\"1\" style=\"list-style-type: lower-alpha;\">\r\n\t\t<li>\r\n\t\t<div class=\"computer_code\">POST&nbsp;{{url}}/paymentgateway/api/async/outbound/send?messageType=PaymentNotificationQueueMSGType<br>\r\n\t\t<br>\r\n\t\t{<br>\r\n\t\t&nbsp; &nbsp; \"Payload\": {<br>\r\n\t\t&nbsp; &nbsp; &nbsp; &nbsp; \"PK\": \"{gatewayNotification PK}\"<br>\r\n\t\t&nbsp; &nbsp; }<br>\r\n\t\t}</div>\r\n\t\t</li>\r\n\t</ol>\r\n\t</li>\r\n</ol>\r\n\r\n<h3><a name=\"related-articles\" id=\"related-articles\"></a>Related Articles</h3>\r\n\r\n<div class=\"info\"><a href=\"https://omni.helpdocsonline.com/payment-gateway-integration\">Payment Gateway Integration</a></div>\r\n\r\n\t  </div>\r\n </div>\r\n <div id=\"ui-page-fb-wrap\"></div>\r\n <div class=\"hiq-footer-wrap\">\r\n    \r\n                \r\n  </div>\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n",
  "content_length": 56984,
  "scraped_at": "2025-08-09T21:58:52.849223",
  "content_clean": "Home ››Manhattan Active® Omni››Order Management››Process & Configuration Guides››Order Selling››Payment››Payment Gateway Integration ››Adyen Payment Integration Adyen Payment Integration Adyen Payment IntegrationOverviewProcess OverviewPay By LinkInitiate PaymentFilter Payment MethodsSupported Payment TypesSupported Transaction TypesAuthorizationSettlementRefundAuthorization ReversalVoidBalance CheckAdyen Specific ProcessingAsynchronous Response DecisionsNetwork Transaction IdAuthorization ExtensionAuto Close TransactionsManual CaptureVoid of RefundRisk Profiles and Fraud BehaviorMinor UnitsAPI IdempotencyWebhook Event NotificationsWebhook Event CodesWebhook Event MatchingConfigurationImplementation FlavorsUse the Adyen Payments gateway with an unsupported payment typeAdd additional data to the Adyen payment request bodyAdd notification retry logic when a transaction match is not foundAdd webhook in firewall-restricted environmentTroubleshootingPayment transactions are stuck in 'open' statusPayment transactions are stuck in 'in-progress' statusRelated Articles Overview Manhattan Active® Omni provides the capability to integrate with Adyen out of the box for payment processing. This page contains an overview of the process through which the payment gateway interacts with Adyen and details on the specific payment flows that are supported with Adyen. For more details on In-Store payments, refer to POS Documentation. Process Overview At the time a payment request is executed, open payment transactions on the order are sent to the configured payment gateway based on the corresponding payment rule. If the payment type is configured to process through the base Adyen gateway, the following process is invoked. A gateway request is generated containing the payment method, payment transaction, and select order and customer information (base gateway request) The gateway request is converted into an Adyen format. Adyen responds synchronously, which is typically only an acknowledgement that the request has been received. The payment transaction on the payment header is marked as in-progress and excluded from future execution to the gateway. Adyen responds asynchronously via webhook with a response decision for the transaction. The webhook response is stored in a staging table and matched against existing in-progress payment transactions. If a match is found, the transaction response status is updated to closed and the payment transaction is processed according to the response decision. Note: While this is the typical process of payment transaction processing, there can be specific exceptions to this. Refer to Auto Close Transactions for more details. Pay By Link Out of the box, payment can be captured using Adyen's hosted payment page, launched through Pay by Link email and text messages. This is supported for all payment methods that are also supported out of the box for transaction processing. The pay by link process via Adyen goes as follows: Launch the pay by link page Pre-populate billing information if available on the order Tokenize the payment information and capture it as a payment method against the order Initiate Payment Initiate payment refers to the API used to call Adyen and either tokenize, or tokenize and authorize payment information to be used for order and payment processing. This request includes the request object sent to Adyen, with encrypted payment information, billing address, browser info, and basic order attributes for post-tokenization processing. The response includes the result of the request. If successful, the tokenized payment information, is saved to the payment header an eligible for processing. To ensure all possible information is included on the saved payment method, verify the additional data configuration in your Adyen merchant account. A successful initiate payment process results in a payment method saved against the order, either already including an authorization or settlement transaction, or without any authorization or settlement transaction, with the intent of creating and executing one upon order confirmation. A failed initiate payment process does not result in any payment information saved back to the order, as this implies that there was a failure to tokenize any payment information and an inability to process any payment. Tokenize Only The default Adyen pay by link behavior is to only tokenize the payment method information, without authorizing any amount up front. In general, this is to allow the full amount to be authorized for the order upon confirmation, to allow for any changes to the order total prior to attempting authorization. During the tokenize only flow, a successful initiate payment response results in a payment method saved to the order in 'CalculateOnly' mode, and creating an open payment transaction which is not immediately sent to Adyen. From an Adyen perspective, this takes the form of a 0 amount authorization request, used only to tokenize and save the payment method information. Because this is used as a standalone tokenization call, no payment transaction for 0 is saved to the payment header directly, even when successful. If the request to Adyen is not successful, no payment method is saved to the order at all, as the payment token was not generated, and there is nothing that can be processed against it. Note: Adding a gift card in Adyen pay by link always follows the 'tokenize only' process, regardless of how this behavior is configured. Tokenize and Authorize Optionally, pay by link through Adyen can be configured to tokenize and authorize in a single request. When configured, the same request made to Adyen to tokenize the payment includes the full balance of the order at the time the pay by link page is opened. When successful initiate payment call is made in this case, a tokenized payment method and succesful payment transaction are saved directly to the payment header, with no additional payment action required during the order capture process, unless the balance due changes after the payment has been captured. Once the authorization has been completed and captured, no changes can be applied to the total. If the order balance is increased after the payment has been captured using this flavor additional payment must be added by the customer to cover the remaining amount. This flavor is primarily recommended when using 3DS authentication through Adyen, to avoid displaying a zero currency amount to the customer when the payment provider page is shown to them for additional verification. Note: Adding a PayPal method in Adyen pay by link always follows the 'tokenize and authorize' process, regardless of how this behavior is configured. 3DS Authentication Out of the box, the pay by link process supports native 3DS authentication through Adyen. No additional enablement is required within Manhattan Active® on top of what is already needed for pay by link usage. The 3DS flow is driven by the specific response given by the payment provider, where, instead of immediately responding with tokenized payment information, indicating a successful transaction, the customer is re-directed to an additional authentication page, hosted by the bank or payment provider. Upon successful verification on that page, the successful or failed response is re-directed back to the pay by link page, as it would be if no 3DS authentication was performed. Refer to Adyen Documentation for additional details. Filter Payment Methods The list of payment methods shown on the pay by link page is based on the payment methods configured in the respective Adyen merchant account. However, this list can be filtered selectively using a configurable list on the respective Adyen payment gateway configuration. Refer to Adyen Pay By Link Configuration. Supported Payment Types Credit Card Debit Gift Card Apple Pay PayPal Refer to Payment Gateway Documentation for a list of supported transactions by payment method. Supported Transaction Types The following payment transaction flows are supported within the scope of the Adyen integration. For more details on the internal payment process and configuration, refer to the Payment documentation. Note: Supported use cases may be dependent on a specific Adyen merchant account configuration. Authorization Supported use cases Use Case Description Example Payment Types New authorization Adding a new payment type to an order that has not yet been sent to the payment provider for payment authorization A hosted payment process saves a tokenized payment method to be authorized upon the next payment calculation and execution. Credit Card Debit Gift Card Apple Pay PayPal (Via Pay By Link) Re-authorization Authorizing an amount on an authorized payment method when the initial authorized amount has expired Ecom system (or POS) sends Active® Omni an order that is already authorized - auth expiry is in 7 days - if the order is still not fulfilled in 7 days, create a new authorization on the same payment method. Credit Card Debit Gift Card Apple Pay PayPal Advance authorization Authorizing the remaining value of unfulfilled goods on an order that has been partially settled The payment type is configured as \"advance authorization required\". An order with payment is authorized and partially fulfilled. At the time of partial fulfillment, the fulfilled amount is settled, the remaining unfulfilled amount is reversed against the initial authorization, and then authorized as part of a new transaction. Credit Card Debit Gift Card Apple Pay PayPal Authorization extension Updating the authorization expiration date of an existing authorization during the re-authorization process. Ecom system (or POS) sends Active® Omni an order that is already authorized - auth expiry is in 7 days - if the order is still not fulfilled in 7 days, send existing authorization to Adyen to extend the authorization. Credit Card Debit Apple Pay Please note that for payment types that require authorization, it is important to sync up the authorization expiration days configured under the respective Payment Type Configuration with the actual authorization expiration days of the payment provider. Refer to the Authorization documentation for more details. Settlement Supported use cases Use Case Description Example Payment Types Follow-on settlement Collecting funds which have already been authorized for goods at the order status during which invoicing is done. The payment type requires authorization and the order payment method is authorized. When the item(s) is fulfilled, an amount, either the complete amount or a partial amount, that has already been authorized is sent to the payment provider for settlement. Credit Card Debit Gift Card Apple Pay PayPal Standalone settlement Collecting funds up front when an order is captured using a payment method that does not require authorization. The payment type does not require authorization, the full order total is settled when the order is placed. Credit Card Debit Gift Card Apple Pay PayPal Refer to the Settlement documentation for more details. Refund Supported use cases Use Case Description Example Payment Types Refund on original order Refunding funds to the original payment method that has already been settled when the order total is reduced Pickup at store order is charged before fulfillment. After the order has been charged, 1 or more items are cancelled and the payment method used to pay for the items is refunded. Credit Card Debit Apple Pay PayPal Refund on return order Refunding funds to the original payment method when the customer returns item(s) that were charged The payment type does not require authorization, the full order total is settled when the order is placed. Credit Card Debit Apple Pay PayPal Standalone refund (POS only) Issuing a refund for a newly added payment method when returning items An order is paid for using a credit card, and the customer returns the order to the store and requests a refund to go to a different payment method. Refer to POS Documentation for details Refer to the Refund documentation for more details. Authorization Reversal Unlike other base payment integrations, authorization reversal is not an internal transaction when integrating with Adyen. When an authorized amount is reduced from an order total, for example, a unit is cancelled prior to fulfillment, the amount reduced from the order is sent to Adyen as part of an authorization reversal transaction. Depending on whether the authorized amount is being partially reduced, or set to 0, this may be sent to Adyen as a partial amount update to an existing authorization, or an authorization cancel to reverse the full amount. Adyen does not support partial amount reversal for non-card payments. If the payment type is not a card (or digital wallet with a card), and the amount to reverse on an authorization is less than the complete remaining authorized amount, this transaction is closed internally. Authorization reversals are all treated as successful internally to update the remaining available authorization amount correctly. If an authorization reversal was ultimately unsuccessful, the response status is tracked under the payment transaction's \"NotificationStatus\" for informational purposes. Note: It is required to configure your Adyen merchant account to treat all authorizations as \"pre-authorizations\" to allow authorization reversal to work properly. Supported use cases Use Case Description Example Payment Types Authorized order total is reduced An update is made to an order to set the value of the order as less than the amount of payment that is authorized on the order. An order is authorized and released to the fulfillment center. One of the items is cancelled, reducing the amount required to be authorized to settle the complete order total. Credit Card Debit Gift Card (Full Reversal) Apple Pay PayPal (Full Reversal) Advance authorization Reversing the remaining value of unfulfilled goods prior to re-authorization on an order that has been partially settled The payment type is configured as \"advance authorization required\". An order with payment is authorized and partially fulfilled. At the time of partial fulfillment, the fulfilled amount is settled, the remaining unfulfilled amount is reversed against the initial authorization, and then authorized as part of a new transaction. Credit Card Debit Apple Pay PayPal Refer to the Authorization Reversal documentation for more details. Void Supported use cases Use Case Description Example Payment Types Void of settlement A settlement has been executed to the payment gateway, but not fully processed yet by the payment provider. An order is fulfilled from point of sale, then post-voided within the store. Sending a void transaction to the payment gateway. Credit Card Debit Refer to the Void documentation for more details. Balance Check Use Case Description Example Payment Types Balance check of existing gift card Adding a gift card for use as payment on an order, an upfront check is done on the gift card balance. An order is created in contact center and a gift card is added as payment. The amount stored on the card is returned and stored as the processed amount on the balance check transaction. Gift Card Refer to Balance Check documentation for more details. Adyen Specific Processing Version Type Version API Version v70 Java API Library Version 19.0.0 UI Version 5.68.1 Asynchronous Response Decisions Adyen communicates the response decision of payment transactions asynchronously. This means that when a payment transaction is sent to Adyen for processing, the response sent is only an acknowledgement of the request. To avoid re-execution to the gateway prior to a response decision, these transactions are moved from open to in-progress to wait for the webhook notification from Adyen prior to closure. Network Transaction Id The out of box integration with Adyen relies heavily on tracking the initial payment transaction reference identifier. For example, when a payment is authorized, and subsequently settled as a follow-on of the authorization. Any refund initiated against the settlement references the original authorization identifier. When importing externally processed payment transactions into Manhattan Active® Omni, it is required to populate the network transaction Id in addition to the transaction request Id so that future transactions against that payment method can reference the appropriate identifier when communicating with Adyen. Authorization Extension When an authorization expires, the default behavior is for the re-authorization job schedule to create a new authorization as a follow on of the original authorization. When an authorization extension is enabled, during the re-auth process, a new authorization is created against the original with Authorization Type = ExtendAuthorization. Despite the newly created authorization transaction in Manhattan Active® Omni, the original authorization request identifier is what is sent to Adyen to invoke the Amount Updates process with the original transaction amount. When a successful response is received from Adyen, the authorization expiration date is updated to the current date + the configured number of authorization expiration days. Similar to the standard re-authorization process, the authorization expiration date is required to be in the past in order to initiate the re-authorization flow to perform the authorization extension. This means for payment or card types utilizing auth extension, the configuration for authorization expiry should be set so that the authorization on the Manhattan Active® Omni payment transaction expires before the authorization within Adyen expires. Consider the following example: Time Event Transaction Type Request Id Adyen Follow-On Reference Expiration Date T1 New authorization is saved Authorization Auth1 N/A T2 T2 Re-authorization process Authorization Auth 2 Auth 1 T3 T3 Settlement process Settlement Settle 1 Auth 1 N/A Note: The payment transaction list shown when viewing the order details will still show multiple authorization transactions. The authorization type field on the transaction drives whether a new authorization was generated by Adyen or if the same authorization was extended to expire at a later date. This behavior is disabled by default but can be enabled by setting the \"ExtendAuthExpiry\" to true on the respective Payment Configuration. POST /payment/api/payment/paymentTypeConfig/save { \"ExtendAuthExpiry\": true, \"PaymentTypeConfigId\": \"{PaymentTypeConfigId}\" } Auto Close Transactions Payment gateway configuration allows for the option to automatically close payment transactions once the synchronous acknowledgment is received from Adyen, but before the final response decision is sent via webhook notification. Practically, this means that Manhattan Active® Omni will treat a transaction as successful if the initial validation in Adyen passes, but before the actual response decision has been communicated. This final decision is still communicated via webhook notification like all other response decisions from Adyen. However, if the transaction was processed immediately using this functionality, this decision is only stored for reporting purposes, and not used for payment processing. When enabled, the high level flow works as illustrated below: A refund is created and sent to Adyen The response is received synchronously to indicate that the refund was successfully received and sent for processing to the payment provider. The payment transaction is closed successfully and the functional refund flow is complete. At a later point, a webhook notification is sent from Adyen. If the refund was successful, the notification status on the payment transaction is updated to match the payment response status. If the refund was unsuccessful, the notification status on the payment transaction is marked as a failure, while the payment response status remains successful. If the refund was ultimately unsuccessful, it will still be treated as successful internally, and reconciliation outside the system is required. Refer to Payment Gateway Configuration for configuration details. Note: If you are using Adyen with Manhattan Active® Omni Point of Sale, it is required to process refund and void transactions using auto-closure. Manual Capture Payment types in Manhattan Active® Omni can be configured to either settle directly as soon as the payment is captured, or authorize the amount to be paid and charge it when the invoicing process occurs during the order life cycle. Additionally, if payment is added to an order after it has been invoiced, for example, during the payment recovery process, a payment method may attempt settlement directly, irrespective of whether it is configured for authorization. To support both direct and follow-on settlement with Adyen, gateway requests leverage Adyen's manual capture functionality. All authorization and direct settlement requests to Adyen include the ManualCapture attribute to retain control on whether Adyen should attempt settlement immediately, or wait for a follow-on settlement request. If any direct settlement behavior is required, specific configuration is needed in the Adyen merchant account. Void of Refund Adyen does not support a void of a refund transaction. Instead, if a refund is processed, and it is required to void that refund transaction, a settlement is processed against it, similar to a chargeback scenario. This is controlled by the gateway parameter \"createSettlementWhenVoidingRefund\", which can be added to the Adyen payment gateway if voiding refund transactions is a required flow. When enabled, a void transaction is still created against the refund, but internally, the transaction is sent to Adyen as a settlement and the payment method is charged the refunded amount. If void of refund is not a required flow, this can be disabled up front at the payment method level. Risk Profiles and Fraud Behavior The Manhattan Active® integration with Adyen includes support to leverage risk profile configuration for additional fraud detection functionality offered by Adyen. When an Authorization transaction is saved in \"Fraud\" status, the order is put on a fraud hold while it waits for the final decision of the transaction from the manual review process. Once the manual review process has been completed in Adyen, a notification event is sent to Manhattan Active® Omni to update the authorization status to either \"Success\" or \"Failure\". If the transaction status moves from \"Fraud\" to \"Success\", the hold on the order is automatically resolved. If the transaction status moves from \"Fraud\" to \"Failure\", the order hold is also automatically removed. However, the payment status changes to \"Awaiting Payment Info\" to indicate that new payment information is required. These general fraud behavioral assumptions are common for fraud checks by the payment gateway, irrespective of the payment provider. The process of flagging an authorization on \"Fraud\" status between Manhattan Active® and Adyen can be broken into two primary flows: Imported Authorization If an external ecommerce system is performing the initial authorization before sending the order and payment data to Manhattan Active, it is required that the Authorization transaction be marked with a response status of \"Fraud\", and an external response code that is mapped to a \"Fraud\" response status. Only transactions that have been sent to Adyen case management for manual review should be marked as \"Fraud\" transactions, as transactions that are rejected without a manual review are considered within Manhattan Active and Adyen as a \"Failure\", and require a new authorization transaction in order to process any payment. New Authorization If Manhattan Active® is performing the initial authorization, during customer service order creation, or during the pay by link process, the authorization response decision from Adyen includes the \"fraudManualReview\" and \"fraudResultType\" fields in the response data. If these fields are \"true\", and \"AMBER\", respectively, the authorization is automatically flagged in Fraud status. This is required to interpret the response requiring the authorization to get flagged in \"Fraud\" status, as the initial response decision is still considered to be a \"Success\". For example: { \"notificationItems\": [ { \"NotificationRequestItem\": { \"additionalData\": { \"fraudResultType\": \"AMBER\", \"fraudManualReview\": \"true\" }, \"pspReference\": \"SWPTBM4FD2TL5QT5\", \"success\": \"true\" } } ] } Minor Units Adyen expects all transaction amount values to be sent in minor units. For example, an amount value of \"1000\" corresponds to $10 USD, €10 EUR, or ¥1000 JPY. This is handled automatically by applying a factor to the money amount that is specific to the currency code in order to apply the correct number of decimal places to a value. A few examples of this include: Currency Code Factor USD 100 EUR 100 JPY 1 Refer to Adyen documentation for additional details. API Idempotency All API requests made to Adyen leverage idempotency to allow the retry of identical requests without performing the same action multiple times. The idempotency key is set at the API request header level, and is generated using a combination of the OrgId and the UniqueTransactionId of the payment transaction corresponding to the API request. For example, when a transaction is marked as unavailable and an additional transaction is created, both transactions share a UniqueTransactionId in case Adyen performed any action. When the new transaction is executed, it is treated as a retry, and an identical response is sent back, without attempting to process any additional payment. Refer to Adyen documentation for additional details. Webhook Event Notifications Webhook notification events are messages sent by Adyen to asynchronously communicate response decisions for synchronously acknowledging receipt and performing initial validation of the payment request. Different transactions will include different types of webhook event. The typical payment transaction process relies on the notification from Adyen to close the payment transaction with the appropriate response decision and status. All webhook events recieved from Adyen are stored in the gateway notification table in Manhattan Active® for a duration for troubleshooting purposes, and can be retrieved using the following API for troubleshooting or customization. GET {{url}}/paymentgateway/api/paymentgateway/gatewayNotification When a webhook event is inserted into the gateway notification table, a message is sent asynchronously to perform a lookup for a matching, in-progress payment transaction. If a match is found, a second message is sent to update the transaction based on the response decision present in the webhook notification. If a payment transaction match is not found for the webhook event, the event remains in the gateway notification table until it is purged via the standard entity purge process. There is no systematic retry of the webhook event in the event of a match not found. For example, if the order capture system attempts authorization and sends the order with the authorization still in progress, with the assumption that the webhook event from Adyen will close this authorization, the order with in-progress authorization needs to be received by Manhattan Active® Omni before the webhook event. If it is in any way required to retry webhook events that may not have found a match on the first attempt, but may find a match on subsequent attempts, customization is required. Webhook Event Codes Refer to the following table for more details on the specific webhook event codes that are used to process payment transactions. Event Code Details AUTHORISATION New authorization, advance authorization, re-authorization (via new authorization) AUTHORISATION_ADJUSTMENT Partial authorization reversal, re-authorization (via authorization extension) CAPTURE Follow-on settlement, direct settlement CAPTURE_FAILED Follow-on settlement CANCELLATION Authorization reversal REFUND Follow-on refund REFUND_FAILED Follow-on refund MANUAL_REVIEW_ACCEPT Authorization (Fraud > Success) MANUAL_REVIEW_REJECT Authorization (Fraud > Failure) Webhook Event Matching Matching by Payment Service Provider(PSP) Reference In the majority of payment transaction flows, the PSP reference sent by Adyen is used to match the webhook event to the payment transaction. In this case, the Adyen PSP reference is set as the payment transaction request Id by the synchronous Adyen response when the transaction is initially sent to Adyen for processing. When the webhook event is received later, the payment transaction status has already been set to \"In Progress\" and the \"RequestId\" has already been stamped with the \"pspReference\", as a result, the PSP reference is used to look up the payment transaction and update it to the appropriate status based on the data in the webhook event. Matching by Merchant Reference Although not applicable to any payment flows provided out of the box, it is possible for some payment flows that Adyen does not provide the PSP reference in the synchronous API response. For example, an authorization is done by re-directing Adyen to another payment provider that requires additional authentication to process the authorization. In this case, the webhook event is sent to Manhattan Active® before a PSP reference is available on the payment transaction. If there is no match found for the Adyen PSP reference on any payment transaction, the transaction is looked up using the Adyen \"merchantReference\" field present on synchronous payment responses and webhook events. In order to appropriately use this transaction matching functionality, it is critical that when the initial payment request is sent to Adyen, the format for populating the merchant reference and saving the payment data against the order is done as follows: Attribute Value PaymentTransactionId Any unique string (max 100) merchantReference OrderId||OrgId||PaymentTransactionId Note: The originating system that makes the initial request to Adyen and saves the payment data against the order is responsible for populating this information correctly in order to match the Adyen response to the payment transaction in Manhattan Active® Omni. Configuration For details on configuration, refer to Adyen Payment Configuration. Implementation Flavors Use the Adyen Payments gateway with an unsupported payment type Implement the \"Paymentgateway:Adyen:UserExit:CallAdyenGateway\" extension point, with the appropriate entry condition to only include the required payment type. The input to this extension point is similar to the standard \"CallGateway\" extension point, and includes the: Payment method Open payment transaction Gateway object Order The output of this user exit should be the raw, synchronous response from Adyen, including (but not limited to): Result code PSP reference Add additional data to the Adyen payment request body Implement the \"Paymentgateway:Adyen:UserExit:EditAdyenRequest\" extension point. This extension point input includes the standard call gateway request, as well as the Adyen request body. The output should include only the Adyen request, with any additional required attributes added. Add notification retry logic when a transaction match is not found If it is expected that Adyen will send a webhook event before a matching payment transaction is created against the payment header, the following custom process can be implemented. Create a custom listener for the PaymentNotificationQueueMSGType. Perform a lookup for a matching payment transaction. If no match is found, send the message to a custom queue with a delay for retry at a later point. If a match is found, send the message back to the base queue for processing. Add webhook in firewall-restricted environment Adyen callback is always performed using dynamic IP's, with no pre-specificied range. If your Manhattan Active® Omni environment is restricted from external traffic by a firewall, additional setup is required to receive webhook notifications from Adyen. At a high level, the webhook endpoint needs to be routed through the self-service component, which allows the firewall to be ignored in lieu of traditional IP whitelisting or DNS lookup. After generating the webhook as normal from Manhattan Active® perform the following actions to replace 'paymentgateway' component routing with 'selfservice' component routing. Add the following attributes to the Consul key / value configuration in the 'selfservice' component of the custom repository for the corresponding environment. manh.command-router.commands.adyenNotify.commandPath=/gateway/adyenpayments/notify/* manh.command-router.commands.adyenNotify.targetComponent=com-manh-cp-paymentgateway manh.command-router.commands.adyenNotify.targetEndpoint=/api/gateway/adyenpayments/notify Modify the WebhookURL generated on the payment gateway account attribute configuration directly, replacing the 'paymentgateway' URL path with 'selfservice/ui', and append the OrgId as a URL parameter. Example Generated WebhookURL: /paymentgateway/api/gateway/adyenpayments/notify/1a2b3c4d5e6f7g8h9i Example Modified WebhookURL: selfservice/ui/api/selfservice/gateway/adyenpayments/notify/1a2b3c4d5e6f7g8h9i?orgId=TestOrg POST {{url}}/payment/api/payment/gateway/save { \"Account\": [ { \"AccountAttribute\": [ { \"Value\": \"selfservice/ui/api/selfservice/gateway/adyenpayments/notify/1a2b3c4d5e6f7g8h9i?orgId=TestOrg\", \"Name\": \"WebhookURL\" } ], \"AccountId\": \"{AccountId}\" } ], \"GatewayId\": \"AdyenPayments\" } When configuring the WebhookURL in Adyen, save this modified URL with the 'selfservice' path. Note: The hostname configured with the webhook in the Adyen portal should hold the value of the self service hostname for the particular environment if it has been modified. Troubleshooting Payment transactions are stuck in 'open' status If your payment transaction has no request Id populated and remains in 'open' status, this means that no synchronous API call has been made successfully to Adyen. Save an additional payment request in 'ExecuteOnly' mode Verify your request is not in the Adyen 'API Logs'. If you do not see any request to Adyen, the issue is likely with the API Key configuration. Payment transactions are stuck in 'in-progress' status If your payment transaction has a request Id populated and has been moved to 'in-progress' status, this means a successful connection with Adyen has been made for synchronous processing, but there may be an issue with the asynchronous webhook event flow between Manhattan Active® and Adyen. Verify the event has been generated in Adyen in their \"Event Logs\" and the response is 'Accepted'. If the response is 'Rejected', the issue is likely with the Webhook and HMAC key configuration. Verify the Adyen webhook event has been stored in the gateway notification table in the respective organization under the transaction RequestId (PSP Reference) POST {{url}}/paymentgateway/api/paymentgateway/gatewayNotification/search { \"Query\": \"RequestId = {RequestId}\" } Verify that you are seeing messages process through the relevant queues, and that these message types are not failing. Notification events can be re-attempted manually during troubleshooting using the PK of the \"gatewayNotification\" object from the above-mentioned search. POST {{url}}/paymentgateway/api/async/outbound/send?messageType=PaymentNotificationQueueMSGType { \"Payload\": { \"PK\": \"{gatewayNotification PK}\" } } Related Articles Payment Gateway Integration"
}