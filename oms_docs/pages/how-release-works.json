{
  "id": "2588625",
  "permalink": "how-release-works",
  "title": "How Release Works",
  "type": "topic",
  "level": 6,
  "path": "Manhattan Active® Omni/Order Management/Process & Configuration Guides/Order Processing/Order Fulfillment/Order Release/How Release Works",
  "raw_item": {
    "id": "2588625",
    "text": "How Release Works",
    "title": "How Release Works",
    "permalink": "how-release-works",
    "leaf": false,
    "droppable": true,
    "expanded": true,
    "closed": true,
    "visible": true,
    "editable": true,
    "type": "topic",
    "topicType": "0",
    "status": "1",
    "iconCls": "icon-topic",
    "cls": "",
    "folder_id": "289282",
    "parent": "f;289282",
    "created_date": "1589973861",
    "modified_date": "1749116599",
    "instructor_id": null,
    "loaded": true,
    "haschildren": false,
    "callout": "0",
    "order": "2"
  },
  "success": true,
  "content": "\r\n\r\n\r\n<div class=\"hiq-page-wrap\">\r\n<div class=\"hiq-t-wrap\">\r\n\t\t\r\n  \t  <div class=\"hiq-t \">\r\n\t\t\t\t<ul class=\"breadcrumbs\"><li><a class=\"breadcrumb-links\" hqid=\"1788908\"  href=\"/home\">Home</a></li> <li><span>&rsaquo;&rsaquo;</span><a hqid=\"3500940\" href=\"/omni\" class=\"breadcrumb-links\">Manhattan Active® Omni</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158393\" href=\"/order-management\" class=\"breadcrumb-links\">Order Management</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158394\" href=\"/process-configuration-guides\" class=\"breadcrumb-links\">Process & Configuration Guides</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158718\" href=\"/order-processing-2\" class=\"breadcrumb-links\">Order Processing</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158747\" href=\"/order-fulfillment\" class=\"breadcrumb-links\">Order Fulfillment</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2588623\" href=\"/release\" class=\"breadcrumb-links\">Order Release</a></li><li> <span>››</span>How Release Works</li></ul>  \t\r\n\t\t<h2>How Release Works</h2>\r\n\r\n<p></p>\r\n\r\n<a href=\"/order-release-overview\" hqid=\"2588624\">Previous</a>&nbsp;I&nbsp;<a href=\"/release-grouping-and-creation\" hqid=\"2588626\">Next</a>\r\n<p>&nbsp;</p>\r\n\r\n<p>In this section let's understand some basic concepts of release that include how release works, remorse period etc.</p>\r\n\r\n<div class=\"info\"><ul><li><a href=\"/how-release-works$how-release-works\">How Release Works</a><ul><li><a href=\"/how-release-works$customizing-the-release-id\">Customizing the Release ID</a></li><li><a href=\"/how-release-works$immediate-release\">Immediate Release</a></li><li><a href=\"/how-release-works$batch-release\">Batch Release</a></li><li><a href=\"/how-release-works$ad-hoc-release\">Ad-hoc Release</a></li></ul></li><li><a href=\"/how-release-works$remorse-period\">Remorse Period</a></li><li><a href=\"/how-release-works$order-line-remorse-period\">Order Line Remorse Period</a><ul><li><a href=\"/how-release-works$order-line-remorse-process-flow\">Order Line Remorse Process Flow</a></li></ul></li><li><a href=\"/how-release-works$bypassing-order-line-remorse-period\">Bypassing Order Line Remorse Period</a></li><li><a href=\"/how-release-works$validations-performed-during-release\">Validations Performed During Release</a></li><li><a href=\"/how-release-works$releasing-digital-goods\">Releasing Digital Goods</a><ul><li><a href=\"/how-release-works$digital-goods-fulfillment-pipeline\">Digital Goods Fulfillment Pipeline</a></li></ul></li><li><a href=\"/how-release-works$authorization-on-release\">Authorization On Release</a></li><li><a href=\"/how-release-works$configuration\">Configuration</a><ul><li><a href=\"/how-release-works$batch-release-pipeline-configuration\">Batch Release Pipeline Configuration</a></li><li><a href=\"/how-release-works$batch-release-agent-configuration\">Batch Release Agent Configuration</a></li><li><a href=\"/how-release-works$remorse-period-configuration\">Remorse Period Configuration</a></li><li><a href=\"/how-release-works$remorse-period-configuration-nbsp-via-api\">Remorse Period Configuration&nbsp;via API</a></li><li><a href=\"/how-release-works$order-line-remorse-period-configuration\">Order Line Remorse Period Configuration</a></li><li><a href=\"/how-release-works$order-line-remorse-period-configuration-via-api\">Order Line Remorse Period Configuration via API</a></li><li><a href=\"/how-release-works$release-cut-off-time-grace-period\">Release Cut-Off Time Grace Period</a></li></ul></li><li><a href=\"/how-release-works$implementation-flavors\">Implementation Flavors</a><ul><li><a href=\"/how-release-works$set-up-an-order-line-remorse-period-of-60-mins-nbsp-for-mpos-orders-where-shippingmethod-is-not-“smdy-pm”-“smdy-am”\">Set up an order line remorse period of 60 mins&nbsp;for MPOS orders where ShippingMethod is not (“SMDY PM”, “SMDY AM”)</a></li><li><a href=\"/how-release-works$how-nbsp-to-prevent-the-release-of-lines-allocated-to-on-hand-available-soon-supply-type\">How&nbsp;to prevent the release of lines allocated to \"On Hand Available Soon\" supply type</a></li><li><a href=\"/how-release-works$how-to-evaluate-release-consolidation-rules-in-prereleaseorder-isreleasable-ue-do-we-have-the-consolidation-rules-api-exposed\">How to evaluate release consolidation rules in PreReleaseOrder / IsReleasable UE. Do we have the consolidation rules API exposed</a></li><li><a href=\"/how-release-works$how-to-evaluate-releasable-criteria-for-merge-shipment\">How to evaluate releasable criteria for Merge shipment</a></li><li><a href=\"/how-release-works$holding-digital-goods\">Holding Digital Goods</a></li><li><a href=\"/how-release-works$split-release-for-specific-order-type-only\">Split Release for specific Order Type only</a></li><li><a href=\"/how-release-works$how-to-accommodate-manual-changes-through-donotreleasebefore-date-and-trigger-the-release\">How to accommodate manual changes through DoNotReleaseBefore date and trigger the release</a></li><li><a href=\"/how-release-works$how-to-find-if-a-fulfillment-location-is-of-type-store-or-dc-nbsp-nbsp\">How to find if a fulfillment location is of type Store or DC&nbsp;&nbsp;</a></li><li><a href=\"/how-release-works$how-to-change-the-pipeline-for-gift-card-items-purchased-online-to-move-the-order-lines-directly-from-open-to-fulfilled\">How to change the pipeline for gift card items purchased online to move the order lines directly from open to fulfilled</a></li><li><a href=\"/how-release-works$how-to-copy-the-extended-order-order-line-attribute-values-to-release-release-line\">How to copy the extended order/order line attribute values to release/release line</a></li><li><a href=\"/how-release-works$how-to-disable-change-shipping-address-for-orders-in-the-remorse-period\">How to disable change shipping address for orders in the remorse period</a></li></ul></li><li><a href=\"/how-release-works$related-article-s\">Related Article(s)</a></li></ul></div>\r\n\r\n<h3><a name=\"how-release-works\" id=\"how-release-works\"></a>How Release Works</h3>\r\n\r\n<p>An order can be released in three ways.</p>\r\n\r\n<ul>\r\n\t<li>Immediate Release: Order is release immediately after allocation with an optional remorse period. For example, 30 minutes after the order is confirmed.</li>\r\n\t<li>Batch Release : Order is release in&nbsp;scheduled batches. For example, every day at 6 AM, 12 PM, and 6 PM.</li>\r\n\t<li>Ad-hoc Release: Order is released&nbsp;in the UI or via API.</li>\r\n</ul>\r\n\r\n<p>Regardless of the method used, the release service works by picking allocations, grouping them into releases based on origin, destination, and other parameters listed below, and creating releases. The outbound release message is then published to the corresponding fulfillment system, which will later respond with ship, pickup, or short messages.</p>\r\n\r\n<p>Release IDs are computed by appending a counter at the end of the order Ids. For order ID ORD001, the associated releases will have release Ids: ORD0011, ORD0012, ORD0013, etc... Because order Is are unique, this logic will ensure release Id are unique&nbsp;as well. This means even if release Id's repeat, as long as the order Id is distinct, there will be a unique identifier for each entry.</p>\r\n\r\n<div class=\"tip\"><strong>Note</strong>: Currently, the system does not perform a tax call before release by default, and there is no out-of-the-box configuration available to enable this. Implementing such functionality would require a custom solution.</div>\r\n\r\n<h4><a name=\"customizing-the-release-id\" id=\"customizing-the-release-id\"></a>Customizing the Release ID</h4>\r\n\r\n<p>If the standard way of computing release ID is not compatible with the fulfillment system format, it is possible to implement a user exit&nbsp;Order:Order:UserExit:GenerateReleaseId to customize the way the release ID is generated.&nbsp;</p>\r\n\r\n<h4><a name=\"immediate-release\" id=\"immediate-release\"></a>Immediate Release</h4>\r\n\r\n<p>Immediate release allows orders to be released instantly&nbsp;after allocation. An optional <a href=\"/how-release-works$Remorse Period\">remorse period</a> can be added to delay the release, so that customers&nbsp;can update or cancel&nbsp;orders. However, if no remorse period configuration is added, then order lines are released immediately after allocation.</p>\r\n\r\n<p>Immediate release is configured by default for all orders. This is controlled by the release service in the order pipeline.</p>\r\n\r\n<h4><a name=\"batch-release\" id=\"batch-release\"></a>Batch Release</h4>\r\n\r\n<p>Batch release can be used to release orders to fulfillment systems based on a schedule (e.g. every 4 hours, or every day at 7 AM and 8 PM). For example, batch release can be used to release orders to the DC based on the scheduled work shifts.&nbsp;</p>\r\n\r\n<p>The batch release process uses the same filters, validations, and rules that immediate allocation uses. Batch release can be used in conjunction with immediate allocation or batch allocation.</p>\r\n\r\n<ul>\r\n\t<li>If used in conjunction with immediate allocation, then orders are allocated immediately to reserve inventory, but they are not released until the batch release scheduler runs.&nbsp;An out of the box pipeline called 'OrdersWithScheduledRelease' can be used for these types of orders. The pipeline does not have any criteria which are&nbsp;used to identify eligible orders/order lines. This criteria must be configured for this pipeline definition.&nbsp;\r\n\t<ul>\r\n\t\t<li>Refer <a href=\"/how-release-works$How to Configure Batch Release Pipeline\">How to Configure Batch Release Pipeline</a>.</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li>If used in conjunction with batch allocation, the&nbsp;orders are allocated based on the batch allocation scheduler, and are then released when the batch release scheduler runs. To use this combination, modify the pipeline to include batch allocation and batch release. Once the pipeline is modified then configure batch release agent to post the messages to the release queue.&nbsp;\r\n\t<ul>\r\n\t\t<li>Refer <a href=\"/how-release-works$How to Configure Batch Release Agent\">How to Configure Batch Release Agent.</a></li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<h4><a name=\"ad-hoc-release\" id=\"ad-hoc-release\"></a>Ad-hoc Release</h4>\r\n\r\n<p>In the normal course of operations, the immediate and batch release services ensure all orders get released. However, during troubleshooting or testing there are other tools which can be used to trigger release for an individual order line, order, or set of orders:</p>\r\n\r\n<ul>\r\n\t<li>On the&nbsp;<a href=\"https://omni.helpdocsonline.com/orders-2\">Order List UI</a>, select order(s) and click the 'Release' button</li>\r\n\t<li>On the&nbsp;<a href=\"https://omni.helpdocsonline.com/orders-2\">Order List UI</a>, select search criteria and click the 'Release All' button. Refer <a hqid=\"2846683\" href=\"/massrelease\">Mass Release</a> for more details.</li>\r\n\t<li>On the <a href=\"https://omni.helpdocsonline.com/orders-2\">Order List UI</a>, select an order and select 'Order Details' &gt; Select one or more lines on the order and click the 'Release' button, or select the header 'Release' button to release all lines</li>\r\n\t<li>On the&nbsp;<a href=\"https://omni.helpdocsonline.com/orders-2$order-order-line-list\">Order Line List UI</a>, select order line(s) and click the 'Release' button</li>\r\n\t<li>Call the API directly: Use the following API,&nbsp;<a href=\"https://omni.helpdocsonline.com/rest-apis-and-user-exits\">REST APIS and USER Exits</a>\r\n\t<ul>\r\n\t\t<li>\r\n\t\t<pre data-pm-slice=\"1 1 [&quot;table&quot;,null,&quot;tableRow&quot;,null,&quot;tableCell&quot;,null]\">&lt;url&gt;/order/api/order/order/{orderId}/release - GET method to release an order</pre>\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t<pre data-pm-slice=\"1 1 [&quot;table&quot;,null,&quot;tableRow&quot;,null,&quot;tableCell&quot;,null]\">&lt;url&gt;/order/api/order/order/release - POST menthod to release list of orders</pre>\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t<pre data-pm-slice=\"1 1 [&quot;table&quot;,null,&quot;tableRow&quot;,null,&quot;tableCell&quot;,null]\">&lt;url&gt;/order/api/order/order/orderLine/release - POST method to release list of order lines</pre>\r\n\t\t</li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<h3><a name=\"remorse-period\" id=\"remorse-period\"></a><a id=\"Remorse Period\" name=\"Remorse Period\"></a>Remorse Period</h3>\r\n\r\n<p>A remorse period is a way to introduce a delay between placing an order and releasing an order. Because order edits are very limited once an order is released, introducing this delay gives customers a chance to update quantities, shipping address, cancel items, and so on. Once an order is released, these edits are no longer permitted.</p>\r\n\r\n<p>The remorse period is achieved by setting a date called <em>DoNotReleaseBefore</em> on the order header.&nbsp;For each order, the release service checks if the <em>DoNotReleaseBefore</em> date is in the past before releasing the order.</p>\r\n\r\n<p><em>DoNotReleaseBefore</em> date will be stored in UTC time zone always. All the dates in Manhattan&nbsp;Active® Omni&nbsp;needs to be passed in UTC time zone.</p>\r\n\r\n<p>For example, if an order is confirmed at 8:00 and a 45-minute remorse period is in place, then the <em>DoNotReleaseBefore</em> date on the order is set to 8:45. The milestone scheduler runs frequently and checks for orders with DoNotReleaseBefore dates in the past, so that it can release them. When the scheduler runs at 8:32, this order is not released. When the scheduler runs at 8:45, then this order is released.</p>\r\n\r\n<p>There are two ways to enforce a remorse period delay:</p>\r\n\r\n<ul>\r\n\t<li>Configure a remorse period (for example,&nbsp;30 minutes) in Active® Omni</li>\r\n\t<li>For imported orders, you can alternatively populate the DoNotReleaseBefore date in an external system. Even if remorse period is configured in Active® Omni, the imported value will be honored and not overridden by the milestone configuration.</li>\r\n</ul>\r\n\r\n<p>If a remorse period is configured in Active® Omni, then the <em>DoNotReleaseBefore</em> is populated based on the<font color=\"#d35400\">&nbsp;</font>DependentMilestoneId&nbsp;plus the expected time rule duration.&nbsp;For example,&nbsp;the DependentMilestoneId: \"Order::Milestone::Confirmed\" in the expected time rule is configured with a duration of 35 minutes. When an&nbsp;order is confirmed on 01-30-2020 at 10:00 AM, the&nbsp;<em>DoNotReleaseBefore</em> is set to 01-30-2020 10:35 UTC.</p>\r\n\r\n<p>A milestone scheduler runs frequently to pick orders with DoNotReleaseBefore dates in the past and release them.</p>\r\n\r\n<p>In the milestone configuration, Restrict By Date has significance only with respect to the Released milestone. For example, the Released milestone is configured with&nbsp;\"Expected 3 hours after Confirmed Milestone\" and&nbsp;\"Restrict By Date\" enabled. This indicates that after the order has been confirmed, it will not get released for next 3 hours. When \"Restrict By Date\" is selected, the system populates&nbsp;the attribute \"DoNotReleaseBefore\". This&nbsp;Restrict By Date functionality is not supported for any milestones other than Released.</p>\r\n\r\n<p>It is&nbsp;currently not possible to vary the remorse period based on time of day. For example, when it's closer to carrier pick up time, the remorse period should be shorter so that the orders can be ready for the carrier. This is not possible in Active® Omni, but an external system or middleware can be used to populate the DoNotReleaseBefore date with an appropriate value.</p>\r\n\r\n<p>There is no method to 'pause' updates to an order while users are making updates in the remorse period. For example, if a 1-hour remorse period is in place, and the customer calls at 58 minutes to update their address, then there is a chance that the order gets released while a CSR is making updates. The only way to prevent the order from being released is for&nbsp;the CSR to hold the order while making updates, then unhold the order when updates are completed.</p>\r\n\r\n<p>To configure remorse periods, see:</p>\r\n\r\n<ul>\r\n\t<li><a href=\"/how-release-works$How to configure a remorse period via the Order Configuration UI\">How to configure a remorse period via the Order Configuration UI</a></li>\r\n\t<li><a href=\"/how-release-works$How to configure a remorse period via API\">How to configure a remorse period via API</a></li>\r\n</ul>\r\n\r\n<h3><a name=\"order-line-remorse-period\" id=\"order-line-remorse-period\"></a><a id=\"OrderLineRemorsePeriod\" name=\"OrderLineRemorsePeriod\"></a>Order Line Remorse Period</h3>\r\n\r\n<p>An order line remorse period is a way to introduce a delay between placing an order and releasing an order line.&nbsp;Lately, we have seen the emergence of newer service levels like Same Day Delivery, which requires some or all of the lines in specific orders to be released immediately to meet the same day SLAs and carrier cut off times. Similarly, Retail Order lines are required to be released immediately.</p>\r\n\r\n<p>The remorse period is achieved by setting a date called <em>DoNotReleaseBefore</em> on the order line.&nbsp;For each order line, the release service checks if the <em>DoNotReleaseBefore</em> date is in the past before releasing the order line.</p>\r\n\r\n<p>There are two ways to enforce a remorse period delay:</p>\r\n\r\n<ul>\r\n\t<li>Configure order line remorse period (for example,&nbsp;30 minutes) in Active® Omni.</li>\r\n\t<li>For imported orders, you can alternatively populate the DoNotReleaseBefore date in an external system. Even if the order line remorse period is configured in Active® Omni, the imported value will be honored and not overridden when isImport flag under Order Actions is set to true.</li>\r\n</ul>\r\n\r\n<div class=\"computer_code\">\"OrderActions\": {<br>\r\n&nbsp; &nbsp; \"IsImport\": \"true\"<br>\r\n&nbsp; }</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div class=\"tip\">Note: IsImport flag sent as \"true\" will suppress any other base or custom events that would trigger. So it is recommended that when IsImport flag sent as true should only include \"DoNotReleaseBefore\" date value and no other attributes which may trigger base or custom events.</div>\r\n\r\n<p>An Order line Remorse Config is characterised by the combination of Order Type, Delivery Method, and&nbsp;Shipping Method&nbsp;employed by an order line.&nbsp;The order line remorse period can be configured&nbsp;by defining a remorse period on the Order Line Remorse Config UI. The remorse period&nbsp;that is set in the Remorse Config UI (in minutes)&nbsp;is added to the order confirmation time&nbsp;to arrive at the ‘<i>DoNotReleaseBefore’&nbsp;</i>for each Order line. While determining the remorse config, if more than one matching config is found, then the below priority sequence is used for choosing one,</p>\r\n\r\n<ul type=\"disc\">\r\n\t<li>DeliveryMethodExactMatch & OrderTypeExactMatch&nbsp;&nbsp;& ShippingMethodExactMatch</li>\r\n\t<li>DeliveryMethodExactMatch & OrderTypeExactMatch&nbsp;&nbsp;& ShippingMethodNullMatch</li>\r\n\t<li>DeliveryMethodExactMatch & OrderTypeNullMatch & ShippingMethodNullMatch</li>\r\n\t<li>DeliveryMethodExactMatch</li>\r\n</ul>\r\n\r\n<p>Example:</p>\r\n\r\n<ul type=\"disc\">\r\n\t<li>A remorse config with No OrderType -&nbsp;is eligible for selection for order lines&nbsp;of every order type.</li>\r\n\t<li>A remorse config with No OrderType and No ShippingMethod -&nbsp;is eligible for selection by any order line that just matches the Delivery Method</li>\r\n</ul>\r\n\r\n<div class=\"tip\"><strong>Note </strong>: The '<em>DoNotReleaseBefore' </em>on the order line takes precedence over the '<em>DoNotReleaseBefore' </em>over the header<i>.&nbsp;</i>If there exists no Order line Remorse config that matches an Order line’s Delivery and Shipping method, the ‘<i>DoNotReleaseBefore’&nbsp;</i>at header is considered for releasing the order line if it exists.</div>\r\n\r\n<h4><a name=\"order-line-remorse-process-flow\" id=\"order-line-remorse-process-flow\"></a>Order Line Remorse Process Flow</h4>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-1\" class=\"toggle-content\"><span class=\"toggle-title\">Order Line Remorse Process Flow</span></a></p><div id=\"tg-1\"><p><img align=\"left\" alt=\"\" border=\"2\" class=\"\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/qu/6560/Orderline%20Remorse%20Process%20Flow.png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL3F1LzY1NjAvT3JkZXJsaW5lJTIwUmVtb3JzZSUyMFByb2Nlc3MlMjBGbG93LnBuZyIsIkNvbmRpdGlvbiI6eyJEYXRlTGVzc1RoYW4iOnsiQVdTOkVwb2NoVGltZSI6MTc1NDc1MTc0MX19fV19&Signature=f3YlmXKsUmDjxy1p3xPRHFFoRsoFcwCwO6VUe0hKsxXJlBeLl-bUH5UUPJSI5P6uohZPvoIhUERbfph0X-J4akpJDszOn-2PleFuxkAFUbLpuPKNGrLia1ZKiFpeI1Al9MPHUnfjUZO~8oACzX20iMti8mRLRBJJdlFINydaVn6yiJRK0dkuusKioCaEIo5p~OV3v4VYeS3VD4DB4206ZBVcByNrh7XW2z9Qb7h4mML91RHaJ0oePg~GIebNbulnbq9I2STPD2CXo-aGnlp-ZJKR2n8wMVZmZfCcnsEHU0dZBt~Oe4GtRWnCQyAFmGIAaAHwcY4Xc4CKeDdiJFtfbw__&Key-Pair-Id=K2TK3EG287XSFC\" style=\"margin-right:5px;padding:5px;\" /></p>\r\n\r\n\r\n</div></div></p>\r\n\r\n<p>To configure remorse period&nbsp;on order line, see:</p>\r\n\r\n<ul>\r\n\t<li><a href=\"/how-release-works$How to configure a remorse period via the Order Configuration UI\">How to configure a remorse period via the Order Line Remorse Configuration UI</a></li>\r\n\t<li><a href=\"/how-release-works$How to configure a remorse period via API\">How to configure a order line remorse period via API</a></li>\r\n</ul>\r\n\r\n<p style=\"text-align: justify;\">In case of order line modification (like ShippingMethodId or DeliveryMethodId or OrderType)&nbsp;during the remorse period, system&nbsp;re-calculates&nbsp;‘DoNotReleaseBefore’&nbsp;based on the remorse period&nbsp;present on the matched RemorseConfig. In the case of addition of a new order line to an existing order,&nbsp;the ‘DoNotReleaseBefore’ is calculated as per the line’s creation time and remorse period on the matching&nbsp;RemorseConfig.</p>\r\n\r\n<div class=\"tip\"><strong>Note </strong>:&nbsp;“When the order line’s&nbsp;<i>DoNotReleaseBefore&nbsp;</i>is updated by external intervention or manually to a past date, a manual trigger (like a Click on Release) is needed for evaluating the Order line&nbsp;for the release process. User should not expect that release will be attempted automatically in such cases.</div>\r\n\r\n<h3><a name=\"bypassing-order-line-remorse-period\" id=\"bypassing-order-line-remorse-period\"></a><a id=\"bypasslinelevelremorseperiod\" name=\"bypasslinelevelremorseperiod\"></a>Bypassing Order Line Remorse Period</h3>\r\n\r\n<p style=\"text-align: justify;\">Retailers may want to bypass the order line remorse period for some order lines even though it is aplicable and configured for other order lines in the order. For example, if an order&nbsp;has a bunch of ship to address order lines but one of the item/order-line in that order is picked up by the customer in the store and reserved for shipping, the retailer may want to immediately allocate that order line even though a order line level remorse period is configured for the ship to home order lines. Such types of order lines are identified by the attribute DeliveryMethodSubType =&nbsp;'SendSale' with DeliveryMethodId = ShipToAddress</p>\r\n\r\n<p>To bypass the order line remorse period configured in the system for such order lines, perform the following steps:</p>\r\n\r\n<p data-renderer-start-pos=\"167\">Hit the API: GET&nbsp;{{url}}/order/api/tags/tagGroup?size=22 (request body is not required)</p>\r\n\r\n<p>Verify if the below-mentioned&nbsp;Tag group is available in the response</p>\r\n\r\n<ul>\r\n\t<li>\"TagGroupId\": \"OrderLineRemorsePeriod\" - The Tag Group Id&nbsp;has to be defined exactly as mentioned here; else it will not be considered for determining the order line remorse period by the system</li>\r\n\t<li>\"TagConditionId\": \"DeliveryMethodSubTypeConditionOnOrderLine\"</li>\r\n\t<li>\"TagExpression\": \"DeliveryMethodSubType == 'SendSale'\" - This is the value of the DeliveryMethodSubType attribute on the order line that the Label framework will evaluate for populating the label. Any other attribute on the order line can be used in the Tag Expression&nbsp;</li>\r\n\t<li>\"Label\": \"RemorsePeriod:0\" - Here 0 (zero) represents the remorse period in terms of minutes; the label has to be defined exactly as mentioned here; else it will not be considered for determining the order line remorse period by the system. Any other value in terms of minutes can be defined instead of 0 (zero).</li>\r\n</ul>\r\n\r\n<p>Refer to the details mentioned below for the exact response.&nbsp;<div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-2\" class=\"toggle-content\"><span class=\"toggle-title\">OrderLineRemorsePeriodTagGroup</span></a></p><div id=\"tg-2\"><div class=\"computer_code\">\r\n<p>{</p>\r\n\r\n<p>&quot;Description&quot;: &quot;RemorsePeriodGroup contains set of conditions with various Tag Expressions(MVEL expressions)&quot;,</p>\r\n\r\n<p>&quot;TagGroupId&quot;: &quot;OrderLineRemorsePeriod&quot;,</p>\r\n\r\n<p>&quot;TagCondition&quot;: [</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&quot;Description&quot;: &quot;Send Sale OrderLine&quot;,</p>\r\n\r\n<p>&quot;ConditionLabels&quot;: [</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&quot;Label&quot;: &quot;RemorsePeriod:0&quot;</p>\r\n\r\n<p>}</p>\r\n\r\n<p>],</p>\r\n\r\n<p>&quot;TagConditionId&quot;: &quot;DeliveryMethodSubTypeConditionOnOrderLine&quot;,</p>\r\n\r\n<p>&quot;TagExpression&quot;: &quot;DeliveryMethodSubType == &#39;SendSale&#39;&quot;</p>\r\n\r\n<p>}</p>\r\n\r\n<p>]</p>\r\n\r\n<p>}</p>\r\n</div>\r\n</div></div></p>\r\n\r\n<p>If the Tag Group mentioned above is not available, use the below-mentioned API to create it.&nbsp;</p>\r\n\r\n<p>API: POST&nbsp;{{url}}/order/api/tags/tagGroup/save - with the response given above as the request body.</p>\r\n\r\n<p>In the order if an order line has&nbsp;DeliveryMethodSubType as 'SendSale'\" an Entity Labels section will be populated in the order line as detailed below.</p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-3\" class=\"toggle-content\"><span class=\"toggle-title\">LineLevelRemorsePeriodEntityLabel</span></a></p><div id=\"tg-3\"><div class=\"computer_code\">\r\n<p>&quot;EntityLabels&quot;: {</p>\r\n\r\n<p>&quot;Annotations&quot;: null,</p>\r\n\r\n<p>&quot;InheritedLabels&quot;: null,</p>\r\n\r\n<p>&quot;RuleLabels&quot;: {</p>\r\n\r\n<p>&quot;RemorsePeriod&quot;: &quot;0&quot;</p>\r\n\r\n<p>},</p>\r\n\r\n<p>&quot;AttributeLabels&quot;: null</p>\r\n\r\n<p>}</p>\r\n</div>\r\n</div></div></p>\r\n\r\n<p>The order line with the Entity Label populated with&nbsp;\"Label\": \"RemorsePeriod:0\" - will be immediately released irrespective of the order line remorse period configured in the system.&nbsp;</p>\r\n\r\n<div class=\"tip\">Note: The remorse period is applied automatically and Release Configuration&nbsp;need not be modified.&nbsp;</div>\r\n\r\n<div class=\"warning\" style=\"text-align: justify;\">The above-mentioned Tag Group has been provided in the base profile seed data and will be available automatically if the profile is synched/copied. If the default behaviour for 0 (zero) remorse period is not required for the order lines with&nbsp;DeliveryMethodSubType as 'SendSale'\", the TagGroup has to be manually deleted or updated using Tag Group API's. Refer&nbsp;to swagger for details.</div>\r\n\r\n<h3><a name=\"validations-performed-during-release\" id=\"validations-performed-during-release\"></a>Validations Performed During Release</h3>\r\n\r\n<p>Order lines must meet all the following criteria to be released:</p>\r\n\r\n<ul>\r\n\t<li>Matching release template should be found</li>\r\n\t<li>Order should be confirmed</li>\r\n\t<li>Units must be allocated</li>\r\n\t<li>DoNotReleaseBefore should be in the past (remorse period should be over)</li>\r\n\t<li>Supply must be configured as eligible for release, via the release demand type</li>\r\n</ul>\r\n\r\n<h3><a name=\"releasing-digital-goods\" id=\"releasing-digital-goods\"></a>Releasing Digital Goods</h3>\r\n\r\n<p>For items which do not track inventory, such as e-gift cards or other digital items, the allocation step is skipped and orders are directly released. A separate digital goods pipeline&nbsp;is used for lines with delivery method ‘Email’. This pipeline moves units from Open directly to Released status. For quantities which enter the release service without allocations, a release and release lines are created directly from the order and order line data.&nbsp;The fulfillment location config 'ALL' template is used for publishing the outbound releases for digital goods, as there is no ship from location on the release. The Order Configuration UI Modification Rules should have \"resubmit Pipeline\" as true for any modification that occur between open and released for these orders to get to released status properly.</p>\r\n\r\n<div class=\"info\"><strong>Note</strong>: Digital goods lines do&nbsp;not go through release template evaluation&nbsp;or consider Release configurations. Remorse period functionality can still be leveraged for digital goods by populating the \"DoNotReleaseBefore\" timestamp attribute at the order or order line level. However, if for example, your order remorse period is evaluated during the allocation milestone, then no remorse period will be calculated as digital goods do not go through the allocation process.</div>\r\n\r\n<h4><a name=\"digital-goods-fulfillment-pipeline\" id=\"digital-goods-fulfillment-pipeline\"></a>Digital Goods Fulfillment Pipeline</h4>\r\n\r\n<p><img height=\"88\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/Digital%20goods%20fulfillment%20pipeline.png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL0RpZ2l0YWwlMjBnb29kcyUyMGZ1bGZpbGxtZW50JTIwcGlwZWxpbmUucG5nIiwiQ29uZGl0aW9uIjp7IkRhdGVMZXNzVGhhbiI6eyJBV1M6RXBvY2hUaW1lIjoxNzU0NzUxNzQxfX19XX0_&Signature=LCyIlfpCz~Ts08o7-3RuZLznjRZUecqMIVH4nhLTwTc4kOiJrqnc0Yr8E1tJ8uUC5Yhq6apydbrmhfVCMjdjW34sRuRvBnP0QFSdvJO29ae7TtqWZBeWYPYn8hKg4J4LhbkexQm9K9B3aJ1OtVACgzdePWM6AcHgFCmzzBI6uJOzrp8OxYvlmhhfl~QCdwI6KGUulROPsTeoWMpb1PhR5j6PdG0REViRVydQBnpzHHxqobFrWOxBGa1PmFnoHanEd17zlHly~zLQHmZnpgijuQc9OZ9IvVYr-r-VtBa~hMnn0ttqWGWyNeg7sWn0dx6cZTLWA55DNo5ltvv9UXjsJg__&Key-Pair-Id=K2TK3EG287XSFC\" width=\"750\"></p>\r\n\r\n<h3><a name=\"authorization-on-release\" id=\"authorization-on-release\"></a>Authorization On Release</h3>\r\n\r\n<p>When the configuration <a href=\"https://omni.helpdocsonline.com/order-orchestration-configuration$payment-configuration\">Process Payment On Release</a>&nbsp;is enabled,&nbsp;the release process goes through an additional check upfront to verify that the amount attempting to be released has been paid for. In addition to other release eligibility checks (remorse period, release configuration, and so on), an order line(s) cannot be released unless there is a successful authorization or settlement to cover the releasable amount. If there is not enough paid on the order to cover the amount to be released, no release is created.</p>\r\n\r\n<p>At a high level, this is handled by tracking the amount on the order that is eligible for release, and comparing it to the amount of payment that has been authorized or settled. If nothing has been authorized or settled, the releaseable amount is used to create auth or settlement transactions&nbsp;against an eligible payment method.&nbsp;Refer to&nbsp;<a href=\"https://omni.helpdocsonline.com/authorization$authorization-on-release-for-pre-orders\">Authorization On Release For Pre-Orders</a>&nbsp;for more details.</p>\r\n\r\n<p>This behavior is <strong>NOT</strong> compatible with payment status validation in the respective release configuration. If this configuration is enabled, it is required to set the release configuration to not restrict release by payment status. Otherwise, if, for example, the payment status is \"Awaiting Payment Info\", and the order is not authorized, the release process will not be able to trigger authorization because the releasable amount will be calculated as 0.</p>\r\n\r\n<p>This configuration assumes the same release consolidation and grouping logic still applies. The calculated releasable amount value is done for all of the releasable units, not on an individual unit basis. Depending on the amount of payment that was captured upfront, it is possible that release creation is prevented&nbsp;because the amount authorized or settled does not cover the entire amount that can be released. In other words, if an order is authorized enough to cover 1 unit eligible for release, but not all units eligible for release, no release creation will happen.</p>\r\n\r\n<div class=\"info\"><strong>Note</strong>: Though unlikely, if release is attempted but ultimately unsuccessful because the corresponding authorization failed, the inventory reservation will still indicate the item(s) has been released. If this happens, certain inventory processes such as inventory rise/drop and continuous allocation will not function properly. The item(s) can still be released when eligible, as well as go through re-allocation or cancellation.</div>\r\n\r\n<h3><a name=\"configuration\" id=\"configuration\"></a>Configuration</h3>\r\n\r\n<h4><a name=\"batch-release-pipeline-configuration\" id=\"batch-release-pipeline-configuration\"></a><a id=\"How to Configure Batch Release Pipeline\" name=\"How to Configure Batch Release Pipeline\"></a>Batch Release Pipeline Configuration</h4>\r\n\r\n<p>This section gives details on how to modify the pipeline to perform batch release based on certain rule conditions.</p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-4\" class=\"toggle-content\"><span class=\"toggle-title\">Steps to Configure Batch Release Pipeline</span></a></p><div id=\"tg-4\"><div class=\"info\"><strong>Reminder on pipeline configuration.&nbsp;</strong><br />\r\n<br />\r\nMultiple objects are involved in the configuration of a pipeline: A <strong>Pipline</strong>, a <strong>Rule</strong>, a <strong>Rule Action</strong> and a <strong>Rule condition</strong>.&nbsp;<br />\r\n<br />\r\nThe <strong>Rule Condition</strong> includes the filter used to select specific orders. That filter is generated using the &#39;ConditionValue&#39; specific syntax. Look for examples in the existing rule conditions.&nbsp;<br />\r\n<br />\r\nThe <strong>Rule Action</strong> contains the name of the <strong>pipeline</strong> that is going to be invoked with the following rule: RuleActiob.ActionValue = Pipeline.PipelineID.<br />\r\n<br />\r\nThe <strong>Rule</strong> links the<strong> Rule Action</strong> and the <strong>Rule</strong> <strong>condition</strong> together.&nbsp;</div>\r\n\r\n<ul>\r\n\t<li><strong>Step 1: </strong>Rule Condition:&nbsp;Rule condition needs to be added. In this example, the rule condition contains all the orders of doc type &quot;Customer order&quot;</li>\r\n</ul>\r\n\r\n<pre>\r\n&lt;url&gt;/order/api/rules/ruleCondition/save\r\n</pre>\r\n\r\n<div class=\"computer_code\">\r\n<p>{<br />\r\n&nbsp; &quot;RuleConditionId&quot;: &quot;RULE_CONDITION_CUSTOMER_ORDER&quot;,<br />\r\n&nbsp; &quot;ConditionValue&quot;: &quot;{\\&quot;expression\\&quot;:{\\&quot;lhs\\&quot;:{\\&quot;operandType\\&quot;:\\&quot;attribute\\&quot;,\\&quot;attribute\\&quot;:\\&quot;orderLine.parentOrder.docType.docTypeId\\&quot;},\\&quot;rhs\\&quot;:{\\&quot;operandType\\&quot;:\\&quot;constant\\&quot;,\\&quot;value\\&quot;:\\&quot;CustomerOrder\\&quot;},\\&quot;operator\\&quot;:\\&quot;=\\&quot;}}&quot;<br />\r\n}</p>\r\n</div>\r\n\r\n<ul>\r\n\t<li><strong>Step 2: </strong>Pipeline: The pipeline that invokes Batch release needs to contains the &quot;batchRelease&quot; service instead of the &quot;releaseOrder&quot; service. Below is an example of a pipleine with BatchRelease service</li>\r\n</ul>\r\n\r\n<pre>\r\n &lt;url&gt;/order/api/ServiceDefinition/pipeline/save\r\n</pre>\r\n\r\n<div class=\"computer_code\">{<br />\r\n&nbsp; &quot;Messages&quot;: null,<br />\r\n&nbsp; &quot;PickupService&quot;: [<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;0000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;createOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;2000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;updateOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;1500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;updateOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;1000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;allocateOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;1000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;batchAllocate&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;1000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;allocateBackOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;1500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;allocateOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;1500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;batchAllocate&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;2000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;batchRelease&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;2000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;deAllocateOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;3000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;shortOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;3000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;processOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;3000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;pickOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;3000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;packOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;3000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;fulfillOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;3500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;unProcessOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;3500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;shortOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;3500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;pickOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;3500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;packOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;3500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;fulfillOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;3600&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;packOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;3600&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;shortOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;3600&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;fulfillOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;3700&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;shortOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;3700&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;fulfillOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;7000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;createReturn&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;8000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;confirmReturn&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;8000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;cancelReturn&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;8500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;cancelReturn&quot;<br />\r\n&nbsp; &nbsp; }<br />\r\n&nbsp; ],<br />\r\n&nbsp; &quot;PipelineId&quot;: &quot;OrdersWithScheduledRelease&quot;,<br />\r\n&nbsp; &quot;ProcessTypeId&quot;: &quot;ORDER_EXECUTION&quot;,<br />\r\n&nbsp; &quot;Description&quot;: &quot;Orders with Scheduled Release&quot;,<br />\r\n&nbsp; &quot;DropStatusDetermination&quot;: [<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ConditionText&quot;: null,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;0000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;Sequence&quot;: 1,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;DropStatus&quot;: &quot;1000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;IntendedDropStatus&quot;: &quot;1000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;createOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ConditionText&quot;: null,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;1000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;Sequence&quot;: 1,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;DropStatus&quot;: &quot;1500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;IntendedDropStatus&quot;: &quot;1500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;allocateOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ConditionText&quot;: null,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;1000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;Sequence&quot;: 1,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;DropStatus&quot;: &quot;2000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;IntendedDropStatus&quot;: &quot;2000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;allocateOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ConditionText&quot;: null,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;1500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;Sequence&quot;: 1,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;DropStatus&quot;: &quot;2000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;IntendedDropStatus&quot;: &quot;2000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;allocateOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ConditionText&quot;: null,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;1000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;Sequence&quot;: 1,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;DropStatus&quot;: &quot;1500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;IntendedDropStatus&quot;: &quot;1500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;batchAllocate&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ConditionText&quot;: null,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;1000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;Sequence&quot;: 1,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;DropStatus&quot;: &quot;2000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;IntendedDropStatus&quot;: &quot;2000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;batchAllocate&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ConditionText&quot;: null,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;1500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;Sequence&quot;: 1,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;DropStatus&quot;: &quot;2000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;IntendedDropStatus&quot;: &quot;2000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;batchAllocate&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ConditionText&quot;: null,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;2000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;Sequence&quot;: 1,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;DropStatus&quot;: &quot;1500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;IntendedDropStatus&quot;: &quot;1500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;deAllocateOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ConditionText&quot;: null,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;2000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;Sequence&quot;: 1,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;DropStatus&quot;: &quot;1000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;IntendedDropStatus&quot;: &quot;1000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;updateOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ConditionText&quot;: null,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;1500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;Sequence&quot;: 1,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;DropStatus&quot;: &quot;1000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;IntendedDropStatus&quot;: &quot;1000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;updateOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ConditionText&quot;: null,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;2000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;Sequence&quot;: 1,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;DropStatus&quot;: &quot;3000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;IntendedDropStatus&quot;: &quot;3000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;batchRelease&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ConditionText&quot;: null,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;3000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;Sequence&quot;: 1,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;DropStatus&quot;: &quot;1500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;IntendedDropStatus&quot;: &quot;1500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;shortOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ConditionText&quot;: null,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;3000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;Sequence&quot;: 1,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;DropStatus&quot;: &quot;3500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;IntendedDropStatus&quot;: &quot;3500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;processOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ConditionText&quot;: null,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;3000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;Sequence&quot;: 1,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;DropStatus&quot;: &quot;3600&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;IntendedDropStatus&quot;: &quot;3600&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;pickOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ConditionText&quot;: null,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;3000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;Sequence&quot;: 1,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;DropStatus&quot;: &quot;3700&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;IntendedDropStatus&quot;: &quot;3700&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;packOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ConditionText&quot;: null,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;3000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;Sequence&quot;: 1,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;DropStatus&quot;: &quot;7000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;IntendedDropStatus&quot;: &quot;7000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;fulfillOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ConditionText&quot;: null,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;3500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;Sequence&quot;: 1,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;DropStatus&quot;: &quot;3000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;IntendedDropStatus&quot;: &quot;3000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;unProcessOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ConditionText&quot;: null,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;3500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;Sequence&quot;: 1,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;DropStatus&quot;: &quot;1500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;IntendedDropStatus&quot;: &quot;1500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;shortOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ConditionText&quot;: null,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;3500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;Sequence&quot;: 1,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;DropStatus&quot;: &quot;3600&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;IntendedDropStatus&quot;: &quot;3600&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;pickOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ConditionText&quot;: null,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;3500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;Sequence&quot;: 1,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;DropStatus&quot;: &quot;3700&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;IntendedDropStatus&quot;: &quot;3700&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;packOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ConditionText&quot;: null,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;3500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;Sequence&quot;: 1,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;DropStatus&quot;: &quot;7000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;IntendedDropStatus&quot;: &quot;7000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;fulfillOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ConditionText&quot;: null,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;3600&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;Sequence&quot;: 1,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;DropStatus&quot;: &quot;1500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;IntendedDropStatus&quot;: &quot;1500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;shortOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ConditionText&quot;: null,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;3600&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;Sequence&quot;: 1,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;DropStatus&quot;: &quot;3700&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;IntendedDropStatus&quot;: &quot;3700&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;packOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ConditionText&quot;: null,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;3600&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;Sequence&quot;: 1,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;DropStatus&quot;: &quot;7000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;IntendedDropStatus&quot;: &quot;7000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;fulfillOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ConditionText&quot;: null,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;3700&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;Sequence&quot;: 1,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;DropStatus&quot;: &quot;1500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;IntendedDropStatus&quot;: &quot;1500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;shortOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ConditionText&quot;: null,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;3700&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;Sequence&quot;: 1,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;DropStatus&quot;: &quot;7000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;IntendedDropStatus&quot;: &quot;7000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;fulfillOrder&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ConditionText&quot;: null,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;7000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;Sequence&quot;: 1,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;DropStatus&quot;: &quot;8000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;IntendedDropStatus&quot;: &quot;8000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;createReturn&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ConditionText&quot;: null,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;8000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;Sequence&quot;: 1,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;DropStatus&quot;: &quot;8500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;IntendedDropStatus&quot;: &quot;8500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;confirmReturn&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ConditionText&quot;: null,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;8000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;Sequence&quot;: 1,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;DropStatus&quot;: &quot;7000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;IntendedDropStatus&quot;: &quot;7000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;cancelReturn&quot;<br />\r\n&nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ConditionText&quot;: null,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;FromStatus&quot;: &quot;8500&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;Sequence&quot;: 1,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;DropStatus&quot;: &quot;7000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Order&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;IntendedDropStatus&quot;: &quot;7000&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ServiceId&quot;: &quot;cancelReturn&quot;<br />\r\n&nbsp; &nbsp; }<br />\r\n&nbsp; ]<br />\r\n}</div>\r\n\r\n<ul>\r\n\t<li><strong>Step 3: </strong>Rules Action: the rule action will link the pipline to the Rule configired in Step 4</li>\r\n</ul>\r\n\r\n<pre>\r\n&lt;url&gt;/order/api/rules/ruleAction/save</pre>\r\n\r\n<div class=\"computer_code\">{<br />\r\n&nbsp; &quot;RuleActionId&quot;: &quot;ORDER_BATCH_RELEASE_MODE&quot;,<br />\r\n&nbsp; &quot;ActionDescription&quot;: &quot;Order Batch Pipeline Action&quot;,<br />\r\n&nbsp; &quot;ActionValue&quot;: &quot;OrdersWithScheduledRelease&quot;<br />\r\n}</div>\r\n\r\n<ul>\r\n\t<li>\r\n\t<p><strong>Step 4</strong>: Configure the Rule</p>\r\n\t</li>\r\n</ul>\r\n\r\n<pre>\r\n&lt;url&gt;/order/api/rules/rule/save</pre>\r\n\r\n<div class=\"computer_code\">{<br />\r\n&nbsp;&quot;RuleId&quot;: &quot;RULE_BATCH_RELEASE&quot;,<br />\r\n&nbsp;&quot;RuleGroupId&quot;: &quot;DELIVERYORDER_PIPELINE_RULE_GROUP&quot;,<br />\r\n&nbsp;&quot;RuleDescription&quot;: &quot;batchrelease Order Rule&quot;,<br />\r\n&nbsp;&quot;Component&quot;: &quot;Order&quot;,<br />\r\n&nbsp;&quot;RuleStatus&quot;: &quot;active&quot;,<br />\r\n&nbsp;&quot;RuleVersion&quot;: &quot;1&quot;,<br />\r\n&nbsp;&quot;Salience&quot;: &quot;5&quot;,<br />\r\n&nbsp;&quot;DisplaySequence&quot;: &quot;1&quot;,<br />\r\n&nbsp;&quot;ActivationDate&quot;: null,<br />\r\n&nbsp;&quot;ExpirationDate&quot;: null,<br />\r\n&nbsp;&quot;RuleConditionId&quot;: &quot;RULE_CONDITION_CUSTOMER_ORDER&quot;,<br />\r\n&nbsp;&quot;RuleActionId&quot;: &quot;ORDER_BATCH_RELEASE_MODE&quot;<br />\r\n}</div>\r\n</div></div></p>\r\n\r\n<h4><a name=\"batch-release-agent-configuration\" id=\"batch-release-agent-configuration\"></a><a id=\"How to Configure Batch Release Agent\" name=\"How to Configure Batch Release Agent\"></a>Batch Release Agent Configuration</h4>\r\n\r\n<p>There are&nbsp;two versions of the batch release process. One with an Agent and another with a job. Both are documented below.&nbsp;</p>\r\n\r\n<div class=\"info\"><strong>How to choose between a batch release agent or job?&nbsp;</strong><br>\r\n<br>\r\n- If&nbsp;you are a new customer or an existing customer who wants to start using batch release, go with the job.&nbsp;<br>\r\n- if you are an existing customer with batch release agent configuration;<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; - If your selection criteria for the agent is at the order or order line level, stay with the agent.&nbsp;<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; - if you want to use an allocation level selection criteria, moving to batch release&nbsp;job is encouraged but&nbsp;not mandatory.&nbsp;</div>\r\n\r\n<p>Use below steps to configure batch release job.&nbsp;</p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-5\" class=\"toggle-content\"><span class=\"toggle-title\">Steps to Configure Batch Release Job</span></a></p><div id=\"tg-5\"><p><strong>Step 1:&nbsp;</strong>Verify ext point to message type</p>\r\n\r\n<pre>\r\nPOST {{url}}/order/api/ServiceDefinition/extPointToMessageType/save\r\n</pre>\r\n\r\n<div class=\"computer_code\"><code>{<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ExtensionPointId&quot;: &quot;Order:Order:Event:OnBatchReleaseOrder&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;MessageType&quot;: &quot;BatchReleaseOrderEventMSGType&quot;<br />\r\n}</code></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step 2:&nbsp;</strong>Verify outbound message type</p>\r\n\r\n<pre>\r\nPOST {{url}}/order/api/ServiceDefinition/outBoundMessageType/save\r\n</pre>\r\n\r\n<div class=\"computer_code\">{<br />\r\n&nbsp; &nbsp; &nbsp; &quot;MessageType&quot;: &quot;BatchReleaseOrderEventMSGType&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;Transactional&quot;: true,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;PersistMessageToMsgStore&quot;: false<br />\r\n}</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step 3: Verify inbound message types</strong></p>\r\n\r\n<pre>\r\nPOST {{url}}/order/api/ServiceDefinition/inBoundMessageType/save\r\n</pre>\r\n\r\n<div class=\"computer_code\">{<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp;&quot;MessageType&quot;: &quot;BatchReleaseOrderEventMSGType&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp;&quot;NoOfConsumer&quot;: 10,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp;&quot;MinNoOfConsumer&quot;: 1,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp;&quot;Idempotent&quot;: true,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp;&quot;ExternalIntegrationRequired&quot;: false,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp;&quot;MaxDesiredInstances&quot;: 6,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp;&quot;ScaleUpTimeWindow&quot;: 10,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp;&quot;ScaleDownTimeWindow&quot;: 20,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp;&quot;Description&quot;: &quot;This queue is used to pick the allocated orders and process them for release&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp;&quot;ServiceId&quot;: &quot;batchReleaseOrderEvent&quot;<br />\r\n}</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step 4:&nbsp;</strong>Verify Job type definition</p>\r\n\r\n<pre>\r\nPOST {{url}}/order/api/batch/jobTypeDefinition/save\r\n</pre>\r\n\r\n<div class=\"computer_code\">{<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp;&quot;JobTypeId&quot;: &quot;allocationBatchReleaseJob&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp;&quot;JobTypeDescription&quot;: &quot;Job to perform release of allocation batch by picking order ids based on the criteria passed on job parameters&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp;&quot;JobType&quot;: &quot;SERVICE&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp;&quot;InvocationServiceId&quot;: &quot;allocationBatchRelease&quot;<br />\r\n}</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step 5:&nbsp;</strong>Create Job schedule</p>\r\n\r\n<p>POST&nbsp;{{url}}/order/api/batch/jobSchedule/save</p>\r\n\r\n<div class=\"computer_code\">{<br />\r\n&nbsp; &nbsp; &nbsp; &quot;JobScheduleId&quot;:&quot;allocationBatchReleaseJobId&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;JobTypeId&quot;:&quot;allocationBatchReleaseJob&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;CronExpression&quot;:&quot;0 0/1 * * * ? *&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &quot;JobParameters&quot;:[<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;InputKey&quot;:&quot;Query&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;InputValue&quot;:&quot;ItemId == &#39;Item1&#39;&quot;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; }<br />\r\n&nbsp; &nbsp; &nbsp; ]<br />\r\n}</div>\r\n\r\n<p data-renderer-start-pos=\"4297\">&nbsp;</p>\r\n\r\n<p data-renderer-start-pos=\"4297\"><strong data-renderer-mark=\"true\">Query Examples: </strong>Below are some example queries which can be use in the job schedule. User can use different filter criteria based on different fields in allocation/orderline/order entity to filter the orders. By default, the job is referring to a field on the allocation. Only fields outside of the allocation need to be clearly called out with &quot;orderLine.xxx&quot;&nbsp;</p>\r\n\r\n<ul data-indent-level=\"1\" style=\"margin-left: 40px;\">\r\n\t<li>\r\n\t<p data-renderer-start-pos=\"4510\"><code data-renderer-mark=\"true\">&quot;ItemId = &#39;iPhone8:1&#39;&quot; (here, ItemId refers to the item id on the allocation)</code></p>\r\n\t</li>\r\n\t<li>\r\n\t<p data-renderer-start-pos=\"4536\"><code data-renderer-mark=\"true\">&quot;OrderLine.ItemId = &#39;iPhone8:1&#39;&quot; (here,&nbsp;OrderLine.ItemId refers to the item id on the order line)</code></p>\r\n\t</li>\r\n\t<li>\r\n\t<p data-renderer-start-pos=\"4572\"><code data-renderer-mark=\"true\">&quot;OrderLine.Order.OrderType.OrderTypeId = &#39;Ecom Order&#39;&quot;</code></p>\r\n\t</li>\r\n\t<li>\r\n\t<p data-renderer-start-pos=\"4630\"><code data-renderer-mark=\"true\">&quot;OrderLine.Order.OrderType.OrderTypeId = &#39;Ecom Order&#39; AND OrderLine.ShippingMethodId = &#39;2Day&#39; AND ItemId = &#39;iPhone8:1&#39;&quot;; (here, item Id refers to the item on the allocation)</code></p>\r\n\t</li>\r\n\t<li>\r\n\t<p data-renderer-start-pos=\"4754\"><code data-renderer-mark=\"true\">&quot;OrderLine.Order.OrderType.OrderTypeId = &#39;Ecom Order&#39; AND ItemId = &#39;iPhone8:1&#39;&quot;;&nbsp;</code><code data-renderer-mark=\"true\">(here, item Id refers to the item on the allocation)</code></p>\r\n\t</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step 6 If required to test:&nbsp;</strong>Trigger the job</p>\r\n\r\n<pre>\r\nPOST: &lt;url&gt;/order/api/batch/jobSchedule/trigger\r\n</pre>\r\n\r\n<div class=\"computer_code\">{<br />\r\n&nbsp; &nbsp; &quot;JobScheduleId&quot;: &quot;allocationBatchReleaseJobId&quot;<br />\r\n}</div>\r\n\r\n<p>&nbsp;</p>\r\n</div></div></p>\r\n\r\n<p>Use below steps to configure batch release agent.</p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-6\" class=\"toggle-content\"><span class=\"toggle-title\">Steps to Configure Batch Release Agent</span></a></p><div id=\"tg-6\"><p><strong>Step 1:&nbsp;</strong>Create a response template - Login as system</p>\n\n<pre>\nPOST &lt;url&gt;/order/api/fwcore/responseTemplate/save\n</pre>\n\n<div class=\"computer_code\"><code>{<br />\n&nbsp;&nbsp;&nbsp; &quot;BaseEntity&quot;: &quot;Order&quot;,<br />\n&nbsp;&nbsp;&nbsp; &quot;TemplateJson&quot;: {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;OrderId&quot;: null<br />\n&nbsp;&nbsp;&nbsp; },<br />\n&nbsp;&nbsp;&nbsp; &quot;TemplateId&quot;: &quot;batchReleaseOrderTemplate&quot;<br />\n}</code></div>\n\n<p>&nbsp;</p>\n\n<p><strong>Step 2:&nbsp;</strong>Create a handler for the scheduler</p>\n\n<pre>\nPOST &lt;url&gt;/order/api/ServiceDefinition/extensionHandler/save\n</pre>\n\n<div class=\"computer_code\"><code>{<br />\n&nbsp;&nbsp;&nbsp; &quot;ExtensionHandlerId&quot;: &quot;ReleaseAgentHandler&quot;,<br />\n&nbsp;&nbsp;&nbsp; &quot;ExtensionhandlerRoute&quot;: [{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;ExtensionhandlerRouteId&quot;: &quot;ReleaseAgentHandlerRouteId&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Source&quot;: &quot;ON_EVENT&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Destination&quot;: &quot;releaseOrder&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;IsSync&quot;: &quot;true&quot;<br />\n&nbsp;&nbsp;&nbsp; }]<br />\n}</code></div>\n\n<p>&nbsp;</p>\n\n<p><strong>Step 3: </strong>Create an agent, which includes the frequency at which the scheduler runs</p>\n\n<pre>\nPOST &lt;url&gt;/order/api/batch/agent\n</pre>\n\n<div class=\"computer_code\">{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;name&quot;: &quot;ReleaseAgent_Batch&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;cronSchedule&quot;: &quot;0/10 0 0 3/1 * ? *&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;query&quot;: &quot;order.minFulfillmentStatusId=\\&quot;2000\\&quot;&quot;,<br />\n&nbsp; &nbsp; &quot;queryLimit&quot;: &quot;5000&quot;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;entity&quot;: &quot;Order&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;handlerName&quot;: &quot;ReleaseAgentHandler&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;TemplateId&quot;: &quot;batchReleaseOrderTemplate&quot;<br />\n}</div>\n\n<p><strong>Some sample queries :</strong></p>\n\n<p>Example 1 :&nbsp;Release job to pick orders which are in allocated status<br />\n(MinFulfillmentStatusId=\\&quot;2000\\&quot; or MaxFulfillmentStatusId=\\&quot;2000\\&quot;)&nbsp;</p>\n\n<p>Example 2 : Release job to pick orders which are in allocated status and not to pick backordered and open orders<br />\n(MinFulfillmentStatusId in (\\&quot;1500\\&quot;, \\&quot;2000\\&quot;) and MaxFulfillmentStatusId not in (\\&quot;1500\\&quot;)&nbsp;</p>\n\n<p>&nbsp;<strong>Step 4:&nbsp;</strong>Check to ensure the job schedule exists</p>\n\n<pre>\n&lt;url&gt;/order/api/batch/jobSchedule/jobScheduleId/ReleaseAgent_Batch-AgentSchedule\n</pre>\n\n<div class=\"computer_code\"><code>{<br />\n&quot;Messages&quot;: null,<br />\n&quot;ProfileId&quot;: &quot;locc-na-us&quot;,<br />\n&quot;UpdatedTimestamp&quot;: &quot;2019-10-16T21:26:04.013&quot;,<br />\n&quot;CreatedBy&quot;: &quot;admin@locc-na-us.com&quot;,<br />\n&quot;CreatedTimestamp&quot;: &quot;2019-10-16T21:18:12.154&quot;,<br />\n&quot;IsDisabled&quot;: false,<br />\n&quot;IsAdHoc&quot;: false,<br />\n&quot;Process&quot;: null,<br />\n&quot;StartDelay&quot;: null,<br />\n&quot;TriggerKey&quot;: &quot;ReleaseAgent_Batch-AgentSchedule-trigger&quot;,<br />\n&quot;UpdatedBy&quot;: &quot;admin@locc-na-us.com&quot;,<br />\n&quot;TimeZone&quot;: null,<br />\n&quot;JobTypeId&quot;: &quot;ReleaseAgent_Batch-AgentJob&quot;,<br />\n&quot;ContextId&quot;: &quot;df17c134-c81b-4f6e-90f1-f0730a904ca2&quot;,<br />\n&quot;CronExpression&quot;: &quot;0 0/1 * 1/1 * ? *&quot;,<br />\n&quot;PK&quot;: &quot;5712606921545778562&quot;,<br />\n&quot;JobParameters&quot;: [<br />\n{<br />\n&quot;ProfileId&quot;: &quot;locc-na-us&quot;,<br />\n&quot;UpdatedBy&quot;: &quot;admin@locc-na-us.com&quot;,<br />\n&quot;UpdatedTimestamp&quot;: &quot;2019-10-16T21:18:12.154&quot;,<br />\n&quot;CreatedBy&quot;: &quot;admin@locc-na-us.com&quot;,<br />\n&quot;CreatedTimestamp&quot;: &quot;2019-10-16T21:18:12.154&quot;,<br />\n&quot;InputValue&quot;: &quot;MaxFulfillmentStatusId=\\&quot;2000\\&quot;&quot;,<br />\n&quot;ContextId&quot;: &quot;2c513b65-8f19-46fe-98f8-9a15cd7f7b14&quot;,<br />\n&quot;ParentJobSchedule&quot;: {<br />\n&quot;PK&quot;: 5712606921545778562<br />\n},<br />\n&quot;Process&quot;: null,<br />\n&quot;PK&quot;: &quot;5712606921545786782&quot;,<br />\n&quot;InputKey&quot;: &quot;Query&quot;<br />\n},<br />\n{<br />\n&quot;ProfileId&quot;: &quot;locc-na-us&quot;,<br />\n&quot;UpdatedBy&quot;: &quot;admin@locc-na-us.com&quot;,<br />\n&quot;UpdatedTimestamp&quot;: &quot;2019-10-16T21:18:12.154&quot;,<br />\n&quot;CreatedBy&quot;: &quot;admin@locc-na-us.com&quot;,<br />\n&quot;CreatedTimestamp&quot;: &quot;2019-10-16T21:18:12.154&quot;,<br />\n&quot;InputValue&quot;: &quot;Order&quot;,<br />\n&quot;ContextId&quot;: &quot;2c513b65-8f19-46fe-98f8-9a15cd7f7b14&quot;,<br />\n&quot;ParentJobSchedule&quot;: {<br />\n&quot;PK&quot;: 5712606921545778562<br />\n},<br />\n&quot;Process&quot;: null,<br />\n&quot;PK&quot;: &quot;5712606921545797805&quot;,<br />\n&quot;InputKey&quot;: &quot;Entity&quot;<br />\n},<br />\n{<br />\n&quot;ProfileId&quot;: &quot;locc-na-us&quot;,<br />\n&quot;UpdatedBy&quot;: &quot;admin@locc-na-us.com&quot;,<br />\n&quot;UpdatedTimestamp&quot;: &quot;2019-10-16T21:18:12.154&quot;,<br />\n&quot;CreatedBy&quot;: &quot;admin@locc-na-us.com&quot;,<br />\n&quot;CreatedTimestamp&quot;: &quot;2019-10-16T21:18:12.154&quot;,<br />\n&quot;InputValue&quot;: &quot;ReleaseAgentHandler&quot;,<br />\n&quot;ContextId&quot;: &quot;2c513b65-8f19-46fe-98f8-9a15cd7f7b14&quot;,<br />\n&quot;ParentJobSchedule&quot;: {<br />\n&quot;PK&quot;: 5712606921545778562<br />\n},<br />\n&quot;Process&quot;: null,<br />\n&quot;PK&quot;: &quot;5712606921545806224&quot;,<br />\n&quot;InputKey&quot;: &quot;HandlerName&quot;<br />\n},<br />\n{<br />\n&quot;ProfileId&quot;: &quot;locc-na-us&quot;,<br />\n&quot;UpdatedBy&quot;: &quot;admin@locc-na-us.com&quot;,<br />\n&quot;UpdatedTimestamp&quot;: &quot;2019-10-16T21:18:12.154&quot;,<br />\n&quot;CreatedBy&quot;: &quot;admin@locc-na-us.com&quot;,<br />\n&quot;CreatedTimestamp&quot;: &quot;2019-10-16T21:18:12.154&quot;,<br />\n&quot;InputValue&quot;: &quot;ReleaseAgent_Batch-AgentJob&quot;,<br />\n&quot;ContextId&quot;: &quot;2c513b65-8f19-46fe-98f8-9a15cd7f7b14&quot;,<br />\n&quot;ParentJobSchedule&quot;: {<br />\n&quot;PK&quot;: 5712606921545778562<br />\n},<br />\n&quot;Process&quot;: null,<br />\n&quot;PK&quot;: &quot;5712606921545813576&quot;,<br />\n&quot;InputKey&quot;: &quot;MessageType&quot;<br />\n},<br />\n{<br />\n&quot;ProfileId&quot;: &quot;locc-na-us&quot;,<br />\n&quot;UpdatedBy&quot;: &quot;admin@locc-na-us.com&quot;,<br />\n&quot;UpdatedTimestamp&quot;: &quot;2019-10-16T21:18:12.155&quot;,<br />\n&quot;CreatedBy&quot;: &quot;admin@locc-na-us.com&quot;,<br />\n&quot;CreatedTimestamp&quot;: &quot;2019-10-16T21:18:12.155&quot;,<br />\n&quot;InputValue&quot;: &quot;DEDICATED_MESSAGE_TYPE&quot;,<br />\n&quot;ContextId&quot;: &quot;2c513b65-8f19-46fe-98f8-9a15cd7f7b14&quot;,<br />\n&quot;ParentJobSchedule&quot;: {<br />\n&quot;PK&quot;: 5712606921545778562<br />\n},<br />\n&quot;Process&quot;: null,<br />\n&quot;PK&quot;: &quot;5712606921545825766&quot;,<br />\n&quot;InputKey&quot;: &quot;MessageTypeMode&quot;<br />\n},<br />\n{<br />\n&quot;ProfileId&quot;: &quot;locc-na-us&quot;,<br />\n&quot;UpdatedBy&quot;: &quot;admin@locc-na-us.com&quot;,<br />\n&quot;UpdatedTimestamp&quot;: &quot;2019-10-16T21:26:04.005&quot;,<br />\n&quot;CreatedBy&quot;: &quot;admin@locc-na-us.com&quot;,<br />\n&quot;CreatedTimestamp&quot;: &quot;2019-10-16T21:26:04.005&quot;,<br />\n&quot;InputValue&quot;: &quot;5000&quot;,<br />\n&quot;ContextId&quot;: &quot;df17c134-c81b-4f6e-90f1-f0730a904ca2&quot;,<br />\n&quot;ParentJobSchedule&quot;: {<br />\n&quot;PK&quot;: 5712606921545778562<br />\n},<br />\n&quot;Process&quot;: null,<br />\n&quot;PK&quot;: &quot;5712611640054534705&quot;,<br />\n&quot;InputKey&quot;: &quot;QueryLimit&quot;<br />\n},<br />\n{<br />\n&quot;ProfileId&quot;: &quot;locc-na-us&quot;,<br />\n&quot;UpdatedBy&quot;: &quot;admin@locc-na-us.com&quot;,<br />\n&quot;UpdatedTimestamp&quot;: &quot;2019-10-16T21:26:04.006&quot;,<br />\n&quot;CreatedBy&quot;: &quot;admin@locc-na-us.com&quot;,<br />\n&quot;CreatedTimestamp&quot;: &quot;2019-10-16T21:26:04.006&quot;,<br />\n&quot;InputValue&quot;: &quot;batchReleaseOrderTemplate&quot;,<br />\n&quot;ContextId&quot;: &quot;df17c134-c81b-4f6e-90f1-f0730a904ca2&quot;,<br />\n&quot;ParentJobSchedule&quot;: {<br />\n&quot;PK&quot;: 5712606921545778562<br />\n},<br />\n&quot;Process&quot;: null,<br />\n&quot;PK&quot;: &quot;5712611640064543788&quot;,<br />\n&quot;InputKey&quot;: &quot;Template&quot;<br />\n},<br />\n{<br />\n&quot;ProfileId&quot;: &quot;BB-US&quot;,<br />\n&quot;UpdatedBy&quot;: &quot;satish@BB.com&quot;,<br />\n&quot;UpdatedTimestamp&quot;: &quot;2020-02-27T20:48:32.577&quot;,<br />\n&quot;CreatedBy&quot;: &quot;satish@BB.com&quot;,<br />\n&quot;CreatedTimestamp&quot;: &quot;2020-02-27T20:48:32.577&quot;,<br />\n&quot;InputValue&quot;: &quot;Rest&quot;,<br />\n&quot;ContextId&quot;: &quot;af39234a-d42c-4fa6-b18e-14ba68bb32fe&quot;,<br />\n&quot;ParentJobSchedule&quot;: {<br />\n&quot;PK&quot;: 5827617985321331468<br />\n},<br />\n&quot;Process&quot;: null,<br />\n&quot;PK&quot;: &quot;5828365125779758356&quot;,<br />\n&quot;InputKey&quot;: &quot;QueryType&quot;<br />\n}<br />\n],<br />\n&quot;JobScheduleId&quot;: &quot;ReleaseAgent_Batch-AgentSchedule&quot;,<br />\n&quot;RepeatInterval&quot;: null<br />\n}</code></div>\n\n<p>&nbsp;</p>\n\n<p><strong>Step 5:&nbsp;</strong>Create orders and allocate them</p>\n\n<p><strong>Step 6:&nbsp;</strong>Trigger the job</p>\n\n<pre>\nPOST: &lt;url&gt;/order/api/batch/jobSchedule/trigger\n</pre>\n\n<div class=\"computer_code\"><code>{<br />\n&nbsp;&nbsp;&nbsp; &quot;JobScheduleId&quot;: &quot;ReleaseAgent_Batch-AgentSchedule&quot;<br />\n}</code></div>\n\n<p>&nbsp;</p>\n\n<p><strong>Step 7:</strong>&nbsp;Verify that orders are released</p>\n</div></div></p>\r\n\r\n<h4><a name=\"remorse-period-configuration\" id=\"remorse-period-configuration\"></a><a id=\"How to configure a remorse period via the Order Configuration UI\" name=\"How to configure a remorse period via the Order Configuration UI\"></a>Remorse Period Configuration</h4>\r\n\r\n<ol>\r\n\t<li>Search for 'Order Type' in the application menu. In the Order Types UI, identify the order type for which you want to configure a remorse period. Find the Order Config for that order type.</li>\r\n\t<li>Search for 'Order Configuration' in the application menu. Open the Order Config from the previous step.</li>\r\n\t<li>Open the Order Monitoring tab and go to the Released milestone.</li>\r\n\t<li>Add the expected time rule for Released milestone.&nbsp;Specify the remorse period duration in hours (for example, 0.5 hours is 30 minutes).&nbsp;Select the dependent milestone as Confirmed (or another value from the list based on requirements).&nbsp;Select the Restrict by Date check box, and then click OK.</li>\r\n\t<li>In the same Released milestone section, add a monitoring rule.&nbsp;Add the rule name, and specify the remorse period duration in hours. Select the event \"Ready for Release\" from the drop-down.</li>\r\n</ol>\r\n\r\n<h4><a name=\"remorse-period-configuration-nbsp-via-api\" id=\"remorse-period-configuration-nbsp-via-api\"></a><a id=\"How to configure a remorse period via API\" name=\"How to configure a remorse period via API\"></a>Remorse Period Configuration&nbsp;via API</h4>\r\n\r\n<p>Follow the below steps to configure a 10 minute remorse period for order type 'CallCenter'. With this configuration, if we confirm an order (which allocates successfully), then it will be automatically released after 10 minutes.</p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-7\" class=\"toggle-content\"><span class=\"toggle-title\">Steps to Configure Remorse Period via API</span></a></p><div id=\"tg-7\"><p><strong>Step 1: Create Order&nbsp;</strong><strong>Config</strong></p>\n\n<pre>\nPOST: /order/api/order/orderConfig/save</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>Step 2: Associate Order Config to Order type</strong></p>\n\n<pre>\nPOST: /order/api/order/orderType/save</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>Step 3: In the Order Config, add an Expected Time Rule for the Released milestone</strong></p>\n\n<p>The below sample JSON is used to set the remorse period to 10 minutes (600 Seconds)</p>\n\n<div class=\"computer_code\"><code>{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;RestrictByDate&quot;: true,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;DependentMilestoneId&quot;: &quot;Order::Milestone::Confirmed&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;MilestoneDefinitionId&quot;: &quot;Order::Milestone::Released&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;Duration&quot;: 600,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;OrderConfigId&quot;: &quot;CSRConfig&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;Type&quot;: &quot;AFTER_MILESTONE&quot;&nbsp;&nbsp;<br />\n}</code></div>\n\n<p>Verify if the expected time rule is created using</p>\n\n<p>GET /order/api/order/orderExpectedTimeRule?query=OrderConfigId=EcommConfig</p>\n\n<p>&nbsp;</p>\n\n<p><strong>Step 4: Add a Monitoring Rule which raises the &#39;OnReadyForRelease&#39; event</strong></p>\n\n<p>POST /order/api/order/orderMonitoringRule</p>\n\n<div class=\"computer_code\"><code>{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;CreatedBy&quot;: &quot;seeddata-importer&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;RuleId&quot;: &quot;RaiseEventOnReleaseDue&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;MilestoneDefinitionId&quot;: &quot;Order::Milestone::Released&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;Duration&quot;: 0,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;Process&quot;: null,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;EventName&quot;: &quot;Order:Order:Event:OnReadyForRelease&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;RaiseAlways&quot;: false,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;UpdatedBy&quot;: &quot;seeddata-importer&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;Type&quot;: &quot;EXPECTED_TIME&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;OrderConfigId&quot;: &quot;CSRConfig&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;RepeatInterval&quot;: null&nbsp;&nbsp;&nbsp;<br />\n}</code></div>\n\n<p>&nbsp;</p>\n\n<p>Verify if the expected time rule is created using&nbsp; GET {{url}}/order/api/order/orderMonitoringRule?query=OrderConfigId=EcommConfig</p>\n\n<p>&nbsp;</p>\n\n<p><strong>Step 5:&nbsp;Add a Job Schedule which will monitor the milestones and raise events as configured</strong></p>\n\n<p>POST:&nbsp;/order/api/batch/jobSchedule/save</p>\n\n<div class=\"computer_code\"><code>{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;JobScheduleId&quot;: &quot;orderMileStoneJob&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;JobTypeId&quot;: &quot;orderMileStoneJob&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;CronExpression&quot;: &quot;0 0/1 * 1/1 * ? *&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;StartDelay&quot;: null,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;RepeatInterval&quot;: null,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;TriggerKey&quot;: &quot;orderMileStoneJob&quot;&nbsp;&nbsp;&nbsp;&nbsp;<br />\n}</code></div>\n\n<p>&nbsp;</p>\n\n<p>Verify if the job schedule is saved</p>\n\n<p>GET /scheduler/api/scheduler/jobSchedule?size=150&nbsp; &nbsp;</p>\n\n<p>GET /order/api/batch/jobSchedule?size=150</p>\n\n<p>&nbsp;</p>\n\n<p><strong>Step 6: Create a trigger for the schedule</strong></p>\n\n<p>POST:&nbsp;/order/api/batch/jobSchedule/trigger&nbsp; &nbsp;</p>\n\n<div class=\"computer_code\"><code>{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;JobScheduleId&quot;: &quot;orderMileStoneJob&quot;<br />\n}</code></div>\n</div></div></p>\r\n\r\n<h4><a name=\"order-line-remorse-period-configuration\" id=\"order-line-remorse-period-configuration\"></a>Order Line Remorse Period Configuration</h4>\r\n\r\n<ol>\r\n\t<li>Identify the delivery method and shipping method&nbsp;for which you want to configure a remorse period.&nbsp;</li>\r\n\t<li>Search for 'Order Line Remorse Config' in the application menu.</li>\r\n\t<li>In the Order Line Remorse Config&nbsp;UI, create a new remorse configuration by selecting the Delivery Method ID, Order Type ID, and Shipping Method ID&nbsp;from the corresponding drop-down list of available methods, and provide&nbsp;a remorse period (in minutes)&nbsp;and save the configuration.</li>\r\n</ol>\r\n\r\n<div class=\"tip\">Note: The attribute&nbsp;selection does not support multi-selection.&nbsp;For example, users cannot define a single remorse config for 60 mins to apply for list of shipping methods. Instead, users have to define the same remorse config duration for each of those shipping methods.&nbsp;</div>\r\n\r\n<div class=\"tip\">Note: The attribute&nbsp;selection does not support !=&nbsp;to condition. For example, users cannot define a single remorse config for 60 mins to exclude one or many Same Day Delivery Shipping Methods.</div>\r\n\r\n<h4><a name=\"order-line-remorse-period-configuration-via-api\" id=\"order-line-remorse-period-configuration-via-api\"></a>Order Line Remorse Period Configuration via API</h4>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-8\" class=\"toggle-content\"><span class=\"toggle-title\">Steps to Configure Order Line Remorse Period via API</span></a></p><div id=\"tg-8\"><pre>\r\n<strong>Step 1: Create Remorse&nbsp;</strong><strong>Config\r\n\r\n</strong>POST: POST /order/api/order/orderLineRemorse/save</pre>\r\n\r\n<p>{</p>\r\n\r\n<p>&quot;DeliveryMethodId&quot;: &quot;PickUpAtStore&quot;,</p>\r\n\r\n<p>&quot;OrderTypeId&quot;: &quot;Ecom Order&quot;,</p>\r\n\r\n<p>&quot;ShippingMethodId&quot;: <b>null</b>,</p>\r\n\r\n<p>&quot;RemorsePeriod&quot;: 0</p>\r\n\r\n<p>}</p>\r\n\r\n<p>Verify that the remorse config is saved</p>\r\n\r\n<p>GET /order/api/order/orderLineRemorseConfig?size=10</p>\r\n</div></div></p>\r\n\r\n<h4><a name=\"release-cut-off-time-grace-period\" id=\"release-cut-off-time-grace-period\"></a>Release Cut-Off Time Grace Period</h4>\r\n\r\n<p>When an order allocation happens before the cut-off time and the release process is triggered post cut-off,&nbsp;i.e, the latest batch release process of the day, then the dates in the release will not be aligned with what was promised to the customer as it will consider the cut-off for the next working day.&nbsp;This feature will allow for&nbsp;configurable minutes of grace period&nbsp;past the location cut-off time to release an order still meeting the committed delivery date.</p>\r\n\r\n<p>For example,&nbsp;if the cut-off time is 4:00 p.m. and the release job takes 15 minutes to run, this parameter should be&nbsp;set at a minimum&nbsp;of 15 min.</p>\r\n\r\n<p>The release cut-off time grace period can be configured using the following API or using&nbsp;the <a href=\"https://omni.helpdocsonline.com/promising-config-parameters$release-cut-off-time-grace-period\">Promising Config Parameters UI</a>.</p>\r\n\r\n<div class=\"computer_code\">POST {{url}}/promising/api/promising/promisingConfigParameters/save</div>\r\n\r\n<div class=\"computer_code\">{<br>\r\n&nbsp; \"PromisingConfigParameterId\": \"defaultPromisingConfigParameterId\",<br>\r\n&nbsp; \"CutoffGraceTimeInMinutes\": 10.0<br>\r\n}</div>\r\n\r\n<h3><a name=\"implementation-flavors\" id=\"implementation-flavors\"></a>Implementation Flavors</h3>\r\n\r\n<h4><a name=\"set-up-an-order-line-remorse-period-of-60-mins-nbsp-for-mpos-orders-where-shippingmethod-is-not-“smdy-pm”-“smdy-am”\" id=\"set-up-an-order-line-remorse-period-of-60-mins-nbsp-for-mpos-orders-where-shippingmethod-is-not-“smdy-pm”-“smdy-am”\"></a>Set up an order line remorse period of 60 mins&nbsp;for MPOS orders where ShippingMethod is not (“SMDY PM”, “SMDY AM”)</h4>\r\n\r\n<p>Individual order line remorse config should be defined for each of the shipping.</p>\r\n\r\n<h4><a name=\"how-nbsp-to-prevent-the-release-of-lines-allocated-to-on-hand-available-soon-supply-type\" id=\"how-nbsp-to-prevent-the-release-of-lines-allocated-to-on-hand-available-soon-supply-type\"></a>How&nbsp;to prevent the release of lines allocated to \"On Hand Available Soon\" supply type</h4>\r\n\r\n<p>In the inventory demand type configuration, remove the \"OH Available Soon\" supply type. This will prevent orders from being released if they are allocated to the \"OH Available Soon\" supply type.</p>\r\n\r\n<h4><a name=\"how-to-evaluate-release-consolidation-rules-in-prereleaseorder-isreleasable-ue-do-we-have-the-consolidation-rules-api-exposed\" id=\"how-to-evaluate-release-consolidation-rules-in-prereleaseorder-isreleasable-ue-do-we-have-the-consolidation-rules-api-exposed\"></a>How to evaluate release consolidation rules in PreReleaseOrder / IsReleasable UE. Do we have the consolidation rules API exposed</h4>\r\n\r\n<p data-renderer-start-pos=\"243\">Consolidation rules API should not be exposed due to technical reasons. The only option is to implement the logic in the custom code. Refer to <a href=\"https://omni.helpdocsonline.com/release-grouping-and-creation\">Release Grouping and Creation</a> for details on how the consolidation logic&nbsp;works.&nbsp;</p>\r\n\r\n<h4 data-renderer-start-pos=\"243\"><a name=\"how-to-evaluate-releasable-criteria-for-merge-shipment\" id=\"how-to-evaluate-releasable-criteria-for-merge-shipment\"></a>How to evaluate releasable criteria for Merge shipment</h4>\r\n\r\n<p data-renderer-start-pos=\"306\">For a multi-leg&nbsp;merge fulfillment, the base automatically attempts to ship the second leg of the fulfillment when the first Ship Event is processed. While release conditions for the second leg must still be valid, the second leg fulfillment does not pass through the pipeline, and IsReleasable UE is therefore not invoked. Instead, event Order:Allocation:Event:OnMultiplePicuUpStatusChange is triggered.&nbsp;</p>\r\n\r\n<p data-renderer-start-pos=\"306\">If the implementation requires that both the first and second legs of the fulfillment pass through the release pipeline and be evaluated by the IsReleasable UE, it is recommended to prevent the release from being eligible automatically by modifying&nbsp;the release template to not include demand status of 'In Transit'.&nbsp;</p>\r\n\r\n<h4><a name=\"holding-digital-goods\" id=\"holding-digital-goods\"></a>Holding Digital Goods</h4>\r\n\r\n<p><u>Requirement:</u> Since digital goods are&nbsp;automatically released, customers are unable to hold such orders for fraud checks. Hence, customers need an ability to hold digital goods lines in an order before releasing them.</p>\r\n\r\n<p><u>Implementation:</u></p>\r\n\r\n<ul>\r\n\t<li>Make pipeline changes and define a new custom status 1000.500 in between 1000 and 3000 for the release pipeline (“Fraud Hold Resolved” status which can be used for digital goods lines). So that the digital line does not go to released directly.</li>\r\n\t<li>Update Release Service logic to not pick up digital goods from open status 1000.00 and instead pick only in custom status 1000.500</li>\r\n\t<li>When Fraud hold is removed on the order, then check if any digital goods exist on the line. If yes, then change the order line using a change status API from 1000.000 to 1000.500.\r\n\t<ul style=\"margin-left: 40px;\">\r\n\t\t<li><a href=\"https://lesls.omni.manh.com/order/swagger-ui.html?expandedMenuIds=developerTools,orderDevTools#!/Order32Services/changeStatusUsingPOST\" title=\"https://lesls.omni.manh.com/order/swagger-ui.html?expandedMenuIds=developerTools,orderDevTools#!/Order32Services/changeStatusUsingPOST\">POST</a> <a data-renderer-mark=\"true\" href=\"https://lesls.omni.manh.com/order/swagger-ui.html?expandedMenuIds=developerTools,orderDevTools#!/Order32Services/changeStatusUsingPOST\" title=\"https://lesls.omni.manh.com/order/swagger-ui.html?expandedMenuIds=developerTools,orderDevTools#!/Order32Services/changeStatusUsingPOST\">/api/order/order/changeStatus</a></li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<h4><a name=\"split-release-for-specific-order-type-only\" id=\"split-release-for-specific-order-type-only\"></a>Split Release for specific Order Type only</h4>\r\n\r\n<p><u>Requirement</u>: Which user exit should be implemented to split releases based on custom logic for specific order type(s).</p>\r\n\r\n<p><u>Implementation</u>: Use Order::Order::UserExit::ReleaseSplit UE for Release split. As part of the extension handler definition for this UE, you can specify the entry condition to filter a specific order type for split release. The remaining order types which are not part of this entry condition will be excluded from the release split.</p>\r\n\r\n<p>Extension Handler</p>\r\n\r\n<div class=\"computer_code\">{<br>\r\n&nbsp; &nbsp; \"ExtensionHandlerId\": \"ReleaseSplit\",<br>\r\n&nbsp; &nbsp; \"ExtensionhandlerRoute\": [<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; {<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"ExtensionhandlerRouteId\": \"ReleaseSplit\",<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"Source\": \"ON_EVENT\",<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"SourceId\": \"ON_EVENT\",<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"Destination\": \"ReleaseSplit\",<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"DestinationId\": \"ReleaseSplit\",<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"IsSync\": \"true\"<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; }<br>\r\n&nbsp; &nbsp; ],<br>\r\n&nbsp; &nbsp; \"RegisteredExtensionPoints\": [<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; {<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"ExtensionPointId\": \"Order:Order:UserExit:ReleaseSplit\",<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"EntryCondition\": \"\"EntryCondition\": \"OrderType.OrderTypeId == 'Customer'\"\"<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; }<br>\r\n&nbsp; &nbsp; ]<br>\r\n}</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div class=\"tip\"><strong>Note</strong>: The release split user exit does not support splitting digital goods orders into multiple releases</div>\r\n\r\n<h4><a name=\"how-to-accommodate-manual-changes-through-donotreleasebefore-date-and-trigger-the-release\" id=\"how-to-accommodate-manual-changes-through-donotreleasebefore-date-and-trigger-the-release\"></a>How to accommodate manual changes through DoNotReleaseBefore date and trigger the release</h4>\r\n\r\n<p><u>Requirement</u>: If orders are created with a certain remorse period through order monitoring rule, is it possible to accommodate manual changes to this date through DoNotReleaseBefore date from an external system</p>\r\n\r\n<p><u>Implementation</u>:&nbsp; The delayed payload is specifically for releasing the order via milestone. It is not designed to accommodate manual changes to the DoNotReleaseBefore date from an external system.</p>\r\n\r\n<p>If you want order to monitor the DoNotReleaseBefore date and trigger the release after that data has passed, you have a few options:</p>\r\n\r\n<ol>\r\n\t<li>Modify the Order Monitoring rule for release and use the DoNotReleaseBefore as the “Expected Time” for release to happen. But this will mean, the DoNotReleaseBefore should always come in the order and you cannot use milestone to set the do not release, and the remorse period functionality will be lost.</li>\r\n\t<li>Add an extension and every time the DoNotReleaseBefore is modified, you can create a delayed payload via an extension handler. The outbound message type will be ReleaseOrderMsgType and the delivery time will be equal to the DoNotReleaseBefore time. The AWPF framework will automatically post the message to the release queue after the time has past.</li>\r\n</ol>\r\n\r\n<h4><a name=\"how-to-find-if-a-fulfillment-location-is-of-type-store-or-dc-nbsp-nbsp\" id=\"how-to-find-if-a-fulfillment-location-is-of-type-store-or-dc-nbsp-nbsp\"></a>How to find if a fulfillment location is of type Store or DC&nbsp;&nbsp;</h4>\r\n\r\n<p>The location type is not stored in order.&nbsp;Hence, this can be done using the APIs below.&nbsp;</p>\r\n\r\n<ul>\r\n\t<li>GET {{url}}/order/api/order/order/release?query=ReleaseId=&lt;ReleaseId&gt; -&gt; Fetch ShipFromLocationId from Release object&nbsp;</li>\r\n\t<li>GET {{url}}/organization/api/organization/location/locationId/&lt;ShipFromLocationId&gt; -&gt; Use LocationType from the response</li>\r\n</ul>\r\n\r\n<h4><a name=\"how-to-change-the-pipeline-for-gift-card-items-purchased-online-to-move-the-order-lines-directly-from-open-to-fulfilled\" id=\"how-to-change-the-pipeline-for-gift-card-items-purchased-online-to-move-the-order-lines-directly-from-open-to-fulfilled\"></a>How to change the pipeline for gift card items purchased online to move the order lines directly from open to fulfilled</h4>\r\n\r\n<p>Out of the box, order lines cannot skip the release process and should move only from open to released. However, this can be implemented by using the release object to generate an OrderEvent and post it back.</p>\r\n\r\n<h4><a name=\"how-to-copy-the-extended-order-order-line-attribute-values-to-release-release-line\" id=\"how-to-copy-the-extended-order-order-line-attribute-values-to-release-release-line\"></a>How to copy the extended order/order line attribute values to release/release line</h4>\r\n\r\n<p>Implement the Order:Order:UserExit:PostReleaseOrder user exit to copy the extended order/order line attribute values to release/release line. However, the extended attributes from order header/lines on the release outbound message will automatically get populated in \"ExtendedFields\" : { } and \"ExtendedLineFields\" : { } sections, provided the attributes are configured in the release template.</p>\r\n\r\n<h4><a name=\"how-to-disable-change-shipping-address-for-orders-in-the-remorse-period\" id=\"how-to-disable-change-shipping-address-for-orders-in-the-remorse-period\"></a>How to disable change shipping address for orders in the remorse period</h4>\r\n\r\n<p>The change shipping address option is displayed irrespective of remorse period out of the box depending on the permitted modification type for an order.</p>\r\n\r\n<p>However, to disable this option specifically during the remorse period across Digital Self-Service, Customer Service, and Customer Engagement, perform the following steps:</p>\r\n\r\n<ul>\r\n\t<li>Implement the Order:Order:UserExit:GetPermittedModTypes user exit.</li>\r\n\t<li>Remove the permitted modification type for address change for the orders in remorse period.</li>\r\n</ul>\r\n\r\n<h3><a name=\"related-article-s\" id=\"related-article-s\"></a>Related Article(s)</h3>\r\n\r\n<div class=\"info\"><ul class=\"related-articles\"><li><a href=\"/order-release-overview\" hqid=\"2588624\">Overview</a></li><li><a href=\"/order-release-troubleshooting\" hqid=\"2588629\">Troubleshooting</a></li><li><a href=\"/massrelease\" hqid=\"2846683\">Mass Release</a></li><li><a href=\"/release-grouping-and-creation\" hqid=\"2588626\">Release Grouping and Creation</a></li><li><a href=\"/order-release-rest-apis-and-user-exits\" hqid=\"2588628\">REST APIs and User Exits</a></li><li><a href=\"/publish-release\" hqid=\"2588627\">Publish Release</a></li></ul></div>\r\n\r\n<div id=\"\" style=\"left: 15px; top: 2353.72px;\">&nbsp;</div>\r\n\r\n\t  </div>\r\n </div>\r\n <div id=\"ui-page-fb-wrap\"></div>\r\n <div class=\"hiq-footer-wrap\">\r\n    \r\n                \r\n  </div>\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n",
  "content_length": 98428,
  "scraped_at": "2025-08-09T21:57:21.514378",
  "content_clean": "Home ››Manhattan Active® Omni››Order Management››Process & Configuration Guides››Order Processing››Order Fulfillment››Order Release ››How Release Works How Release Works Previous I Next In this section let's understand some basic concepts of release that include how release works, remorse period etc. How Release WorksCustomizing the Release IDImmediate ReleaseBatch ReleaseAd-hoc ReleaseRemorse PeriodOrder Line Remorse PeriodOrder Line Remorse Process FlowBypassing Order Line Remorse PeriodValidations Performed During ReleaseReleasing Digital GoodsDigital Goods Fulfillment PipelineAuthorization On ReleaseConfigurationBatch Release Pipeline ConfigurationBatch Release Agent ConfigurationRemorse Period ConfigurationRemorse Period Configuration via APIOrder Line Remorse Period ConfigurationOrder Line Remorse Period Configuration via APIRelease Cut-Off Time Grace PeriodImplementation FlavorsSet up an order line remorse period of 60 mins for MPOS orders where ShippingMethod is not (“SMDY PM”, “SMDY AM”)How to prevent the release of lines allocated to \"On Hand Available Soon\" supply typeHow to evaluate release consolidation rules in PreReleaseOrder / IsReleasable UE. Do we have the consolidation rules API exposedHow to evaluate releasable criteria for Merge shipmentHolding Digital GoodsSplit Release for specific Order Type onlyHow to accommodate manual changes through DoNotReleaseBefore date and trigger the releaseHow to find if a fulfillment location is of type Store or DC  How to change the pipeline for gift card items purchased online to move the order lines directly from open to fulfilledHow to copy the extended order/order line attribute values to release/release lineHow to disable change shipping address for orders in the remorse periodRelated Article(s) How Release Works An order can be released in three ways. Immediate Release: Order is release immediately after allocation with an optional remorse period. For example, 30 minutes after the order is confirmed. Batch Release : Order is release in scheduled batches. For example, every day at 6 AM, 12 PM, and 6 PM. Ad-hoc Release: Order is released in the UI or via API. Regardless of the method used, the release service works by picking allocations, grouping them into releases based on origin, destination, and other parameters listed below, and creating releases. The outbound release message is then published to the corresponding fulfillment system, which will later respond with ship, pickup, or short messages. Release IDs are computed by appending a counter at the end of the order Ids. For order ID ORD001, the associated releases will have release Ids: ORD0011, ORD0012, ORD0013, etc... Because order Is are unique, this logic will ensure release Id are unique as well. This means even if release Id's repeat, as long as the order Id is distinct, there will be a unique identifier for each entry. Note: Currently, the system does not perform a tax call before release by default, and there is no out-of-the-box configuration available to enable this. Implementing such functionality would require a custom solution. Customizing the Release ID If the standard way of computing release ID is not compatible with the fulfillment system format, it is possible to implement a user exit Order:Order:UserExit:GenerateReleaseId to customize the way the release ID is generated. Immediate Release Immediate release allows orders to be released instantly after allocation. An optional remorse period can be added to delay the release, so that customers can update or cancel orders. However, if no remorse period configuration is added, then order lines are released immediately after allocation. Immediate release is configured by default for all orders. This is controlled by the release service in the order pipeline. Batch Release Batch release can be used to release orders to fulfillment systems based on a schedule (e.g. every 4 hours, or every day at 7 AM and 8 PM). For example, batch release can be used to release orders to the DC based on the scheduled work shifts. The batch release process uses the same filters, validations, and rules that immediate allocation uses. Batch release can be used in conjunction with immediate allocation or batch allocation. If used in conjunction with immediate allocation, then orders are allocated immediately to reserve inventory, but they are not released until the batch release scheduler runs. An out of the box pipeline called 'OrdersWithScheduledRelease' can be used for these types of orders. The pipeline does not have any criteria which are used to identify eligible orders/order lines. This criteria must be configured for this pipeline definition. Refer How to Configure Batch Release Pipeline. If used in conjunction with batch allocation, the orders are allocated based on the batch allocation scheduler, and are then released when the batch release scheduler runs. To use this combination, modify the pipeline to include batch allocation and batch release. Once the pipeline is modified then configure batch release agent to post the messages to the release queue. Refer How to Configure Batch Release Agent. Ad-hoc Release In the normal course of operations, the immediate and batch release services ensure all orders get released. However, during troubleshooting or testing there are other tools which can be used to trigger release for an individual order line, order, or set of orders: On the Order List UI, select order(s) and click the 'Release' button On the Order List UI, select search criteria and click the 'Release All' button. Refer Mass Release for more details. On the Order List UI, select an order and select 'Order Details' > Select one or more lines on the order and click the 'Release' button, or select the header 'Release' button to release all lines On the Order Line List UI, select order line(s) and click the 'Release' button Call the API directly: Use the following API, REST APIS and USER Exits <url>/order/api/order/order/{orderId}/release - GET method to release an order <url>/order/api/order/order/release - POST menthod to release list of orders <url>/order/api/order/order/orderLine/release - POST method to release list of order lines Remorse Period A remorse period is a way to introduce a delay between placing an order and releasing an order. Because order edits are very limited once an order is released, introducing this delay gives customers a chance to update quantities, shipping address, cancel items, and so on. Once an order is released, these edits are no longer permitted. The remorse period is achieved by setting a date called DoNotReleaseBefore on the order header. For each order, the release service checks if the DoNotReleaseBefore date is in the past before releasing the order. DoNotReleaseBefore date will be stored in UTC time zone always. All the dates in Manhattan Active® Omni needs to be passed in UTC time zone. For example, if an order is confirmed at 8:00 and a 45-minute remorse period is in place, then the DoNotReleaseBefore date on the order is set to 8:45. The milestone scheduler runs frequently and checks for orders with DoNotReleaseBefore dates in the past, so that it can release them. When the scheduler runs at 8:32, this order is not released. When the scheduler runs at 8:45, then this order is released. There are two ways to enforce a remorse period delay: Configure a remorse period (for example, 30 minutes) in Active® Omni For imported orders, you can alternatively populate the DoNotReleaseBefore date in an external system. Even if remorse period is configured in Active® Omni, the imported value will be honored and not overridden by the milestone configuration. If a remorse period is configured in Active® Omni, then the DoNotReleaseBefore is populated based on the DependentMilestoneId plus the expected time rule duration. For example, the DependentMilestoneId: \"Order::Milestone::Confirmed\" in the expected time rule is configured with a duration of 35 minutes. When an order is confirmed on 01-30-2020 at 10:00 AM, the DoNotReleaseBefore is set to 01-30-2020 10:35 UTC. A milestone scheduler runs frequently to pick orders with DoNotReleaseBefore dates in the past and release them. In the milestone configuration, Restrict By Date has significance only with respect to the Released milestone. For example, the Released milestone is configured with \"Expected 3 hours after Confirmed Milestone\" and \"Restrict By Date\" enabled. This indicates that after the order has been confirmed, it will not get released for next 3 hours. When \"Restrict By Date\" is selected, the system populates the attribute \"DoNotReleaseBefore\". This Restrict By Date functionality is not supported for any milestones other than Released. It is currently not possible to vary the remorse period based on time of day. For example, when it's closer to carrier pick up time, the remorse period should be shorter so that the orders can be ready for the carrier. This is not possible in Active® Omni, but an external system or middleware can be used to populate the DoNotReleaseBefore date with an appropriate value. There is no method to 'pause' updates to an order while users are making updates in the remorse period. For example, if a 1-hour remorse period is in place, and the customer calls at 58 minutes to update their address, then there is a chance that the order gets released while a CSR is making updates. The only way to prevent the order from being released is for the CSR to hold the order while making updates, then unhold the order when updates are completed. To configure remorse periods, see: How to configure a remorse period via the Order Configuration UI How to configure a remorse period via API Order Line Remorse Period An order line remorse period is a way to introduce a delay between placing an order and releasing an order line. Lately, we have seen the emergence of newer service levels like Same Day Delivery, which requires some or all of the lines in specific orders to be released immediately to meet the same day SLAs and carrier cut off times. Similarly, Retail Order lines are required to be released immediately. The remorse period is achieved by setting a date called DoNotReleaseBefore on the order line. For each order line, the release service checks if the DoNotReleaseBefore date is in the past before releasing the order line. There are two ways to enforce a remorse period delay: Configure order line remorse period (for example, 30 minutes) in Active® Omni. For imported orders, you can alternatively populate the DoNotReleaseBefore date in an external system. Even if the order line remorse period is configured in Active® Omni, the imported value will be honored and not overridden when isImport flag under Order Actions is set to true. \"OrderActions\": { \"IsImport\": \"true\" } Note: IsImport flag sent as \"true\" will suppress any other base or custom events that would trigger. So it is recommended that when IsImport flag sent as true should only include \"DoNotReleaseBefore\" date value and no other attributes which may trigger base or custom events. An Order line Remorse Config is characterised by the combination of Order Type, Delivery Method, and Shipping Method employed by an order line. The order line remorse period can be configured by defining a remorse period on the Order Line Remorse Config UI. The remorse period that is set in the Remorse Config UI (in minutes) is added to the order confirmation time to arrive at the ‘DoNotReleaseBefore’ for each Order line. While determining the remorse config, if more than one matching config is found, then the below priority sequence is used for choosing one, DeliveryMethodExactMatch & OrderTypeExactMatch  & ShippingMethodExactMatch DeliveryMethodExactMatch & OrderTypeExactMatch  & ShippingMethodNullMatch DeliveryMethodExactMatch & OrderTypeNullMatch & ShippingMethodNullMatch DeliveryMethodExactMatch Example: A remorse config with No OrderType - is eligible for selection for order lines of every order type. A remorse config with No OrderType and No ShippingMethod - is eligible for selection by any order line that just matches the Delivery Method Note : The 'DoNotReleaseBefore' on the order line takes precedence over the 'DoNotReleaseBefore' over the header. If there exists no Order line Remorse config that matches an Order line’s Delivery and Shipping method, the ‘DoNotReleaseBefore’ at header is considered for releasing the order line if it exists. Order Line Remorse Process Flow Order Line Remorse Process Flow To configure remorse period on order line, see: How to configure a remorse period via the Order Line Remorse Configuration UI How to configure a order line remorse period via API In case of order line modification (like ShippingMethodId or DeliveryMethodId or OrderType) during the remorse period, system re-calculates ‘DoNotReleaseBefore’ based on the remorse period present on the matched RemorseConfig. In the case of addition of a new order line to an existing order, the ‘DoNotReleaseBefore’ is calculated as per the line’s creation time and remorse period on the matching RemorseConfig. Note : “When the order line’s DoNotReleaseBefore is updated by external intervention or manually to a past date, a manual trigger (like a Click on Release) is needed for evaluating the Order line for the release process. User should not expect that release will be attempted automatically in such cases. Bypassing Order Line Remorse Period Retailers may want to bypass the order line remorse period for some order lines even though it is aplicable and configured for other order lines in the order. For example, if an order has a bunch of ship to address order lines but one of the item/order-line in that order is picked up by the customer in the store and reserved for shipping, the retailer may want to immediately allocate that order line even though a order line level remorse period is configured for the ship to home order lines. Such types of order lines are identified by the attribute DeliveryMethodSubType = 'SendSale' with DeliveryMethodId = ShipToAddress To bypass the order line remorse period configured in the system for such order lines, perform the following steps: Hit the API: GET {{url}}/order/api/tags/tagGroup?size=22 (request body is not required) Verify if the below-mentioned Tag group is available in the response \"TagGroupId\": \"OrderLineRemorsePeriod\" - The Tag Group Id has to be defined exactly as mentioned here; else it will not be considered for determining the order line remorse period by the system \"TagConditionId\": \"DeliveryMethodSubTypeConditionOnOrderLine\" \"TagExpression\": \"DeliveryMethodSubType == 'SendSale'\" - This is the value of the DeliveryMethodSubType attribute on the order line that the Label framework will evaluate for populating the label. Any other attribute on the order line can be used in the Tag Expression \"Label\": \"RemorsePeriod:0\" - Here 0 (zero) represents the remorse period in terms of minutes; the label has to be defined exactly as mentioned here; else it will not be considered for determining the order line remorse period by the system. Any other value in terms of minutes can be defined instead of 0 (zero). Refer to the details mentioned below for the exact response. OrderLineRemorsePeriodTagGroup { \"Description\": \"RemorsePeriodGroup contains set of conditions with various Tag Expressions(MVEL expressions)\", \"TagGroupId\": \"OrderLineRemorsePeriod\", \"TagCondition\": [ { \"Description\": \"Send Sale OrderLine\", \"ConditionLabels\": [ { \"Label\": \"RemorsePeriod:0\" } ], \"TagConditionId\": \"DeliveryMethodSubTypeConditionOnOrderLine\", \"TagExpression\": \"DeliveryMethodSubType == 'SendSale'\" } ] } If the Tag Group mentioned above is not available, use the below-mentioned API to create it. API: POST {{url}}/order/api/tags/tagGroup/save - with the response given above as the request body. In the order if an order line has DeliveryMethodSubType as 'SendSale'\" an Entity Labels section will be populated in the order line as detailed below. LineLevelRemorsePeriodEntityLabel \"EntityLabels\": { \"Annotations\": null, \"InheritedLabels\": null, \"RuleLabels\": { \"RemorsePeriod\": \"0\" }, \"AttributeLabels\": null } The order line with the Entity Label populated with \"Label\": \"RemorsePeriod:0\" - will be immediately released irrespective of the order line remorse period configured in the system. Note: The remorse period is applied automatically and Release Configuration need not be modified. The above-mentioned Tag Group has been provided in the base profile seed data and will be available automatically if the profile is synched/copied. If the default behaviour for 0 (zero) remorse period is not required for the order lines with DeliveryMethodSubType as 'SendSale'\", the TagGroup has to be manually deleted or updated using Tag Group API's. Refer to swagger for details. Validations Performed During Release Order lines must meet all the following criteria to be released: Matching release template should be found Order should be confirmed Units must be allocated DoNotReleaseBefore should be in the past (remorse period should be over) Supply must be configured as eligible for release, via the release demand type Releasing Digital Goods For items which do not track inventory, such as e-gift cards or other digital items, the allocation step is skipped and orders are directly released. A separate digital goods pipeline is used for lines with delivery method ‘Email’. This pipeline moves units from Open directly to Released status. For quantities which enter the release service without allocations, a release and release lines are created directly from the order and order line data. The fulfillment location config 'ALL' template is used for publishing the outbound releases for digital goods, as there is no ship from location on the release. The Order Configuration UI Modification Rules should have \"resubmit Pipeline\" as true for any modification that occur between open and released for these orders to get to released status properly. Note: Digital goods lines do not go through release template evaluation or consider Release configurations. Remorse period functionality can still be leveraged for digital goods by populating the \"DoNotReleaseBefore\" timestamp attribute at the order or order line level. However, if for example, your order remorse period is evaluated during the allocation milestone, then no remorse period will be calculated as digital goods do not go through the allocation process. Digital Goods Fulfillment Pipeline Authorization On Release When the configuration Process Payment On Release is enabled, the release process goes through an additional check upfront to verify that the amount attempting to be released has been paid for. In addition to other release eligibility checks (remorse period, release configuration, and so on), an order line(s) cannot be released unless there is a successful authorization or settlement to cover the releasable amount. If there is not enough paid on the order to cover the amount to be released, no release is created. At a high level, this is handled by tracking the amount on the order that is eligible for release, and comparing it to the amount of payment that has been authorized or settled. If nothing has been authorized or settled, the releaseable amount is used to create auth or settlement transactions against an eligible payment method. Refer to Authorization On Release For Pre-Orders for more details. This behavior is NOT compatible with payment status validation in the respective release configuration. If this configuration is enabled, it is required to set the release configuration to not restrict release by payment status. Otherwise, if, for example, the payment status is \"Awaiting Payment Info\", and the order is not authorized, the release process will not be able to trigger authorization because the releasable amount will be calculated as 0. This configuration assumes the same release consolidation and grouping logic still applies. The calculated releasable amount value is done for all of the releasable units, not on an individual unit basis. Depending on the amount of payment that was captured upfront, it is possible that release creation is prevented because the amount authorized or settled does not cover the entire amount that can be released. In other words, if an order is authorized enough to cover 1 unit eligible for release, but not all units eligible for release, no release creation will happen. Note: Though unlikely, if release is attempted but ultimately unsuccessful because the corresponding authorization failed, the inventory reservation will still indicate the item(s) has been released. If this happens, certain inventory processes such as inventory rise/drop and continuous allocation will not function properly. The item(s) can still be released when eligible, as well as go through re-allocation or cancellation. Configuration Batch Release Pipeline Configuration This section gives details on how to modify the pipeline to perform batch release based on certain rule conditions. Steps to Configure Batch Release PipelineReminder on pipeline configuration. Multiple objects are involved in the configuration of a pipeline: A Pipline, a Rule, a Rule Action and a Rule condition. The Rule Condition includes the filter used to select specific orders. That filter is generated using the 'ConditionValue' specific syntax. Look for examples in the existing rule conditions. The Rule Action contains the name of the pipeline that is going to be invoked with the following rule: RuleActiob.ActionValue = Pipeline.PipelineID. The Rule links the Rule Action and the Rule condition together. Step 1: Rule Condition: Rule condition needs to be added. In this example, the rule condition contains all the orders of doc type \"Customer order\" <url>/order/api/rules/ruleCondition/save { \"RuleConditionId\": \"RULE_CONDITION_CUSTOMER_ORDER\", \"ConditionValue\": \"{\\\"expression\\\":{\\\"lhs\\\":{\\\"operandType\\\":\\\"attribute\\\",\\\"attribute\\\":\\\"orderLine.parentOrder.docType.docTypeId\\\"},\\\"rhs\\\":{\\\"operandType\\\":\\\"constant\\\",\\\"value\\\":\\\"CustomerOrder\\\"},\\\"operator\\\":\\\"=\\\"}}\" } Step 2: Pipeline: The pipeline that invokes Batch release needs to contains the \"batchRelease\" service instead of the \"releaseOrder\" service. Below is an example of a pipleine with BatchRelease service <url>/order/api/ServiceDefinition/pipeline/save { \"Messages\": null, \"PickupService\": [ { \"FromStatus\": \"0000\", \"ComponentId\": \"Order\", \"ServiceId\": \"createOrder\" }, { \"FromStatus\": \"2000\", \"ComponentId\": \"Order\", \"ServiceId\": \"updateOrder\" }, { \"FromStatus\": \"1500\", \"ComponentId\": \"Order\", \"ServiceId\": \"updateOrder\" }, { \"FromStatus\": \"1000\", \"ComponentId\": \"Order\", \"ServiceId\": \"allocateOrder\" }, { \"FromStatus\": \"1000\", \"ComponentId\": \"Order\", \"ServiceId\": \"batchAllocate\" }, { \"FromStatus\": \"1000\", \"ComponentId\": \"Order\", \"ServiceId\": \"allocateBackOrder\" }, { \"FromStatus\": \"1500\", \"ComponentId\": \"Order\", \"ServiceId\": \"allocateOrder\" }, { \"FromStatus\": \"1500\", \"ComponentId\": \"Order\", \"ServiceId\": \"batchAllocate\" }, { \"FromStatus\": \"2000\", \"ComponentId\": \"Order\", \"ServiceId\": \"batchRelease\" }, { \"FromStatus\": \"2000\", \"ComponentId\": \"Order\", \"ServiceId\": \"deAllocateOrder\" }, { \"FromStatus\": \"3000\", \"ComponentId\": \"Order\", \"ServiceId\": \"shortOrder\" }, { \"FromStatus\": \"3000\", \"ComponentId\": \"Order\", \"ServiceId\": \"processOrder\" }, { \"FromStatus\": \"3000\", \"ComponentId\": \"Order\", \"ServiceId\": \"pickOrder\" }, { \"FromStatus\": \"3000\", \"ComponentId\": \"Order\", \"ServiceId\": \"packOrder\" }, { \"FromStatus\": \"3000\", \"ComponentId\": \"Order\", \"ServiceId\": \"fulfillOrder\" }, { \"FromStatus\": \"3500\", \"ComponentId\": \"Order\", \"ServiceId\": \"unProcessOrder\" }, { \"FromStatus\": \"3500\", \"ComponentId\": \"Order\", \"ServiceId\": \"shortOrder\" }, { \"FromStatus\": \"3500\", \"ComponentId\": \"Order\", \"ServiceId\": \"pickOrder\" }, { \"FromStatus\": \"3500\", \"ComponentId\": \"Order\", \"ServiceId\": \"packOrder\" }, { \"FromStatus\": \"3500\", \"ComponentId\": \"Order\", \"ServiceId\": \"fulfillOrder\" }, { \"FromStatus\": \"3600\", \"ComponentId\": \"Order\", \"ServiceId\": \"packOrder\" }, { \"FromStatus\": \"3600\", \"ComponentId\": \"Order\", \"ServiceId\": \"shortOrder\" }, { \"FromStatus\": \"3600\", \"ComponentId\": \"Order\", \"ServiceId\": \"fulfillOrder\" }, { \"FromStatus\": \"3700\", \"ComponentId\": \"Order\", \"ServiceId\": \"shortOrder\" }, { \"FromStatus\": \"3700\", \"ComponentId\": \"Order\", \"ServiceId\": \"fulfillOrder\" }, { \"FromStatus\": \"7000\", \"ComponentId\": \"Order\", \"ServiceId\": \"createReturn\" }, { \"FromStatus\": \"8000\", \"ComponentId\": \"Order\", \"ServiceId\": \"confirmReturn\" }, { \"FromStatus\": \"8000\", \"ComponentId\": \"Order\", \"ServiceId\": \"cancelReturn\" }, { \"FromStatus\": \"8500\", \"ComponentId\": \"Order\", \"ServiceId\": \"cancelReturn\" } ], \"PipelineId\": \"OrdersWithScheduledRelease\", \"ProcessTypeId\": \"ORDER_EXECUTION\", \"Description\": \"Orders with Scheduled Release\", \"DropStatusDetermination\": [ { \"ConditionText\": null, \"FromStatus\": \"0000\", \"Sequence\": 1, \"DropStatus\": \"1000\", \"ComponentId\": \"Order\", \"IntendedDropStatus\": \"1000\", \"ServiceId\": \"createOrder\" }, { \"ConditionText\": null, \"FromStatus\": \"1000\", \"Sequence\": 1, \"DropStatus\": \"1500\", \"ComponentId\": \"Order\", \"IntendedDropStatus\": \"1500\", \"ServiceId\": \"allocateOrder\" }, { \"ConditionText\": null, \"FromStatus\": \"1000\", \"Sequence\": 1, \"DropStatus\": \"2000\", \"ComponentId\": \"Order\", \"IntendedDropStatus\": \"2000\", \"ServiceId\": \"allocateOrder\" }, { \"ConditionText\": null, \"FromStatus\": \"1500\", \"Sequence\": 1, \"DropStatus\": \"2000\", \"ComponentId\": \"Order\", \"IntendedDropStatus\": \"2000\", \"ServiceId\": \"allocateOrder\" }, { \"ConditionText\": null, \"FromStatus\": \"1000\", \"Sequence\": 1, \"DropStatus\": \"1500\", \"ComponentId\": \"Order\", \"IntendedDropStatus\": \"1500\", \"ServiceId\": \"batchAllocate\" }, { \"ConditionText\": null, \"FromStatus\": \"1000\", \"Sequence\": 1, \"DropStatus\": \"2000\", \"ComponentId\": \"Order\", \"IntendedDropStatus\": \"2000\", \"ServiceId\": \"batchAllocate\" }, { \"ConditionText\": null, \"FromStatus\": \"1500\", \"Sequence\": 1, \"DropStatus\": \"2000\", \"ComponentId\": \"Order\", \"IntendedDropStatus\": \"2000\", \"ServiceId\": \"batchAllocate\" }, { \"ConditionText\": null, \"FromStatus\": \"2000\", \"Sequence\": 1, \"DropStatus\": \"1500\", \"ComponentId\": \"Order\", \"IntendedDropStatus\": \"1500\", \"ServiceId\": \"deAllocateOrder\" }, { \"ConditionText\": null, \"FromStatus\": \"2000\", \"Sequence\": 1, \"DropStatus\": \"1000\", \"ComponentId\": \"Order\", \"IntendedDropStatus\": \"1000\", \"ServiceId\": \"updateOrder\" }, { \"ConditionText\": null, \"FromStatus\": \"1500\", \"Sequence\": 1, \"DropStatus\": \"1000\", \"ComponentId\": \"Order\", \"IntendedDropStatus\": \"1000\", \"ServiceId\": \"updateOrder\" }, { \"ConditionText\": null, \"FromStatus\": \"2000\", \"Sequence\": 1, \"DropStatus\": \"3000\", \"ComponentId\": \"Order\", \"IntendedDropStatus\": \"3000\", \"ServiceId\": \"batchRelease\" }, { \"ConditionText\": null, \"FromStatus\": \"3000\", \"Sequence\": 1, \"DropStatus\": \"1500\", \"ComponentId\": \"Order\", \"IntendedDropStatus\": \"1500\", \"ServiceId\": \"shortOrder\" }, { \"ConditionText\": null, \"FromStatus\": \"3000\", \"Sequence\": 1, \"DropStatus\": \"3500\", \"ComponentId\": \"Order\", \"IntendedDropStatus\": \"3500\", \"ServiceId\": \"processOrder\" }, { \"ConditionText\": null, \"FromStatus\": \"3000\", \"Sequence\": 1, \"DropStatus\": \"3600\", \"ComponentId\": \"Order\", \"IntendedDropStatus\": \"3600\", \"ServiceId\": \"pickOrder\" }, { \"ConditionText\": null, \"FromStatus\": \"3000\", \"Sequence\": 1, \"DropStatus\": \"3700\", \"ComponentId\": \"Order\", \"IntendedDropStatus\": \"3700\", \"ServiceId\": \"packOrder\" }, { \"ConditionText\": null, \"FromStatus\": \"3000\", \"Sequence\": 1, \"DropStatus\": \"7000\", \"ComponentId\": \"Order\", \"IntendedDropStatus\": \"7000\", \"ServiceId\": \"fulfillOrder\" }, { \"ConditionText\": null, \"FromStatus\": \"3500\", \"Sequence\": 1, \"DropStatus\": \"3000\", \"ComponentId\": \"Order\", \"IntendedDropStatus\": \"3000\", \"ServiceId\": \"unProcessOrder\" }, { \"ConditionText\": null, \"FromStatus\": \"3500\", \"Sequence\": 1, \"DropStatus\": \"1500\", \"ComponentId\": \"Order\", \"IntendedDropStatus\": \"1500\", \"ServiceId\": \"shortOrder\" }, { \"ConditionText\": null, \"FromStatus\": \"3500\", \"Sequence\": 1, \"DropStatus\": \"3600\", \"ComponentId\": \"Order\", \"IntendedDropStatus\": \"3600\", \"ServiceId\": \"pickOrder\" }, { \"ConditionText\": null, \"FromStatus\": \"3500\", \"Sequence\": 1, \"DropStatus\": \"3700\", \"ComponentId\": \"Order\", \"IntendedDropStatus\": \"3700\", \"ServiceId\": \"packOrder\" }, { \"ConditionText\": null, \"FromStatus\": \"3500\", \"Sequence\": 1, \"DropStatus\": \"7000\", \"ComponentId\": \"Order\", \"IntendedDropStatus\": \"7000\", \"ServiceId\": \"fulfillOrder\" }, { \"ConditionText\": null, \"FromStatus\": \"3600\", \"Sequence\": 1, \"DropStatus\": \"1500\", \"ComponentId\": \"Order\", \"IntendedDropStatus\": \"1500\", \"ServiceId\": \"shortOrder\" }, { \"ConditionText\": null, \"FromStatus\": \"3600\", \"Sequence\": 1, \"DropStatus\": \"3700\", \"ComponentId\": \"Order\", \"IntendedDropStatus\": \"3700\", \"ServiceId\": \"packOrder\" }, { \"ConditionText\": null, \"FromStatus\": \"3600\", \"Sequence\": 1, \"DropStatus\": \"7000\", \"ComponentId\": \"Order\", \"IntendedDropStatus\": \"7000\", \"ServiceId\": \"fulfillOrder\" }, { \"ConditionText\": null, \"FromStatus\": \"3700\", \"Sequence\": 1, \"DropStatus\": \"1500\", \"ComponentId\": \"Order\", \"IntendedDropStatus\": \"1500\", \"ServiceId\": \"shortOrder\" }, { \"ConditionText\": null, \"FromStatus\": \"3700\", \"Sequence\": 1, \"DropStatus\": \"7000\", \"ComponentId\": \"Order\", \"IntendedDropStatus\": \"7000\", \"ServiceId\": \"fulfillOrder\" }, { \"ConditionText\": null, \"FromStatus\": \"7000\", \"Sequence\": 1, \"DropStatus\": \"8000\", \"ComponentId\": \"Order\", \"IntendedDropStatus\": \"8000\", \"ServiceId\": \"createReturn\" }, { \"ConditionText\": null, \"FromStatus\": \"8000\", \"Sequence\": 1, \"DropStatus\": \"8500\", \"ComponentId\": \"Order\", \"IntendedDropStatus\": \"8500\", \"ServiceId\": \"confirmReturn\" }, { \"ConditionText\": null, \"FromStatus\": \"8000\", \"Sequence\": 1, \"DropStatus\": \"7000\", \"ComponentId\": \"Order\", \"IntendedDropStatus\": \"7000\", \"ServiceId\": \"cancelReturn\" }, { \"ConditionText\": null, \"FromStatus\": \"8500\", \"Sequence\": 1, \"DropStatus\": \"7000\", \"ComponentId\": \"Order\", \"IntendedDropStatus\": \"7000\", \"ServiceId\": \"cancelReturn\" } ] } Step 3: Rules Action: the rule action will link the pipline to the Rule configired in Step 4 <url>/order/api/rules/ruleAction/save { \"RuleActionId\": \"ORDER_BATCH_RELEASE_MODE\", \"ActionDescription\": \"Order Batch Pipeline Action\", \"ActionValue\": \"OrdersWithScheduledRelease\" } Step 4: Configure the Rule <url>/order/api/rules/rule/save { \"RuleId\": \"RULE_BATCH_RELEASE\", \"RuleGroupId\": \"DELIVERYORDER_PIPELINE_RULE_GROUP\", \"RuleDescription\": \"batchrelease Order Rule\", \"Component\": \"Order\", \"RuleStatus\": \"active\", \"RuleVersion\": \"1\", \"Salience\": \"5\", \"DisplaySequence\": \"1\", \"ActivationDate\": null, \"ExpirationDate\": null, \"RuleConditionId\": \"RULE_CONDITION_CUSTOMER_ORDER\", \"RuleActionId\": \"ORDER_BATCH_RELEASE_MODE\" } Batch Release Agent Configuration There are two versions of the batch release process. One with an Agent and another with a job. Both are documented below. How to choose between a batch release agent or job? - If you are a new customer or an existing customer who wants to start using batch release, go with the job. - if you are an existing customer with batch release agent configuration; - If your selection criteria for the agent is at the order or order line level, stay with the agent. - if you want to use an allocation level selection criteria, moving to batch release job is encouraged but not mandatory. Use below steps to configure batch release job. Steps to Configure Batch Release JobStep 1: Verify ext point to message type POST {{url}}/order/api/ServiceDefinition/extPointToMessageType/save { \"ExtensionPointId\": \"Order:Order:Event:OnBatchReleaseOrder\", \"MessageType\": \"BatchReleaseOrderEventMSGType\" } Step 2: Verify outbound message type POST {{url}}/order/api/ServiceDefinition/outBoundMessageType/save { \"MessageType\": \"BatchReleaseOrderEventMSGType\", \"Transactional\": true, \"PersistMessageToMsgStore\": false } Step 3: Verify inbound message types POST {{url}}/order/api/ServiceDefinition/inBoundMessageType/save { \"MessageType\": \"BatchReleaseOrderEventMSGType\", \"NoOfConsumer\": 10, \"MinNoOfConsumer\": 1, \"Idempotent\": true, \"ExternalIntegrationRequired\": false, \"MaxDesiredInstances\": 6, \"ScaleUpTimeWindow\": 10, \"ScaleDownTimeWindow\": 20, \"Description\": \"This queue is used to pick the allocated orders and process them for release\", \"ServiceId\": \"batchReleaseOrderEvent\" } Step 4: Verify Job type definition POST {{url}}/order/api/batch/jobTypeDefinition/save { \"JobTypeId\": \"allocationBatchReleaseJob\", \"JobTypeDescription\": \"Job to perform release of allocation batch by picking order ids based on the criteria passed on job parameters\", \"JobType\": \"SERVICE\", \"InvocationServiceId\": \"allocationBatchRelease\" } Step 5: Create Job schedule POST {{url}}/order/api/batch/jobSchedule/save { \"JobScheduleId\":\"allocationBatchReleaseJobId\", \"JobTypeId\":\"allocationBatchReleaseJob\", \"CronExpression\":\"0 0/1 * * * ? *\", \"JobParameters\":[ { \"InputKey\":\"Query\", \"InputValue\":\"ItemId == 'Item1'\" } ] } Query Examples: Below are some example queries which can be use in the job schedule. User can use different filter criteria based on different fields in allocation/orderline/order entity to filter the orders. By default, the job is referring to a field on the allocation. Only fields outside of the allocation need to be clearly called out with \"orderLine.xxx\" \"ItemId = 'iPhone8:1'\" (here, ItemId refers to the item id on the allocation) \"OrderLine.ItemId = 'iPhone8:1'\" (here, OrderLine.ItemId refers to the item id on the order line) \"OrderLine.Order.OrderType.OrderTypeId = 'Ecom Order'\" \"OrderLine.Order.OrderType.OrderTypeId = 'Ecom Order' AND OrderLine.ShippingMethodId = '2Day' AND ItemId = 'iPhone8:1'\"; (here, item Id refers to the item on the allocation) \"OrderLine.Order.OrderType.OrderTypeId = 'Ecom Order' AND ItemId = 'iPhone8:1'\"; (here, item Id refers to the item on the allocation) Step 6 If required to test: Trigger the job POST: <url>/order/api/batch/jobSchedule/trigger { \"JobScheduleId\": \"allocationBatchReleaseJobId\" } Use below steps to configure batch release agent. Steps to Configure Batch Release AgentStep 1: Create a response template - Login as system POST <url>/order/api/fwcore/responseTemplate/save { \"BaseEntity\": \"Order\", \"TemplateJson\": { \"OrderId\": null }, \"TemplateId\": \"batchReleaseOrderTemplate\" } Step 2: Create a handler for the scheduler POST <url>/order/api/ServiceDefinition/extensionHandler/save { \"ExtensionHandlerId\": \"ReleaseAgentHandler\", \"ExtensionhandlerRoute\": [{ \"ExtensionhandlerRouteId\": \"ReleaseAgentHandlerRouteId\", \"Source\": \"ON_EVENT\", \"Destination\": \"releaseOrder\", \"IsSync\": \"true\" }] } Step 3: Create an agent, which includes the frequency at which the scheduler runs POST <url>/order/api/batch/agent { \"name\": \"ReleaseAgent_Batch\", \"cronSchedule\": \"0/10 0 0 3/1 * ? *\", \"query\": \"order.minFulfillmentStatusId=\\\"2000\\\"\", \"queryLimit\": \"5000\" \"entity\": \"Order\", \"handlerName\": \"ReleaseAgentHandler\", \"TemplateId\": \"batchReleaseOrderTemplate\" } Some sample queries : Example 1 : Release job to pick orders which are in allocated status (MinFulfillmentStatusId=\\\"2000\\\" or MaxFulfillmentStatusId=\\\"2000\\\") Example 2 : Release job to pick orders which are in allocated status and not to pick backordered and open orders (MinFulfillmentStatusId in (\\\"1500\\\", \\\"2000\\\") and MaxFulfillmentStatusId not in (\\\"1500\\\") Step 4: Check to ensure the job schedule exists <url>/order/api/batch/jobSchedule/jobScheduleId/ReleaseAgent_Batch-AgentSchedule { \"Messages\": null, \"ProfileId\": \"locc-na-us\", \"UpdatedTimestamp\": \"2019-10-16T21:26:04.013\", \"CreatedBy\": \"admin@locc-na-us.com\", \"CreatedTimestamp\": \"2019-10-16T21:18:12.154\", \"IsDisabled\": false, \"IsAdHoc\": false, \"Process\": null, \"StartDelay\": null, \"TriggerKey\": \"ReleaseAgent_Batch-AgentSchedule-trigger\", \"UpdatedBy\": \"admin@locc-na-us.com\", \"TimeZone\": null, \"JobTypeId\": \"ReleaseAgent_Batch-AgentJob\", \"ContextId\": \"df17c134-c81b-4f6e-90f1-f0730a904ca2\", \"CronExpression\": \"0 0/1 * 1/1 * ? *\", \"PK\": \"5712606921545778562\", \"JobParameters\": [ { \"ProfileId\": \"locc-na-us\", \"UpdatedBy\": \"admin@locc-na-us.com\", \"UpdatedTimestamp\": \"2019-10-16T21:18:12.154\", \"CreatedBy\": \"admin@locc-na-us.com\", \"CreatedTimestamp\": \"2019-10-16T21:18:12.154\", \"InputValue\": \"MaxFulfillmentStatusId=\\\"2000\\\"\", \"ContextId\": \"2c513b65-8f19-46fe-98f8-9a15cd7f7b14\", \"ParentJobSchedule\": { \"PK\": 5712606921545778562 }, \"Process\": null, \"PK\": \"5712606921545786782\", \"InputKey\": \"Query\" }, { \"ProfileId\": \"locc-na-us\", \"UpdatedBy\": \"admin@locc-na-us.com\", \"UpdatedTimestamp\": \"2019-10-16T21:18:12.154\", \"CreatedBy\": \"admin@locc-na-us.com\", \"CreatedTimestamp\": \"2019-10-16T21:18:12.154\", \"InputValue\": \"Order\", \"ContextId\": \"2c513b65-8f19-46fe-98f8-9a15cd7f7b14\", \"ParentJobSchedule\": { \"PK\": 5712606921545778562 }, \"Process\": null, \"PK\": \"5712606921545797805\", \"InputKey\": \"Entity\" }, { \"ProfileId\": \"locc-na-us\", \"UpdatedBy\": \"admin@locc-na-us.com\", \"UpdatedTimestamp\": \"2019-10-16T21:18:12.154\", \"CreatedBy\": \"admin@locc-na-us.com\", \"CreatedTimestamp\": \"2019-10-16T21:18:12.154\", \"InputValue\": \"ReleaseAgentHandler\", \"ContextId\": \"2c513b65-8f19-46fe-98f8-9a15cd7f7b14\", \"ParentJobSchedule\": { \"PK\": 5712606921545778562 }, \"Process\": null, \"PK\": \"5712606921545806224\", \"InputKey\": \"HandlerName\" }, { \"ProfileId\": \"locc-na-us\", \"UpdatedBy\": \"admin@locc-na-us.com\", \"UpdatedTimestamp\": \"2019-10-16T21:18:12.154\", \"CreatedBy\": \"admin@locc-na-us.com\", \"CreatedTimestamp\": \"2019-10-16T21:18:12.154\", \"InputValue\": \"ReleaseAgent_Batch-AgentJob\", \"ContextId\": \"2c513b65-8f19-46fe-98f8-9a15cd7f7b14\", \"ParentJobSchedule\": { \"PK\": 5712606921545778562 }, \"Process\": null, \"PK\": \"5712606921545813576\", \"InputKey\": \"MessageType\" }, { \"ProfileId\": \"locc-na-us\", \"UpdatedBy\": \"admin@locc-na-us.com\", \"UpdatedTimestamp\": \"2019-10-16T21:18:12.155\", \"CreatedBy\": \"admin@locc-na-us.com\", \"CreatedTimestamp\": \"2019-10-16T21:18:12.155\", \"InputValue\": \"DEDICATED_MESSAGE_TYPE\", \"ContextId\": \"2c513b65-8f19-46fe-98f8-9a15cd7f7b14\", \"ParentJobSchedule\": { \"PK\": 5712606921545778562 }, \"Process\": null, \"PK\": \"5712606921545825766\", \"InputKey\": \"MessageTypeMode\" }, { \"ProfileId\": \"locc-na-us\", \"UpdatedBy\": \"admin@locc-na-us.com\", \"UpdatedTimestamp\": \"2019-10-16T21:26:04.005\", \"CreatedBy\": \"admin@locc-na-us.com\", \"CreatedTimestamp\": \"2019-10-16T21:26:04.005\", \"InputValue\": \"5000\", \"ContextId\": \"df17c134-c81b-4f6e-90f1-f0730a904ca2\", \"ParentJobSchedule\": { \"PK\": 5712606921545778562 }, \"Process\": null, \"PK\": \"5712611640054534705\", \"InputKey\": \"QueryLimit\" }, { \"ProfileId\": \"locc-na-us\", \"UpdatedBy\": \"admin@locc-na-us.com\", \"UpdatedTimestamp\": \"2019-10-16T21:26:04.006\", \"CreatedBy\": \"admin@locc-na-us.com\", \"CreatedTimestamp\": \"2019-10-16T21:26:04.006\", \"InputValue\": \"batchReleaseOrderTemplate\", \"ContextId\": \"df17c134-c81b-4f6e-90f1-f0730a904ca2\", \"ParentJobSchedule\": { \"PK\": 5712606921545778562 }, \"Process\": null, \"PK\": \"5712611640064543788\", \"InputKey\": \"Template\" }, { \"ProfileId\": \"BB-US\", \"UpdatedBy\": \"satish@BB.com\", \"UpdatedTimestamp\": \"2020-02-27T20:48:32.577\", \"CreatedBy\": \"satish@BB.com\", \"CreatedTimestamp\": \"2020-02-27T20:48:32.577\", \"InputValue\": \"Rest\", \"ContextId\": \"af39234a-d42c-4fa6-b18e-14ba68bb32fe\", \"ParentJobSchedule\": { \"PK\": 5827617985321331468 }, \"Process\": null, \"PK\": \"5828365125779758356\", \"InputKey\": \"QueryType\" } ], \"JobScheduleId\": \"ReleaseAgent_Batch-AgentSchedule\", \"RepeatInterval\": null } Step 5: Create orders and allocate them Step 6: Trigger the job POST: <url>/order/api/batch/jobSchedule/trigger { \"JobScheduleId\": \"ReleaseAgent_Batch-AgentSchedule\" } Step 7: Verify that orders are released Remorse Period Configuration Search for 'Order Type' in the application menu. In the Order Types UI, identify the order type for which you want to configure a remorse period. Find the Order Config for that order type. Search for 'Order Configuration' in the application menu. Open the Order Config from the previous step. Open the Order Monitoring tab and go to the Released milestone. Add the expected time rule for Released milestone. Specify the remorse period duration in hours (for example, 0.5 hours is 30 minutes). Select the dependent milestone as Confirmed (or another value from the list based on requirements). Select the Restrict by Date check box, and then click OK. In the same Released milestone section, add a monitoring rule. Add the rule name, and specify the remorse period duration in hours. Select the event \"Ready for Release\" from the drop-down. Remorse Period Configuration via API Follow the below steps to configure a 10 minute remorse period for order type 'CallCenter'. With this configuration, if we confirm an order (which allocates successfully), then it will be automatically released after 10 minutes. Steps to Configure Remorse Period via APIStep 1: Create Order Config POST: /order/api/order/orderConfig/save Step 2: Associate Order Config to Order type POST: /order/api/order/orderType/save Step 3: In the Order Config, add an Expected Time Rule for the Released milestone The below sample JSON is used to set the remorse period to 10 minutes (600 Seconds) { \"RestrictByDate\": true, \"DependentMilestoneId\": \"Order::Milestone::Confirmed\", \"MilestoneDefinitionId\": \"Order::Milestone::Released\", \"Duration\": 600, \"OrderConfigId\": \"CSRConfig\", \"Type\": \"AFTER_MILESTONE\" } Verify if the expected time rule is created using GET /order/api/order/orderExpectedTimeRule?query=OrderConfigId=EcommConfig Step 4: Add a Monitoring Rule which raises the 'OnReadyForRelease' event POST /order/api/order/orderMonitoringRule { \"CreatedBy\": \"seeddata-importer\", \"RuleId\": \"RaiseEventOnReleaseDue\", \"MilestoneDefinitionId\": \"Order::Milestone::Released\", \"Duration\": 0, \"Process\": null, \"EventName\": \"Order:Order:Event:OnReadyForRelease\", \"RaiseAlways\": false, \"UpdatedBy\": \"seeddata-importer\", \"Type\": \"EXPECTED_TIME\", \"OrderConfigId\": \"CSRConfig\", \"RepeatInterval\": null } Verify if the expected time rule is created using  GET {{url}}/order/api/order/orderMonitoringRule?query=OrderConfigId=EcommConfig Step 5: Add a Job Schedule which will monitor the milestones and raise events as configured POST: /order/api/batch/jobSchedule/save { \"JobScheduleId\": \"orderMileStoneJob\", \"JobTypeId\": \"orderMileStoneJob\", \"CronExpression\": \"0 0/1 * 1/1 * ? *\", \"StartDelay\": null, \"RepeatInterval\": null, \"TriggerKey\": \"orderMileStoneJob\" } Verify if the job schedule is saved GET /scheduler/api/scheduler/jobSchedule?size=150 GET /order/api/batch/jobSchedule?size=150 Step 6: Create a trigger for the schedule POST: /order/api/batch/jobSchedule/trigger { \"JobScheduleId\": \"orderMileStoneJob\" } Order Line Remorse Period Configuration Identify the delivery method and shipping method for which you want to configure a remorse period. Search for 'Order Line Remorse Config' in the application menu. In the Order Line Remorse Config UI, create a new remorse configuration by selecting the Delivery Method ID, Order Type ID, and Shipping Method ID from the corresponding drop-down list of available methods, and provide a remorse period (in minutes) and save the configuration. Note: The attribute selection does not support multi-selection. For example, users cannot define a single remorse config for 60 mins to apply for list of shipping methods. Instead, users have to define the same remorse config duration for each of those shipping methods. Note: The attribute selection does not support != to condition. For example, users cannot define a single remorse config for 60 mins to exclude one or many Same Day Delivery Shipping Methods. Order Line Remorse Period Configuration via API Steps to Configure Order Line Remorse Period via API Step 1: Create Remorse Config POST: POST /order/api/order/orderLineRemorse/save { \"DeliveryMethodId\": \"PickUpAtStore\", \"OrderTypeId\": \"Ecom Order\", \"ShippingMethodId\": null, \"RemorsePeriod\": 0 } Verify that the remorse config is saved GET /order/api/order/orderLineRemorseConfig?size=10 Release Cut-Off Time Grace Period When an order allocation happens before the cut-off time and the release process is triggered post cut-off, i.e, the latest batch release process of the day, then the dates in the release will not be aligned with what was promised to the customer as it will consider the cut-off for the next working day. This feature will allow for configurable minutes of grace period past the location cut-off time to release an order still meeting the committed delivery date. For example, if the cut-off time is 4:00 p.m. and the release job takes 15 minutes to run, this parameter should be set at a minimum of 15 min. The release cut-off time grace period can be configured using the following API or using the Promising Config Parameters UI. POST {{url}}/promising/api/promising/promisingConfigParameters/save { \"PromisingConfigParameterId\": \"defaultPromisingConfigParameterId\", \"CutoffGraceTimeInMinutes\": 10.0 } Implementation Flavors Set up an order line remorse period of 60 mins for MPOS orders where ShippingMethod is not (“SMDY PM”, “SMDY AM”) Individual order line remorse config should be defined for each of the shipping. How to prevent the release of lines allocated to \"On Hand Available Soon\" supply type In the inventory demand type configuration, remove the \"OH Available Soon\" supply type. This will prevent orders from being released if they are allocated to the \"OH Available Soon\" supply type. How to evaluate release consolidation rules in PreReleaseOrder / IsReleasable UE. Do we have the consolidation rules API exposed Consolidation rules API should not be exposed due to technical reasons. The only option is to implement the logic in the custom code. Refer to Release Grouping and Creation for details on how the consolidation logic works. How to evaluate releasable criteria for Merge shipment For a multi-leg merge fulfillment, the base automatically attempts to ship the second leg of the fulfillment when the first Ship Event is processed. While release conditions for the second leg must still be valid, the second leg fulfillment does not pass through the pipeline, and IsReleasable UE is therefore not invoked. Instead, event Order:Allocation:Event:OnMultiplePicuUpStatusChange is triggered. If the implementation requires that both the first and second legs of the fulfillment pass through the release pipeline and be evaluated by the IsReleasable UE, it is recommended to prevent the release from being eligible automatically by modifying the release template to not include demand status of 'In Transit'. Holding Digital Goods Requirement: Since digital goods are automatically released, customers are unable to hold such orders for fraud checks. Hence, customers need an ability to hold digital goods lines in an order before releasing them. Implementation: Make pipeline changes and define a new custom status 1000.500 in between 1000 and 3000 for the release pipeline (“Fraud Hold Resolved” status which can be used for digital goods lines). So that the digital line does not go to released directly. Update Release Service logic to not pick up digital goods from open status 1000.00 and instead pick only in custom status 1000.500 When Fraud hold is removed on the order, then check if any digital goods exist on the line. If yes, then change the order line using a change status API from 1000.000 to 1000.500. POST /api/order/order/changeStatus Split Release for specific Order Type only Requirement: Which user exit should be implemented to split releases based on custom logic for specific order type(s). Implementation: Use Order::Order::UserExit::ReleaseSplit UE for Release split. As part of the extension handler definition for this UE, you can specify the entry condition to filter a specific order type for split release. The remaining order types which are not part of this entry condition will be excluded from the release split. Extension Handler { \"ExtensionHandlerId\": \"ReleaseSplit\", \"ExtensionhandlerRoute\": [ { \"ExtensionhandlerRouteId\": \"ReleaseSplit\", \"Source\": \"ON_EVENT\", \"SourceId\": \"ON_EVENT\", \"Destination\": \"ReleaseSplit\", \"DestinationId\": \"ReleaseSplit\", \"IsSync\": \"true\" } ], \"RegisteredExtensionPoints\": [ { \"ExtensionPointId\": \"Order:Order:UserExit:ReleaseSplit\", \"EntryCondition\": \"\"EntryCondition\": \"OrderType.OrderTypeId == 'Customer'\"\" } ] } Note: The release split user exit does not support splitting digital goods orders into multiple releases How to accommodate manual changes through DoNotReleaseBefore date and trigger the release Requirement: If orders are created with a certain remorse period through order monitoring rule, is it possible to accommodate manual changes to this date through DoNotReleaseBefore date from an external system Implementation:  The delayed payload is specifically for releasing the order via milestone. It is not designed to accommodate manual changes to the DoNotReleaseBefore date from an external system. If you want order to monitor the DoNotReleaseBefore date and trigger the release after that data has passed, you have a few options: Modify the Order Monitoring rule for release and use the DoNotReleaseBefore as the “Expected Time” for release to happen. But this will mean, the DoNotReleaseBefore should always come in the order and you cannot use milestone to set the do not release, and the remorse period functionality will be lost. Add an extension and every time the DoNotReleaseBefore is modified, you can create a delayed payload via an extension handler. The outbound message type will be ReleaseOrderMsgType and the delivery time will be equal to the DoNotReleaseBefore time. The AWPF framework will automatically post the message to the release queue after the time has past. How to find if a fulfillment location is of type Store or DC The location type is not stored in order. Hence, this can be done using the APIs below. GET {{url}}/order/api/order/order/release?query=ReleaseId=<ReleaseId> -> Fetch ShipFromLocationId from Release object GET {{url}}/organization/api/organization/location/locationId/<ShipFromLocationId> -> Use LocationType from the response How to change the pipeline for gift card items purchased online to move the order lines directly from open to fulfilled Out of the box, order lines cannot skip the release process and should move only from open to released. However, this can be implemented by using the release object to generate an OrderEvent and post it back. How to copy the extended order/order line attribute values to release/release line Implement the Order:Order:UserExit:PostReleaseOrder user exit to copy the extended order/order line attribute values to release/release line. However, the extended attributes from order header/lines on the release outbound message will automatically get populated in \"ExtendedFields\" : { } and \"ExtendedLineFields\" : { } sections, provided the attributes are configured in the release template. How to disable change shipping address for orders in the remorse period The change shipping address option is displayed irrespective of remorse period out of the box depending on the permitted modification type for an order. However, to disable this option specifically during the remorse period across Digital Self-Service, Customer Service, and Customer Engagement, perform the following steps: Implement the Order:Order:UserExit:GetPermittedModTypes user exit. Remove the permitted modification type for address change for the orders in remorse period. Related Article(s) OverviewTroubleshootingMass ReleaseRelease Grouping and CreationREST APIs and User ExitsPublish Release"
}