{
  "id": "3424099",
  "permalink": "shopify-technical-integration",
  "title": "Shopify technical integration",
  "type": "topic",
  "level": 5,
  "path": "Manhattan Active® Omni/Order Management/Process & Configuration Guides/Order Processing/Shopify Integration/Shopify Technical Integration",
  "raw_item": {
    "id": "3424099",
    "text": "Shopify Technical Integration",
    "title": "Shopify Technical Integration",
    "permalink": "shopify-technical-integration",
    "leaf": false,
    "droppable": true,
    "expanded": true,
    "closed": true,
    "visible": true,
    "editable": true,
    "type": "topic",
    "topicType": "0",
    "status": "1",
    "iconCls": "icon-topic",
    "cls": "",
    "folder_id": "t;3424098",
    "parent": "3424098",
    "created_date": "1718286340",
    "modified_date": "1751547569",
    "instructor_id": null,
    "loaded": true,
    "haschildren": false,
    "callout": "0",
    "order": "1"
  },
  "success": true,
  "content": "\r\n\r\n\r\n<div class=\"hiq-page-wrap\">\r\n<div class=\"hiq-t-wrap\">\r\n\t\t\r\n  \t  <div class=\"hiq-t \">\r\n\t\t\t\t<ul class=\"breadcrumbs\"><li><a class=\"breadcrumb-links\" hqid=\"1788908\"  href=\"/home\">Home</a></li> <li><span>&rsaquo;&rsaquo;</span><a hqid=\"3500940\" href=\"/omni\" class=\"breadcrumb-links\">Manhattan Active® Omni</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158393\" href=\"/order-management\" class=\"breadcrumb-links\">Order Management</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158394\" href=\"/process-configuration-guides\" class=\"breadcrumb-links\">Process & Configuration Guides</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158718\" href=\"/order-processing-2\" class=\"breadcrumb-links\">Order Processing</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"3424098\" href=\"/shopify-integration\" class=\"breadcrumb-links\">Shopify Integration</a></li><li> <span>››</span>Shopify technical integration</li></ul>  \t\r\n\t\t<h2>How to Integrate with Shopify</h2>\r\n\r\n<p></p>\r\n\r\n&nbsp;I&nbsp;<a href=\"/shopify-inventory-integration\" hqid=\"3424101\">Next</a>\r\n<p>&nbsp;</p>\r\n\r\n<div class=\"info\"><ul><li><a href=\"/shopify-technical-integration$overview\">Overview</a><ul><li><a href=\"/shopify-technical-integration$webhook-integration-nbsp\">Webhook Integration&nbsp;</a></li><li><a href=\"/shopify-technical-integration$api-calls-integration\">API Calls Integration</a><ul><li><a href=\"/shopify-technical-integration$calls-to-get-more-information-query\">Calls to get more information (query)</a></li><li><a href=\"/shopify-technical-integration$calls-to-trigger-a-process-mutation\">Calls to trigger a process (mutation)</a></li><li><a href=\"/shopify-technical-integration$shopify-concept-of-rate-limit\">Shopify concept of \"rate limit\"</a></li></ul></li><li><a href=\"/shopify-technical-integration$configuration\">Configuration</a></li></ul></li><li><a href=\"/shopify-technical-integration$related-articles\">Related Articles</a></li></ul></div>\r\n\r\n<h3><a name=\"overview\" id=\"overview\"></a>Overview</h3>\r\n\r\n<p>Manhattan Active® Omni and Shopify are integrated out of the box for the following functional flows:&nbsp;</p>\r\n\r\n<ul>\r\n\t<li>Availability alerts and Availability sync publishing</li>\r\n\t<li>Order creation on Shopify</li>\r\n\t<li>Settlement and refund creation in&nbsp;Manhattan Active® Omni. This includes settlements and refund creations for retailers using only Shopify's Shop Pay Commerce Component.&nbsp;</li>\r\n</ul>\r\n\r\n<p>These integrations are using a mix of webhooks and direct API calls to the GraphQL Shopify Admin API. See below for a high level integration diagram.&nbsp;</p>\r\n\r\n<p><img height=\"649\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/qu/6642/image.png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL3F1LzY2NDIvaW1hZ2UucG5nIiwiQ29uZGl0aW9uIjp7IkRhdGVMZXNzVGhhbiI6eyJBV1M6RXBvY2hUaW1lIjoxNzU0NzUxNzkyfX19XX0_&Signature=op6fmX8Q3Zna0OqUF-8uYnNYMCgyNLsMlpqpmRM4-eR2ouXyoQ5V4Mdi0JUZBL~uMLcxW47cnsnvr063OU1QpclbDIZGbfGSRfyvbRstUjjQAESgDnQa1Jadk0wEes1dnGlkSzs~D70TedJSO1fMkK8th7UVeIbTZ-MITFba3kFFZ4mo6uMZvQx5fJazq6BsxdLf6xyr1eg8E4vqEcz1vS568uhUSzM1EaP261Fqf8fiEJwDGej2~x3lkt9CWmZannyvarLouLpm5DiCjAUPvxkn49F3TrFlf4m98aHPzY9eAuJdu4rNp0zuJkmjOZiWHou1sAJO5GWuZcwzqflMtQ__&Key-Pair-Id=K2TK3EG287XSFC\" width=\"1024\"></p>\r\n\r\n<h4><a name=\"webhook-integration-nbsp\" id=\"webhook-integration-nbsp\"></a>Webhook Integration&nbsp;</h4>\r\n\r\n<p>Shopify is publishing information via webhooks. When an order is created or when a new payment transaction/refund is created on Shopify, a webhook is published to a public GCP endpoint. From there, the message is routed to the correct component in Manhattan Active® Omni for further processing.&nbsp;</p>\r\n\r\n<p>The out-of-the-box integration uses the webhooks below:&nbsp;</p>\r\n\r\n<ul>\r\n\t<li>\"Order Creation\" - This webhook is triggered every time an order is created and confirmed on Shopify side. It is used to create an order on&nbsp;Manhattan Active® Omni after translation.&nbsp;</li>\r\n\t<li>\"Transaction Creation\" - This webhook is triggered every time there is a new authorization or settlement transaction created on Shopify side. New Authorizations are sent at the same time as the order is captured. Settlements are usually sent after&nbsp;Manhattan Active® Omni triggers the settlement via payment request if Shopify acts as a payment gateway.&nbsp;</li>\r\n\t<li>\"Refund Create\" - This webhook is triggered every time there is a refund processed by Shopify. Refund transactions are usually sent after&nbsp;Manhattan Active® Omni triggers the refund by payment request if Shopify acts as a payment gateway.&nbsp;</li>\r\n</ul>\r\n\r\n<h4><a name=\"api-calls-integration\" id=\"api-calls-integration\"></a>API Calls Integration</h4>\r\n\r\n<p>Manhattan Active® Omni integrates with Shopify GraphQL Admin API. This allows&nbsp;Manhattan Active® Omni to get additional information or trigger processes on Shopify side.&nbsp;</p>\r\n\r\n<h5><a name=\"calls-to-get-more-information-query\" id=\"calls-to-get-more-information-query\"></a>Calls to get more information (query)</h5>\r\n\r\n<p>The Admin Shopify API is called as a query&nbsp;in the scenarios below during the out-of-the-box integration:&nbsp;</p>\r\n\r\n<ul>\r\n\t<li>To get the Shopify Item ID during availability updates</li>\r\n\t<li>To get additional order information when a payment method is created&nbsp;as some information that exists on&nbsp;Manhattan Active® Omni Payments is present on Shopify orders (billing address, Shopify order name, and so on)</li>\r\n</ul>\r\n\r\n<h5><a name=\"calls-to-trigger-a-process-mutation\" id=\"calls-to-trigger-a-process-mutation\"></a>Calls to trigger a process (mutation)</h5>\r\n\r\n<p>The Admin Shopify API is called with the mutations below during the out-of-the-box integration:&nbsp;</p>\r\n\r\n<ul>\r\n\t<li>\"inventorySetQuantities\" - This mutation is used to update available quantities of each product.&nbsp;</li>\r\n\t<li>\"orderCapture\" - This mutation is used to trigger the settlement of an authorized transaction.&nbsp;</li>\r\n\t<li>\"refundCreate\"- This mutation is used to trigger the refund of an existing settlement transaction.&nbsp;</li>\r\n</ul>\r\n\r\n<h5><a name=\"shopify-concept-of-rate-limit\" id=\"shopify-concept-of-rate-limit\"></a>Shopify concept of \"rate limit\"</h5>\r\n\r\n<p>Shopify has a concept on their inbound APIs that is called \"rate\". The rate limit is a way for Shopify to limit the amount of inbound APIs to their system at the same time. It is a negotiated number on the Shopify side.&nbsp;&nbsp;</p>\r\n\r\n<p>It is important to know that the base integration assumes each project negotiates a rate limit to be able to handle volumes that are coming out of Manhattan Active® Omni. This is especially true around the time of availability sync, where a lot of simultaneous calls are made to Shopify to update available inventory.&nbsp;</p>\r\n\r\n<p>The value of the rate limit is not read by Manhattan Active® Omni nor is the inbound volume intentionally throttled based on Shopify inbound limits. If the rate limit is reached, retry&nbsp;mechanisms exist in the form of failed message reprocessing, but using failed messages should be the exception and not the norm.&nbsp;</p>\r\n\r\n<h4><a name=\"configuration\" id=\"configuration\"></a>Configuration</h4>\r\n\r\n<p>To connect their Manhattan Active® Omni organization to a&nbsp;Shopify store, each project needs to execute the below steps. These steps need to be executed with a Shopify admin user and a Manhattan Active® Order Management admin user.&nbsp;</p>\r\n\r\n<p>The below steps are valid for standard Shopify stores and Shop pay only implementations.&nbsp;</p>\r\n\r\n<div class=\"tip\">Note: Each Shopify store can be linked to only one organization. Each organization can be linked to only one Shopify store.&nbsp;</div>\r\n\r\n<p><strong>Prerequisites:&nbsp;Manhattan Active® Omni services&nbsp;-&nbsp;technical configuration&nbsp;</strong></p>\r\n\r\n<ol>\r\n\t<li>Create the below KV store properties in Xint component:&nbsp;\r\n\t<ol>\r\n\t\t<li>Key: awpf.pubsub.organization.lookup.enabled<br>\r\n\t\tvalue: true</li>\r\n\t\t<li>Key:awpf.pubsub.organization.key.identifier<br>\r\n\t\tvalue: X-Shopify-Shop-Domain</li>\r\n\t\t<li>Key: awpf.pubsub.organization.key.&lt;store_name&gt;.myshopify.com (replace &lt;store_name&gt; with the Shopify store name)<br>\r\n\t\tvalue: the orgid of the organization the Shopify store is linked to</li>\r\n\t\t<li>Key: awpf.pubsub.input.headers.to.retransmit<br>\r\n\t\tvalue: X-Shopify-API-Version,X-Shopify-Hmac-SHA256,X-Shopify-Order-Id,X-Shopify-Shop-Domain,X-Shopify-Test,X-Shopify-Topic,X-Shopify-Triggered-At,X-Shopify-Webhook-Id</li>\r\n\t</ol>\r\n\t</li>\r\n\t<li>Create the below KV store properties in Xboundauth component:&nbsp;\r\n\t<ol>\r\n\t\t<li>Key: XBoundBasicUsernameForShopifyService<br>\r\n\t\tvalue: omnicomponent.1.0.0</li>\r\n\t\t<li>Key: XBoundBasicPasswordForShopifyService<br>\r\n\t\tvalue:&nbsp;{cipher}063fa40bddc232fb949081647fb52533e492ba643960b205deff00672b30b16ca90a0c12ce0c4c806626cd6728e2c667</li>\r\n\t\t<li>Key: UsernameForShopifyService<br>\r\n\t\tvalue: admin@shopify.com</li>\r\n\t\t<li>Key: PasswordForShopifyService<br>\r\n\t\tvalue:&nbsp;PaSsWoRd@1</li>\r\n\t\t<li>Key: GrantTypeForShopifyService<br>\r\n\t\tvalue: password</li>\r\n\t</ol>\r\n\t</li>\r\n\t<li>Create the below KV store properties in Xbound component (in all the below, use the value as is, it does not need to be changed with your own stack name):\r\n\t<ol>\r\n\t\t<li>Key: custom.free.pass<br>\r\n\t\tvalue: /shopifyProxy/**,/shopifyProxyStatusUpdate/**,/shopifyProxyUninstallApp/**</li>\r\n\t\t<li>Key: zuul.routes.shopifyAuthorization.path<br>\r\n\t\tvalue: /shopifyAuthorization/**</li>\r\n\t\t<li>Key: zuul.routes.shopifyAuthorization.url<br>\r\n\t\tvalue: https://mxrap1-auth.sce.manh.com/oauth/token</li>\r\n\t\t<li>Key: zuul.routes.shopifyProxy.path<br>\r\n\t\tvalue: /shopifyProxy/**</li>\r\n\t\t<li>Key: zuul.routes.shopifyProxy.url<br>\r\n\t\tvalue: https://mxrap1.sce.manh.com/marketplace/api/marketplace/shopifyOAuthConfig/search</li>\r\n\t\t<li>Key: zuul.routes.shopifyProxyUninstallApp.path<br>\r\n\t\tvalue: /shopifyProxyUninstallApp/**</li>\r\n\t\t<li>Key: zuul.routes.shopifyProxyUninstallApp.url<br>\r\n\t\tvalue: https://mxrap1.sce.manh.com/marketplace/api/ServiceDefinition/invoke/unlinkShopifyAppConfig</li>\r\n\t\t<li>Key: zuul.routes.shopifyProxyStatusUpdate.path<br>\r\n\t\tvalue: /shopifyProxyStatusUpdate/**</li>\r\n\t\t<li>Key: zuul.routes.shopifyProxyStatusUpdate.url<br>\r\n\t\tvalue: https://mxrap1.sce.manh.com/marketplace/api/ServiceDefinition/invoke/shopifyAppHistoryStatusUpdate</li>\r\n\t</ol>\r\n\t</li>\r\n\t<li>Update Xboundauth service definition</li>\r\n</ol>\r\n\r\n<p>POST&nbsp;{{url}}/xboundauth/api/ServiceDefinition/serviceDefinition/save&nbsp;<br>\r\n<div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-1\" class=\"toggle-content\"><span class=\"toggle-title\">xboundauth service definition</span></a></p><div id=\"tg-1\"><div class=\"computer_code\">{<br />\n&nbsp; &nbsp; &quot;ServiceStateTransition&quot;: [],<br />\n&nbsp; &nbsp; &quot;ServiceFormDataParams&quot;: [<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;ParameterValue&quot;: &quot;application/x-www-form-urlencoded&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;ParameterName&quot;: &quot;Content-Type&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;ParameterValue&quot;: &quot;{:GrantTypeForShopifyService}&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;ParameterName&quot;: &quot;grant_type&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;ParameterValue&quot;: &quot;{:UsernameForShopifyService}&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;ParameterName&quot;: &quot;username&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;ParameterValue&quot;: &quot;{:PasswordForShopifyService}&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;ParameterName&quot;: &quot;password&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; }<br />\n&nbsp; &nbsp; ],<br />\n&nbsp; &nbsp; &quot;CreatedTimestamp&quot;: &quot;2024-07-22T05:24:50.465&quot;,<br />\n&nbsp; &nbsp; &quot;ServiceAuthParams&quot;: [<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;ParameterValue&quot;: &quot;{:XBoundBasicUsernameForShopifyService}&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;ParameterName&quot;: &quot;xbound-basic.username&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;ParameterValue&quot;: &quot;{:XBoundBasicPasswordForShopifyService}&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;ParameterName&quot;: &quot;xbound-basic.password&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; }<br />\n&nbsp; &nbsp; ],<br />\n&nbsp; &nbsp; &quot;ServiceDefinitonParams&quot;: [<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;ParameterValue&quot;: &quot;false&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;ParameterName&quot;: &quot;ISEXTERNAL&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;ParameterValue&quot;: &quot;HTTP&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;ParameterName&quot;: &quot;PROTOCOL&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;ParameterValue&quot;: &quot;POST&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;ParameterName&quot;: &quot;HTTPMETHOD&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; }<br />\n&nbsp; &nbsp; ],<br />\n&nbsp; &nbsp; &quot;Url&quot;: &quot;com-manh-cp-xbound:8080/shopifyAuthorization&quot;,<br />\n&nbsp; &nbsp; &quot;ServiceId&quot;: &quot;ShopifyProxyAuthService&quot;,<br />\n&nbsp; &nbsp; &quot;InputSchema&quot;: null,<br />\n&nbsp; &nbsp; &quot;BusinessMethod&quot;: null,<br />\n&nbsp; &nbsp; &quot;ManhattanOwnedExtension&quot;: true,<br />\n&nbsp; &nbsp; &quot;TransitionsState&quot;: false,<br />\n&nbsp; &nbsp; &quot;ComponentId&quot;: &quot;Xboundauth&quot;<br />\n}</div>\n</div></div></p>\r\n\r\n<ol start=\"5\">\r\n\t<li>Create the below inbound message types in the xint component</li>\r\n</ol>\r\n\r\n<p>POST&nbsp;{{url}}/xint/api/ServiceDefinition/inBoundMessageType/bulkImport<br>\r\n<div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-2\" class=\"toggle-content\"><span class=\"toggle-title\">xint inbound message types for Shopify integration</span></a></p><div id=\"tg-2\"><div class=\"computer_code\">\n<p>{</p>\n\n<p>&nbsp;&nbsp;&nbsp; &quot;Data&quot;: [</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;PreFetchCount&quot;: 50,</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;BrokerClusterName&quot;: &quot;PUBSUB-DefaultBrokerConfig&quot;,</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;NoOfConsumer&quot;: 10,</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;RetryCount&quot;: 3,</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;MessageType&quot;: &quot;ShopifyOrderWebhookMsgType&quot;,</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;MinNoOfConsumer&quot;: 1,</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;ScaleUpTimeWindow&quot;: 10,</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;MaxDesiredInstances&quot;: 6,</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;InBoundMsgToRetransmit&quot;: [</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;ToMessageType&quot;: &quot;ShopifyOrderWebhookMsgType&quot;</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;PreFetchCount&quot;: 50,</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;BrokerClusterName&quot;: &quot;PUBSUB-DefaultBrokerConfig&quot;,</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;NoOfConsumer&quot;: 10,</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;RetryCount&quot;: 3,</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;MessageType&quot;: &quot;ShopifyPaymentWebhookMsgType&quot;,</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;MinNoOfConsumer&quot;: 1,</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;ScaleUpTimeWindow&quot;: 10,</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;MaxDesiredInstances&quot;: 6,</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;InBoundMsgToRetransmit&quot;: [</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;ToMessageType&quot;: &quot;ShopifyPaymentWebhookMsgType&quot;</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;PreFetchCount&quot;: 50,</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;BrokerClusterName&quot;: &quot;PUBSUB-DefaultBrokerConfig&quot;,</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;NoOfConsumer&quot;: 10,</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;RetryCount&quot;: 3,</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;MessageType&quot;: &quot;ShopifyAppUninstallWebhookMsgType&quot;,</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;MinNoOfConsumer&quot;: 1,</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;ScaleUpTimeWindow&quot;: 10,</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;MaxDesiredInstances&quot;: 6,</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;InBoundMsgToRetransmit&quot;: [</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;ToMessageType&quot;: &quot;ShopifyAppUninstallWebhookMsgType&quot;</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\n\n<p>&nbsp;&nbsp;&nbsp; ]</p>\n\n<p>}</p>\n</div>\n</div></div></p>\r\n\r\n<ol start=\"6\">\r\n\t<li>Create the outbound message types in xint</li>\r\n</ol>\r\n\r\n<p>POST&nbsp;{{url}}/xint/api/ServiceDefinition/outBoundMessageType/bulkImport<br>\r\n<div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-3\" class=\"toggle-content\"><span class=\"toggle-title\">xint outbound message types for Shopify integration</span></a></p><div id=\"tg-3\"><div class=\"computer_code\">\n<p>{</p>\n\n<p>&nbsp; &quot;Data&quot;: [</p>\n\n<p>&nbsp;&nbsp;&nbsp; {</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;MessageType&quot;: &quot;ShopifyOrderWebhookMsgType&quot;,</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Transactional&quot;:&nbsp;<strong>true</strong>,</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;PersistMessageToMsgStore&quot;:&nbsp;<strong>false</strong></p>\n\n<p>&nbsp;&nbsp;&nbsp; },</p>\n\n<p>&nbsp;&nbsp;&nbsp; {</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;MessageType&quot;: &quot;ShopifyPaymentWebhookMsgType&quot;,</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Transactional&quot;:&nbsp;<strong>true</strong>,</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;PersistMessageToMsgStore&quot;:&nbsp;<strong>false</strong></p>\n\n<p>&nbsp;&nbsp;&nbsp; },</p>\n\n<p>&nbsp;&nbsp;&nbsp; {</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;MessageType&quot;: &quot;ShopifyAppUninstallWebhookMsgType&quot;,</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Transactional&quot;:&nbsp;<strong>true</strong>,</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;PersistMessageToMsgStore&quot;:&nbsp;<strong>false</strong></p>\n\n<p>&nbsp;&nbsp;&nbsp; }</p>\n\n<p>&nbsp; ]</p>\n\n<p>}</p>\n</div>\n</div></div></p>\r\n\r\n<ol start=\"7\">\r\n\t<li>Restart the 3 components: Xint, Xboundauth and Xbound</li>\r\n\t<li>Work with OPS to grant Shopify access to publish webhooks in your pubSub topic<br>\r\n\tSee Shopify documentation <a href=\"https://shopify.dev/docs/apps/build/webhooks/subscribe/get-started?framework=remix&deliveryMethod=pubSub\">here</a></li>\r\n</ol>\r\n\r\n<div class=\"tip\"><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-4\" class=\"toggle-content\"><span class=\"toggle-title\">Sample ops ticket for Shopify webhooks</span></a></p><div id=\"tg-4\"><p>Grant the shopify service account for Kafka publisher role&nbsp;</p>\n\n<p>Shopify service account address:&nbsp;</p>\n\n<p><strong>delivery@shopify-pubsub-webhooks.iam.gserviceaccount.com</strong></p>\n\n<p>&nbsp;</p>\n\n<p>For the following queues<br />\nShopifyOrderWebhookMsgType<br />\nShopifyPaymentWebhookMsgType<br />\nShopifyAppUninstallWebhookMsgType<br />\nShopifyInventoryLevelWebhookMsgType</p>\n</div></div></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step 1&nbsp;- Shopify admin users should&nbsp;download the \"Manhattan Active Omni\" app&nbsp;from the Shopify app store</strong></p>\r\n\r\n<ol>\r\n\t<li>The app is not listed in the Shopify App store, so a direct link is needed:&nbsp;<a data-outlook-id=\"3320725e-fe05-49b3-9526-d0b9958fa8b9\" href=\"https://apps.shopify.com/manhattan-active-omni\" title=\"https://mail.shopifysvc.com/_t/c/A102004F-17FD30E85D89FFA7-9FEE5FC7?l=AAD1RGPnMPz3xwZ2aUHrbunLSQjqDyDcDHmrrQC%2FPsz8M3xgEyDGDgh7mH2Ntnf3pYGOz%2BlBPjx2YWXVkIuliNxfsB3xcgJ8b1F4Unzctf1pwXY5xc3eZRkznjTDRsyIbR0xqXQXQtwfSZ240G31ficymiAuW9QQ0ImBCM6YZD6Swj%2F8y921fviW7GQS&c=AACR09O6oUQoKbv3A2m%2FeY2EdJVeJl3oSx%2BJujS3hBLU2vNEsNsR14Gb1yVRBOPFCfxlsyKjwBJgMdO42ThdXmOII0JPa36fRum4ppAt%2FBlelOYRnFGGdD5WMsdNmnhN%2BgQCbGOicgIgfGM1HeoeIP8yTBUvdvt2SyrLk0JayNlIZGdYDhTihU8Ws96mUs4n56Ph81JsKDgBe6iBC5PNi9At6IPTjxgQU6oFy7XDJ5wNleZyjlYxhnPfn2uGZb1dS5yJGdGoseH6SKoFxvQ%2BvV8qfhWEn1ycCdBs%2F%2BTqpk9ISgVQ99xd8ftlu%2Fv0RtO8fsNgp1LBEFeSsP9WDeN30jQv\">https://apps.shopify.com/manhattan-active-omni</a></li>\r\n\t<li>Click on install and follow the installation steps. Once the installation is successful, get the store name and communicate it to a Manhattan Active Omni admin user.</li>\r\n</ol>\r\n\r\n<p><strong>Step 2 - Manhattan Active® Omni admin user should&nbsp;set up the Shopify configuration</strong></p>\r\n\r\n<ol>\r\n\t<li>Connect to&nbsp;Manhattan Active® Omni in the related org for the configuration. This should be the organization where the orders and payments are maintained.&nbsp;</li>\r\n\t<li>Open the Shopify configuration UI and follow the steps detailed when clicking on \"Connect to a&nbsp;Shopify&nbsp;store\".</li>\r\n\t<li>Once the connection is a success, select the flows to enable:&nbsp;\r\n\t<ol start=\"1\" style=\"list-style-type: lower-roman;\">\r\n\t\t<li>If the Shopify store is a Shop pay only store, it is used for Shopify's Shop Pay Commerce Component implementation. In that case, order and availability are disabled by default.&nbsp;</li>\r\n\t\t<li>Order creation</li>\r\n\t\t<li>Payment management\r\n\t\t<ul>\r\n\t\t\t<li>If using Shopify as a payment gateway, the payment gateway account is automatically created. Refer to&nbsp;<a href=\"https://omni.helpdocsonline.com/shopify-payment-integration$shopify-connectivity-configuration\">Using Shopify as a payment gateway configuration</a> for more information.&nbsp;</li>\r\n\t\t</ul>\r\n\t\t</li>\r\n\t\t<li>&nbsp;Inventory availability. If that is selected, the Location ID and view names are needed.\r\n\t\t<div class=\"tip\"><strong>Note</strong>:&nbsp;Location ID and view name are only needed to sync inventory. Refer to <a href=\"https://omni.helpdocsonline.com/shopify-inventory-integration$configuration\">Shopify inventory configuration</a> for more information.</div>\r\n\t\t</li>\r\n\t</ol>\r\n\t</li>\r\n\t<li>APIVersion: \"2024-07\" (this is the only version that is currently supported)</li>\r\n\t<li>Save the Shopify config.</li>\r\n</ol>\r\n\r\n<p>You are now connected! To test the connection, create an order on the Shopify store and watch it appear in the&nbsp;Manhattan Active® Omni orders!&nbsp;</p>\r\n\r\n<div class=\"tip\"><strong>Note</strong>: Communication is asynchronous. On this first connection&nbsp;it may take a few minutes for the order to appear.&nbsp;</div>\r\n\r\n<h3><a name=\"related-articles\" id=\"related-articles\"></a>Related Articles</h3>\r\n\r\n<div class=\"tip\"><ul class=\"related-articles\"><li><a href=\"/shopify-order-integration\" hqid=\"3424103\">Order Integration with Shopify</a></li><li><a href=\"/shopify-payment-integration\" hqid=\"3424119\">Payment Integration with Shopify</a></li><li><a href=\"/shopify-inventory-integration\" hqid=\"3424101\">Inventory Integration with Shopify</a></li><li><a href=\"/shopify-shop-pay-only-stores\" hqid=\"3590067\">Shop Pay Integration</a></li></ul></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n\t  </div>\r\n </div>\r\n <div id=\"ui-page-fb-wrap\"></div>\r\n <div class=\"hiq-footer-wrap\">\r\n    \r\n                \r\n  </div>\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n",
  "content_length": 26141,
  "scraped_at": "2025-08-09T21:58:12.553580",
  "content_clean": "Home ››Manhattan Active® Omni››Order Management››Process & Configuration Guides››Order Processing››Shopify Integration ››Shopify technical integration How to Integrate with Shopify I Next OverviewWebhook Integration API Calls IntegrationCalls to get more information (query)Calls to trigger a process (mutation)Shopify concept of \"rate limit\"ConfigurationRelated Articles Overview Manhattan Active® Omni and Shopify are integrated out of the box for the following functional flows: Availability alerts and Availability sync publishing Order creation on Shopify Settlement and refund creation in Manhattan Active® Omni. This includes settlements and refund creations for retailers using only Shopify's Shop Pay Commerce Component. These integrations are using a mix of webhooks and direct API calls to the GraphQL Shopify Admin API. See below for a high level integration diagram. Webhook Integration Shopify is publishing information via webhooks. When an order is created or when a new payment transaction/refund is created on Shopify, a webhook is published to a public GCP endpoint. From there, the message is routed to the correct component in Manhattan Active® Omni for further processing. The out-of-the-box integration uses the webhooks below: \"Order Creation\" - This webhook is triggered every time an order is created and confirmed on Shopify side. It is used to create an order on Manhattan Active® Omni after translation. \"Transaction Creation\" - This webhook is triggered every time there is a new authorization or settlement transaction created on Shopify side. New Authorizations are sent at the same time as the order is captured. Settlements are usually sent after Manhattan Active® Omni triggers the settlement via payment request if Shopify acts as a payment gateway. \"Refund Create\" - This webhook is triggered every time there is a refund processed by Shopify. Refund transactions are usually sent after Manhattan Active® Omni triggers the refund by payment request if Shopify acts as a payment gateway. API Calls Integration Manhattan Active® Omni integrates with Shopify GraphQL Admin API. This allows Manhattan Active® Omni to get additional information or trigger processes on Shopify side. Calls to get more information (query) The Admin Shopify API is called as a query in the scenarios below during the out-of-the-box integration: To get the Shopify Item ID during availability updates To get additional order information when a payment method is created as some information that exists on Manhattan Active® Omni Payments is present on Shopify orders (billing address, Shopify order name, and so on) Calls to trigger a process (mutation) The Admin Shopify API is called with the mutations below during the out-of-the-box integration: \"inventorySetQuantities\" - This mutation is used to update available quantities of each product. \"orderCapture\" - This mutation is used to trigger the settlement of an authorized transaction. \"refundCreate\"- This mutation is used to trigger the refund of an existing settlement transaction. Shopify concept of \"rate limit\" Shopify has a concept on their inbound APIs that is called \"rate\". The rate limit is a way for Shopify to limit the amount of inbound APIs to their system at the same time. It is a negotiated number on the Shopify side. It is important to know that the base integration assumes each project negotiates a rate limit to be able to handle volumes that are coming out of Manhattan Active® Omni. This is especially true around the time of availability sync, where a lot of simultaneous calls are made to Shopify to update available inventory. The value of the rate limit is not read by Manhattan Active® Omni nor is the inbound volume intentionally throttled based on Shopify inbound limits. If the rate limit is reached, retry mechanisms exist in the form of failed message reprocessing, but using failed messages should be the exception and not the norm. Configuration To connect their Manhattan Active® Omni organization to a Shopify store, each project needs to execute the below steps. These steps need to be executed with a Shopify admin user and a Manhattan Active® Order Management admin user. The below steps are valid for standard Shopify stores and Shop pay only implementations. Note: Each Shopify store can be linked to only one organization. Each organization can be linked to only one Shopify store. Prerequisites: Manhattan Active® Omni services - technical configuration Create the below KV store properties in Xint component: Key: awpf.pubsub.organization.lookup.enabled value: true Key:awpf.pubsub.organization.key.identifier value: X-Shopify-Shop-Domain Key: awpf.pubsub.organization.key.<store_name>.myshopify.com (replace <store_name> with the Shopify store name) value: the orgid of the organization the Shopify store is linked to Key: awpf.pubsub.input.headers.to.retransmit value: X-Shopify-API-Version,X-Shopify-Hmac-SHA256,X-Shopify-Order-Id,X-Shopify-Shop-Domain,X-Shopify-Test,X-Shopify-Topic,X-Shopify-Triggered-At,X-Shopify-Webhook-Id Create the below KV store properties in Xboundauth component: Key: XBoundBasicUsernameForShopifyService value: omnicomponent.1.0.0 Key: XBoundBasicPasswordForShopifyService value: {cipher}063fa40bddc232fb949081647fb52533e492ba643960b205deff00672b30b16ca90a0c12ce0c4c806626cd6728e2c667 Key: UsernameForShopifyService value: admin@shopify.com Key: PasswordForShopifyService value: PaSsWoRd@1 Key: GrantTypeForShopifyService value: password Create the below KV store properties in Xbound component (in all the below, use the value as is, it does not need to be changed with your own stack name): Key: custom.free.pass value: /shopifyProxy/**,/shopifyProxyStatusUpdate/**,/shopifyProxyUninstallApp/** Key: zuul.routes.shopifyAuthorization.path value: /shopifyAuthorization/** Key: zuul.routes.shopifyAuthorization.url value: https://mxrap1-auth.sce.manh.com/oauth/token Key: zuul.routes.shopifyProxy.path value: /shopifyProxy/** Key: zuul.routes.shopifyProxy.url value: https://mxrap1.sce.manh.com/marketplace/api/marketplace/shopifyOAuthConfig/search Key: zuul.routes.shopifyProxyUninstallApp.path value: /shopifyProxyUninstallApp/** Key: zuul.routes.shopifyProxyUninstallApp.url value: https://mxrap1.sce.manh.com/marketplace/api/ServiceDefinition/invoke/unlinkShopifyAppConfig Key: zuul.routes.shopifyProxyStatusUpdate.path value: /shopifyProxyStatusUpdate/** Key: zuul.routes.shopifyProxyStatusUpdate.url value: https://mxrap1.sce.manh.com/marketplace/api/ServiceDefinition/invoke/shopifyAppHistoryStatusUpdate Update Xboundauth service definition POST {{url}}/xboundauth/api/ServiceDefinition/serviceDefinition/save xboundauth service definition{ \"ServiceStateTransition\": [], \"ServiceFormDataParams\": [ { \"ParameterValue\": \"application/x-www-form-urlencoded\", \"ParameterName\": \"Content-Type\" }, { \"ParameterValue\": \"{:GrantTypeForShopifyService}\", \"ParameterName\": \"grant_type\" }, { \"ParameterValue\": \"{:UsernameForShopifyService}\", \"ParameterName\": \"username\" }, { \"ParameterValue\": \"{:PasswordForShopifyService}\", \"ParameterName\": \"password\" } ], \"CreatedTimestamp\": \"2024-07-22T05:24:50.465\", \"ServiceAuthParams\": [ { \"ParameterValue\": \"{:XBoundBasicUsernameForShopifyService}\", \"ParameterName\": \"xbound-basic.username\" }, { \"ParameterValue\": \"{:XBoundBasicPasswordForShopifyService}\", \"ParameterName\": \"xbound-basic.password\" } ], \"ServiceDefinitonParams\": [ { \"ParameterValue\": \"false\", \"ParameterName\": \"ISEXTERNAL\" }, { \"ParameterValue\": \"HTTP\", \"ParameterName\": \"PROTOCOL\" }, { \"ParameterValue\": \"POST\", \"ParameterName\": \"HTTPMETHOD\" } ], \"Url\": \"com-manh-cp-xbound:8080/shopifyAuthorization\", \"ServiceId\": \"ShopifyProxyAuthService\", \"InputSchema\": null, \"BusinessMethod\": null, \"ManhattanOwnedExtension\": true, \"TransitionsState\": false, \"ComponentId\": \"Xboundauth\" } Create the below inbound message types in the xint component POST {{url}}/xint/api/ServiceDefinition/inBoundMessageType/bulkImport xint inbound message types for Shopify integration { \"Data\": [ { \"PreFetchCount\": 50, \"BrokerClusterName\": \"PUBSUB-DefaultBrokerConfig\", \"NoOfConsumer\": 10, \"RetryCount\": 3, \"MessageType\": \"ShopifyOrderWebhookMsgType\", \"MinNoOfConsumer\": 1, \"ScaleUpTimeWindow\": 10, \"MaxDesiredInstances\": 6, \"InBoundMsgToRetransmit\": [ { \"ToMessageType\": \"ShopifyOrderWebhookMsgType\" } ] }, { \"PreFetchCount\": 50, \"BrokerClusterName\": \"PUBSUB-DefaultBrokerConfig\", \"NoOfConsumer\": 10, \"RetryCount\": 3, \"MessageType\": \"ShopifyPaymentWebhookMsgType\", \"MinNoOfConsumer\": 1, \"ScaleUpTimeWindow\": 10, \"MaxDesiredInstances\": 6, \"InBoundMsgToRetransmit\": [ { \"ToMessageType\": \"ShopifyPaymentWebhookMsgType\" } ] }, { \"PreFetchCount\": 50, \"BrokerClusterName\": \"PUBSUB-DefaultBrokerConfig\", \"NoOfConsumer\": 10, \"RetryCount\": 3, \"MessageType\": \"ShopifyAppUninstallWebhookMsgType\", \"MinNoOfConsumer\": 1, \"ScaleUpTimeWindow\": 10, \"MaxDesiredInstances\": 6, \"InBoundMsgToRetransmit\": [ { \"ToMessageType\": \"ShopifyAppUninstallWebhookMsgType\" } ] } ] } Create the outbound message types in xint POST {{url}}/xint/api/ServiceDefinition/outBoundMessageType/bulkImport xint outbound message types for Shopify integration { \"Data\": [ { \"MessageType\": \"ShopifyOrderWebhookMsgType\", \"Transactional\": true, \"PersistMessageToMsgStore\": false }, { \"MessageType\": \"ShopifyPaymentWebhookMsgType\", \"Transactional\": true, \"PersistMessageToMsgStore\": false }, { \"MessageType\": \"ShopifyAppUninstallWebhookMsgType\", \"Transactional\": true, \"PersistMessageToMsgStore\": false } ] } Restart the 3 components: Xint, Xboundauth and Xbound Work with OPS to grant Shopify access to publish webhooks in your pubSub topic See Shopify documentation here Sample ops ticket for Shopify webhooksGrant the shopify service account for Kafka publisher role Shopify service account address: delivery@shopify-pubsub-webhooks.iam.gserviceaccount.com For the following queues ShopifyOrderWebhookMsgType ShopifyPaymentWebhookMsgType ShopifyAppUninstallWebhookMsgType ShopifyInventoryLevelWebhookMsgType Step 1 - Shopify admin users should download the \"Manhattan Active Omni\" app from the Shopify app store The app is not listed in the Shopify App store, so a direct link is needed: https://apps.shopify.com/manhattan-active-omni Click on install and follow the installation steps. Once the installation is successful, get the store name and communicate it to a Manhattan Active Omni admin user. Step 2 - Manhattan Active® Omni admin user should set up the Shopify configuration Connect to Manhattan Active® Omni in the related org for the configuration. This should be the organization where the orders and payments are maintained. Open the Shopify configuration UI and follow the steps detailed when clicking on \"Connect to a Shopify store\". Once the connection is a success, select the flows to enable: If the Shopify store is a Shop pay only store, it is used for Shopify's Shop Pay Commerce Component implementation. In that case, order and availability are disabled by default. Order creation Payment management If using Shopify as a payment gateway, the payment gateway account is automatically created. Refer to Using Shopify as a payment gateway configuration for more information. Inventory availability. If that is selected, the Location ID and view names are needed. Note: Location ID and view name are only needed to sync inventory. Refer to Shopify inventory configuration for more information. APIVersion: \"2024-07\" (this is the only version that is currently supported) Save the Shopify config. You are now connected! To test the connection, create an order on the Shopify store and watch it appear in the Manhattan Active® Omni orders! Note: Communication is asynchronous. On this first connection it may take a few minutes for the order to appear. Related Articles Order Integration with ShopifyPayment Integration with ShopifyInventory Integration with ShopifyShop Pay Integration"
}