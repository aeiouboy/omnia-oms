{
  "id": "2601857",
  "permalink": "order-cancellation",
  "title": "Order Cancellation",
  "type": "topic",
  "level": 4,
  "path": "Manhattan Active® Omni/Order Management/Process & Configuration Guides/Order Orchestration/Order Cancellation",
  "raw_item": {
    "id": "2601857",
    "text": "Order Cancellation",
    "title": "Order Cancellation",
    "permalink": "order-cancellation",
    "leaf": false,
    "droppable": true,
    "expanded": true,
    "closed": true,
    "visible": true,
    "editable": true,
    "type": "topic",
    "topicType": "0",
    "status": "1",
    "iconCls": "icon-topic",
    "cls": "",
    "folder_id": "129589",
    "parent": "f;129589",
    "created_date": "1594724078",
    "modified_date": "1751535787",
    "instructor_id": null,
    "loaded": true,
    "haschildren": false,
    "callout": "0",
    "order": "5"
  },
  "success": true,
  "content": "\r\n\r\n\r\n<div class=\"hiq-page-wrap\">\r\n<div class=\"hiq-t-wrap\">\r\n\t\t\r\n  \t  <div class=\"hiq-t \">\r\n\t\t\t\t<ul class=\"breadcrumbs\"><li><a class=\"breadcrumb-links\" hqid=\"1788908\"  href=\"/home\">Home</a></li> <li><span>&rsaquo;&rsaquo;</span><a hqid=\"3500940\" href=\"/omni\" class=\"breadcrumb-links\">Manhattan Active® Omni</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158393\" href=\"/order-management\" class=\"breadcrumb-links\">Order Management</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158394\" href=\"/process-configuration-guides\" class=\"breadcrumb-links\">Process & Configuration Guides</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158746\" href=\"/order-orchestration-2\" class=\"breadcrumb-links\">Order Orchestration</a></li><li> <span>››</span>Order Cancellation</li></ul>  \t\r\n\t\t<h2><a name=\"order-cancellation\" id=\"order-cancellation\"></a>Order Cancellation</h2>\r\n\r\n<p></p>\r\n\r\n<a href=\"/cart-and-preview-mode\" hqid=\"2746028\">Previous</a>&nbsp;I&nbsp;<a href=\"/order_tagging\" hqid=\"2656391\">Next</a>\r\n<p>&nbsp;</p>\r\n\r\n<div class=\"info\"><ul><li><a href=\"/order-cancellation$order-cancellation\">Order Cancellation</a><ul><li><a href=\"/order-cancellation$overview\">Overview</a></li><li><a href=\"/order-cancellation$how-order-cancellation-works\">How Order Cancellation Works</a></li><li><a href=\"/order-cancellation$types-of-cancellation\">Types of Cancellation</a></li><li><a href=\"/order-cancellation$ways-nbsp-to-cancel-an-order\">Ways&nbsp;to Cancel an Order</a><ul><li><a href=\"/order-cancellation$cancel-using-orders-ui\">Cancel Using Orders UI</a></li><li><a href=\"/order-cancellation$cancel-using-customer-service-nbsp-ui\">Cancel Using Customer Service&nbsp;UI</a></li><li><a href=\"/order-cancellation$cancel-via-api-updates\">Cancel via API Updates</a></li><li><a href=\"/order-cancellation$cancel-using-milestones\">Cancel Using Milestones</a><ul><li><a href=\"/order-cancellation$how-to-configure-order-milestone-for-cancelling-non-confirmed-non-allocated-non-released-nbsp-orders-using-order-configuration-ui\">How to configure Order Milestone for cancelling Non-Confirmed/Non-Allocated/Non-Released&nbsp;Orders using Order Configuration UI</a></li><li><a href=\"/order-cancellation$how-to-cancel-back-ordered-units\">How to Cancel Back Ordered Units</a></li><li><a href=\"/order-cancellation$how-to-cancel-back-ordered-units-with-a-scheduled-job\">How to Cancel Back Ordered Units with a Scheduled Job</a></li></ul></li></ul></li><li><a href=\"/order-cancellation$retaining-selling-attributes-on-canceled-order-lines\">Retaining Selling Attributes on Canceled Order/Lines</a></li><li><a href=\"/order-cancellation$implementation-flavors\">Implementation Flavors</a><ul><li><a href=\"/order-cancellation$on-short-reason-codes-backorder-instead-of-cancel\">On Short Reason Codes - Backorder instead of Cancel</a></li><li><a href=\"/order-cancellation$canceling-sts-orders\">Canceling STS Orders</a></li></ul></li><li><a href=\"/order-cancellation$troubleshooting\">Troubleshooting</a><ul><li><a href=\"/order-cancellation$orders-are-not-getting-canceled-post-released-status\">Orders are not getting canceled post released status</a></li><li><a href=\"/order-cancellation$manhattan-nbsp-active®-omni-nbsp-does-not-keep-the-charges-once-the-order-nbsp-is-canceled\">Manhattan&nbsp;Active® Omni&nbsp;does not keep the charges once the order&nbsp;is canceled</a></li><li><a href=\"/order-cancellation$the-order-was-canceled-successfully-in-the-fulfillment-system-but-not-reflected-as-canceled-in-om\">The order was canceled successfully in the fulfillment system but not reflected as canceled in OM</a></li><li><a href=\"/order-cancellation$unable-to-cancel-an-order-line-from-exchange-order-getting-error-return-charges-cannot-be-saved-against-sale-order-lines-return-charges-can-be-saved-against-a-return-order-line-while-non-return-charges-can-be-saved-against-sale-lines\">Unable to cancel an order line from exchange order. Getting error \"Return charges cannot be saved against sale order lines. Return charges can be saved against a return order line, while non-return charges can be saved against sale lines\"</a></li><li><a href=\"/order-cancellation$bopis-order-was-shorted-by-the-store-but-it-is-still-not-canceled\">BOPIS order was shorted by the store, but it is still not canceled</a></li><li><a href=\"/order-cancellation$backordered-units-are-not-getting-canceled-although-cancel-backordered-units-is-enabled-in-order-configuration\">Backordered units are not getting canceled although \"Cancel Backordered Units\" is enabled in Order Configuration</a></li><li><a href=\"/order-cancellation$when-the-order-cancellation-scheduler-invokes-the-cancelunreleasedqtyhandler-it-does-not-trigger-a-payment-transaction-and-generates-a-refund-transaction-for-unreleased-quantities-that-were-canceled\">When the order cancellation scheduler invokes the CancelUnReleasedQtyHandler, it does not trigger a payment transaction and generates a refund transaction for unreleased quantities that were canceled</a></li><li><a href=\"/order-cancellation$why-isn-t-cancelledordersubtotal-and-cancelledorderlinesubtotal-populated-when-partial-quantity-cancellation-occurs-nbsp\">Why isn't cancelledOrderSubtotal and cancelledOrderLineSubtotal populated when partial quantity cancellation occurs?&nbsp;</a></li><li><a href=\"/order-cancellation$authorization-reversal-or-refund-is-not-generated-during-a-partial-scheduled-cancellation\">Authorization Reversal or Refund is not generated during a partial scheduled cancellation</a></li></ul></li><li><a href=\"/order-cancellation$related-articles\">Related Articles</a></li></ul></li></ul></div>\r\n\r\n<h3><a name=\"overview\" id=\"overview\"></a>Overview</h3>\r\n\r\n<p>Order cancellation is the act of making an order void. It can happen either due to a customer no longer wanting an originally ordered product or due to a system-generated action.&nbsp;When orders are canceled, the system updates the quantity, item subtotal, item line subtotal, order subtotal, and order total to zero.&nbsp;All discounts, charges and taxes are deleted, resulting in zero. An order, by default,&nbsp;cannot be canceled once its maximum fulfillment status reaches released (3000) status. However, one can enable&nbsp;post release cancellation feature to cancel orders even after they are released. Refer <a href=\"https://omni.helpdocsonline.com/lateordercancellation\">here </a>for more details on post release cancellation.</p>\r\n\r\n<h3><a name=\"how-order-cancellation-works\" id=\"how-order-cancellation-works\"></a>How Order Cancellation Works</h3>\r\n\r\n<p>When an order line is canceled, then the reservation for that line&nbsp;should be canceled and the order line is moved to \"Canceled\" (9000) status. The isCancelled property is updated to true once the order line gets canceled. The orderline quantity is updated to zero. Each cancellation is mapped to a cancel reason code. The cancel reason codes currently configured in base are:&nbsp;</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\" style=\"text-align: center;\"><strong>Cancel Reason Codes</strong></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Store Close</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Fulfillment System Shorted</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Order Resumed</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Cancel Line</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Confirmation Due</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Cancel of Unallocated Unit</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Miscellaneous reason</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>Out of the box seed data should have CreatedBy&nbsp;populated as&nbsp;‘seeddata-importer'.</p>\r\n\r\n<p>For example: &nbsp;To get the base reason codes, follow the steps below:</p>\r\n\r\n<ul type=\"disc\">\r\n\t<li>Login as system user</li>\r\n\t<li>Use the API&nbsp;{{url}}/order/api/order/reason/search</li>\r\n</ul>\r\n\r\n<p style=\"margin-left: 40px;\">{</p>\r\n\r\n<p style=\"margin-left: 40px;\">\"Query\": \"CreatedBy = 'seeddata-importer' and ReasonTypeId = 'Cancel'\"</p>\r\n\r\n<p style=\"margin-left: 40px;\">}</p>\r\n\r\n<ul>\r\n\t<li>HttpMethod = POST</li>\r\n\t<li>In the response, \"CreatedBy\": \"seeddata-importer\" will have the reason codes defined from base<font face=\"monospace\">.</font></li>\r\n</ul>\r\n\r\n<div class=\"tip\"><strong>Note</strong>: The API might return 403, make sure the user has the required permission to access the URL</div>\r\n\r\n<p>Retailers can specify at the cancel/short reason code level if the cancellation is initiated by the system or the customer. Depending on who initiated the cancellation, different mod types will be triggered. This allows retailers to re-evaluate promotion and charges if a customer partially cancels an order but not if part of an order is shorted by the fulfillment system.&nbsp;</p>\r\n\r\n<h3><a name=\"types-of-cancellation\" id=\"types-of-cancellation\"></a>Types of Cancellation</h3>\r\n\r\n<p>Cancellations can be initiated either by the system or by the customer. Each cancel reason code can be mapped to any of the below cancellation types. This can be configured in the Order Reasons. Cancellation types are captured using the&nbsp;cancellationInitiatedBy property.</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width: 720px;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\" style=\"width: 192px; text-align: center;\"><strong>Type of Cancellation</strong></th>\r\n\t\t\t<th scope=\"col\" style=\"width: 525px; text-align: center;\"><strong>Description</strong></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 178px;\">Customer Initiated Cancels</td>\r\n\t\t\t<td style=\"width: 511px;\">When the customer initiates the cancellation action. For example, a customer cancels an order from his order account page.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 178px;\">System Initiated Cancels</td>\r\n\t\t\t<td style=\"width: 511px;\">When the system initiates the action. For example, cancel the back-order line by job scheduler.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 178px;\">Not Applicable</td>\r\n\t\t\t<td style=\"width: 511px;\">When the initiating party is not specified or when the entity does not support differentiating between System initiated or Customer initiated.</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<h3><a name=\"ways-nbsp-to-cancel-an-order\" id=\"ways-nbsp-to-cancel-an-order\"></a>Ways&nbsp;to Cancel an Order</h3>\r\n\r\n<p>Base provides the capability to cancel order and order line using different ways.&nbsp;</p>\r\n\r\n<h4><a name=\"cancel-using-orders-ui\" id=\"cancel-using-orders-ui\"></a>Cancel Using Orders UI</h4>\r\n\r\n<p>One can choose to cancel multiple orders at a time selecting the orders one wishes to cancel. Reason code and its description should be provided. Similar action can be performed at line level as well to cancel specific order lines.&nbsp; Refer <a href=\"https://omni.helpdocsonline.com/orders-2\">UI help</a> to understand how cancelation can be done for order or order line from the Orders UI.</p>\r\n\r\n<h4><a name=\"cancel-using-customer-service-nbsp-ui\" id=\"cancel-using-customer-service-nbsp-ui\"></a>Cancel Using Customer Service&nbsp;UI</h4>\r\n\r\n<p>Orders or order lines can be canceled through the Customer Service UI.&nbsp;Refer <a href=\"https://omni.helpdocsonline.com/modify-existing-orders$cancel-orders\">UI help</a> to understand how cancelation can be done for order or order line from the customer service UI.</p>\r\n\r\n<h4><a name=\"cancel-via-api-updates\" id=\"cancel-via-api-updates\"></a>Cancel via API Updates</h4>\r\n\r\n<p>The following APIs can be used for order and order line cancellation.&nbsp;</p>\r\n\r\n<table resolved=\"\" role=\"grid\">\r\n\t<colgroup>\r\n\t\t<col>\r\n\t\t<col>\r\n\t</colgroup>\r\n\t<thead>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<th aria-disabled=\"false\" aria-label=\"API: No sort applied, activate to apply an ascending sort\" aria-sort=\"none\" data-column=\"0\" role=\"columnheader\" scope=\"col\" tabindex=\"0\" unselectable=\"on\">\r\n\t\t\t<p><strong>API</strong></p>\r\n\t\t\t</th>\r\n\t\t\t<th aria-disabled=\"false\" aria-label=\"Description: No sort applied, activate to apply an ascending sort\" aria-sort=\"none\" data-column=\"1\" role=\"columnheader\" scope=\"col\" tabindex=\"0\" unselectable=\"on\">\r\n\t\t\t<p><strong>Description</strong></p>\r\n\t\t\t</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody aria-live=\"polite\" aria-relevant=\"all\">\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td>POST&nbsp;/api/order/order/cancel</td>\r\n\t\t\t<td>To cancel multiple orders</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td>POST&nbsp;/api/order/order/orderId/{orderId}/cancel</td>\r\n\t\t\t<td>To cancel a single order by order ID</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td>POST&nbsp;/api/order/order/orderId/{orderId}/orderLine/cancel</td>\r\n\t\t\t<td>To cancel a single or multiple order lines by order ID</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td>POST&nbsp;/api/order/order/orderLine/cancel</td>\r\n\t\t\t<td>To cancel multiple order lines across multiple orders</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<h4><a name=\"cancel-using-milestones\" id=\"cancel-using-milestones\"></a>Cancel Using Milestones</h4>\r\n\r\n<p>Automatic cancelation of orders can be configured using milestones. A rule can be added with the event as \"Cancel Order\" (within a milestone - Confirmed, Allocated, Released, Fulfilled) in the <a href=\"https://omni.helpdocsonline.com/order-orchestration$cancel-order-with-milestones\">Order Configuration UI</a>.&nbsp;If a milestone is not met within the given time period, the event is fired, and the order is canceled.</p>\r\n\r\n<h5><a name=\"how-to-configure-order-milestone-for-cancelling-non-confirmed-non-allocated-non-released-nbsp-orders-using-order-configuration-ui\" id=\"how-to-configure-order-milestone-for-cancelling-non-confirmed-non-allocated-non-released-nbsp-orders-using-order-configuration-ui\"></a>How to configure Order Milestone for cancelling Non-Confirmed/Non-Allocated/Non-Released&nbsp;Orders using Order Configuration UI</h5>\r\n\r\n<ul>\r\n\t<li>Search for 'Order Type' in the application menu. In the Order Types UI, identify the order type for which you want to configure a remorse period. Find the Order Config for that order type.</li>\r\n\t<li>Search for 'Order Configuration' in the application menu. Open the Order Config from the previous step.</li>\r\n\t<li>Open the Order Monitoring tab and go to the Confirmed milestone.</li>\r\n\t<li>Add expected time rule for Confirmed&nbsp;milestone.&nbsp;Specify the duration in hours (for example, 0.5 hours is 30 minutes).&nbsp;Select the dependent milestone as Created (or another value from the list based on requirements). Skip&nbsp;the Restrict by Date check box, and then click OK.</li>\r\n\t<li>In the same Confirmed&nbsp;milestone section, add a monitoring rule.&nbsp;Add rule name, and specify the duration in hours. Select event \"Cancel Order\" from the drop-down.</li>\r\n</ul>\r\n\r\n<div class=\"tip\"><strong>Note</strong>: Configure expected time rule for Allocated and Released milestone respectively for cancelling Non-Allocated or Non-Released order / order-line using OnAllocationDue and OnReleaseDue monitoring rules.</div>\r\n\r\n<h5><a name=\"how-to-cancel-back-ordered-units\" id=\"how-to-cancel-back-ordered-units\"></a>How to Cancel Back Ordered Units</h5>\r\n\r\n<p>Backordered units immediately after allocation or batch allocation or reallocation will be cancelled by reducing the ordered quantity (ordered quantity = ordered quantity – backordered quantity). If the ordered quantity becomes zero (0), the order line will be cancelled. This configuration works only for Doc Type \"RetailOrder\".</p>\r\n\r\n<p>Navigate to Order Configuration UI for a given order type &gt; General Tab &gt; Allocation &gt; Cancel Backordered Units</p>\r\n\r\n<h5><a name=\"how-to-cancel-back-ordered-units-with-a-scheduled-job\" id=\"how-to-cancel-back-ordered-units-with-a-scheduled-job\"></a>How to Cancel Back Ordered Units with a Scheduled Job</h5>\r\n\r\n<p>The OnAllocationDue milestone can be used to cancel units which have been back ordered by allocation (which were never released).&nbsp;</p>\r\n\r\n<p>For orders which have been allocated and released and then are shorted, the OnAllocationDue milestone has already been met. Once a milestone has been met, it is never reevaluated. If you load the order and look at the milestone, it will have an allocation milestone which will have a date - that is how you know it's already met. You&nbsp;cannot use milestones to cancel these units - instead you&nbsp;can use an agent which loads all orders with min status = back ordered and send it to the cancel service.&nbsp;</p>\r\n\r\n<p><strong>Note</strong>: If VAS charges are applied on the line which is back ordered, then Mod Type for VAS&nbsp;Charges should be more than Released.</p>\r\n\r\n<p>Here is a sample agent:</p>\r\n\r\n<div class=\"computer_code\"><code>{</code><code>\"name\"</code><code>:&nbsp;</code><code>\"BackOrderSchedulerQuery12\"</code><code>,</code><code>\"cronSchedule\"</code><code>:&nbsp;</code><code>\"0 0 * 1/1 * ? *\"</code><code>,&nbsp;</code><code>\"query\"</code><code>:&nbsp;</code><code>\"MinFulfillmentStatusId =\\\"1500\\\" AND CreatedTimestamp &lt;= currentTime(-1h)\"</code><code>,</code><code>\"handlerName\"</code><code>:&nbsp;</code><code>\"CancelUnReleasedQtyHandler\"</code><code>,</code><code>\"entity\"</code><code>:&nbsp;</code><code>\"orderLine\"</code><code>,</code><code>\"queryType\"</code><code>:&nbsp;</code><code>\"Rest\"</code><code>,</code><code>\"MessageTypeMode\"</code><code>:&nbsp;</code><code>\"DEDICATED_MESSAGE_TYPE\"</code>&nbsp;<code>}}</code></div>\r\n\r\n<p>This CancelUnReleasedQtyHandler service cancels all back ordered and allocated quantities. This service cannot be modified, it will apply the reason code \"CancelLine\" on the cancel order line. Changing the query to include maxFulfillmentStatus = 1500&nbsp;would not prevent the allocated quantities from getting canceled, since the query on the agent only filters for orders to enter the service. Once the orders enter the CancelUnReleasedQtyHandler service, any quantity less than released will be canceled.</p>\r\n\r\n<p>If you have allocated quantities which you do not want to be canceled, you will&nbsp;need to do a modification<span style=\"color:#e74c3c;\">.</span> To achieve this behavior, you will&nbsp;need a custom component which can calculate how much quantity to cancel, then send a cancellation request to the below API with the quantity to be canceled. The system will cancel back ordered units before allocating the&nbsp;units.</p>\r\n\r\n<ul>\r\n\t<li>If your requirement is real time cancellation, then&nbsp;every time a back order entity is created, listen to the event and send a cancellation request with the quantity to be canceled.</li>\r\n\t<li>If your requirement is scheduled cancellation, then configure an agent which selects the eligible orders and invokes a custom service, then have the custom service calculate the eligible quantity to cancel, and have the custom service call the below API to cancel the units.</li>\r\n</ul>\r\n\r\n<p>One limited workaround is to change the modification rules to restrict Allocated status from the \"Decrease Quantity\" mod type. This way, units which are already allocated will not be canceled by the scheduler. However, this will also prevent cancellation of allocated lines from other sources such as through the call center UI or order updates.&nbsp;</p>\r\n\r\n<p>The creation of a handler to cancel only backordered quantities and not allocated quantities is currently not supported.&nbsp;</p>\r\n\r\n<p><strong>Canceling aged back ordered orders for specific&nbsp;order types</strong></p>\r\n\r\n<p>If we have the query as \"MinFulfillmentStatusId='1000' and Order.OrderType.OrderTypeId='Ecom Order' and CreatedTimestamp&lt;=currentTime(-24h)\", and&nbsp;in the agent the attribute is \"queryType\": \"Rest\", then the query works both with time and order type.</p>\r\n\r\n<div class=\"tip\"><strong>Note</strong>: The above query format has been changed to include single quotes around the values instead of the escaped double quotes which were used earlier(\\\").</div>\r\n\r\n<h3><a name=\"retaining-selling-attributes-on-canceled-order-lines\" id=\"retaining-selling-attributes-on-canceled-order-lines\"></a>Retaining Selling Attributes on Canceled Order/Lines</h3>\r\n\r\n<p>The system will retain charge and tax details for canceled orders and order lines. Upon cancelation of an order or order line, the charge and tax details will be copied to the specified entities&nbsp;on the order as a record and will also be published. This process occurs only when the status of the order or order line status is updated to 'Canceled' (9000).</p>\r\n\r\n<p>The following entities will be used to store charge/tax details in order:</p>\r\n\r\n<ul type=\"disc\">\r\n\t<li>CancelledOrderChargeDetail</li>\r\n\t<li>CancelledOrderTaxDetail</li>\r\n\t<li>CancelledOrderLineChargeDetail</li>\r\n\t<li>CancelledOrderLineTaxDetail</li>\r\n</ul>\r\n\r\n<div class=\"tip\"><strong>Note</strong>:&nbsp;Cancelled taxes and charges are tracked on the event of complete line or order cancellation, respectively. If an order line quantity is decreased, but not fully canceled, the line level totals reduced prior to the line cancellation are not tracked, as all of the units on the corresponding line have not been cancelled. Similarly, if an order containing multiple lines has one line canceled, the order level totals reduced as a result of the line cancellation are not tracked, as all of the units on the order have not been canceled.</div>\r\n\r\n<h3><a name=\"implementation-flavors\" id=\"implementation-flavors\"></a>Implementation Flavors</h3>\r\n\r\n<h4 id=\"OrderCancellation,CancelonBackorder-OnShortReasonCodes-BackorderinsteadofCancel\"><a name=\"on-short-reason-codes-backorder-instead-of-cancel\" id=\"on-short-reason-codes-backorder-instead-of-cancel\"></a>On Short Reason Codes - Backorder instead of Cancel</h4>\r\n\r\n<p>Some retailers have a requirement after a short from downstream fulfillment systems to hold the order in order management so that a user can manually review the order, select a fulfillment facility and manually allocate the order line again. This is needed so&nbsp; that the order line does not cancel immediately. To achieve this, the following condition may be added to the extension handler:</p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-1\" class=\"toggle-content\"><span class=\"toggle-title\">OrderLineShortExtensionHandler</span></a></p><div id=\"tg-1\"><p>{{url}}/order/api/ServiceDefinition/extensionHandler/save</p>\r\n\r\n<p>{</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&quot;ExtensionHandlerId&quot;:&nbsp;&quot;OrderLineShortExtensionHandler&quot;,</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&quot;ProfileId&quot;:&nbsp;&quot;base&quot;,</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&quot;ExtensionhandlerRoute&quot;:&nbsp;[</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;ExtensionhandlerRouteId&quot;:&nbsp;&quot;OrderLineShortExtensionHandlerRouteId&quot;,</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Source&quot;:&nbsp;&quot;ON_EVENT&quot;,</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Destination&quot;:&nbsp;&quot;cancelOrderLineShortEvent&quot;,</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;IsSync&quot;:&nbsp;&quot;true&quot;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;],</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&quot;RegisteredExtensionPoints&quot;:&nbsp;[</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;ExtensionPointId&quot;:&nbsp;&quot;Order:OrderLine:Event:OnShort&quot;,</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;EntryCondition&quot;:&nbsp;&quot;CancelReason.ReasonId&nbsp;!=&nbsp;&lsquo;3000.000&#39;&quot;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;]</p>\r\n\r\n<p>}</p>\r\n</div></div></p>\r\n\r\n<p>This will allow orders which are shorted with reason code = 1000.000 to go to \"Cancelled\" status and orders shorted with reason code = 2000.000 to go to \"Backordered\" status (as it is passed in the entry condition).</p>\r\n\r\n<p>Short with reason code 1000.000 - \"Reallocate on Short = False\" - Result: Cancelled</p>\r\n\r\n<p>Short with reason code 2000.000 -&nbsp;\"Reallocate on Short = False\" - Result:&nbsp;Backordered</p>\r\n\r\n<div class=\"info\"><strong>Note</strong>: OrderLineShortExtensionHandler is invoked only for reason codes where re-allocate on short = false, it will not get invoked for reasons with re-allocate on short = true.</div>\r\n\r\n<p><br>\r\n<span style=\"font-size: 1.5em;\">Canceling Return Orders</span></p>\r\n\r\n<p>Currently, no base job is available to cancel return orders automatically.&nbsp;It is however possible to create a return order cancellation scheduler with custom effort. Both the job and the query will need to be created and tailored to the project needs. One business scenario being, cancel all pending return order that have been pending for more than X days.&nbsp;Modification rules on order configuration for return lines will also need to be reviewed with the enhanced cancellation capabilities.</p>\r\n\r\n<h4><a name=\"canceling-sts-orders\" id=\"canceling-sts-orders\"></a>Canceling STS Orders</h4>\r\n\r\n<p>STS Orders which have merge legs fulfilled, but delivery legs not created due to payment in awaiting status cannot be canceled. Because the delivery legs&nbsp;are in open status, releases do not get created. Such STS orders can be canceled with the below suggested way&nbsp;:</p>\r\n\r\n<p data-renderer-start-pos=\"1\">Step1 : At Order Line:&nbsp;Reduce the quantity from 1 to 0 in QuantityDetail for statusId:3000 and&nbsp;Add QuantityDetail with status 1500 and&nbsp;quantity as 1.</p>\r\n\r\n<p data-renderer-start-pos=\"219\">Step2: Update Order with IsCancelled at Order level.</p>\r\n\r\n<div class=\"tip\" data-renderer-start-pos=\"219\"><strong>Note</strong>: This might leave the reservation and the&nbsp;allocationDetail in order as is.</div>\r\n\r\n<h3><a name=\"troubleshooting\" id=\"troubleshooting\"></a>Troubleshooting</h3>\r\n\r\n<h4><a name=\"orders-are-not-getting-canceled-post-released-status\" id=\"orders-are-not-getting-canceled-post-released-status\"></a>Orders are not getting canceled post released status</h4>\r\n\r\n<ul>\r\n\t<li>Check if the post release cancellation feature is enabled.</li>\r\n\t<li>Work around :&nbsp;For the quantity detail \"StatusId\": \"3000\", change the qty to 0 and add new quantity details for \"StatusId\": \"1500\" or \"1000\" with qty 1. Then use the UI to cancel the eligible line quantity.</li>\r\n</ul>\r\n\r\n<h4><a name=\"manhattan-nbsp-active®-omni-nbsp-does-not-keep-the-charges-once-the-order-nbsp-is-canceled\" id=\"manhattan-nbsp-active®-omni-nbsp-does-not-keep-the-charges-once-the-order-nbsp-is-canceled\"></a>Manhattan&nbsp;Active® Omni&nbsp;does not keep the charges once the order&nbsp;is canceled</h4>\r\n\r\n<p>When the line or the order is canceled, then all the charges and discounts are deleted.</p>\r\n\r\n<h4><a name=\"the-order-was-canceled-successfully-in-the-fulfillment-system-but-not-reflected-as-canceled-in-om\" id=\"the-order-was-canceled-successfully-in-the-fulfillment-system-but-not-reflected-as-canceled-in-om\"></a>The order was canceled successfully in the fulfillment system but not reflected as canceled in OM</h4>\r\n\r\n<ul>\r\n\t<li>Check for any failed messages</li>\r\n\t<li>Check the fulfillment queue to see if any messages are stuck</li>\r\n\t<li>Check if the cancel reason code in the fulfillment system is the same as the corresponding reason code in OM</li>\r\n\t<li>Work around is to short the order through order event json (Short)</li>\r\n</ul>\r\n\r\n<h4><a name=\"unable-to-cancel-an-order-line-from-exchange-order-getting-error-return-charges-cannot-be-saved-against-sale-order-lines-return-charges-can-be-saved-against-a-return-order-line-while-non-return-charges-can-be-saved-against-sale-lines\" id=\"unable-to-cancel-an-order-line-from-exchange-order-getting-error-return-charges-cannot-be-saved-against-sale-order-lines-return-charges-can-be-saved-against-a-return-order-line-while-non-return-charges-can-be-saved-against-sale-lines\"></a>Unable to cancel an order line from exchange order. Getting error \"<em>Return charges cannot be saved against sale order lines. Return charges can be saved against a return order line, while non-return charges can be saved against sale lines</em>\"</h4>\r\n\r\n<p>Cancel the charges because you cannot have a charge on a return order.</p>\r\n\r\n<h4><a name=\"bopis-order-was-shorted-by-the-store-but-it-is-still-not-canceled\" id=\"bopis-order-was-shorted-by-the-store-but-it-is-still-not-canceled\"></a>BOPIS order was shorted by the store, but it is still not canceled</h4>\r\n\r\n<p>Check if the short reason code used has the flag ‘ReAllocate on Short’ as true. Flip it to false for the BOPIS order to get canceled.</p>\r\n\r\n<h4><a name=\"backordered-units-are-not-getting-canceled-although-cancel-backordered-units-is-enabled-in-order-configuration\" id=\"backordered-units-are-not-getting-canceled-although-cancel-backordered-units-is-enabled-in-order-configuration\"></a>Backordered units are not getting canceled although \"Cancel Backordered Units\" is enabled in Order Configuration</h4>\r\n\r\n<p>The above config will handle only RetailOrders where DocTypeId = RetailOrder</p>\r\n\r\n<h4><a name=\"when-the-order-cancellation-scheduler-invokes-the-cancelunreleasedqtyhandler-it-does-not-trigger-a-payment-transaction-and-generates-a-refund-transaction-for-unreleased-quantities-that-were-canceled\" id=\"when-the-order-cancellation-scheduler-invokes-the-cancelunreleasedqtyhandler-it-does-not-trigger-a-payment-transaction-and-generates-a-refund-transaction-for-unreleased-quantities-that-were-canceled\"></a>When the order cancellation scheduler invokes the CancelUnReleasedQtyHandler, it does not trigger a payment transaction and generates a refund transaction for unreleased quantities that were canceled</h4>\r\n\r\n<p>This is as designed and due to partial cancellation by scheduler. The required refund transaction will be created once the order is fulfilled. It works fine if unreleased quantities are manually canceled from orders UI.</p>\r\n\r\n<h4><a name=\"why-isn-t-cancelledordersubtotal-and-cancelledorderlinesubtotal-populated-when-partial-quantity-cancellation-occurs-nbsp\" id=\"why-isn-t-cancelledordersubtotal-and-cancelledorderlinesubtotal-populated-when-partial-quantity-cancellation-occurs-nbsp\"></a>Why isn't cancelledOrderSubtotal and cancelledOrderLineSubtotal populated when partial quantity cancellation occurs?&nbsp;</h4>\r\n\r\n<p>These fields are only populated on complete line or order cancellation. For instance, if you order 3 units and cancel 1, these fields will remain null. If you cancel all 3 units, then these fields will be populated with the respective values.</p>\r\n\r\n<p>The intention of these fields is for customer emails, if a retailer wants to print the value of a line or order which has been cancelled.</p>\r\n\r\n<h4><a name=\"authorization-reversal-or-refund-is-not-generated-during-a-partial-scheduled-cancellation\" id=\"authorization-reversal-or-refund-is-not-generated-during-a-partial-scheduled-cancellation\"></a>Authorization Reversal or Refund is not generated during a partial scheduled cancellation</h4>\r\n\r\n<p>When a partial cancellation of an order takes place, either unit level or line level, the order total is typically reduced and the customer is considered to be owed money back in the form of an authorization reversal or a refund, depending on the status of the order, configured behavior&nbsp;of the payment method, etc.</p>\r\n\r\n<p>This payment process is driven by a payment request generated when the order total is reduced. If this partial cancellation is done using a scheduled job or other backend cancellation API, the payment request is generated&nbsp;in \"SaveOnly\" mode, meaning no payment transaction processing is done at that time.</p>\r\n\r\n<p>This varies from cancellations initiated from customer service UI's and self-service UI,</p>\r\n\r\n<ul>\r\n\t<li>Customer service UIs: Customer service UIs have logic to explicitly send a payment request in \"CalculateAndExecute\" mode, as these cancellations are typically assumed to be customer initiated, and require immediate processing of the refund or authorization reversal.</li>\r\n\t<li>Self-service UI: When a partial cancellation is initiated from the self-service UI, a payment request is generated in 'CalculateAndExecute' mode, triggering immediate processing of the refund or authorization reversal.</li>\r\n</ul>\r\n\r\n<p>If the schedule-based&nbsp;cancellation payment behavior needs to mirror the UI cancellation payment behavior, an additional custom service can be added to the cancellation agent to send a payment request in \"CalculateAndExecute\" mode to the save payment request queue after the ordered unit(s) or line(s) are canceled.</p>\r\n\r\n<h3><a name=\"related-articles\" id=\"related-articles\"></a>Related Articles</h3>\r\n\r\n<div class=\"info\"><ul class=\"related-articles\"><li><a href=\"/order-archiving\" hqid=\"2993718\">Order Archiving</a></li><li><a href=\"/mod-types\" hqid=\"2729796\">Mod Types</a></li><li><a href=\"/order-orchestration-process\" hqid=\"1809208\">Order Orchestration Process</a></li><li><a href=\"/order-hold-and-unhold\" hqid=\"2601859\">Holds</a></li><li><a href=\"/cart-and-preview-mode\" hqid=\"2746028\">Cart and Preview Mode</a></li><li><a href=\"/shipping-restriction\" hqid=\"2918532\">Shipping Restriction</a></li><li><a href=\"/order-orchestration-configuration\" hqid=\"1809211\">Order Orchestration Configuration</a></li><li><a href=\"/creating-and-updating-order\" hqid=\"2700326\">Creating and Updating Order</a></li><li><a href=\"/order_tagging\" hqid=\"2656391\">Order Tagging</a></li><li><a href=\"/deliverytracking\" hqid=\"2837045\">Delivery Tracking</a></li><li><a href=\"/how-publish-order-works\" hqid=\"3041650\">Publishing Order </a></li><li><a href=\"/order-audit\" hqid=\"2700329\">Order Audit </a></li></ul></div>\r\n\r\n\t  </div>\r\n </div>\r\n <div id=\"ui-page-fb-wrap\"></div>\r\n <div class=\"hiq-footer-wrap\">\r\n    \r\n                \r\n  </div>\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n",
  "content_length": 33741,
  "scraped_at": "2025-08-09T21:56:37.692446",
  "content_clean": "Home ››Manhattan Active® Omni››Order Management››Process & Configuration Guides››Order Orchestration ››Order Cancellation Order Cancellation Previous I Next Order CancellationOverviewHow Order Cancellation WorksTypes of CancellationWays to Cancel an OrderCancel Using Orders UICancel Using Customer Service UICancel via API UpdatesCancel Using MilestonesHow to configure Order Milestone for cancelling Non-Confirmed/Non-Allocated/Non-Released Orders using Order Configuration UIHow to Cancel Back Ordered UnitsHow to Cancel Back Ordered Units with a Scheduled JobRetaining Selling Attributes on Canceled Order/LinesImplementation FlavorsOn Short Reason Codes - Backorder instead of CancelCanceling STS OrdersTroubleshootingOrders are not getting canceled post released statusManhattan Active® Omni does not keep the charges once the order is canceledThe order was canceled successfully in the fulfillment system but not reflected as canceled in OMUnable to cancel an order line from exchange order. Getting error \"Return charges cannot be saved against sale order lines. Return charges can be saved against a return order line, while non-return charges can be saved against sale lines\"BOPIS order was shorted by the store, but it is still not canceledBackordered units are not getting canceled although \"Cancel Backordered Units\" is enabled in Order ConfigurationWhen the order cancellation scheduler invokes the CancelUnReleasedQtyHandler, it does not trigger a payment transaction and generates a refund transaction for unreleased quantities that were canceledWhy isn't cancelledOrderSubtotal and cancelledOrderLineSubtotal populated when partial quantity cancellation occurs? Authorization Reversal or Refund is not generated during a partial scheduled cancellationRelated Articles Overview Order cancellation is the act of making an order void. It can happen either due to a customer no longer wanting an originally ordered product or due to a system-generated action. When orders are canceled, the system updates the quantity, item subtotal, item line subtotal, order subtotal, and order total to zero. All discounts, charges and taxes are deleted, resulting in zero. An order, by default, cannot be canceled once its maximum fulfillment status reaches released (3000) status. However, one can enable post release cancellation feature to cancel orders even after they are released. Refer here for more details on post release cancellation. How Order Cancellation Works When an order line is canceled, then the reservation for that line should be canceled and the order line is moved to \"Canceled\" (9000) status. The isCancelled property is updated to true once the order line gets canceled. The orderline quantity is updated to zero. Each cancellation is mapped to a cancel reason code. The cancel reason codes currently configured in base are: Cancel Reason Codes Store Close Fulfillment System Shorted Order Resumed Cancel Line Confirmation Due Cancel of Unallocated Unit Miscellaneous reason Out of the box seed data should have CreatedBy populated as ‘seeddata-importer'. For example:  To get the base reason codes, follow the steps below: Login as system user Use the API {{url}}/order/api/order/reason/search { \"Query\": \"CreatedBy = 'seeddata-importer' and ReasonTypeId = 'Cancel'\" } HttpMethod = POST In the response, \"CreatedBy\": \"seeddata-importer\" will have the reason codes defined from base. Note: The API might return 403, make sure the user has the required permission to access the URL Retailers can specify at the cancel/short reason code level if the cancellation is initiated by the system or the customer. Depending on who initiated the cancellation, different mod types will be triggered. This allows retailers to re-evaluate promotion and charges if a customer partially cancels an order but not if part of an order is shorted by the fulfillment system. Types of Cancellation Cancellations can be initiated either by the system or by the customer. Each cancel reason code can be mapped to any of the below cancellation types. This can be configured in the Order Reasons. Cancellation types are captured using the cancellationInitiatedBy property. Type of Cancellation Description Customer Initiated Cancels When the customer initiates the cancellation action. For example, a customer cancels an order from his order account page. System Initiated Cancels When the system initiates the action. For example, cancel the back-order line by job scheduler. Not Applicable When the initiating party is not specified or when the entity does not support differentiating between System initiated or Customer initiated. Ways to Cancel an Order Base provides the capability to cancel order and order line using different ways. Cancel Using Orders UI One can choose to cancel multiple orders at a time selecting the orders one wishes to cancel. Reason code and its description should be provided. Similar action can be performed at line level as well to cancel specific order lines.  Refer UI help to understand how cancelation can be done for order or order line from the Orders UI. Cancel Using Customer Service UI Orders or order lines can be canceled through the Customer Service UI. Refer UI help to understand how cancelation can be done for order or order line from the customer service UI. Cancel via API Updates The following APIs can be used for order and order line cancellation. API Description POST /api/order/order/cancel To cancel multiple orders POST /api/order/order/orderId/{orderId}/cancel To cancel a single order by order ID POST /api/order/order/orderId/{orderId}/orderLine/cancel To cancel a single or multiple order lines by order ID POST /api/order/order/orderLine/cancel To cancel multiple order lines across multiple orders Cancel Using Milestones Automatic cancelation of orders can be configured using milestones. A rule can be added with the event as \"Cancel Order\" (within a milestone - Confirmed, Allocated, Released, Fulfilled) in the Order Configuration UI. If a milestone is not met within the given time period, the event is fired, and the order is canceled. How to configure Order Milestone for cancelling Non-Confirmed/Non-Allocated/Non-Released Orders using Order Configuration UI Search for 'Order Type' in the application menu. In the Order Types UI, identify the order type for which you want to configure a remorse period. Find the Order Config for that order type. Search for 'Order Configuration' in the application menu. Open the Order Config from the previous step. Open the Order Monitoring tab and go to the Confirmed milestone. Add expected time rule for Confirmed milestone. Specify the duration in hours (for example, 0.5 hours is 30 minutes). Select the dependent milestone as Created (or another value from the list based on requirements). Skip the Restrict by Date check box, and then click OK. In the same Confirmed milestone section, add a monitoring rule. Add rule name, and specify the duration in hours. Select event \"Cancel Order\" from the drop-down. Note: Configure expected time rule for Allocated and Released milestone respectively for cancelling Non-Allocated or Non-Released order / order-line using OnAllocationDue and OnReleaseDue monitoring rules. How to Cancel Back Ordered Units Backordered units immediately after allocation or batch allocation or reallocation will be cancelled by reducing the ordered quantity (ordered quantity = ordered quantity – backordered quantity). If the ordered quantity becomes zero (0), the order line will be cancelled. This configuration works only for Doc Type \"RetailOrder\". Navigate to Order Configuration UI for a given order type > General Tab > Allocation > Cancel Backordered Units How to Cancel Back Ordered Units with a Scheduled Job The OnAllocationDue milestone can be used to cancel units which have been back ordered by allocation (which were never released). For orders which have been allocated and released and then are shorted, the OnAllocationDue milestone has already been met. Once a milestone has been met, it is never reevaluated. If you load the order and look at the milestone, it will have an allocation milestone which will have a date - that is how you know it's already met. You cannot use milestones to cancel these units - instead you can use an agent which loads all orders with min status = back ordered and send it to the cancel service. Note: If VAS charges are applied on the line which is back ordered, then Mod Type for VAS Charges should be more than Released. Here is a sample agent: {\"name\": \"BackOrderSchedulerQuery12\",\"cronSchedule\": \"0 0 * 1/1 * ? *\", \"query\": \"MinFulfillmentStatusId =\\\"1500\\\" AND CreatedTimestamp <= currentTime(-1h)\",\"handlerName\": \"CancelUnReleasedQtyHandler\",\"entity\": \"orderLine\",\"queryType\": \"Rest\",\"MessageTypeMode\": \"DEDICATED_MESSAGE_TYPE\" }} This CancelUnReleasedQtyHandler service cancels all back ordered and allocated quantities. This service cannot be modified, it will apply the reason code \"CancelLine\" on the cancel order line. Changing the query to include maxFulfillmentStatus = 1500 would not prevent the allocated quantities from getting canceled, since the query on the agent only filters for orders to enter the service. Once the orders enter the CancelUnReleasedQtyHandler service, any quantity less than released will be canceled. If you have allocated quantities which you do not want to be canceled, you will need to do a modification. To achieve this behavior, you will need a custom component which can calculate how much quantity to cancel, then send a cancellation request to the below API with the quantity to be canceled. The system will cancel back ordered units before allocating the units. If your requirement is real time cancellation, then every time a back order entity is created, listen to the event and send a cancellation request with the quantity to be canceled. If your requirement is scheduled cancellation, then configure an agent which selects the eligible orders and invokes a custom service, then have the custom service calculate the eligible quantity to cancel, and have the custom service call the below API to cancel the units. One limited workaround is to change the modification rules to restrict Allocated status from the \"Decrease Quantity\" mod type. This way, units which are already allocated will not be canceled by the scheduler. However, this will also prevent cancellation of allocated lines from other sources such as through the call center UI or order updates. The creation of a handler to cancel only backordered quantities and not allocated quantities is currently not supported. Canceling aged back ordered orders for specific order types If we have the query as \"MinFulfillmentStatusId='1000' and Order.OrderType.OrderTypeId='Ecom Order' and CreatedTimestamp<=currentTime(-24h)\", and in the agent the attribute is \"queryType\": \"Rest\", then the query works both with time and order type. Note: The above query format has been changed to include single quotes around the values instead of the escaped double quotes which were used earlier(\\\"). Retaining Selling Attributes on Canceled Order/Lines The system will retain charge and tax details for canceled orders and order lines. Upon cancelation of an order or order line, the charge and tax details will be copied to the specified entities on the order as a record and will also be published. This process occurs only when the status of the order or order line status is updated to 'Canceled' (9000). The following entities will be used to store charge/tax details in order: CancelledOrderChargeDetail CancelledOrderTaxDetail CancelledOrderLineChargeDetail CancelledOrderLineTaxDetail Note: Cancelled taxes and charges are tracked on the event of complete line or order cancellation, respectively. If an order line quantity is decreased, but not fully canceled, the line level totals reduced prior to the line cancellation are not tracked, as all of the units on the corresponding line have not been cancelled. Similarly, if an order containing multiple lines has one line canceled, the order level totals reduced as a result of the line cancellation are not tracked, as all of the units on the order have not been canceled. Implementation Flavors On Short Reason Codes - Backorder instead of Cancel Some retailers have a requirement after a short from downstream fulfillment systems to hold the order in order management so that a user can manually review the order, select a fulfillment facility and manually allocate the order line again. This is needed so  that the order line does not cancel immediately. To achieve this, the following condition may be added to the extension handler: OrderLineShortExtensionHandler{{url}}/order/api/ServiceDefinition/extensionHandler/save { \"ExtensionHandlerId\": \"OrderLineShortExtensionHandler\", \"ProfileId\": \"base\", \"ExtensionhandlerRoute\": [ { \"ExtensionhandlerRouteId\": \"OrderLineShortExtensionHandlerRouteId\", \"Source\": \"ON_EVENT\", \"Destination\": \"cancelOrderLineShortEvent\", \"IsSync\": \"true\" } ], \"RegisteredExtensionPoints\": [ { \"ExtensionPointId\": \"Order:OrderLine:Event:OnShort\", \"EntryCondition\": \"CancelReason.ReasonId != ‘3000.000'\" } ] } This will allow orders which are shorted with reason code = 1000.000 to go to \"Cancelled\" status and orders shorted with reason code = 2000.000 to go to \"Backordered\" status (as it is passed in the entry condition). Short with reason code 1000.000 - \"Reallocate on Short = False\" - Result: Cancelled Short with reason code 2000.000 - \"Reallocate on Short = False\" - Result: Backordered Note: OrderLineShortExtensionHandler is invoked only for reason codes where re-allocate on short = false, it will not get invoked for reasons with re-allocate on short = true. Canceling Return Orders Currently, no base job is available to cancel return orders automatically. It is however possible to create a return order cancellation scheduler with custom effort. Both the job and the query will need to be created and tailored to the project needs. One business scenario being, cancel all pending return order that have been pending for more than X days. Modification rules on order configuration for return lines will also need to be reviewed with the enhanced cancellation capabilities. Canceling STS Orders STS Orders which have merge legs fulfilled, but delivery legs not created due to payment in awaiting status cannot be canceled. Because the delivery legs are in open status, releases do not get created. Such STS orders can be canceled with the below suggested way : Step1 : At Order Line: Reduce the quantity from 1 to 0 in QuantityDetail for statusId:3000 and Add QuantityDetail with status 1500 and quantity as 1. Step2: Update Order with IsCancelled at Order level. Note: This might leave the reservation and the allocationDetail in order as is. Troubleshooting Orders are not getting canceled post released status Check if the post release cancellation feature is enabled. Work around : For the quantity detail \"StatusId\": \"3000\", change the qty to 0 and add new quantity details for \"StatusId\": \"1500\" or \"1000\" with qty 1. Then use the UI to cancel the eligible line quantity. Manhattan Active® Omni does not keep the charges once the order is canceled When the line or the order is canceled, then all the charges and discounts are deleted. The order was canceled successfully in the fulfillment system but not reflected as canceled in OM Check for any failed messages Check the fulfillment queue to see if any messages are stuck Check if the cancel reason code in the fulfillment system is the same as the corresponding reason code in OM Work around is to short the order through order event json (Short) Unable to cancel an order line from exchange order. Getting error \"Return charges cannot be saved against sale order lines. Return charges can be saved against a return order line, while non-return charges can be saved against sale lines\" Cancel the charges because you cannot have a charge on a return order. BOPIS order was shorted by the store, but it is still not canceled Check if the short reason code used has the flag ‘ReAllocate on Short’ as true. Flip it to false for the BOPIS order to get canceled. Backordered units are not getting canceled although \"Cancel Backordered Units\" is enabled in Order Configuration The above config will handle only RetailOrders where DocTypeId = RetailOrder When the order cancellation scheduler invokes the CancelUnReleasedQtyHandler, it does not trigger a payment transaction and generates a refund transaction for unreleased quantities that were canceled This is as designed and due to partial cancellation by scheduler. The required refund transaction will be created once the order is fulfilled. It works fine if unreleased quantities are manually canceled from orders UI. Why isn't cancelledOrderSubtotal and cancelledOrderLineSubtotal populated when partial quantity cancellation occurs? These fields are only populated on complete line or order cancellation. For instance, if you order 3 units and cancel 1, these fields will remain null. If you cancel all 3 units, then these fields will be populated with the respective values. The intention of these fields is for customer emails, if a retailer wants to print the value of a line or order which has been cancelled. Authorization Reversal or Refund is not generated during a partial scheduled cancellation When a partial cancellation of an order takes place, either unit level or line level, the order total is typically reduced and the customer is considered to be owed money back in the form of an authorization reversal or a refund, depending on the status of the order, configured behavior of the payment method, etc. This payment process is driven by a payment request generated when the order total is reduced. If this partial cancellation is done using a scheduled job or other backend cancellation API, the payment request is generated in \"SaveOnly\" mode, meaning no payment transaction processing is done at that time. This varies from cancellations initiated from customer service UI's and self-service UI, Customer service UIs: Customer service UIs have logic to explicitly send a payment request in \"CalculateAndExecute\" mode, as these cancellations are typically assumed to be customer initiated, and require immediate processing of the refund or authorization reversal. Self-service UI: When a partial cancellation is initiated from the self-service UI, a payment request is generated in 'CalculateAndExecute' mode, triggering immediate processing of the refund or authorization reversal. If the schedule-based cancellation payment behavior needs to mirror the UI cancellation payment behavior, an additional custom service can be added to the cancellation agent to send a payment request in \"CalculateAndExecute\" mode to the save payment request queue after the ordered unit(s) or line(s) are canceled. Related Articles Order ArchivingMod TypesOrder Orchestration ProcessHoldsCart and Preview ModeShipping RestrictionOrder Orchestration ConfigurationCreating and Updating OrderOrder TaggingDelivery TrackingPublishing Order Order Audit"
}