{
  "id": "2645084",
  "permalink": "reallocation",
  "title": "Reallocation",
  "type": "topic",
  "level": 7,
  "path": "Manhattan Active® Omni/Order Management/Process & Configuration Guides/Order Processing/Order Fulfillment/Order Allocation/Batch/Re-allocation",
  "raw_item": {
    "id": "2645084",
    "text": "Re-allocation",
    "title": "Re-allocation",
    "permalink": "reallocation",
    "leaf": false,
    "droppable": true,
    "expanded": true,
    "closed": true,
    "visible": true,
    "editable": true,
    "type": "topic",
    "topicType": "0",
    "status": "1",
    "iconCls": "icon-topic",
    "cls": "",
    "folder_id": "322265",
    "parent": "f;322265",
    "created_date": "1603091075",
    "modified_date": "1726840731",
    "instructor_id": null,
    "loaded": true,
    "haschildren": false,
    "callout": "0",
    "order": "2"
  },
  "success": true,
  "content": "\r\n\r\n\r\n<div class=\"hiq-page-wrap\">\r\n<div class=\"hiq-t-wrap\">\r\n\t\t\r\n  \t  <div class=\"hiq-t \">\r\n\t\t\t\t<ul class=\"breadcrumbs\"><li><a class=\"breadcrumb-links\" hqid=\"1788908\"  href=\"/home\">Home</a></li> <li><span>&rsaquo;&rsaquo;</span><a hqid=\"3500940\" href=\"/omni\" class=\"breadcrumb-links\">Manhattan Active® Omni</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158393\" href=\"/order-management\" class=\"breadcrumb-links\">Order Management</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158394\" href=\"/process-configuration-guides\" class=\"breadcrumb-links\">Process & Configuration Guides</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158718\" href=\"/order-processing-2\" class=\"breadcrumb-links\">Order Processing</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158747\" href=\"/order-fulfillment\" class=\"breadcrumb-links\">Order Fulfillment</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2757470\" href=\"/order_allocation\" class=\"breadcrumb-links\">Order Allocation</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2757466\" href=\"/batch\" class=\"breadcrumb-links\">Batch</a></li><li> <span>››</span>Reallocation</li></ul>  \t\r\n\t\t<h2>Reallocation</h2>\r\n\r\n<p></p>\r\n\r\n<a href=\"/batch-allocation\" hqid=\"2685288\">Previous</a>&nbsp;I&nbsp;\r\n<p>&nbsp;</p>\r\n\r\n<div class=\"info\"><ul><li><a href=\"/reallocation$how-reallocation-works\">How Reallocation Works</a></li><li><a href=\"/reallocation$process-flow\">Process Flow</a></li><li><a href=\"/reallocation$configuration\">Configuration</a><ul><li><a href=\"/reallocation$enabling-nbsp-reallocation\">Enabling&nbsp;Reallocation</a></li><li><a href=\"/reallocation$mod-queue-based-reallocation-for-improved-performance\">Mod Queue-Based Reallocation for Improved Performance</a></li></ul></li></ul></div>\r\n\r\n<div class=\"warning\">Before you begin: If your use case can be solved by&nbsp;<a href=\"https://omni.helpdocsonline.com/continuous-allocation\">continuous allocation</a>, it is recommended to use it instead of the reallocation defined below.&nbsp;<br />\r\n<br />\r\nIn general, re-allocation job should only run once a day.</div>\r\n\r\n<h3><a name=\"how-reallocation-works\" id=\"how-reallocation-works\"></a>How Reallocation Works</h3>\r\n\r\n<p>Reallocation is the process of reshuffling a set of orders prior to releasing for fulfillment by deallocating them (if needed) and allocating them using the batch allocation logic. This helps the higher priority orders to be allocated before allocating the lower priority orders. Also, helps to find out if there are any better supplies that can fulfill the priority orders. Reallocation enables the business to control which orders should get which inventory. There are multiple use cases to prioritize and reallocate orders:&nbsp;</p>\r\n\r\n<ul>\r\n\t<li>Direct to Consumer Orders over Wholesale, and&nbsp;Wholesale over Replenishment</li>\r\n\t<li>Replenishment Orders by Priority</li>\r\n\t<li>B2B/Wholesale Orders by Customer</li>\r\n\t<li>Based on Latest Ship Date / RDD vs First In First Out</li>\r\n\t<li>Allocate unallocated and backordered orders&nbsp;</li>\r\n\t<li>Allocate priority&nbsp;orders which are allocated against future inventory&nbsp;when new on hand inventory is available</li>\r\n\t<li>Reallocate orders to find a better location/supply based on the fulfillment optimization rules</li>\r\n</ul>\r\n\r\n<div class=\"tip\"><strong>Note</strong>: It is important to note that the reallocation process is not aimed to be used only for transferring allocation from future to onhand inventory when the future inventory is received. This should be managed by Transfer allocation. Allocation to on hand inventory of order lines previously allocated to future inventory can happen during the reallocation process but it is not advised to use reallocation in place of transfer allocation</div>\r\n\r\n<p>Reallocation can be scheduled to run at a specific time interval and query can be defined based on order and order line attributes&nbsp;to filter orders for reallocation. Any order containing one order line selected by the scheduler will be selected for re-allocation and will either be fully or partially reallocated based on the reallocation scheduler configuration (see configuration section at the end of this guide for more information). If needed the reallocation job will deallocate the orders/order lines&nbsp;that are already allocated before invoking&nbsp;batch allocation process to prioritize the orders for allocation based on effective rank.</p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-1\" class=\"toggle-content\"><span class=\"toggle-title\">Reallocation - Example 1</span></a></p><div id=\"tg-1\"><p>Reallocate job is scheduled to pick up all Replenishment Orders (Open, Allocated, Back Ordered) and Customer Orders (Back ordered).</p>\n\n<p>Orders are as below.&nbsp;</p>\n\n<table border=\"1\" cellpadding=\"0\" cellspacing=\"0\" style=\"width: 800px;\" width=\"450\">\n\t<thead>\n\t\t<tr height=\"21\">\n\t\t\t<th height=\"21\" scope=\"col\" style=\"text-align: center;\" width=\"47\">Order</th>\n\t\t\t<th scope=\"col\" style=\"text-align: center;\" width=\"151\">Order type</th>\n\t\t\t<th scope=\"col\" style=\"text-align: center;\" width=\"97\">Status</th>\n\t\t\t<th scope=\"col\" style=\"text-align: center;\" width=\"49\">Item</th>\n\t\t\t<th scope=\"col\" style=\"text-align: center;\" width=\"65\">Quantity</th>\n\t\t\t<th scope=\"col\" style=\"text-align: center;\" width=\"41\">Rank</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr height=\"21\">\n\t\t\t<td height=\"21\">CO 1</td>\n\t\t\t<td>Customer Order</td>\n\t\t\t<td>Allocated</td>\n\t\t\t<td>SKU A</td>\n\t\t\t<td align=\"right\">5</td>\n\t\t\t<td align=\"right\">1001</td>\n\t\t</tr>\n\t\t<tr height=\"21\">\n\t\t\t<td height=\"21\">CO 2</td>\n\t\t\t<td>Customer Order</td>\n\t\t\t<td>Back Ordered</td>\n\t\t\t<td>SKU A</td>\n\t\t\t<td align=\"right\">5</td>\n\t\t\t<td align=\"right\">1002</td>\n\t\t</tr>\n\t\t<tr height=\"21\">\n\t\t\t<td height=\"21\">CO 3</td>\n\t\t\t<td>Customer Order</td>\n\t\t\t<td>Released</td>\n\t\t\t<td>SKU A</td>\n\t\t\t<td align=\"right\">5</td>\n\t\t\t<td align=\"right\">1003</td>\n\t\t</tr>\n\t\t<tr height=\"21\">\n\t\t\t<td height=\"21\">SO 1</td>\n\t\t\t<td>Replenishment Order</td>\n\t\t\t<td>Open</td>\n\t\t\t<td>SKU A</td>\n\t\t\t<td align=\"right\">10</td>\n\t\t\t<td align=\"right\">2003</td>\n\t\t</tr>\n\t\t<tr height=\"21\">\n\t\t\t<td height=\"21\">SO 2</td>\n\t\t\t<td>Replenishment Order</td>\n\t\t\t<td>Allocated</td>\n\t\t\t<td>SKU A</td>\n\t\t\t<td align=\"right\">10</td>\n\t\t\t<td align=\"right\">2002</td>\n\t\t</tr>\n\t\t<tr height=\"21\">\n\t\t\t<td height=\"21\">SO 3</td>\n\t\t\t<td>Replenishment Order</td>\n\t\t\t<td>Back Ordered</td>\n\t\t\t<td>SKU A</td>\n\t\t\t<td align=\"right\">10</td>\n\t\t\t<td align=\"right\">2001</td>\n\t\t</tr>\n\t\t<tr height=\"21\">\n\t\t\t<td height=\"21\">SO 4</td>\n\t\t\t<td>Replenishment Order</td>\n\t\t\t<td>Released</td>\n\t\t\t<td>SKU A</td>\n\t\t\t<td align=\"right\">10</td>\n\t\t\t<td align=\"right\">2004</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>&nbsp;</p>\n\n<p>When Reallocation job runs, system picks up CO 2, SO 1, SO 2 and SO 3 for reallocation. Since SO 2 is already allocated, SO 2 is de-allocated first. Then, these orders are submitted for allocation based on the effective rank. In the below example,&nbsp;CO 2 is sent for allocation first followed by SO 3, SO 2 and SO 1</p>\n</div></div></p>\r\n\r\n<h3><a name=\"process-flow\" id=\"process-flow\"></a>Process Flow</h3>\r\n\r\n<p><img height=\"902\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/qu/Reallocation%20Job(1).png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL3F1L1JlYWxsb2NhdGlvbiUyMEpvYigxKS5wbmciLCJDb25kaXRpb24iOnsiRGF0ZUxlc3NUaGFuIjp7IkFXUzpFcG9jaFRpbWUiOjE3NTQ3NTE3MzN9fX1dfQ__&Signature=ArjjDN5ub8-3sUtRG27g2WPYXN1b59iVtqZlEDPvB95GBEvOYbbhGOiE45mkc9kjvnDlKEkvTh4iJw6StwveuOhpaOj04NCUp77vHTm3QF~epKGii4S4t22UV94xzggPVb1Nxc8uaS4KMxF6IhAfszfVVQyq4CXoDET0SgU0LeIIQhSnoupcX-9pFF2l1P5X9funU358urBZx~tkHLBb4nDywOh~8nrEz0LVBTv6~-r~jWG~sOnmvQRXalmYwkkvyOB~QW0eLS1g-W4ayiPB16aTyzlkWg5QagftvwaT1T3hxH0FraEhCGAA8U~XB7CtQLwnEpk7cnRLQaXbb3Udig__&Key-Pair-Id=K2TK3EG287XSFC\" width=\"1052\" /></p>\r\n\r\n<p>Refer to <a hqid=\"2685288\" href=\"/batch-allocation$How does Batch Allocation work\">Batch Allocation logic</a> and <a href=\"https://omni.helpdocsonline.com/immediateallocation$how-does-allocation-work\">How Allocation works</a> for more details</p>\r\n\r\n<h3><a name=\"configuration\" id=\"configuration\"></a>Configuration</h3>\r\n\r\n<h4><a name=\"enabling-nbsp-reallocation\" id=\"enabling-nbsp-reallocation\"></a><a id=\"How to Enable Reallocation\" name=\"How to Enable Reallocation\"></a>Enabling&nbsp;Reallocation</h4>\r\n\r\n<p>Reallocation is configured by setting up a scheduler. The scheduler configuration and its multiple parameters are described below</p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-2\" class=\"toggle-content\"><span class=\"toggle-title\">Reallocation configuration</span></a></p><div id=\"tg-2\"><p>The reallocation job type is: &quot;<strong>reallocationJob</strong>&quot;</p>\n\n<table border=\"1\" data-autosize=\"false\" data-layout=\"default\" data-number-column=\"false\" data-pm-slice=\"1 1 []\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th scope=\"col\">\n\t\t\t<p><strong>Reallocation Job schedule parameters&nbsp;</strong></p>\n\t\t\t</th>\n\t\t\t<th scope=\"col\">\n\t\t\t<p><strong>Description</strong></p>\n\t\t\t</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>Query</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Logical selection of order and order line attributes that will select the orders to be processed by the reallocation job. In the below example, the job will select all customer orders that have at least one line in backordered status (1500) and that have not been updated in the last 10 minutes.&nbsp;</p>\n\n\t\t\t<p>(OrderLine.MinFulfillmentStatusId IN(&#39;1500&#39;) and DocType.DocTypeId = &#39;CustomerOrder&#39; and OrderLine.UpdatedTimestamp &lt; CurrentTime(-10m)&nbsp;)</p>\n\n\t\t\t<p>It is advised that before setting the reallocation job, the query is tested with a /search order API.&nbsp;</p>\n\n\t\t\t<p>Also note that quering on the grand child object is not supported.&nbsp;</p>\n\n\t\t\t<p>See below for more sample queries</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>Reallocate</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>Boolean flag that can be true or false.&nbsp;</p>\n\n\t\t\t<p>If it is set to true, the system will deallocate all the order lines that are part of the orders selected by the above query as long as they are not released. This can be used to make sure the orders are allocated from the optimal location by considering all the order lines in the reallocation process.&nbsp;</p>\n\n\t\t\t<p>If it is set to false, the order lines already allocated but part of the orders selected by the above query will not be deallocated and considered in the reallocation process. This can be used for two purposes: have the same logic as batch allocation or making sure that the already allocated inventory is not deallocated in case there is a risk if it&nbsp;gets stolen. However, in this case, there is a risk of order not getting allocated from the optimal location and would lead to split shipment.&nbsp;</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>ReasonId</p>\n\n\t\t\t<p>(optional parameter)</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>If an order is reallocated by the batch scheduler, within the QuantityDetail of the order, the system logs a Reason and a ReasonType&nbsp;to indicate what action caused a reallocation. If the active profile includes &quot;Reason: ReAllocation&quot;, then this reason will be logged within the quantity detail when a ReAllocation scheduler reallocates an order (along with &quot;ReasonTypeId: ReAllocation&quot;). If the active profile does not include &quot;Reason: Reallocation&quot; then the reason logged in the quantity detail is &quot;DeAllocation&quot; and the ReasonTypeId&nbsp;is &quot;InventoryDrop&quot;.</p>\n\n\t\t\t<p>The job parameter of the ReAllocate&nbsp;scheduler must have the ReasonId set to &quot;ReAllocation&quot; in order for the reason to be logged within the quantity detail.&nbsp;</p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>&nbsp;</p>\n\n<p>An example of reallocation scheduler Json configuration can be found below. This scheduler belongs to the profile purpose ord::batch in the order component.</p>\n\n<div class=\"computer_code\"><code>{<br />\n&nbsp;&nbsp;&nbsp; &quot;JobScheduleId&quot;: &quot;reallocationJob&quot;,<br />\n&nbsp;&nbsp;&nbsp; &quot;JobTypeId&quot;: &quot;reallocationJob&quot;,<br />\n&nbsp;&nbsp;&nbsp; &quot;CronExpression&quot;: &quot;0 0 0/4 1/1 * ? *&quot;,<br />\n&nbsp;&nbsp;&nbsp; &quot;StartDelay&quot;: 1000,<br />\n&nbsp;&nbsp;&nbsp; &quot;RepeatInterval&quot;: 20000,<br />\n&nbsp;&nbsp;&nbsp; &quot;TriggerKey&quot;: &quot;reallocationJobTrigger&quot;,<br />\n&nbsp;&nbsp;&nbsp; &quot;JobParameters&quot;: [<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;InputKey&quot;: &quot;Query&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;InputValue&quot;: &quot;(OrderLine.MinFulfillmentStatusId IN(&#39;1500&#39;) and DocType.DocTypeId = &#39;CustomerOrder&#39; and OrderLine.UpdatedTimestamp &lt; CurrentTime(-10m)&nbsp;)&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;InputKey&quot;: &quot;Reallocate&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;InputValue&quot;: &quot;true&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;InputKey&quot;: &quot;</code>ReasonId<code>&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;InputValue&quot;: &quot;</code>ReAllocation<code>&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\n&nbsp;&nbsp;&nbsp; ]<br />\n&nbsp; }</code></div>\n\n<p><strong>Sample reallocation job queries:&nbsp;</strong></p>\n\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width: 857px;\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th scope=\"col\">Level</th>\n\t\t\t<th scope=\"col\">Attribute</th>\n\t\t\t<th scope=\"col\">Sample Query</th>\n\t\t\t<th scope=\"col\" style=\"width: 311px;\">Translation of the Sample Query in English</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>Order</td>\n\t\t\t<td>Doc Type</td>\n\t\t\t<td>{<br />\n\t\t\t&quot;InputKey&quot;: &quot;Query&quot;,<br />\n\t\t\t&quot;InputValue&quot;: &quot;((DocType.DocTypeId = &#39;RetailOrder&#39;))&quot;<br />\n\t\t\t}</td>\n\t\t\t<td style=\"width: 308px;\">Reallocation will run only for Retail Orders having max fulfillment status less than Partially Released status. It considers all quantities in Open, Back ordered and Allocated status for reallocation.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>Order</p>\n\n\t\t\t<p>Order Line</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<ul>\n\t\t\t\t<li>Doc Type</li>\n\t\t\t\t<li>Min Fulfillment Status</li>\n\t\t\t</ul>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>{<br />\n\t\t\t&quot;InputKey&quot;: &quot;Query&quot;,<br />\n\t\t\t&quot;InputValue&quot;: &quot;((DocType.DocTypeId = &#39;RetailOrder&#39;) or (OrderLine.MinFulfillmentStatusId IN(&#39;1500&#39;) and DocType.DocTypeId = &#39;CustomerOrder&#39;))&quot;</p>\n\n\t\t\t<p>}</p>\n\t\t\t</td>\n\t\t\t<td style=\"width: 308px;\">\n\t\t\t<p>Reallocation will run for both Customer and Retail Orders.</p>\n\n\t\t\t<ul>\n\t\t\t\t<li>For Retail Orders - All&nbsp;quantities in Open, Back ordered, and Allocated status is considered for reallocation.&nbsp;</li>\n\t\t\t\t<li>For Customer Orders - Only quantities in Back ordered status is considered for reallocation. Customer Order quantities which are allocated are not considered for reallocation&nbsp;</li>\n\t\t\t</ul>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>Order</p>\n\n\t\t\t<p>Order Line</p>\n\t\t\t</td>\n\t\t\t<td>Shipping Method</td>\n\t\t\t<td>\n\t\t\t<p>{<br />\n\t\t\t&quot;InputKey&quot;: &quot;Query&quot;,<br />\n\t\t\t&quot;InputValue&quot;: &quot;((DocType.DocTypeId = &#39;RetailOrder&#39;) or (OrderLine.MinFulfillmentStatusId IN(&#39;1500&#39;) and DocType.DocTypeId = &#39;CustomerOrder&#39;) or&nbsp;(OrderLine.ShippingMethodId = &#39;Ground&#39; and DocType.DocTypeId = &#39;CustomerOrder&#39;))&quot;</p>\n\n\t\t\t<p>}</p>\n\t\t\t</td>\n\t\t\t<td style=\"width: 308px;\">\n\t\t\t<p>Reallocation will run for both Customer and Retail Orders.</p>\n\n\t\t\t<ul>\n\t\t\t\t<li>For Retail Orders - All&nbsp; quantities in Open, Back ordered, and Allocated status is considered for reallocation.&nbsp;</li>\n\t\t\t\t<li>For Customer Orders - All quantities in Back ordered status is considered for reallocation.</li>\n\t\t\t\t<li>Customer Order line ( Back ordered and Allocated quantities) with Shipping method as Ground is considered for reallocation.</li>\n\t\t\t</ul>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>&nbsp;</p>\n\n<div class=\"warning\">\n<p><strong>Note</strong>: If status is not provided in the query then system considers only open and back ordered quantities for batch allocation.</p>\n</div>\n</div></div></p>\r\n\r\n<div style=\"left: 15px; top: 629.51px;\">&nbsp;</div>\r\n\r\n<div style=\"left: 15px; top: 629.51px;\"><strong>Note</strong>: Reallocation is different from batch allocation in the following aspects:&nbsp;</div>\r\n\r\n<ul>\r\n\t<li style=\"left: 15px; top: 629.51px;\">Reallocation will deallocate the order first before trying to allocate them</li>\r\n\t<li style=\"left: 15px; top: 629.51px;\">Reallocation can select orders with order lines in open, backorder or allocated status. Since&nbsp;Batch allocation does not deallocate, it cannot act on allocated order lines</li>\r\n</ul>\r\n\r\n<div style=\"left: 15px; top: 629.51px;\">&nbsp;</div>\r\n\r\n<div id=\"\" style=\"left: 15px; top: 629.51px;\">Reallocation can only be triggered by this scheduler, and the&nbsp;event based reallocation is not currently supported.</div>\r\n\r\n<div style=\"left: 15px; top: 629.51px;\">&nbsp;</div>\r\n\r\n<div id=\"\" style=\"left: 15px; top: 629.51px;\">\r\n<h4><a name=\"mod-queue-based-reallocation-for-improved-performance\" id=\"mod-queue-based-reallocation-for-improved-performance\"></a>Mod Queue-Based Reallocation for Improved Performance</h4>\r\n\r\n<p>Using the &quot;mod queue&quot; based reallocation is not mandatory and depends on&nbsp;the volume of orders going through reallocation. The &quot;Mod queue&quot; based reallocation process has the exact same functionalities and only provides technical enhancements for reallocation runs with a large volume&nbsp;of orders.</p>\r\n\r\n<p>The need for this feature&nbsp;is driven by the time it takes to complete the reallocation job and not only the amount of orders going through reallocation. The length of the reallocation is also influenced by other parameters some of which being: the presence of extensions and integrations in the allocation process, the number of locations that are being considered for allocation, the volume of inventory records to sort through, the complexity of the allocation rules, and so on. In case of doubt if you need to enable this feature or not, please contact Manhattan Associate support.&nbsp;</p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-3\" class=\"toggle-content\"><span class=\"toggle-title\">Mod queue based reallocation technical explanation</span></a></p><div id=\"tg-3\"><p>In non mod queue based reallocation, the system will select all the orders to reallocate and will process them in one message in the reallocation queue. With a large volume of orders this message can be massive and it can take a long time to deallocate all the order and allocate them.&nbsp;</p>\n\n<p>Because of the qproc design, if that message takes too long to process, the qproc will automatically restart and will start the processing of the message from scratch. After the restart, it is most likely that the message takes the same time to process and leads to another restart before the process starts all over again.&nbsp;</p>\n\n<p>To avoid this, mod queue based reallocation will not process all the orders to reallocate in a single transaction but will instead:&nbsp;</p>\n\n<ul>\n\t<li>Group the orders that have a similar set of items together to form what is called &quot;item groups&quot;&nbsp;</li>\n\t<li>After the deallocation of all the orders, instead of trying to reallocate immediately, it will post one message per order in &quot;mod queues&quot;&nbsp;</li>\n\t<li>One mod queue will contain all the orders of an item group. However, because the number of mod queues is limited, multiple item groups can be posted to the same mod queue.&nbsp;</li>\n\t<li>Instead of consuming one message with multiple orders, the system will have to consume 1 order per message. This removes the risk of having the qprocs restarted during the consumption of the message.&nbsp;</li>\n</ul>\n\n<p>Item grouping will be done with the same logic as used in the batch allocation process and will have the same limitations around hot SKUs. If an item is present in a large number of orders (promotional item for example), all these orders will be grouped together in one item group. This could lead to items groups being very different in size. However, even with this limitation, using mod queues will split the orders to have only one order per message even if they are all posted to the same queue.&nbsp;</p>\n\n<p><strong>Note</strong>: Prioritization will be respected within an item group. However, just as batch allocation, the asynchronous nature of the process may lead to some lower priority orders to use a location capacity before the higher priority orders.</p>\n</div></div></p>\r\n\r\n<p>Mod queue based reallocation will not call the normal batch allocation but will use multiple queues to process groups of orders simultaneously. Orders will be grouped by their item contents so that the orders with similar set of items will be allocated together.&nbsp;</p>\r\n\r\n<p>Configuring mod queue based reallocation starts with configuring the reallocation job as explained above. Once it is done, there are a few additional steps that needs to be performed.&nbsp;</p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-4\" class=\"toggle-content\"><span class=\"toggle-title\">Mod queue based reallocation configuration - Queue Configuration</span></a></p><div id=\"tg-4\"><p>1. Make sure the feature flag&nbsp;<strong>OM-40710#2020-03 </strong>is enabled. Contact a member of Manhattan Associates to confirm this.&nbsp;</p>\n\n<p>2. Check if the below message types are configured in your active profiles.&nbsp;</p>\n\n<p>For memory, the message types belong to the below profile purposes:&nbsp;</p>\n\n<table border=\"1\" data-autosize=\"false\" data-layout=\"default\" data-number-column=\"false\" data-pm-slice=\"1 1 []\" style=\"width: 500px;\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th scope=\"col\">\n\t\t\t<p style=\"text-align: center;\"><strong>Entity</strong></p>\n\t\t\t</th>\n\t\t\t<th scope=\"col\">\n\t\t\t<p style=\"text-align: center;\"><strong>Profile purpose</strong></p>\n\t\t\t</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>InBoundMessageType</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>ord::messaging</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>OutBoundMessageType</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>ord::messaging</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p>ExtPointToMessageType</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p>ord::processDefinition</p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>&nbsp;</p>\n\n<table border=\"1\" data-autosize=\"false\" data-layout=\"default\" data-number-column=\"false\" data-pm-slice=\"1 1 []\" style=\"width: 700px;\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th scope=\"col\">\n\t\t\t<p><strong>Create OutboundMessageTypes: {{url}}/order/api/ServiceDefinition/outBoundMessageType/import</strong></p>\n\t\t\t</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<pre>\n<code>{\n  &quot;data&quot;: [\n    {\n      &quot;MessageType&quot;: &quot;ReAllocationNoPriorityMSGType&quot;,\n      &quot;Transactional&quot;: true,\n      &quot;PersistMessageToMsgStore&quot;: false,\n      &quot;OutBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;queue.ReAllocationNoPriorityMSGType&quot;\n      }\n    },\n    {\n      &quot;MessageType&quot;: &quot;ModBasedMSGType1&quot;,\n      &quot;Transactional&quot;: true,\n      &quot;PersistMessageToMsgStore&quot;: false,\n      &quot;OutBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;queue.ModBasedMSGType1&quot;\n      }\n    },\n    {\n      &quot;MessageType&quot;: &quot;ModBasedMSGType2&quot;,\n      &quot;Transactional&quot;: true,\n      &quot;PersistMessageToMsgStore&quot;: false,\n      &quot;OutBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;queue.ModBasedMSGType2&quot;\n      }\n    },\n    {\n      &quot;MessageType&quot;: &quot;ModBasedMSGType3&quot;,\n      &quot;Transactional&quot;: true,\n      &quot;PersistMessageToMsgStore&quot;: false,\n      &quot;OutBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;queue.ModBasedMSGType3&quot;\n      }\n    },\n    {\n      &quot;MessageType&quot;: &quot;ModBasedMSGType4&quot;,\n      &quot;Transactional&quot;: true,\n      &quot;PersistMessageToMsgStore&quot;: false,\n      &quot;OutBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;queue.ModBasedMSGType4&quot;\n      }\n    },\n    {\n      &quot;MessageType&quot;: &quot;ModBasedMSGType5&quot;,\n      &quot;Transactional&quot;: true,\n      &quot;PersistMessageToMsgStore&quot;: false,\n      &quot;OutBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;queue.ModBasedMSGType5&quot;\n      }\n    },\n    {\n      &quot;MessageType&quot;: &quot;ModBasedMSGType6&quot;,\n      &quot;Transactional&quot;: true,\n      &quot;PersistMessageToMsgStore&quot;: false,\n      &quot;OutBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;queue.ModBasedMSGType6&quot;\n      }\n    },\n    {\n      &quot;MessageType&quot;: &quot;ModBasedMSGType7&quot;,\n      &quot;Transactional&quot;: true,\n      &quot;PersistMessageToMsgStore&quot;: false,\n      &quot;OutBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;queue.ModBasedMSGType7&quot;\n      }\n    },\n    {\n      &quot;MessageType&quot;: &quot;ModBasedMSGType8&quot;,\n      &quot;Transactional&quot;: true,\n      &quot;PersistMessageToMsgStore&quot;: false,\n      &quot;OutBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;queue.ModBasedMSGType8&quot;\n      }\n    },\n    {\n      &quot;MessageType&quot;: &quot;ModBasedMSGType9&quot;,\n      &quot;Transactional&quot;: true,\n      &quot;PersistMessageToMsgStore&quot;: false,\n      &quot;OutBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;queue.ModBasedMSGType9&quot;\n      }\n    },\n    {\n      &quot;MessageType&quot;: &quot;ModBasedMSGType10&quot;,\n      &quot;Transactional&quot;: true,\n      &quot;PersistMessageToMsgStore&quot;: false,\n      &quot;OutBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;queue.ModBasedMSGType10&quot;\n      }\n    },\n    {\n      &quot;MessageType&quot;: &quot;ModBasedMSGType&quot;,\n      &quot;Transactional&quot;: true,\n      &quot;PersistMessageToMsgStore&quot;: false,\n      &quot;OutBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;queue.ModBasedMSGType&quot;\n      }\n    }\n  ]\n}</code>\n</pre>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>&nbsp;</p>\n\n<table border=\"1\" data-autosize=\"false\" data-layout=\"wide\" data-number-column=\"false\" data-pm-slice=\"1 1 []\" style=\"width: 700px;\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th scope=\"col\">\n\t\t\t<p><strong>Create InBoundMessageTypes: {{url}}/order/api/ServiceDefinition/inBoundMessageType/import</strong></p>\n\t\t\t</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<pre>\n<code>{\n  &quot;data&quot;: [\n    {\n      &quot;MessageType&quot;: &quot;ModBasedMSGType1&quot;,\n      &quot;NoOfConsumer&quot;: 1,\n      &quot;MinNoOfConsumer&quot;: 0,\n      &quot;Idempotent&quot;: true,\n      &quot;ExternalIntegrationRequired&quot;: false,\n      &quot;MaxDesiredInstances&quot;: 1,\n      &quot;ScaleUpTimeWindow&quot;: 10,\n      &quot;ScaleDownTimeWindow&quot;: 20,\n      &quot;Description&quot;: &quot;Mod Based queue with single threaded listener.&quot;,\n      &quot;ServiceId&quot;: &quot;ModBasedGenericService&quot;,\n      &quot;InBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;queue.ModBasedMSGType1&quot;\n      }\n    },\n    {\n      &quot;MessageType&quot;: &quot;ModBasedMSGType2&quot;,\n      &quot;NoOfConsumer&quot;: 1,\n      &quot;MinNoOfConsumer&quot;: 0,\n      &quot;Idempotent&quot;: true,\n      &quot;ExternalIntegrationRequired&quot;: false,\n      &quot;MaxDesiredInstances&quot;: 1,\n      &quot;ScaleUpTimeWindow&quot;: 10,\n      &quot;ScaleDownTimeWindow&quot;: 20,\n      &quot;Description&quot;: &quot;Mod Based queue with single threaded listener.&quot;,\n      &quot;ServiceId&quot;: &quot;ModBasedGenericService&quot;,\n      &quot;InBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;queue.ModBasedMSGType2&quot;\n      }\n    },\n    {\n      &quot;MessageType&quot;: &quot;ModBasedMSGType3&quot;,\n      &quot;NoOfConsumer&quot;: 1,\n      &quot;MinNoOfConsumer&quot;: 0,\n      &quot;Idempotent&quot;: true,\n      &quot;ExternalIntegrationRequired&quot;: false,\n      &quot;MaxDesiredInstances&quot;: 1,\n      &quot;ScaleUpTimeWindow&quot;: 10,\n      &quot;ScaleDownTimeWindow&quot;: 20,\n      &quot;Description&quot;: &quot;Mod Based queue with single threaded listener.&quot;,\n      &quot;ServiceId&quot;: &quot;ModBasedGenericService&quot;,\n      &quot;InBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;queue.ModBasedMSGType3&quot;\n      }\n    },\n    {\n      &quot;MessageType&quot;: &quot;ModBasedMSGType4&quot;,\n      &quot;NoOfConsumer&quot;: 1,\n      &quot;MinNoOfConsumer&quot;: 0,\n      &quot;Idempotent&quot;: true,\n      &quot;ExternalIntegrationRequired&quot;: false,\n      &quot;MaxDesiredInstances&quot;: 1,\n      &quot;ScaleUpTimeWindow&quot;: 10,\n      &quot;ScaleDownTimeWindow&quot;: 20,\n      &quot;Description&quot;: &quot;Mod Based queue with single threaded listener.&quot;,\n      &quot;ServiceId&quot;: &quot;ModBasedGenericService&quot;,\n      &quot;InBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;queue.ModBasedMSGType4&quot;\n      }\n    },\n    {\n      &quot;MessageType&quot;: &quot;ModBasedMSGType5&quot;,\n      &quot;NoOfConsumer&quot;: 1,\n      &quot;MinNoOfConsumer&quot;: 0,\n      &quot;Idempotent&quot;: true,\n      &quot;ExternalIntegrationRequired&quot;: false,\n      &quot;MaxDesiredInstances&quot;: 1,\n      &quot;ScaleUpTimeWindow&quot;: 10,\n      &quot;ScaleDownTimeWindow&quot;: 20,\n      &quot;Description&quot;: &quot;Mod Based queue with single threaded listener.&quot;,\n      &quot;ServiceId&quot;: &quot;ModBasedGenericService&quot;,\n      &quot;InBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;queue.ModBasedMSGType5&quot;\n      }\n    },\n    {\n      &quot;MessageType&quot;: &quot;ModBasedMSGType6&quot;,\n      &quot;NoOfConsumer&quot;: 1,\n      &quot;MinNoOfConsumer&quot;: 0,\n      &quot;Idempotent&quot;: true,\n      &quot;ExternalIntegrationRequired&quot;: false,\n      &quot;MaxDesiredInstances&quot;: 1,\n      &quot;ScaleUpTimeWindow&quot;: 10,\n      &quot;ScaleDownTimeWindow&quot;: 20,\n      &quot;Description&quot;: &quot;Mod Based queue with single threaded listener.&quot;,\n      &quot;ServiceId&quot;: &quot;ModBasedGenericService&quot;,\n      &quot;InBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;queue.ModBasedMSGType6&quot;\n      }\n    },\n    {\n      &quot;MessageType&quot;: &quot;ModBasedMSGType7&quot;,\n      &quot;NoOfConsumer&quot;: 1,\n      &quot;MinNoOfConsumer&quot;: 0,\n      &quot;Idempotent&quot;: true,\n      &quot;ExternalIntegrationRequired&quot;: false,\n      &quot;MaxDesiredInstances&quot;: 1,\n      &quot;ScaleUpTimeWindow&quot;: 10,\n      &quot;ScaleDownTimeWindow&quot;: 20,\n      &quot;Description&quot;: &quot;Mod Based queue with single threaded listener.&quot;,\n      &quot;ServiceId&quot;: &quot;ModBasedGenericService&quot;,\n      &quot;InBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;queue.ModBasedMSGType7&quot;\n      }\n    },\n    {\n      &quot;MessageType&quot;: &quot;ModBasedMSGType8&quot;,\n      &quot;NoOfConsumer&quot;: 1,\n      &quot;MinNoOfConsumer&quot;: 0,\n      &quot;Idempotent&quot;: true,\n      &quot;ExternalIntegrationRequired&quot;: false,\n      &quot;MaxDesiredInstances&quot;: 1,\n      &quot;ScaleUpTimeWindow&quot;: 10,\n      &quot;ScaleDownTimeWindow&quot;: 20,\n      &quot;Description&quot;: &quot;Mod Based queue with single threaded listener.&quot;,\n      &quot;ServiceId&quot;: &quot;ModBasedGenericService&quot;,\n      &quot;InBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;queue.ModBasedMSGType8&quot;\n      }\n    },\n    {\n      &quot;MessageType&quot;: &quot;ModBasedMSGType9&quot;,\n      &quot;NoOfConsumer&quot;: 1,\n      &quot;MinNoOfConsumer&quot;: 0,\n      &quot;Idempotent&quot;: true,\n      &quot;ExternalIntegrationRequired&quot;: false,\n      &quot;MaxDesiredInstances&quot;: 1,\n      &quot;ScaleUpTimeWindow&quot;: 10,\n      &quot;ScaleDownTimeWindow&quot;: 20,\n      &quot;Description&quot;: &quot;Mod Based queue with single threaded listener.&quot;,\n      &quot;ServiceId&quot;: &quot;ModBasedGenericService&quot;,\n      &quot;InBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;queue.ModBasedMSGType9&quot;\n      }\n    },\n    {\n      &quot;MessageType&quot;: &quot;ModBasedMSGType10&quot;,\n      &quot;NoOfConsumer&quot;: 1,\n      &quot;MinNoOfConsumer&quot;: 0,\n      &quot;Idempotent&quot;: true,\n      &quot;ExternalIntegrationRequired&quot;: false,\n      &quot;MaxDesiredInstances&quot;: 1,\n      &quot;ScaleUpTimeWindow&quot;: 10,\n      &quot;ScaleDownTimeWindow&quot;: 20,\n      &quot;Description&quot;: &quot;Mod Based queue with single threaded listener.&quot;,\n      &quot;ServiceId&quot;: &quot;ModBasedGenericService&quot;,\n      &quot;InBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;queue.ModBasedMSGType10&quot;\n      }\n    },\n    {\n      &quot;MessageType&quot;: &quot;ModBasedMSGType&quot;,\n      &quot;NoOfConsumer&quot;: 0,\n      &quot;MinNoOfConsumer&quot;: 1,\n      &quot;Idempotent&quot;: true,\n      &quot;ExternalIntegrationRequired&quot;: false,\n      &quot;MaxDesiredInstances&quot;: 1,\n      &quot;ScaleUpTimeWindow&quot;: 10,\n      &quot;ScaleDownTimeWindow&quot;: 20,\n      &quot;Description&quot;: &quot;Mod Based queue with single threaded listener.&quot;,\n      &quot;ServiceId&quot;: &quot;ModBasedGenericService&quot;,\n      &quot;InBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;queue.ModBasedMSGType&quot;\n      }\n    },\n    {\n      &quot;MessageType&quot;: &quot;ReAllocationNoPriorityMSGType&quot;,\n      &quot;NoOfConsumer&quot;: 10,\n      &quot;MinNoOfConsumer&quot;: 1,\n      &quot;Idempotent&quot;: true,\n      &quot;ExternalIntegrationRequired&quot;: false,\n      &quot;MaxDesiredInstances&quot;: 6,\n      &quot;ScaleUpTimeWindow&quot;: 10,\n      &quot;ScaleDownTimeWindow&quot;: 20,\n      &quot;Description&quot;: &quot;Queue for order lines with no priority&quot;,\n      &quot;ServiceId&quot;: &quot;ModBasedGenericService&quot;,\n      &quot;InBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;queue.ReAllocationNoPriorityMSGType&quot;\n      }\n    }\n  ]\n}</code>\n</pre>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>&nbsp;</p>\n\n<table border=\"1\" data-autosize=\"false\" data-layout=\"default\" data-number-column=\"false\" data-pm-slice=\"1 1 []\" style=\"width: 700px;\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th scope=\"col\">\n\t\t\t<p><strong>Create ExtPointToMessageType: {{url}}/order/api/ServiceDefinition/extPointToMessageType/import</strong></p>\n\t\t\t</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<pre>\n<code>{\n  &quot;data&quot;: [\n    {\n      &quot;ExtensionPointId&quot;: &quot;Order:Order:Event:ModBasedMSGType1&quot;,\n      &quot;MessageType&quot;: &quot;ModBasedMSGType1&quot;\n    },\n    {\n      &quot;ExtensionPointId&quot;: &quot;Order:Order:Event:ModBasedMSGType2&quot;,\n      &quot;MessageType&quot;: &quot;ModBasedMSGType2&quot;\n    },\n    {\n      &quot;ExtensionPointId&quot;: &quot;Order:Order:Event:ModBasedMSGType3&quot;,\n      &quot;MessageType&quot;: &quot;ModBasedMSGType3&quot;\n    },\n    {\n      &quot;ExtensionPointId&quot;: &quot;Order:Order:Event:ModBasedMSGType4&quot;,\n      &quot;MessageType&quot;: &quot;ModBasedMSGType4&quot;\n    },\n    {\n      &quot;ExtensionPointId&quot;: &quot;Order:Order:Event:ModBasedMSGType5&quot;,\n      &quot;MessageType&quot;: &quot;ModBasedMSGType5&quot;\n    },\n    {\n      &quot;ExtensionPointId&quot;: &quot;Order:Order:Event:ModBasedMSGType6&quot;,\n      &quot;MessageType&quot;: &quot;ModBasedMSGType6&quot;\n    },\n    {\n      &quot;ExtensionPointId&quot;: &quot;Order:Order:Event:ModBasedMSGType7&quot;,\n      &quot;MessageType&quot;: &quot;ModBasedMSGType7&quot;\n    },\n    {\n      &quot;ExtensionPointId&quot;: &quot;Order:Order:Event:ModBasedMSGType8&quot;,\n      &quot;MessageType&quot;: &quot;ModBasedMSGType8&quot;\n    },\n    {\n      &quot;ExtensionPointId&quot;: &quot;Order:Order:Event:ModBasedMSGType9&quot;,\n      &quot;MessageType&quot;: &quot;ModBasedMSGType9&quot;\n    },\n    {\n      &quot;ExtensionPointId&quot;: &quot;Order:Order:Event:ModBasedMSGType10&quot;,\n      &quot;MessageType&quot;: &quot;ModBasedMSGType10&quot;\n    },\n    {\n      &quot;ExtensionPointId&quot;: &quot;Order:Order:Event:ModBasedMSGType&quot;,\n      &quot;MessageType&quot;: &quot;ModBasedMSGType&quot;\n    },\n    {\n      &quot;ExtensionPointId&quot;: &quot;Order:Order:Event:ReAllocationNoPriorityMSGType&quot;,\n      &quot;MessageType&quot;: &quot;ReAllocationNoPriorityMSGType&quot;\n    }\n  ]\n}</code>\n</pre>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>&nbsp;</p>\n</div></div></p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-5\" class=\"toggle-content\"><span class=\"toggle-title\">Mod queue based reallocation configuration - Job configuration</span></a></p><div id=\"tg-5\"><table border=\"1\" data-autosize=\"false\" data-layout=\"default\" data-number-column=\"false\" data-pm-slice=\"1 1 []\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th scope=\"col\" style=\"width: 325px;\">\n\t\t\t<p style=\"text-align: center;\"><strong>Reallocation Job schedule new parameters (optional parameters)</strong></p>\n\t\t\t</th>\n\t\t\t<th scope=\"col\" style=\"width: 502px;\">\n\t\t\t<p style=\"text-align: center;\"><strong>Description</strong></p>\n\t\t\t</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"width: 322px;\">\n\t\t\t<p>NumberOfModQueues</p>\n\t\t\t</td>\n\t\t\t<td style=\"width: 499px;\">\n\t\t\t<p>When this feature is activated, there is 20 extension points and 10 mod based queues. So, it is possible to create 10 more extra Mod based queues if required by creating seedData in outBoundMessage, inBoundMessage and extPointToMSGType and pass NumberOfModQueues which they want for reallocation job to use as below in jobParameter of respective reallocation jobSchedule.</p>\n\n\t\t\t<p>{<br />\n\t\t\t&quot;InputValue&quot;: &quot;10&quot;,<br />\n\t\t\t&quot;InputKey&quot;: &quot;NumberOfModQueues&quot;<br />\n\t\t\t}<br />\n\t\t\tMake sure when InputValue is greater than 10, those many extra mod based queues are created.</p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<ul>\n\t<li>Default number of mod queues to use for allocation is configured to 5. User can change this configuration to maximum 20. Increasing this value will be useful when we have more number of itemGroups to process and to process them faster.</li>\n\t<li>If we have 50 itemGroups and 5 default no of mod queues defined, then each mod queue can process orders from 10 itemGroups.</li>\n\t<li>Be careful to the number of inventory and promising component instances.</li>\n\t<li>For 5 (default) mod queues, there should be at least 3 promising and inventory REST or ALL containers.</li>\n</ul>\n</div></div></p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-6\" class=\"toggle-content\"><span class=\"toggle-title\">Mod queue based reallocation configuration - How to create new Mod base queues</span></a></p><div id=\"tg-6\"><p data-pm-slice=\"1 1 []\"><strong>Maximum number of ModBasedQueues supported is 20.</strong><strong> </strong></p>\n\n<table border=\"1\" data-autosize=\"false\" data-layout=\"default\" data-number-column=\"false\" data-pm-slice=\"1 1 []\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p><strong>Create OutBoundMessageType</strong> &rarr; User can create queues by following naming convention for MessageType as ModBasedMSGType11, ModBasedMSGType12.......ModBasedMSGType20and QueueName as queue.ModBasedMSGType11, queue.ModBasedMSGType12........queue.ModBasedMSGType20</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><strong>{{url}}/order/api/ServiceDefinition/outBoundMessageType/save</strong></p>\n\n\t\t\t<pre>\n<code>{\n  &quot;MessageType&quot;: &quot;ModBasedMSGType11&quot;,\n  &quot;Transactional&quot;: true,\n  &quot;PersistMessageToMsgStore&quot;: false,\n  &quot;OutBoundQueues&quot;: {\n    &quot;QueueName&quot;: &quot;queue.ModBasedMSGType11&quot;\n  }\n}</code></pre>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p><strong>Create InBoundMessageType. &rarr; </strong>User can create listeners by following naming convention for MessageType as ModBasedMSGType11, ModBasedMSGType12.......ModBasedMSGType20 and QueueName as queue.ModBasedMSGType11, queue.ModBasedMSGType12........queue.ModBasedMSGType20</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><strong>{{url}}/order/api/ServiceDefinition/inBoundMessageType/save</strong></p>\n\n\t\t\t<pre>\n<code>{\n  &quot;MessageType&quot;: &quot;ModBasedMSGType11&quot;,\n  &quot;NoOfConsumer&quot;: 1,\n  &quot;MinNoOfConsumer&quot;: 0,\n  &quot;Idempotent&quot;: true,\n  &quot;ExternalIntegrationRequired&quot;: false,\n  &quot;MaxDesiredInstances&quot;: 1,\n  &quot;ScaleUpTimeWindow&quot;: 10,\n  &quot;ScaleDownTimeWindow&quot;: 20,\n  &quot;Description&quot;: &quot;Mod Based queue with single threaded listener.&quot;,\n  &quot;ServiceId&quot;: &quot;ModBasedGenericService&quot;,\n  &quot;InBoundQueues&quot;: {\n    &quot;QueueName&quot;: &quot;queue.ModBasedMSGType11&quot;\n  }\n}</code></pre>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<p><strong>Create ExtPointToMsgType &rarr; </strong>Naming convention to be followed for ExtensionPointId is</p>\n\n\t\t\t<p>Order:Order:Event:{messageType}</p>\n\n\t\t\t<p>where messageType can have values from ModBasedMSGType11, ModBasedMSGType12.....ModBasedMSGType20</p>\n\n\t\t\t<p>Naming convention for MessageType is ModBasedMSGType11, ModBasedMSGType12.....ModBasedMSGType20</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><strong>{{url}}/order/api/ServiceDefinition/extPointToMessageType/save</strong></p>\n\n\t\t\t<pre>\n<code>{\n  &quot;ExtensionPointId&quot;: &quot;Order:Order:Event:ModBasedMSGType11&quot;,\n  &quot;MessageType&quot;: &quot;ModBasedMSGType11&quot;\n}</code></pre>\n\n\t\t\t<p>&nbsp;</p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div></div></p>\r\n\r\n<h3>&nbsp;</h3>\r\n</div>\r\n\r\n\t  </div>\r\n </div>\r\n <div id=\"ui-page-fb-wrap\"></div>\r\n <div class=\"hiq-footer-wrap\">\r\n    \r\n                \r\n  </div>\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n",
  "content_length": 42049,
  "scraped_at": "2025-08-09T21:57:13.848688",
  "content_clean": "Home ››Manhattan Active® Omni››Order Management››Process & Configuration Guides››Order Processing››Order Fulfillment››Order Allocation››Batch ››Reallocation Reallocation Previous I How Reallocation WorksProcess FlowConfigurationEnabling ReallocationMod Queue-Based Reallocation for Improved Performance Before you begin: If your use case can be solved by continuous allocation, it is recommended to use it instead of the reallocation defined below. In general, re-allocation job should only run once a day. How Reallocation Works Reallocation is the process of reshuffling a set of orders prior to releasing for fulfillment by deallocating them (if needed) and allocating them using the batch allocation logic. This helps the higher priority orders to be allocated before allocating the lower priority orders. Also, helps to find out if there are any better supplies that can fulfill the priority orders. Reallocation enables the business to control which orders should get which inventory. There are multiple use cases to prioritize and reallocate orders: Direct to Consumer Orders over Wholesale, and Wholesale over Replenishment Replenishment Orders by Priority B2B/Wholesale Orders by Customer Based on Latest Ship Date / RDD vs First In First Out Allocate unallocated and backordered orders Allocate priority orders which are allocated against future inventory when new on hand inventory is available Reallocate orders to find a better location/supply based on the fulfillment optimization rules Note: It is important to note that the reallocation process is not aimed to be used only for transferring allocation from future to onhand inventory when the future inventory is received. This should be managed by Transfer allocation. Allocation to on hand inventory of order lines previously allocated to future inventory can happen during the reallocation process but it is not advised to use reallocation in place of transfer allocation Reallocation can be scheduled to run at a specific time interval and query can be defined based on order and order line attributes to filter orders for reallocation. Any order containing one order line selected by the scheduler will be selected for re-allocation and will either be fully or partially reallocated based on the reallocation scheduler configuration (see configuration section at the end of this guide for more information). If needed the reallocation job will deallocate the orders/order lines that are already allocated before invoking batch allocation process to prioritize the orders for allocation based on effective rank. Reallocation - Example 1Reallocate job is scheduled to pick up all Replenishment Orders (Open, Allocated, Back Ordered) and Customer Orders (Back ordered). Orders are as below. Order Order type Status Item Quantity Rank CO 1 Customer Order Allocated SKU A 5 1001 CO 2 Customer Order Back Ordered SKU A 5 1002 CO 3 Customer Order Released SKU A 5 1003 SO 1 Replenishment Order Open SKU A 10 2003 SO 2 Replenishment Order Allocated SKU A 10 2002 SO 3 Replenishment Order Back Ordered SKU A 10 2001 SO 4 Replenishment Order Released SKU A 10 2004 When Reallocation job runs, system picks up CO 2, SO 1, SO 2 and SO 3 for reallocation. Since SO 2 is already allocated, SO 2 is de-allocated first. Then, these orders are submitted for allocation based on the effective rank. In the below example, CO 2 is sent for allocation first followed by SO 3, SO 2 and SO 1 Process Flow Refer to Batch Allocation logic and How Allocation works for more details Configuration Enabling Reallocation Reallocation is configured by setting up a scheduler. The scheduler configuration and its multiple parameters are described below Reallocation configurationThe reallocation job type is: \"reallocationJob\" Reallocation Job schedule parameters Description Query Logical selection of order and order line attributes that will select the orders to be processed by the reallocation job. In the below example, the job will select all customer orders that have at least one line in backordered status (1500) and that have not been updated in the last 10 minutes. (OrderLine.MinFulfillmentStatusId IN('1500') and DocType.DocTypeId = 'CustomerOrder' and OrderLine.UpdatedTimestamp < CurrentTime(-10m) ) It is advised that before setting the reallocation job, the query is tested with a /search order API. Also note that quering on the grand child object is not supported. See below for more sample queries Reallocate Boolean flag that can be true or false. If it is set to true, the system will deallocate all the order lines that are part of the orders selected by the above query as long as they are not released. This can be used to make sure the orders are allocated from the optimal location by considering all the order lines in the reallocation process. If it is set to false, the order lines already allocated but part of the orders selected by the above query will not be deallocated and considered in the reallocation process. This can be used for two purposes: have the same logic as batch allocation or making sure that the already allocated inventory is not deallocated in case there is a risk if it gets stolen. However, in this case, there is a risk of order not getting allocated from the optimal location and would lead to split shipment. ReasonId (optional parameter) If an order is reallocated by the batch scheduler, within the QuantityDetail of the order, the system logs a Reason and a ReasonType to indicate what action caused a reallocation. If the active profile includes \"Reason: ReAllocation\", then this reason will be logged within the quantity detail when a ReAllocation scheduler reallocates an order (along with \"ReasonTypeId: ReAllocation\"). If the active profile does not include \"Reason: Reallocation\" then the reason logged in the quantity detail is \"DeAllocation\" and the ReasonTypeId is \"InventoryDrop\". The job parameter of the ReAllocate scheduler must have the ReasonId set to \"ReAllocation\" in order for the reason to be logged within the quantity detail. An example of reallocation scheduler Json configuration can be found below. This scheduler belongs to the profile purpose ord::batch in the order component. { \"JobScheduleId\": \"reallocationJob\", \"JobTypeId\": \"reallocationJob\", \"CronExpression\": \"0 0 0/4 1/1 * ? *\", \"StartDelay\": 1000, \"RepeatInterval\": 20000, \"TriggerKey\": \"reallocationJobTrigger\", \"JobParameters\": [ { \"InputKey\": \"Query\", \"InputValue\": \"(OrderLine.MinFulfillmentStatusId IN('1500') and DocType.DocTypeId = 'CustomerOrder' and OrderLine.UpdatedTimestamp < CurrentTime(-10m) )\" }, { \"InputKey\": \"Reallocate\", \"InputValue\": \"true\" }, { \"InputKey\": \"ReasonId\", \"InputValue\": \"ReAllocation\" } ] } Sample reallocation job queries: Level Attribute Sample Query Translation of the Sample Query in English Order Doc Type { \"InputKey\": \"Query\", \"InputValue\": \"((DocType.DocTypeId = 'RetailOrder'))\" } Reallocation will run only for Retail Orders having max fulfillment status less than Partially Released status. It considers all quantities in Open, Back ordered and Allocated status for reallocation. Order Order Line Doc Type Min Fulfillment Status { \"InputKey\": \"Query\", \"InputValue\": \"((DocType.DocTypeId = 'RetailOrder') or (OrderLine.MinFulfillmentStatusId IN('1500') and DocType.DocTypeId = 'CustomerOrder'))\" } Reallocation will run for both Customer and Retail Orders. For Retail Orders - All quantities in Open, Back ordered, and Allocated status is considered for reallocation. For Customer Orders - Only quantities in Back ordered status is considered for reallocation. Customer Order quantities which are allocated are not considered for reallocation Order Order Line Shipping Method { \"InputKey\": \"Query\", \"InputValue\": \"((DocType.DocTypeId = 'RetailOrder') or (OrderLine.MinFulfillmentStatusId IN('1500') and DocType.DocTypeId = 'CustomerOrder') or (OrderLine.ShippingMethodId = 'Ground' and DocType.DocTypeId = 'CustomerOrder'))\" } Reallocation will run for both Customer and Retail Orders. For Retail Orders - All  quantities in Open, Back ordered, and Allocated status is considered for reallocation. For Customer Orders - All quantities in Back ordered status is considered for reallocation. Customer Order line ( Back ordered and Allocated quantities) with Shipping method as Ground is considered for reallocation. Note: If status is not provided in the query then system considers only open and back ordered quantities for batch allocation. Note: Reallocation is different from batch allocation in the following aspects: Reallocation will deallocate the order first before trying to allocate them Reallocation can select orders with order lines in open, backorder or allocated status. Since Batch allocation does not deallocate, it cannot act on allocated order lines Reallocation can only be triggered by this scheduler, and the event based reallocation is not currently supported. Mod Queue-Based Reallocation for Improved Performance Using the \"mod queue\" based reallocation is not mandatory and depends on the volume of orders going through reallocation. The \"Mod queue\" based reallocation process has the exact same functionalities and only provides technical enhancements for reallocation runs with a large volume of orders. The need for this feature is driven by the time it takes to complete the reallocation job and not only the amount of orders going through reallocation. The length of the reallocation is also influenced by other parameters some of which being: the presence of extensions and integrations in the allocation process, the number of locations that are being considered for allocation, the volume of inventory records to sort through, the complexity of the allocation rules, and so on. In case of doubt if you need to enable this feature or not, please contact Manhattan Associate support. Mod queue based reallocation technical explanationIn non mod queue based reallocation, the system will select all the orders to reallocate and will process them in one message in the reallocation queue. With a large volume of orders this message can be massive and it can take a long time to deallocate all the order and allocate them. Because of the qproc design, if that message takes too long to process, the qproc will automatically restart and will start the processing of the message from scratch. After the restart, it is most likely that the message takes the same time to process and leads to another restart before the process starts all over again. To avoid this, mod queue based reallocation will not process all the orders to reallocate in a single transaction but will instead: Group the orders that have a similar set of items together to form what is called \"item groups\" After the deallocation of all the orders, instead of trying to reallocate immediately, it will post one message per order in \"mod queues\" One mod queue will contain all the orders of an item group. However, because the number of mod queues is limited, multiple item groups can be posted to the same mod queue. Instead of consuming one message with multiple orders, the system will have to consume 1 order per message. This removes the risk of having the qprocs restarted during the consumption of the message. Item grouping will be done with the same logic as used in the batch allocation process and will have the same limitations around hot SKUs. If an item is present in a large number of orders (promotional item for example), all these orders will be grouped together in one item group. This could lead to items groups being very different in size. However, even with this limitation, using mod queues will split the orders to have only one order per message even if they are all posted to the same queue. Note: Prioritization will be respected within an item group. However, just as batch allocation, the asynchronous nature of the process may lead to some lower priority orders to use a location capacity before the higher priority orders. Mod queue based reallocation will not call the normal batch allocation but will use multiple queues to process groups of orders simultaneously. Orders will be grouped by their item contents so that the orders with similar set of items will be allocated together. Configuring mod queue based reallocation starts with configuring the reallocation job as explained above. Once it is done, there are a few additional steps that needs to be performed. Mod queue based reallocation configuration - Queue Configuration1. Make sure the feature flag OM-40710#2020-03 is enabled. Contact a member of Manhattan Associates to confirm this. 2. Check if the below message types are configured in your active profiles. For memory, the message types belong to the below profile purposes: Entity Profile purpose InBoundMessageType ord::messaging OutBoundMessageType ord::messaging ExtPointToMessageType ord::processDefinition Create OutboundMessageTypes: {{url}}/order/api/ServiceDefinition/outBoundMessageType/import { \"data\": [ { \"MessageType\": \"ReAllocationNoPriorityMSGType\", \"Transactional\": true, \"PersistMessageToMsgStore\": false, \"OutBoundQueues\": { \"QueueName\": \"queue.ReAllocationNoPriorityMSGType\" } }, { \"MessageType\": \"ModBasedMSGType1\", \"Transactional\": true, \"PersistMessageToMsgStore\": false, \"OutBoundQueues\": { \"QueueName\": \"queue.ModBasedMSGType1\" } }, { \"MessageType\": \"ModBasedMSGType2\", \"Transactional\": true, \"PersistMessageToMsgStore\": false, \"OutBoundQueues\": { \"QueueName\": \"queue.ModBasedMSGType2\" } }, { \"MessageType\": \"ModBasedMSGType3\", \"Transactional\": true, \"PersistMessageToMsgStore\": false, \"OutBoundQueues\": { \"QueueName\": \"queue.ModBasedMSGType3\" } }, { \"MessageType\": \"ModBasedMSGType4\", \"Transactional\": true, \"PersistMessageToMsgStore\": false, \"OutBoundQueues\": { \"QueueName\": \"queue.ModBasedMSGType4\" } }, { \"MessageType\": \"ModBasedMSGType5\", \"Transactional\": true, \"PersistMessageToMsgStore\": false, \"OutBoundQueues\": { \"QueueName\": \"queue.ModBasedMSGType5\" } }, { \"MessageType\": \"ModBasedMSGType6\", \"Transactional\": true, \"PersistMessageToMsgStore\": false, \"OutBoundQueues\": { \"QueueName\": \"queue.ModBasedMSGType6\" } }, { \"MessageType\": \"ModBasedMSGType7\", \"Transactional\": true, \"PersistMessageToMsgStore\": false, \"OutBoundQueues\": { \"QueueName\": \"queue.ModBasedMSGType7\" } }, { \"MessageType\": \"ModBasedMSGType8\", \"Transactional\": true, \"PersistMessageToMsgStore\": false, \"OutBoundQueues\": { \"QueueName\": \"queue.ModBasedMSGType8\" } }, { \"MessageType\": \"ModBasedMSGType9\", \"Transactional\": true, \"PersistMessageToMsgStore\": false, \"OutBoundQueues\": { \"QueueName\": \"queue.ModBasedMSGType9\" } }, { \"MessageType\": \"ModBasedMSGType10\", \"Transactional\": true, \"PersistMessageToMsgStore\": false, \"OutBoundQueues\": { \"QueueName\": \"queue.ModBasedMSGType10\" } }, { \"MessageType\": \"ModBasedMSGType\", \"Transactional\": true, \"PersistMessageToMsgStore\": false, \"OutBoundQueues\": { \"QueueName\": \"queue.ModBasedMSGType\" } } ] } Create InBoundMessageTypes: {{url}}/order/api/ServiceDefinition/inBoundMessageType/import { \"data\": [ { \"MessageType\": \"ModBasedMSGType1\", \"NoOfConsumer\": 1, \"MinNoOfConsumer\": 0, \"Idempotent\": true, \"ExternalIntegrationRequired\": false, \"MaxDesiredInstances\": 1, \"ScaleUpTimeWindow\": 10, \"ScaleDownTimeWindow\": 20, \"Description\": \"Mod Based queue with single threaded listener.\", \"ServiceId\": \"ModBasedGenericService\", \"InBoundQueues\": { \"QueueName\": \"queue.ModBasedMSGType1\" } }, { \"MessageType\": \"ModBasedMSGType2\", \"NoOfConsumer\": 1, \"MinNoOfConsumer\": 0, \"Idempotent\": true, \"ExternalIntegrationRequired\": false, \"MaxDesiredInstances\": 1, \"ScaleUpTimeWindow\": 10, \"ScaleDownTimeWindow\": 20, \"Description\": \"Mod Based queue with single threaded listener.\", \"ServiceId\": \"ModBasedGenericService\", \"InBoundQueues\": { \"QueueName\": \"queue.ModBasedMSGType2\" } }, { \"MessageType\": \"ModBasedMSGType3\", \"NoOfConsumer\": 1, \"MinNoOfConsumer\": 0, \"Idempotent\": true, \"ExternalIntegrationRequired\": false, \"MaxDesiredInstances\": 1, \"ScaleUpTimeWindow\": 10, \"ScaleDownTimeWindow\": 20, \"Description\": \"Mod Based queue with single threaded listener.\", \"ServiceId\": \"ModBasedGenericService\", \"InBoundQueues\": { \"QueueName\": \"queue.ModBasedMSGType3\" } }, { \"MessageType\": \"ModBasedMSGType4\", \"NoOfConsumer\": 1, \"MinNoOfConsumer\": 0, \"Idempotent\": true, \"ExternalIntegrationRequired\": false, \"MaxDesiredInstances\": 1, \"ScaleUpTimeWindow\": 10, \"ScaleDownTimeWindow\": 20, \"Description\": \"Mod Based queue with single threaded listener.\", \"ServiceId\": \"ModBasedGenericService\", \"InBoundQueues\": { \"QueueName\": \"queue.ModBasedMSGType4\" } }, { \"MessageType\": \"ModBasedMSGType5\", \"NoOfConsumer\": 1, \"MinNoOfConsumer\": 0, \"Idempotent\": true, \"ExternalIntegrationRequired\": false, \"MaxDesiredInstances\": 1, \"ScaleUpTimeWindow\": 10, \"ScaleDownTimeWindow\": 20, \"Description\": \"Mod Based queue with single threaded listener.\", \"ServiceId\": \"ModBasedGenericService\", \"InBoundQueues\": { \"QueueName\": \"queue.ModBasedMSGType5\" } }, { \"MessageType\": \"ModBasedMSGType6\", \"NoOfConsumer\": 1, \"MinNoOfConsumer\": 0, \"Idempotent\": true, \"ExternalIntegrationRequired\": false, \"MaxDesiredInstances\": 1, \"ScaleUpTimeWindow\": 10, \"ScaleDownTimeWindow\": 20, \"Description\": \"Mod Based queue with single threaded listener.\", \"ServiceId\": \"ModBasedGenericService\", \"InBoundQueues\": { \"QueueName\": \"queue.ModBasedMSGType6\" } }, { \"MessageType\": \"ModBasedMSGType7\", \"NoOfConsumer\": 1, \"MinNoOfConsumer\": 0, \"Idempotent\": true, \"ExternalIntegrationRequired\": false, \"MaxDesiredInstances\": 1, \"ScaleUpTimeWindow\": 10, \"ScaleDownTimeWindow\": 20, \"Description\": \"Mod Based queue with single threaded listener.\", \"ServiceId\": \"ModBasedGenericService\", \"InBoundQueues\": { \"QueueName\": \"queue.ModBasedMSGType7\" } }, { \"MessageType\": \"ModBasedMSGType8\", \"NoOfConsumer\": 1, \"MinNoOfConsumer\": 0, \"Idempotent\": true, \"ExternalIntegrationRequired\": false, \"MaxDesiredInstances\": 1, \"ScaleUpTimeWindow\": 10, \"ScaleDownTimeWindow\": 20, \"Description\": \"Mod Based queue with single threaded listener.\", \"ServiceId\": \"ModBasedGenericService\", \"InBoundQueues\": { \"QueueName\": \"queue.ModBasedMSGType8\" } }, { \"MessageType\": \"ModBasedMSGType9\", \"NoOfConsumer\": 1, \"MinNoOfConsumer\": 0, \"Idempotent\": true, \"ExternalIntegrationRequired\": false, \"MaxDesiredInstances\": 1, \"ScaleUpTimeWindow\": 10, \"ScaleDownTimeWindow\": 20, \"Description\": \"Mod Based queue with single threaded listener.\", \"ServiceId\": \"ModBasedGenericService\", \"InBoundQueues\": { \"QueueName\": \"queue.ModBasedMSGType9\" } }, { \"MessageType\": \"ModBasedMSGType10\", \"NoOfConsumer\": 1, \"MinNoOfConsumer\": 0, \"Idempotent\": true, \"ExternalIntegrationRequired\": false, \"MaxDesiredInstances\": 1, \"ScaleUpTimeWindow\": 10, \"ScaleDownTimeWindow\": 20, \"Description\": \"Mod Based queue with single threaded listener.\", \"ServiceId\": \"ModBasedGenericService\", \"InBoundQueues\": { \"QueueName\": \"queue.ModBasedMSGType10\" } }, { \"MessageType\": \"ModBasedMSGType\", \"NoOfConsumer\": 0, \"MinNoOfConsumer\": 1, \"Idempotent\": true, \"ExternalIntegrationRequired\": false, \"MaxDesiredInstances\": 1, \"ScaleUpTimeWindow\": 10, \"ScaleDownTimeWindow\": 20, \"Description\": \"Mod Based queue with single threaded listener.\", \"ServiceId\": \"ModBasedGenericService\", \"InBoundQueues\": { \"QueueName\": \"queue.ModBasedMSGType\" } }, { \"MessageType\": \"ReAllocationNoPriorityMSGType\", \"NoOfConsumer\": 10, \"MinNoOfConsumer\": 1, \"Idempotent\": true, \"ExternalIntegrationRequired\": false, \"MaxDesiredInstances\": 6, \"ScaleUpTimeWindow\": 10, \"ScaleDownTimeWindow\": 20, \"Description\": \"Queue for order lines with no priority\", \"ServiceId\": \"ModBasedGenericService\", \"InBoundQueues\": { \"QueueName\": \"queue.ReAllocationNoPriorityMSGType\" } } ] } Create ExtPointToMessageType: {{url}}/order/api/ServiceDefinition/extPointToMessageType/import { \"data\": [ { \"ExtensionPointId\": \"Order:Order:Event:ModBasedMSGType1\", \"MessageType\": \"ModBasedMSGType1\" }, { \"ExtensionPointId\": \"Order:Order:Event:ModBasedMSGType2\", \"MessageType\": \"ModBasedMSGType2\" }, { \"ExtensionPointId\": \"Order:Order:Event:ModBasedMSGType3\", \"MessageType\": \"ModBasedMSGType3\" }, { \"ExtensionPointId\": \"Order:Order:Event:ModBasedMSGType4\", \"MessageType\": \"ModBasedMSGType4\" }, { \"ExtensionPointId\": \"Order:Order:Event:ModBasedMSGType5\", \"MessageType\": \"ModBasedMSGType5\" }, { \"ExtensionPointId\": \"Order:Order:Event:ModBasedMSGType6\", \"MessageType\": \"ModBasedMSGType6\" }, { \"ExtensionPointId\": \"Order:Order:Event:ModBasedMSGType7\", \"MessageType\": \"ModBasedMSGType7\" }, { \"ExtensionPointId\": \"Order:Order:Event:ModBasedMSGType8\", \"MessageType\": \"ModBasedMSGType8\" }, { \"ExtensionPointId\": \"Order:Order:Event:ModBasedMSGType9\", \"MessageType\": \"ModBasedMSGType9\" }, { \"ExtensionPointId\": \"Order:Order:Event:ModBasedMSGType10\", \"MessageType\": \"ModBasedMSGType10\" }, { \"ExtensionPointId\": \"Order:Order:Event:ModBasedMSGType\", \"MessageType\": \"ModBasedMSGType\" }, { \"ExtensionPointId\": \"Order:Order:Event:ReAllocationNoPriorityMSGType\", \"MessageType\": \"ReAllocationNoPriorityMSGType\" } ] } Mod queue based reallocation configuration - Job configuration Reallocation Job schedule new parameters (optional parameters) Description NumberOfModQueues When this feature is activated, there is 20 extension points and 10 mod based queues. So, it is possible to create 10 more extra Mod based queues if required by creating seedData in outBoundMessage, inBoundMessage and extPointToMSGType and pass NumberOfModQueues which they want for reallocation job to use as below in jobParameter of respective reallocation jobSchedule. { \"InputValue\": \"10\", \"InputKey\": \"NumberOfModQueues\" } Make sure when InputValue is greater than 10, those many extra mod based queues are created. Default number of mod queues to use for allocation is configured to 5. User can change this configuration to maximum 20. Increasing this value will be useful when we have more number of itemGroups to process and to process them faster. If we have 50 itemGroups and 5 default no of mod queues defined, then each mod queue can process orders from 10 itemGroups. Be careful to the number of inventory and promising component instances. For 5 (default) mod queues, there should be at least 3 promising and inventory REST or ALL containers. Mod queue based reallocation configuration - How to create new Mod base queuesMaximum number of ModBasedQueues supported is 20. Create OutBoundMessageType → User can create queues by following naming convention for MessageType as ModBasedMSGType11, ModBasedMSGType12.......ModBasedMSGType20and QueueName as queue.ModBasedMSGType11, queue.ModBasedMSGType12........queue.ModBasedMSGType20 {{url}}/order/api/ServiceDefinition/outBoundMessageType/save { \"MessageType\": \"ModBasedMSGType11\", \"Transactional\": true, \"PersistMessageToMsgStore\": false, \"OutBoundQueues\": { \"QueueName\": \"queue.ModBasedMSGType11\" } } Create InBoundMessageType. → User can create listeners by following naming convention for MessageType as ModBasedMSGType11, ModBasedMSGType12.......ModBasedMSGType20 and QueueName as queue.ModBasedMSGType11, queue.ModBasedMSGType12........queue.ModBasedMSGType20 {{url}}/order/api/ServiceDefinition/inBoundMessageType/save { \"MessageType\": \"ModBasedMSGType11\", \"NoOfConsumer\": 1, \"MinNoOfConsumer\": 0, \"Idempotent\": true, \"ExternalIntegrationRequired\": false, \"MaxDesiredInstances\": 1, \"ScaleUpTimeWindow\": 10, \"ScaleDownTimeWindow\": 20, \"Description\": \"Mod Based queue with single threaded listener.\", \"ServiceId\": \"ModBasedGenericService\", \"InBoundQueues\": { \"QueueName\": \"queue.ModBasedMSGType11\" } } Create ExtPointToMsgType → Naming convention to be followed for ExtensionPointId is Order:Order:Event:{messageType} where messageType can have values from ModBasedMSGType11, ModBasedMSGType12.....ModBasedMSGType20 Naming convention for MessageType is ModBasedMSGType11, ModBasedMSGType12.....ModBasedMSGType20 {{url}}/order/api/ServiceDefinition/extPointToMessageType/save { \"ExtensionPointId\": \"Order:Order:Event:ModBasedMSGType11\", \"MessageType\": \"ModBasedMSGType11\" }"
}