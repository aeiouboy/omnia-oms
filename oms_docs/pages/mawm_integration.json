{
  "success": true,
  "permalink": "mawm_integration",
  "title": "Manhattan Active WM (MAWM) Integration",
  "content": "\r\n\r\n\r\n<div class=\"hiq-page-wrap\">\r\n<div class=\"hiq-t-wrap\">\r\n\t\t\r\n  \t  <div class=\"hiq-t \">\r\n\t\t\t\t<ul class=\"breadcrumbs\"><li><a class=\"breadcrumb-links\" hqid=\"1788908\"  href=\"/home\">Home</a></li> <li><span>&rsaquo;&rsaquo;</span><a hqid=\"3500940\" href=\"/omni\" class=\"breadcrumb-links\">Manhattan Active® Omni</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158393\" href=\"/order-management\" class=\"breadcrumb-links\">Order Management</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158394\" href=\"/process-configuration-guides\" class=\"breadcrumb-links\">Process & Configuration Guides</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158718\" href=\"/order-processing-2\" class=\"breadcrumb-links\">Order Processing</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158747\" href=\"/order-fulfillment\" class=\"breadcrumb-links\">Order Fulfillment</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2962175\" href=\"/wm-integration\" class=\"breadcrumb-links\">WM Integration</a></li><li> <span>››</span>Manhattan Active WM (MAWM) Integration</li></ul>  \t\r\n\t\t<h2>Manhattan Active® Warehouse Management (MAWM) Integration</h2>\r\n\r\n<p></p>\r\n\r\n<div class=\"info\"><ul><li><a href=\"/mawm_integration$manhattan-active-omni-manhattan-active-wm-nbsp-touch-points\">Manhattan Active Omni - Manhattan Active WM&nbsp;Touch Points</a><ul><li><a href=\"/mawm_integration$master-data\">Master Data</a></li><li><a href=\"/mawm_integration$inventory-nbsp\">Inventory&nbsp;</a><ul><li><a href=\"/mawm_integration$planning-flows\">Planning Flows</a></li><li><a href=\"/mawm_integration$receiving-operations\">Receiving Operations</a></li><li><a href=\"/mawm_integration$inventory-operations\">Inventory Operations</a></li><li><a href=\"/mawm_integration$inventory-sync\">Inventory Sync</a></li><li><a href=\"/mawm_integration$process-flow\">Process flow</a></li></ul></li><li><a href=\"/mawm_integration$order\">Order</a></li><li><a href=\"/mawm_integration$returns\">Returns</a></li><li><a href=\"/mawm_integration$order-status-and-pipeline\">Order Status and Pipeline</a></li><li><a href=\"/mawm_integration$feature-scope\">Feature scope</a></li></ul></li></ul></div>\r\n\r\n<p>Manhattan&nbsp;Active® Omni(MAO)&nbsp;and Manhattan Active® Warehouse Management (MAWM) integration enhances the real-time visibility and efficiency of order allocation and inventory availability.<br>\r\nActive Omni is the solution for customer&nbsp;demands in the areas of selling, service and order fulfillment processes. The functionality&nbsp;is primarily around inbound order/inventory and outbound inventory/order flow through&nbsp;sales and purchase orders.<br>\r\nWarehouse management handles a wide range of processes associated with order fulfillment, receiving inventory into the warehouse, and tracking/shipments&nbsp;to customers.&nbsp;<br>\r\nThe Active Omni and Active&nbsp;Warehouse Management (WM) integration helps in maintaining real-time visibility of&nbsp;virtual allocations from Active Omni to actual hard allocations in the WM system. This&nbsp;integration has the following advantages:</p>\r\n\r\n<ul>\r\n\t<li>Real-time visibility into perpetual inventory at the Distribution Center (DC)</li>\r\n\t<li>DC perpetual inventory is used to calculate the inventory availability picture in the active Omni system, then published to the order capture systems.</li>\r\n\t<li>Fulfillment of the orders at DC</li>\r\n\t<li>Active Omni communicates criticality of the orders to the WM system</li>\r\n\t<li>Orders can be canceled or modified after they are released for fulfillment.&nbsp;Currently, change&nbsp;shipping address is the only late order modification&nbsp;supported for ship to home&nbsp;items. Refer to&nbsp;<a href=\"https://omni.helpdocsonline.com/lateordercancellation\">Late Order Cancelation</a>&nbsp;and <a href=\"https://omni.helpdocsonline.com/changeshippingaddress\">Change Shipping Address </a>for more details.</li>\r\n\t<li>Shipment of orders is updated from the WM system to the Active Omni system.</li>\r\n\t<li>On-hand inventory is updated by the inventory sync process. Both systems (WM and Omni) will have the same inventory</li>\r\n\t<li>When an ASN is received in the DC, orders allocated to that inventory can be released for fulfillment immediately.</li>\r\n\t<li>When new inventory is available, it can be exposed to the selling channels immediately.&nbsp;</li>\r\n\t<li>When orders are in backordered status & DC processes return, order management identifies the highest priority orders in backordered status & immediately allocates those units for those orders.</li>\r\n</ul>\r\n\r\n<p>This document is intended for users implementing both Manhattan Active WM and Manhattan Active Omni together.</p>\r\n\r\n<h3><a name=\"manhattan-active-omni-manhattan-active-wm-nbsp-touch-points\" id=\"manhattan-active-omni-manhattan-active-wm-nbsp-touch-points\"></a>Manhattan Active Omni - Manhattan Active WM&nbsp;Touch Points</h3>\r\n\r\n<p>The general touch points in an integrated OM/WM deployment are illustrated below. The integration is grouped into four main categories:&nbsp;master data, inventory management, order flow, and returns.</p>\r\n\r\n<h4><a name=\"master-data\" id=\"master-data\"></a>Master Data</h4>\r\n\r\n<p>Static data such as item, facility and location are synced simultaneously&nbsp;with both the systems of the host.&nbsp;</p>\r\n\r\n<ul>\r\n\t<li>Item and facility information (DC, Suppliers, Stores, and others) is sent from HOST to both WM&nbsp;and Omni. The appropriate parameters and&nbsp;finite values should be maintained in both systems to ensure that the items and facilities&nbsp;are created successfully in&nbsp;both systems.&nbsp;</li>\r\n\t<li>Purchase Order and ASN should also be sent to both systems from the host.&nbsp;</li>\r\n</ul>\r\n\r\n<h4><a name=\"inventory-nbsp\" id=\"inventory-nbsp\"></a>Inventory&nbsp;</h4>\r\n\r\n<p>Inventory integration provides Active Omni real time visibility into the warehouse inventory. The warehouse inventory records keep updating dynamically due to scenarios such as inventory receipts, adjustments, and movements. MAWM being the actual record of DC inventory, MAWM will send the inventory updates to Active Omni. This way, Active Omni supply records are updated to be in sync with MAWM actual records. To understand&nbsp;the flow and&nbsp;the process of inventory management, it is categorized into the following flows:</p>\r\n\r\n<h5><a name=\"planning-flows\" id=\"planning-flows\"></a>Planning Flows</h5>\r\n\r\n<p>Purchase orders and ASNs are sent from the host system to both Manhattan Active WM and Manhattan Active Omni&nbsp;systems with the same purchase order IDs/ASN IDs. If the&nbsp;purchase orders/ASNs must&nbsp;be updated or canceled, it must&nbsp;be done on both systems.&nbsp;</p>\r\n\r\n<div class=\"tip\"><strong>Note:</strong> In Manhattan Active Omni, all PO/ASN communication must&nbsp;be done using the line information. If a PO/ASN is canceled, the message should contain information about all the lines. For that reason, ASN receiving/verification at ASN level is not possible.</div>\r\n\r\n<h5><a name=\"receiving-operations\" id=\"receiving-operations\"></a>Receiving Operations</h5>\r\n\r\n<p>Manhattan Active WM can&nbsp;receive and verify the receipt of an ASN.&nbsp;</p>\r\n\r\n<ul>\r\n\t<li>Once an ASN is received, its&nbsp;content is moved to on hand.</li>\r\n\t<li>Once an ASN is verified, it is marked as closed and all the unreceived quantities of the ASN are moved back to the corresponding PO.&nbsp;</li>\r\n</ul>\r\n\r\n<p>All ASN communication about receiving and verification must be done at ASN detail level. Header level receiving and verification is not supported.&nbsp;</p>\r\n\r\n<p>Only Item-level ASNs are supported; LPN-level ASNs are not supported.&nbsp;</p>\r\n\r\n<h5><a name=\"inventory-operations\" id=\"inventory-operations\"></a>Inventory Operations</h5>\r\n\r\n<p>Inventory operations are also called inventory movements, and the&nbsp;net quantities are not changed because&nbsp;of this transaction. Movements impact hand inventory, which happens before ASN verification or after ASN verification. On receiving the movements, Active Omni updates the appropriate on-hand inventory.</p>\r\n\r\n<h5><a name=\"inventory-sync\" id=\"inventory-sync\"></a>Inventory Sync</h5>\r\n\r\n<p>As the perpetual system of record, Manhattan Active WM&nbsp;publishes the on-hand inventory to external systems in a batch process called Inventory Sync. Active Omni consumes the Inventory Sync and ensures that there is no variance between OM and WM.</p>\r\n\r\n<h5><a name=\"process-flow\" id=\"process-flow\"></a>Process flow</h5>\r\n\r\n<p><img align=\"left\" border=\"2\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/qu/WM-ActiveIntegration(Inventory)%20Copy.jpg?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL3F1L1dNLUFjdGl2ZUludGVncmF0aW9uKEludmVudG9yeSklMjBDb3B5LmpwZyIsIkNvbmRpdGlvbiI6eyJEYXRlTGVzc1RoYW4iOnsiQVdTOkVwb2NoVGltZSI6MTc1NDc1Mzk1NH19fV19&Signature=Ev8pR51Wke0ijd-F4rgAZheuNAIFH0GHsFjEUWkJlnu6GtEEd5fnwj2XixfxlVadqxAVGjtKacFxXiAadlMiRxUzLAI5O37mnEKWtvOmiacSth-xyf8H2sbLONlyQqO4cX7RslWuT45nfpqDNGVE~yYlei32feD9EhRH~AjLTLNzl3BtVxStw7p2p0pZJSwI8KI~8EZjFNBH6A4XyygewKu4JbvJinvKns4rY2rF06YtP2f2KsNx6hVCEUf945c5QodViS7nGNnMUHXa7g9LZtRG-EvTJTJyJb~pcmtWPwRFVqBwN39fseaZ1cwJhmZB5l1FVZXU0FR2P1q40igXtA__&Key-Pair-Id=K2TK3EG287XSFC\" style=\"margin-right:5px;padding:5px;\"></p>\r\n\r\n<h4>&nbsp;</h4>\r\n\r\n<h4>&nbsp;</h4>\r\n\r\n<h4><a name=\"order\" id=\"order\"></a>Order</h4>\r\n\r\n<p>The order flow touch point is used to update the fulfillment&nbsp;of an order DO at DC.&nbsp;Retail Orders and Customer Orders can be created within the Active Omni UI or interfaced with various order capture systems (such as eComm systems, replenishment systems, in-store order entry, mobile applications, customer service call centers and so on).&nbsp;</p>\r\n\r\n<p>Once the order is allocated to Manhattan Active Omni, it is released and sent for fulfillment to the fulfillment system (SIF or any warehouse management system). When the Release reaches Manhattan Active WM, it is transformed into an Original Order that will be allocated, picked, packed, and fulfilled.&nbsp;</p>\r\n\r\n<div class=\"tip\"><strong>Note</strong>:&nbsp;By default, the ship confirmation process automatically triggers an inventory event through processSupplyReservationEvent() and syncEvents, which include SupplyReservationEventsDTO along with the supply type. As a result, no additional mapping of \"InventoryTypeId\" from MAWM to MAO is needed for the ship confirm event—unlike in inventory sync or adjustment messages. You can confirm this behavior by enabling debug logs.</div>\r\n\r\n<p><img height=\"1177\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/qu/2025/ActiveOM-WM_Integration__Order___Page_1_.png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL3F1LzIwMjUvQWN0aXZlT00tV01fSW50ZWdyYXRpb25fX09yZGVyX19fUGFnZV8xXy5wbmciLCJDb25kaXRpb24iOnsiRGF0ZUxlc3NUaGFuIjp7IkFXUzpFcG9jaFRpbWUiOjE3NTQ3NTM5NTR9fX1dfQ__&Signature=byjxRSbG2jqj9tVVbtv0Y65yqvidRXNoGjSvDLDY1~cChD9H2FBvBk~LNvEKPWoZ~ZczCGi2RoQ~Z4EM-TUu-FuP0ju3G0huzMsW8SvC-zjJT5fAKo2XqzIFBZx7C6ew3KoLtrZJlIVdimKegE3ZeBOI~n95WVYRAtW0aulLC78zyDL-gpU9Y30lgk0a40VbFdGlz92wA4QjLZD-QOHlCyzZhiDExH8khzSgaUVMJsGPB0asPIwLqcMwB7QbtoeqVzAqZOMpSq4f1N5d93KvHIxZHRFYJ1q6rHdaL~7EJxppNdfL0865BHe-WF8IJ316f9Vo71DcI~zmKqTmgK8lQQ__&Key-Pair-Id=K2TK3EG287XSFC\" width=\"1024\"></p>\r\n\r\n<h4><a name=\"returns\" id=\"returns\"></a>Returns</h4>\r\n\r\n<ul>\r\n</ul>\r\n\r\n<p>Return integration is supported. Refer <a href=\"https://omni.helpdocsonline.com/returns-shipped-to-distribution-center\">here</a> for more details.</p>\r\n\r\n<h4><a name=\"order-status-and-pipeline\" id=\"order-status-and-pipeline\"></a>Order Status and Pipeline</h4>\r\n\r\n<p>Like any order status update recieved via order event, the appropriate status definition and pipeline configuration must be present to appropriately process the order event in MAO and move the unit(s) to the appropriate status. The 'DC Created' status is specific to the MAWM - MAO integration, and must be synced with the corresponding pipline in order to read 'de-allocation' messages from MAWM that may occur during the wave planning process. This can be done by syncing the 'ord::processDefinition' profile purpose from the base profile, or by manually updating the status definition and pipeline configuration at the correct profile. Like any seed data update to a business profile, be sure to review the data first to avoid inadvertently overwriting any existing configuration.</p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-1\" class=\"toggle-content\"><span class=\"toggle-title\">&#039;DC Created&#039; Status Definition</span></a></p><div id=\"tg-1\"><div class=\"computer_code\">POST&nbsp;{{url}}/order/api/ServiceDefinition/statusDefinition/save<br />\n{<br />\n&nbsp; &quot;ProcessTypeId&quot;: &quot;ORDER_EXECUTION&quot;,<br />\n&nbsp; &quot;Status&quot;: &quot;3250&quot;,<br />\n&nbsp; &quot;Description&quot;: &quot;DC Created&quot;,<br />\n&nbsp; &quot;PartialStatusDescription&quot;: &quot;Partially DC Created&quot;<br />\n}</div>\n</div></div></p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-2\" class=\"toggle-content\"><span class=\"toggle-title\">&#039;DC Created&#039; Pipeline Sample</span></a></p><div id=\"tg-2\"><div class=\"computer_code\">POST&nbsp;{{url}}/order/api/ServiceDefinition/pipeline/save<br />\n{<br />\n&nbsp; &nbsp;&quot;ProcessTypeId&quot;: &quot;ORDER_EXECUTION&quot;,<br />\n&nbsp; &nbsp;&quot;PipelineId&quot;: &quot;ShipToHome&quot;,<br />\n&nbsp; &nbsp;&quot;PickupService&quot;: [<br />\n&nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;FromStatus&quot;: &quot;3250&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ComponentId&quot;: &quot;Order&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ServiceId&quot;: &quot;processOrder&quot;<br />\n&nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;FromStatus&quot;: &quot;3250&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ComponentId&quot;: &quot;Order&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ServiceId&quot;: &quot;shortOrder&quot;<br />\n&nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;FromStatus&quot;: &quot;3250&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ComponentId&quot;: &quot;Order&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ServiceId&quot;: &quot;pullbackRelease&quot;<br />\n&nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;FromStatus&quot;: &quot;3250&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ComponentId&quot;: &quot;Order&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ServiceId&quot;: &quot;pickOrder&quot;<br />\n&nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;FromStatus&quot;: &quot;3250&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ComponentId&quot;: &quot;Order&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ServiceId&quot;: &quot;packOrder&quot;<br />\n&nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;FromStatus&quot;: &quot;3250&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ComponentId&quot;: &quot;Order&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ServiceId&quot;: &quot;fulfillOrder&quot;<br />\n&nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;FromStatus&quot;: &quot;3500&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ComponentId&quot;: &quot;Order&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ServiceId&quot;: &quot;dcCreateOrder&quot;<br />\n&nbsp; &nbsp; &nbsp; }<br />\n&nbsp; &nbsp;],<br />\n&nbsp; &nbsp;&quot;DropStatusDetermination&quot;: [<br />\n&nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;FromStatus&quot;: &quot;3500&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ComponentId&quot;: &quot;Order&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ServiceId&quot;: &quot;dcCreateOrder&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;IntendedDropStatus&quot;: &quot;3250&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;Sequence&quot;: 1,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ConditionText&quot;: null,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;DropStatus&quot;: &quot;3250&quot;<br />\n&nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;FromStatus&quot;: &quot;3250&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ComponentId&quot;: &quot;Order&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ServiceId&quot;: &quot;processOrder&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;IntendedDropStatus&quot;: &quot;3500&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;Sequence&quot;: 1,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ConditionText&quot;: null,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;DropStatus&quot;: &quot;3500&quot;<br />\n&nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;FromStatus&quot;: &quot;3250&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ComponentId&quot;: &quot;Order&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ServiceId&quot;: &quot;shortOrder&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;IntendedDropStatus&quot;: &quot;1500&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;Sequence&quot;: 1,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ConditionText&quot;: null,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;DropStatus&quot;: &quot;1500&quot;<br />\n&nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;FromStatus&quot;: &quot;3250&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ComponentId&quot;: &quot;Order&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ServiceId&quot;: &quot;pullbackRelease&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;IntendedDropStatus&quot;: &quot;2000&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;Sequence&quot;: 1,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ConditionText&quot;: null,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;DropStatus&quot;: &quot;2000&quot;<br />\n&nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;FromStatus&quot;: &quot;3250&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ComponentId&quot;: &quot;Order&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ServiceId&quot;: &quot;pickOrder&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;IntendedDropStatus&quot;: &quot;3600&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;Sequence&quot;: 1,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ConditionText&quot;: null,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;DropStatus&quot;: &quot;3600&quot;<br />\n&nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;FromStatus&quot;: &quot;3250&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ComponentId&quot;: &quot;Order&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ServiceId&quot;: &quot;packOrder&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;IntendedDropStatus&quot;: &quot;3700&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;Sequence&quot;: 1,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ConditionText&quot;: null,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;DropStatus&quot;: &quot;3700&quot;<br />\n&nbsp; &nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;FromStatus&quot;: &quot;3250&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ComponentId&quot;: &quot;Order&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ServiceId&quot;: &quot;fulfillOrder&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;IntendedDropStatus&quot;: &quot;7000&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;Sequence&quot;: 1,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ConditionText&quot;: null,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;DropStatus&quot;: &quot;7000&quot;<br />\n&nbsp; &nbsp; &nbsp; }<br />\n&nbsp; &nbsp;]<br />\n}</div>\n</div></div></p>\r\n\r\n<h4><a name=\"feature-scope\" id=\"feature-scope\"></a>Feature scope</h4>\r\n\r\n<ul>\r\n</ul>\r\n\r\n<p>The only flow currently supported by the base integration is ship to address shipments. Ship to store and merge shipment are not yet supported and should be taken up as custom effort.</p>\r\n\r\n<p>To achieve a ship to store flow, the MAWM ship confirms a message should be sent to:</p>\r\n\r\n<ul data-indent-level=\"1\">\r\n\t<li>\r\n\t<p data-renderer-start-pos=\"1010\">MAO order component to ship the 1st leg of the order (ALREADY BASE)</p>\r\n\t</li>\r\n\t<li>\r\n\t<p data-renderer-start-pos=\"1096\">MAO fulfillment component to create the fulfillment used for receiving the 1st leg (NOT BASE yet)</p>\r\n\t</li>\r\n</ul>\r\n\r\n\t  </div>\r\n </div>\r\n <div id=\"ui-page-fb-wrap\"></div>\r\n <div class=\"hiq-footer-wrap\">\r\n    \r\n                \r\n  </div>\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n",
  "content_length": 21115,
  "scraped_at": "2025-08-09T22:34:14.841970"
}