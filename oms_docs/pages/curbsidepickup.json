{
  "id": "2497831",
  "permalink": "curbsidepickup",
  "title": "Curbside Pickup",
  "type": "topic",
  "level": 4,
  "path": "Manhattan Active® Omni/Order Management/Process & Configuration Guides/Digital Self-Service/Curbside Pickup",
  "raw_item": {
    "id": "2497831",
    "text": "Curbside Pickup",
    "title": "Curbside Pickup",
    "permalink": "curbsidepickup",
    "leaf": false,
    "droppable": true,
    "expanded": true,
    "closed": true,
    "visible": true,
    "editable": true,
    "type": "topic",
    "topicType": "0",
    "status": "1",
    "iconCls": "icon-topic",
    "cls": "",
    "folder_id": "193441",
    "parent": "f;193441",
    "created_date": "1588355665",
    "modified_date": "1745888367",
    "instructor_id": null,
    "loaded": true,
    "haschildren": false,
    "callout": "0",
    "order": "8"
  },
  "success": true,
  "content": "\r\n\r\n\r\n<div class=\"hiq-page-wrap\">\r\n<div class=\"hiq-t-wrap\">\r\n\t\t\r\n  \t  <div class=\"hiq-t \">\r\n\t\t\t\t<ul class=\"breadcrumbs\"><li><a class=\"breadcrumb-links\" hqid=\"1788908\"  href=\"/home\">Home</a></li> <li><span>&rsaquo;&rsaquo;</span><a hqid=\"3500940\" href=\"/omni\" class=\"breadcrumb-links\">Manhattan Active® Omni</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158393\" href=\"/order-management\" class=\"breadcrumb-links\">Order Management</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158394\" href=\"/process-configuration-guides\" class=\"breadcrumb-links\">Process & Configuration Guides</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158714\" href=\"/digital-self-service-3\" class=\"breadcrumb-links\">Digital Self-Service</a></li><li> <span>››</span>Curbside Pickup</li></ul>  \t\r\n\t\t<h2>Curbside Pickup</h2>\r\n\r\n<p></p>\r\n\r\n<div class=\"info\"><ul><li><a href=\"/curbsidepickup$overview\">Overview</a><ul><li><a href=\"/curbsidepickup$functional-flow\">Functional Flow</a></li></ul></li><li><a href=\"/curbsidepickup$notifying-stores-when-customers-are-on-the-way\">Notifying Stores when Customers are 'On The Way'</a></li><li><a href=\"/curbsidepickup$curbside-order-capture-processing\">Curbside Order Capture & Processing</a><ul><li><a href=\"/curbsidepickup$capturing-curbside-pickup-orders-in-contact-center\">Capturing Curbside Pickup Orders in Contact Center</a></li><li><a href=\"/curbsidepickup$capturing-curbside-pickup-orders-in-e-commerce\">Capturing Curbside Pickup Orders in E-Commerce</a></li></ul></li><li><a href=\"/curbsidepickup$curbside-pickup-in-store-fulfillment\">Curbside Pickup in Store Fulfillment</a><ul><li><a href=\"/curbsidepickup$customer-arrived\">Customer Arrived</a></li><li><a href=\"/curbsidepickup$text-messaging\">Text Messaging</a></li><li><a href=\"/curbsidepickup$notification-sounds\">Notification Sounds</a></li><li><a href=\"/curbsidepickup$optional-steps\">Optional Steps</a></li><li><a href=\"/curbsidepickup$exceptions\">Exceptions</a></li><li><a href=\"/curbsidepickup$digital-self-service-authentication\">Digital Self-Service Authentication</a></li><li><a href=\"/curbsidepickup$customizing-for-your-brand\">Customizing for your Brand</a></li><li><a href=\"/curbsidepickup$digital-self-service-ui-field-mappings\">Digital Self-Service UI Field Mappings</a></li><li><a href=\"/curbsidepickup$digital-self-service-localization\">Digital Self-Service Localization</a></li><li><a href=\"/curbsidepickup$using-digital-self-service-store-fulfillment-with-cross-org-visibility\">Using Digital Self-Service & Store Fulfillment with Cross-Org Visibility</a></li></ul></li><li><a href=\"/curbsidepickup$configuration\">Configuration</a><ul><li><a href=\"/curbsidepickup$order-configuration\">Order Configuration</a></li><li><a href=\"/curbsidepickup$digital-self-service-configuration\">Digital Self-Service Configuration</a></li><li><a href=\"/curbsidepickup$store-fulfillment-configuration\">Store Fulfillment Configuration</a></li><li><a href=\"/curbsidepickup$text-messaging\">Text Messaging</a></li><li><a href=\"/curbsidepickup$two-way-text-messaging\">Two-way Text Messaging</a></li><li><a href=\"/curbsidepickup$location-configuration\">Location Configuration</a></li></ul></li><li><a href=\"/curbsidepickup$implementation-variations\">Implementation Variations</a><ul><li><a href=\"/curbsidepickup$existing-email-text-with-custom-curbside-pickup-ui\">Existing Email/Text with Custom Curbside Pickup UI</a></li><li><a href=\"/curbsidepickup$allowing-customers-to-switch-from-curbside-to-in-store-in-store-to-curbside\">Allowing Customers to Switch from Curbside to In-Store, In-store to Curbside</a></li></ul></li><li><a href=\"/curbsidepickup$feature-scope\">Feature Scope</a></li><li><a href=\"/curbsidepickup$rfid\">RFID</a></li><li><a href=\"/curbsidepickup$services\">Services</a></li></ul></div>\r\n\r\n<h3><a name=\"overview\" id=\"overview\"></a>Overview</h3>\r\n\r\n<p>Curbside pickup is a fast-growing alternative to the traditional buy online pick up in store (BOPIS) process. With curbside pickup, a customer places a store pickup order, drives to the store to pick up the items and notifies the store once he has arrived. A store associate is notified that the customer has arrived, who then locates the items and brings them outside to the customer's vehicle. In recent times, contact-less curbside pickup has become a safe&nbsp;alternative to in-store pickups.</p>\r\n\r\n<p>Manhattan&nbsp;Active® Omni delivers a seamless curbside pickup experience through Digital Self-Service (DSS) in conjunction with Store Inventory & Fulfillment (SIF). Here's how it works:</p>\r\n\r\n<ul>\r\n\t<li>A customer places an order online or in a&nbsp;Contact Center and designates it as a ‘Curbside Pickup’.</li>\r\n\t<li>Once the store picks the items, the customer receives an email or text message notifying that items are ready for pickup. This email/text contains a link to the DSS Curbside Pickup page.</li>\r\n\t<li>When the customer opens the DSS webpage,&nbsp;a push notification is then sent to the store to&nbsp;notify them that the customer is on the way.</li>\r\n\t<li>Once the customer arrives at the store, they click on the link which launches the DSS Curbside pickup page in a web browser on their device.</li>\r\n\t<li>In DSS, the customer inputs some information to help the associate locate the customer (i.e., description of their car or parking spot number) and clicks a button to indicate they&nbsp;have&nbsp;arrived.&nbsp;</li>\r\n\t<li>The store associate receives a push notification on their device&nbsp;that the customer has arrived to pick up the order.</li>\r\n\t<li>The associate can send&nbsp;a text message&nbsp;to the customer&nbsp;to confirm that their arrival message was received (i.e.&nbsp;\"On the way\" or \"Need a few minutes\").&nbsp;If the customer replies to the message sent, a push notification arrives on the devices to alert the store associates.</li>\r\n\t<li>The associate carries the&nbsp;order items to the customer's vehicle, completing the pickup process.</li>\r\n</ul>\r\n\r\n<p>This guide gives an overview of the curbside pickup flow in&nbsp;Manhattan&nbsp;Active® Omni's Contact Center, Order Management, Digital Self-Service, and Store Inventory & Fulfillment applications. However, if third party applications are used instead of Manhattan applications, then integration details are provided to accomplish different plug-and-play variations. Note that Manhattan's Digital Self-Service application currently only integrates with Manhattan Store Fulfillment and does not provide hooks to integrate with third party store fulfillment applications. See the<a hqid=\"2497831\" href=\"/curbsidepickup$dss implementation variations\"> Implementation Variations&nbsp;section</a> below for details.</p>\r\n\r\n<div class=\"tip\">To know more on the&nbsp; curbside pickup activity during offline mode, please refer to the&nbsp;<a hqid=\"3324298\" href=\"/store-inventory-and-fulfillment-offline-support\">Store Offline Support</a>&nbsp;page.</div>\r\n\r\n<h4><a name=\"functional-flow\" id=\"functional-flow\"></a>Functional Flow</h4>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-1\" class=\"toggle-content\"><span class=\"toggle-title\">Curbside Flow</span></a></p><div id=\"tg-1\"><p><img height=\"1418\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/qu/Screen%20Shot%202021-03-22%20at%2011_45_41%20AM.png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL3F1L1NjcmVlbiUyMFNob3QlMjAyMDIxLTAzLTIyJTIwYXQlMjAxMV80NV80MSUyMEFNLnBuZyIsIkNvbmRpdGlvbiI6eyJEYXRlTGVzc1RoYW4iOnsiQVdTOkVwb2NoVGltZSI6MTc1NDc1MTYyMX19fV19&Signature=gmT5ucXZx5KUwJHg8zUtV~0PZrKlWDwYYo4gLZz~gjALp-1tfclSfA0627-sHVX6XwPBxqY7Pg61hGDqttvhM4WR1Cq1zzq9G1BYktcAq1a2-hR3PpiCOu1vzH3bsRCBNC0Issgba6ou6zprx4nNACs3qZIyfpXBDjXDU0YPiAofkl5dV0WuIqoHzkNc~OJ7H-y1NLSYoVzyggzlfrEIjzYUx07Kgvwg48LJhWZKGw9gQLrbZdR1k46~nAq~L9PExXV-rICianeZ6XFWWe1qu4mRSChPdv~EB0AjeCsTwxaT~u1XzbMM-F8wqM5wrKICqnfAvxkwb9EvLryTi8dgIw__&Key-Pair-Id=K2TK3EG287XSFC\" width=\"1490\" /></p>\n</div></div></p>\r\n\r\n<h3><a name=\"notifying-stores-when-customers-are-on-the-way\" id=\"notifying-stores-when-customers-are-on-the-way\"></a><a id=\"On The Way\" name=\"On The Way\"></a>Notifying Stores when Customers are 'On The Way'</h3>\r\n\r\n<p data-pm-slice=\"1 1 []\">Two variations&nbsp;of the curbside pickup flow can be used:</p>\r\n\r\n<ol>\r\n\t<li data-pm-slice=\"1 1 []\"><strong>Notifying stores when customers are on their way and when they arrive: </strong>In this flow, a link to the&nbsp;'I'm on my way' DSS page is included in the customer's ready for pickup email. When the customer opens the DSS Curbside page, the store is notified that the customer is on their way and is given an ETA*. When the customer inputs their car/parking information and clicks 'I'm at the store', the store is notified that the customer has arrived.&nbsp;</li>\r\n\t<li data-pm-slice=\"1 1 []\"><strong>Notifying stores when customers arrive</strong>: In this flow, a link to the&nbsp;'I'm at the store'&nbsp;DSS page is included in the customer's ready for pickup email.&nbsp;When the customer opens the DSS page and&nbsp;inputs their car/parking information and clicks 'I'm at the store', the store is notified that the customer has arrived. Here, the store does not receive a notification that the customer is on their way.</li>\r\n</ol>\r\n\r\n<p>*The customer's ETA is provided to the store associate only if the customer consents to share their browser location on the DSS page. If the customer does not share their location in the browser prompt, the store still receives a notification that the customer is on the way, but no ETA is shared.</p>\r\n\r\n<p>If the customer notifies the store that they are coming, the 'Is Customer On The Way' attribute on the fulfillment is updated to true. If the optional ETA (in minutes) is&nbsp;sent, the&nbsp;'Pickup ETA Date and Time' attribute is converted to a date/time&nbsp;by adding ETA minutes to the current time (in UTC format). A&nbsp;'Curbside pickup customer is on their way'&nbsp;push notification is also sent to the store.</p>\r\n\r\n<p>A Google API <strong>Distance Matrix&nbsp;license is required</strong> to get the customer’s location and calculate their ETA.&nbsp;If a Google API license is not configured, the store can still be notified that the customer is on their way, but no ETA is provided.</p>\r\n\r\n<p>To enable the 'On My Way' notifications to stores, follow the steps <a hqid=\"2497831\" href=\"/curbsidepickup$on my way config emails\">here</a>.</p>\r\n\r\n<p><a id=\"On the way location information\" name=\"On the way location information\"></a>&nbsp;When the customer notifies the store that they are on the way to pickup their curbside order, store can also optionally accept&nbsp;latitude and longitude and distance attributes and save geographical information about the customer that can be used for reporting purposes.</p>\r\n\r\n<h3><a name=\"curbside-order-capture-processing\" id=\"curbside-order-capture-processing\"></a>Curbside Order Capture & Processing</h3>\r\n\r\n<p>An item is designated as curbside&nbsp;pickup&nbsp;at the order line level. For a BOPIS order, the order line attribute \"Delivery Method Sub Type\" defines whether the line is a curbside pickup or an in-store pickup line. This field is used by downstream systems including:</p>\r\n\r\n<ul>\r\n\t<li>Email or text service providers (i.e., to include curbside instructions vs. in-store instructions in emails or texts)</li>\r\n\t<li>Sales audit or reporting systems</li>\r\n</ul>\r\n\r\n<p>This field is populated in the Release in Release Lines and the Release will be grouped by the Delivery Method Sub Type attribute along with other attributes that are currently used to group the Release. Please refer to the Release Guide - <a href=\"https://omni.helpdocsonline.com/release-grouping-and-creation\">Release Grouping</a>&nbsp;for more information.</p>\r\n\r\n<ul>\r\n</ul>\r\n\r\n<p>Delivery method sub-type values of 'Curbside' and 'InStore' are hard coded in the system and are not configurable. Delivery method sub-type should be populated only for lines with delivery methods 'PickUpAtStore' or 'ShipToStore'. If this field is populated with any unsupported values or for any other delivery methods, an error is returned.</p>\r\n\r\n<h4><a name=\"capturing-curbside-pickup-orders-in-contact-center\" id=\"capturing-curbside-pickup-orders-in-contact-center\"></a><a id=\"Capturing Curbside Pickup Orders in Contact Center\" name=\"Capturing Curbside Pickup Orders in Contact Center\"></a>Capturing Curbside Pickup Orders in Contact Center</h4>\r\n\r\n<p>In-store pickup items ordered at the contact center can be designated as curbside or in-store. The delivery method sub-type (curbside or in-store)&nbsp;can be captured on the <a hqid=\"1808448\" href=\"/search-items$AddItemstoShoppingCart\">Item Details UI</a>web&nbsp;while adding an item to an order. This attribute currently cannot be edited after an item is added, so a user must delete the line and add it again to modify the order. Delivery method sub-type is currently not visible on the Order Status, Order Details, or Edit Order pages.</p>\r\n\r\n<p>Curbside order capture can be enabled&nbsp;in the contact center at two levels:</p>\r\n\r\n<ul>\r\n\t<li>Organization level, if all locations in an organization are eligible for in store, curbside, or both options</li>\r\n\t<li>Location level, if only some stores support curbside</li>\r\n</ul>\r\n\r\n<h5><a id=\"Configuring Pickup Type\" name=\"Configuring Pickup Type\"></a>Organization Level Curbside Pickup</h5>\r\n\r\n<p>If the&nbsp;organization-level configuration is being used, then the curbside vs. in-store selection is made using radio buttons on the Item Details page.&nbsp;When a user selects 'pick up at store' as the delivery method for an item, they are presented with additional options&nbsp;between curbside or in-store. For the 'pick up at store'&nbsp;delivery method, there is an existing configuration to indicate what delivery method sub-types are supported (curbside, in-store, or both).&nbsp;</p>\r\n\r\n<p>To configure the delivery method sub types for each organization and their display sequence, use the Call Center Configuration &gt; <a href=\"https://omni.helpdocsonline.com/call-center-configuration$configuring-pickup-type\">Delivery Method Sub Types UI</a>. The lowest number in the&nbsp;sequence is displayed first. For example, if 'Curbside' has sequence 1 and 'In Store' has sequence 2, then the 'Curbside' radio button is the first option displayed in the list. The 'Is Default' attribute defines which Delivery Method Sub Type is selected by default. The following combinations can be configured:</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">Delivery Method</th>\r\n\t\t\t<th scope=\"col\">Available Sub-Type Selections</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Pick up in store</td>\r\n\t\t\t<td>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Curbside</li>\r\n\t\t\t\t<li>In Store</li>\r\n\t\t\t\t<li>Curbside & In Store</li>\r\n\t\t\t\t<li>None</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Ship to store</td>\r\n\t\t\t<td>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Curbside</li>\r\n\t\t\t\t<li>In Store</li>\r\n\t\t\t\t<li>Curbside & In Store</li>\r\n\t\t\t\t<li>None</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<h5>Location Level Curbside Pickup</h5>\r\n\r\n<p>If curbside support is managed by location, then the ‘Curbside Pickup’ attribute is displayed on the store locator popup. If a location allows curbside pickup,&nbsp;an option to select 'Curbside' is displayed in the store locator popup. When curbside support is managed by location, the delivery method sub type options are not enabled on the Item Details page, even&nbsp;if Delivery Method Sub Types are configured in the Call Center Configuration.</p>\r\n\r\n<p>If managing curbside order capture at a location level, the following configurations are required:</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width: 915px;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\" style=\"width: 129px;\">Configuration UI</th>\r\n\t\t\t<th scope=\"col\" style=\"width: 185px;\">Configuration Parameter</th>\r\n\t\t\t<th scope=\"col\" style=\"width: 559px;\">Description</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 126px;\">Location</td>\r\n\t\t\t<td style=\"width: 182px;\">\r\n\t\t\t<p>Location Fulfillment Attribute&nbsp;&gt;&nbsp;Curbside Pickup</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width: 556px;\">\r\n\t\t\t<p>To make a location eligible for curbside pickup, set \"Curbside Pickup\" = true in the Org Location.&nbsp;See <a hqid=\"2497831\" href=\"/curbsidepickup$Curbside_Location_Configuration\">detailed configuration steps here.</a></p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 126px;\">Call Center</td>\r\n\t\t\t<td style=\"width: 182px;\">\r\n\t\t\t<p>Restrict Pickup Options by Location</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width: 556px;\">\r\n\t\t\t<p>This parameter&nbsp;indicates if the Curbside pickup is managed at a location level. If this parameter is enabled, the ‘Curbside Pickup’ attribute is displayed on the store locator popup with an option to select 'Curbside' if the location allows curbside pickup. If this parameter is disabled, the \"Curbside Pickup\" column is not displayed on the Store Locator. This parameter is disabled by default.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>The curbside pickup options behave&nbsp;as follows in the store locator. These scenarios assume inventory is available for the Pickup At Store view. If inventory is not available, Pickup At Store cannot be selected.</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">Org Location</th>\r\n\t\t\t<th scope=\"col\">Pickup At Store Action</th>\r\n\t\t\t<th scope=\"col\">Curbside Pickup Options</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Curbside Pickup&nbsp;- Disabled</li>\r\n\t\t\t\t<li>Pickup At Store - Disabled</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t\t<td>Pickup At Store action button is disabled.</td>\r\n\t\t\t<td>None (there are not any options to select)</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Curbside Pickup - Disabled</li>\r\n\t\t\t\t<li>Pickup At Store&nbsp;- Enabled</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t\t<td>Pickup At Store action button is enabled.</td>\r\n\t\t\t<td>\r\n\t\t\t<p>None (there are not any options to select)</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Curbside Pickup - Enabled</li>\r\n\t\t\t\t<li>Pickup At Store&nbsp;- Disabled</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t\t<td>Pickup At Store action button is enabled.</td>\r\n\t\t\t<td>\"Curbside Only\" is visible for the location. This cannot be de-selected</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Curbside Pickup&nbsp;- Enabled</li>\r\n\t\t\t\t<li>Pickup At Store&nbsp;- Enabled</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t\t<td>Pickup At Store action button is enabled.</td>\r\n\t\t\t<td>A \"Curbside\" checkbox is available for selection. By default, it is de-selected</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>The Ship To Store button behavior in the store locator is not impacted by the \"Curbside Pickup\" parameter. If Ship To Store is not enabled at a location, it cannot be selected in the Store Locator.</p>\r\n\r\n<h4><a name=\"capturing-curbside-pickup-orders-in-e-commerce\" id=\"capturing-curbside-pickup-orders-in-e-commerce\"></a>Capturing Curbside Pickup Orders in E-Commerce</h4>\r\n\r\n<p>For orders imported from e-commerce or other order capture systems, the delivery method sub-type should be populated as 'Curbside'&nbsp;for BOPIS&nbsp;and Ship to Store items which require curbside pickup.</p>\r\n\r\n<h5>Mapping Details</h5>\r\n\r\n<ul>\r\n\t<li><strong>Interface:</strong> Create Order</li>\r\n\t<li><strong>Attribute: </strong>Order.OrderLine.DeliveryMethodSubType</li>\r\n\t<li><strong>How to Populate:</strong> Set to 'Curbside' for items requiring curbside pickup. Leave null or set to 'InStore' for traditional in-store pickups. Populate only for lines with delivery methods 'PickUpAtStore' or 'ShipToStore'; Do not populate for ShipToAddress lines.</li>\r\n</ul>\r\n\r\n<div class=\"info\"><strong>Note: </strong>This attribute currently cannot be modified in the contact center. Once an order is released, this attribute cannot be updated. However, the customer can switch from in-store&nbsp;to curbside or vice-versa by using email or text communications. See more details here.</div>\r\n\r\n<h3><a name=\"curbside-pickup-in-store-fulfillment\" id=\"curbside-pickup-in-store-fulfillment\"></a><a id=\"Curbside Pickup in Store Fulfillment\" name=\"Curbside Pickup in Store Fulfillment\"></a>Curbside Pickup in Store Fulfillment</h3>\r\n\r\n<p>Curbside pickups follow the same process for releasing the store and picking as in-store orders. Refer to the <a hqid=\"1808791\" href=\"/fulfillment-picking-process\">Picking&nbsp;guide</a> for additional information.</p>\r\n\r\n<p>The processes BOPIS and curbside pickup orders&nbsp;differ only&nbsp;after the customer arrives for pickup. The&nbsp;key pieces of information below are saved on the fulfillment for curbside pickups:</p>\r\n\r\n<ul>\r\n\t<li>The ‘Delivery Method Sub Type’ attribute on the fulfillment differentiates ‘Curbside’ versus ‘InStore’ pickup orders.</li>\r\n\t<li>If&nbsp;the customer indicates that they are en route to the store, the 'Is Customer On The Way' attribute on the fulfillment is updated. The customer's&nbsp;ETA (in minutes)&nbsp;can&nbsp;optionally be included and is saved as a timestamp in the&nbsp;'Pickup ETA&nbsp;Date and Time' attribute on the fulfillment.&nbsp;</li>\r\n\t<li>The ‘Pickup Arrival Date and Time’ attribute on the fulfillment is updated with the customer's arrival time.</li>\r\n\t<li>The ‘Pickup’ fulfillment instruction type stores any information that the customer provides to help the associate locate them, such as vehicle description or parking spot number.</li>\r\n</ul>\r\n\r\n<h4><a name=\"customer-arrived\" id=\"customer-arrived\"></a>Customer Arrived</h4>\r\n\r\n<p>Once the customer notifies the store that they have arrived at the store, they can either walk-in and pick up their order in&nbsp;the store&nbsp;or select \"Curbside\". If \"Curbside\" is selected, the&nbsp;'Delivery Method Sub-Type' attribute is updated with the value 'Curbside', the ‘Pickup Arrival Date and Time’&nbsp;is updated with the customer's arrival time (in UTC format), and a push notification is sent to the store's devices.</p>\r\n\r\n<div class=\"info\"><span style=\"color:#000000;\"><strong>Note:</strong>&nbsp;Only fulfillments in Picked&nbsp;(3000.000) or Sort (3300.000) status are eligible for curbside pickup. If the fulfillment status is not Picked&nbsp;or Sort,&nbsp;the error message “Order [fulfillment number]&nbsp;with&nbsp;status&nbsp;(status ID)&nbsp;is&nbsp;not&nbsp;valid&nbsp;for&nbsp;pickup” is returned when SIF is notified that the customer has arrived.</span></div>\r\n\r\n<p>Store associates use the Curbside Pickups menu to confirm the pickup process for curbside orders. If&nbsp;the store associates tap on the push notification, they navigate directly to the Curbside Pickup screen. As with other push notifications, the push notification bell icon's badge count&nbsp;on the Store home screen is&nbsp;updated for each unread notification. The menu is protected by a resource;&nbsp;hence, store associates must have the corresponding grant to confirm the pickup for these orders.</p>\r\n\r\n<p>Upon entering the Curbside Pickup UI, the screen only displays curbside orders which are ready for pickup and the customer has either arrived or has notified that they are on the way. Of these orders, arrived orders are listed first in order&nbsp;of their arrival, followed by orders with a&nbsp;customer who is&nbsp;on the way. On the way orders that contain a&nbsp;provided ETA are shown first&nbsp;and are sequenced&nbsp;by their expected arrival time. Any on the way orders that do not have an ETA provided are shown last.<span style=\"color: rgb(231, 76, 60);\"> </span>The customer arrival time and pickup instructions are&nbsp;displayed&nbsp;on the Curbside Pickup&nbsp;and Order Detail screens. The menu count for Curbside Pickups menu considers only arrived status fulfillments. It does not include those&nbsp;whose customers are on the way.</p>\r\n\r\n<h5>Display Primary Pickup Person Details</h5>\r\n\r\n<p>When the order creator provides the primary pickup person’s details while placing the order, the curbside pickup UI will display those details&nbsp;on both the order list screen and details screen. Store associates can search for the order using either the primary pickup person’s or the order creator’s details. If the order creator&nbsp;provides&nbsp;details for an alternate pickup person who is not the primary pickup person, the curbside pickup&nbsp;order list screen&nbsp;will show the order creator’s details,&nbsp;and the details screen will display both the order creator’s and alternate pickup person’s details.</p>\r\n\r\n<p><strong>Summary Points:</strong></p>\r\n\r\n<ul data-editing-info=\"{&quot;orderedStyleType&quot;:1,&quot;unorderedStyleType&quot;:1}\">\r\n\t<li data-end=\"716\" data-start=\"624\">\r\n\t<p data-end=\"716\" data-start=\"626\"><strong data-end=\"652\" data-start=\"626\">Curbside Pickup Search:</strong> Allows searching order by either Ordered By or Primary Pickup person.</p>\r\n\t</li>\r\n\t<li data-end=\"825\" data-start=\"717\">\r\n\t<p data-end=\"825\" data-start=\"719\"><strong data-end=\"746\" data-start=\"719\">Curbside Pickup List UI:</strong> Shows Primary Pickup (if provided), or Ordered By (if no Primary Pickup exists).</p>\r\n\t</li>\r\n\t<li data-end=\"945\" data-start=\"826\">\r\n\t<p data-end=\"945\" data-start=\"828\"><strong data-end=\"858\" data-start=\"828\">Curbside Pickup Details UI:</strong> Displays Ordered By, Primary Pickup (if available), or Alternate Pickup (if provided).</p>\r\n\t</li>\r\n</ul>\r\n\r\n<p><u><strong>Examples:</strong></u></p>\r\n\r\n<p data-end=\"15\" data-start=\"0\"><strong data-end=\"15\" data-start=\"0\">Scenario 1:</strong></p>\r\n\r\n<ul>\r\n\t<li>Steve placed an order and listed Amy as the primary pickup person.</li>\r\n\t<li>The curbside pickup UI shows Amy’s name since she is the primary pickup person.</li>\r\n\t<li>Store associates can search for the order using either Amy's or Steve's details.</li>\r\n</ul>\r\n\r\n<p data-end=\"263\" data-start=\"248\"><strong data-end=\"263\" data-start=\"248\">Scenario 2:</strong></p>\r\n\r\n<ul>\r\n\t<li data-end=\"333\" data-start=\"265\">Steve placed an order and listed Amy as the alternate pickup person.</li>\r\n\t<li data-end=\"435\" data-start=\"335\">The curbside pickup UI displays Steve’s name, not Amy’s, since she is not the primary pickup person.</li>\r\n\t<li data-end=\"517\" data-is-last-node=\"\" data-is-only-node=\"\" data-start=\"437\">Store associates can search for the order using either Amy's or Steve's details.</li>\r\n</ul>\r\n\r\n<h5><a id=\"Configuration to require parking information\" name=\"Configuration to require parking information\"></a>Configuration to require parking information:</h5>\r\n\r\n<p>The text field for parking information on the 'I'm at the store' Curbside Pickup UI can be set to required through the DSS configuration UI. Once the configuration field&nbsp;'Curbside Parking and Vehicle Information Mandatory' is set to true, the customer can not select 'I'm at the store' until that information is provided. There is an asterick on the field along with text 'required' once this feature is enabled.&nbsp;</p>\r\n\r\n<h5><a id=\"Auto Refreshing SIF\" name=\"Auto Refreshing SIF\"></a>Automatic Refreshing</h5>\r\n\r\n<p>The Curbside Pickups screen can be enabled to reload automatically at a defined interval. Refer to <a href=\"/curbsidepickup$Automatic Refreshing Of Curbside Pickups Configuration\">Automatic Refreshing Of Curbside Pickups</a> for additional information.</p>\r\n\r\n<h4><a name=\"text-messaging\" id=\"text-messaging\"></a>Text Messaging</h4>\r\n\r\n<p>Once the store receives the notification that the customer has arrived, store associates can send a text message to the customer confirming that the store is&nbsp;aware of their arrival. The associate can choose from&nbsp;out of the box&nbsp;text message templates, a template created by the retailer,&nbsp;or directly type a message to the customer.</p>\r\n\r\n<p>The ability to send a&nbsp;text message and the ability to directly type text messages are controlled by two separate grants. Texts can only be sent to the phone number saved&nbsp;on the order. Texting to alternate pickup contacts is not supported. For an associate to be able to text a customer, the customer must have opted into the retailer's text program.</p>\r\n\r\n<h5><a id=\"Two-way text messaging - process\" name=\"Two-way text messaging - process\"></a>Two-way Text Messaging</h5>\r\n\r\n<p>When a customer replies to a store's message, retailers can configure the system to notify store associates on their devices.&nbsp;If the store associate&nbsp;taps on the push notification, the conversation popover is displayed. It lists the text messages exchanged between a store and the customer. The latest message is listed at the bottom and (visible by default) and the previous messages can be viewed by scrolling up. If the customer sends another message while the conversation popover is open, the screen automatically refreshes to show the latest message. In addition, if an associate opens the conversation popover but another associate has already replied to the customer, the screen shows the earlier reply as well. This&nbsp;helps to avoid&nbsp;multiple replies to the same message.&nbsp;</p>\r\n\r\n<p>After the popover is closed, the control navigates back to the page where the notification was tapped.&nbsp;As with other push notifications, the push notification bell icon's badge count&nbsp;on the Store home screen is&nbsp;updated for each unread notification.</p>\r\n\r\n<p>If the customer is not registered within the MAO application, the customer name will be replaced by the phone number from which the messages were texted. For example, the notification will be shown as a new message from 9921349322 instead of New message from Jack Reacher.</p>\r\n\r\n<div class=\"info\"><strong>Note:</strong> Customers can reply to the messages but cannot initiate a conversation with stores.</div>\r\n\r\n<h4><a name=\"notification-sounds\" id=\"notification-sounds\"></a><a id=\"Notification Sounds - Curbside\" name=\"Notification Sounds - Curbside\"></a>Notification Sounds</h4>\r\n\r\n<p>Specific sound files can be specified to alarm the store associates for notifications. Refer to&nbsp;<a hqid=\"2526052\" href=\"/push-notification\">Push Notifications</a>&nbsp;guide for additional information.&nbsp;Notification sound configuration is available in UI for curbside arrived and, on the way notifications. For incoming text notifications, the notification template needs to have a sound file specified. Refer to the&nbsp;<a href=\"/curbsidepickup$Two-way Text Messaging - Config1\">Two-way Text Messaging</a>&nbsp;section for details.</p>\r\n\r\n<h4><a name=\"optional-steps\" id=\"optional-steps\"></a>Optional Steps</h4>\r\n\r\n<p>Configuration determines if the&nbsp;customer's signature is required to complete the curbside order.&nbsp;Also, the verify customer ID configuration determines if&nbsp;the store associate must verify the customer ID in the Order Detail screen before the 'Confirm Pickup' button is enabled to complete the process.</p>\r\n\r\n<p>Based on configuration, associates can also be prompted to capture the actual pickup type (i.e., curbside or in store) that occurred for the order after the pickup is completed.</p>\r\n\r\n<h4><a name=\"exceptions\" id=\"exceptions\"></a>Exceptions</h4>\r\n\r\n<h5>Cancellation</h5>\r\n\r\n<p>For curbside pickups, the store associate&nbsp;can cancel a line item or&nbsp;the entire order during the pickup&nbsp;process if the customer does not want the item/order.</p>\r\n\r\n<p>If the associate needs to investigate an order that isn't listed (i.e., if a family member has&nbsp;already picked up the order, or the customer didn't notify the store upon his/her arrival),&nbsp;he/she can&nbsp;search for orders by order id, name, phone, or e-mail, which returns both curbside pickup and in-store orders.</p>\r\n\r\n<h5>Substitution during Picking</h5>\r\n\r\n<p>If an in-store substitution occurred, the substitute item is displayed&nbsp;in place of the ordered item in the Curbside Pickups Order Details UI. Such lines are also denoted by a red substituted indicator. If the store associate taps on such a line, the item details UI also displays the substitute item details along with a substituted indicator.</p>\r\n\r\n<p>For more details on substitution in stores, refer to its documentation <a href=\"https://omni.helpdocsonline.com/substitution-during-fulfillment$substitution-in-stores\">here</a>.</p>\r\n\r\n<p><span style=\"color: rgb(61, 61, 61); font-size: 20px;\">Curbside Pickup in Digital Self-Service</span></p>\r\n\r\n<h4><a name=\"digital-self-service-authentication\" id=\"digital-self-service-authentication\"></a>Digital Self-Service Authentication</h4>\r\n\r\n<p>See the <a hqid=\"2465749\" href=\"/overview-authentication$Accessing DSS and Authentication\">Overview & Authentication Guide </a>for information on accessing Digital Self-Service and for steps to configure authentication.</p>\r\n\r\n<h4><a name=\"customizing-for-your-brand\" id=\"customizing-for-your-brand\"></a>Customizing for your Brand</h4>\r\n\r\n<p>Digital Self-Service can be customized to reflect the look and feel of an individual brand. See the <a hqid=\"2465753\" href=\"/ui-theming-customization\">UI Theming & Customization Guide</a> for information on how the logo, fonts, colors, and labels can be customized.</p>\r\n\r\n<h4><a name=\"digital-self-service-ui-field-mappings\" id=\"digital-self-service-ui-field-mappings\"></a>Digital Self-Service UI Field Mappings</h4>\r\n\r\n<p>The text box for the customer&nbsp;to input their car and parking spot details is optional. A customer can click 'I'm at the store' without inputting any information into the text box.</p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-2\" class=\"toggle-content\"><span class=\"toggle-title\">Curbside Pickup Field Mappings</span></a></p><div id=\"tg-2\"><table>\n\t<colgroup>\n\t\t<col />\n\t\t<col />\n\t\t<col />\n\t\t<col />\n\t\t<col />\n\t</colgroup>\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>UI Field Name</th>\n\t\t\t<th style=\"width: 225px;\">Entity/Attribute</th>\n\t\t\t<th colspan=\"1\" style=\"width: 62px;\">Max Length</th>\n\t\t\t<th>Additional Logic</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Order</td>\n\t\t\t<td style=\"width: 222px;\">Order.OrderId</td>\n\t\t\t<td colspan=\"1\" style=\"width: 59px;\">50</td>\n\t\t\t<td>&nbsp;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td colspan=\"1\">Store Name</td>\n\t\t\t<td colspan=\"1\" style=\"width: 222px;\">Organization.Location.Address.DisplayId</td>\n\t\t\t<td colspan=\"1\" style=\"width: 59px;\">50</td>\n\t\t\t<td colspan=\"1\">\n\t\t\t<p>&nbsp;</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td colspan=\"1\">Store Address</td>\n\t\t\t<td colspan=\"1\" style=\"width: 222px;\">Organization.Location.Address</td>\n\t\t\t<td colspan=\"1\" style=\"width: 59px;\">N/A</td>\n\t\t\t<td colspan=\"1\">\n\t\t\t<p>Address is concatenated with comma ( , ) between all the fields&nbsp;(Address1 + Address2 + City + State)</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td colspan=\"1\">Phone Icon/Call Button</td>\n\t\t\t<td colspan=\"1\" style=\"width: 222px;\">Organization.Location.Address.Phone</td>\n\t\t\t<td colspan=\"1\" style=\"width: 59px;\">50</td>\n\t\t\t<td colspan=\"1\">&nbsp;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td colspan=\"1\">Map Icon/Get Directions</td>\n\t\t\t<td colspan=\"1\" style=\"width: 222px;\">Organization.Location.Address</td>\n\t\t\t<td colspan=\"1\" style=\"width: 59px;\">N/A</td>\n\t\t\t<td colspan=\"1\">Search String is concatenation of (Address1 + PostalCode + City + State + Country)</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td colspan=\"1\">Item Image</td>\n\t\t\t<td colspan=\"1\" style=\"width: 222px;\">Order.OrderLine.SmallImageURI</td>\n\t\t\t<td colspan=\"1\" style=\"width: 59px;\">750</td>\n\t\t\t<td colspan=\"1\">\n\t\t\t<p>If null, UI shows &#39;no item&#39; image&nbsp;</p>\n\n\t\t\t<p>Item image is linked to web URL if orderLine.itemWebURL is populated</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td colspan=\"1\">item Description</td>\n\t\t\t<td colspan=\"1\" style=\"width: 222px;\">Order.OrderLine.ItemShortDescription</td>\n\t\t\t<td colspan=\"1\" style=\"width: 59px;\">50</td>\n\t\t\t<td colspan=\"1\">If null, UI do not display</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td colspan=\"1\">Item Size</td>\n\t\t\t<td colspan=\"1\" style=\"width: 222px;\">Order.OrderLine.ItemSize</td>\n\t\t\t<td colspan=\"1\" style=\"width: 59px;\">100</td>\n\t\t\t<td colspan=\"1\">\n\t\t\t<p>If null, UI shows:&nbsp;&quot;Size: --&quot;</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td colspan=\"1\">Item Color</td>\n\t\t\t<td colspan=\"1\" style=\"width: 222px;\">Order.OrderLine.ItemColorDescription</td>\n\t\t\t<td colspan=\"1\" style=\"width: 59px;\">100</td>\n\t\t\t<td colspan=\"1\">\n\t\t\t<p>If null, UI shows:&nbsp;&quot;Color: --&quot;</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td colspan=\"1\">Item Price</td>\n\t\t\t<td colspan=\"1\" style=\"width: 222px;\">Order.OrderLine.UnitPrice</td>\n\t\t\t<td colspan=\"1\" style=\"width: 59px;\">16,2</td>\n\t\t\t<td colspan=\"1\">\n\t\t\t<ul>\n\t\t\t\t<li>Currency symbol displayed based on Order.Currency</li>\n\t\t\t\t<li>If currency is null, then defaulted to USD</li>\n\t\t\t</ul>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Quantity</td>\n\t\t\t<td style=\"width: 222px;\">Sum of quantity from fulfillment</td>\n\t\t\t<td colspan=\"1\" style=\"width: 59px;\">N/A</td>\n\t\t\t<td>\n\t\t\t<p>Quantity in Picked status</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td colspan=\"1\">I&#39;m at the Store</td>\n\t\t\t<td colspan=\"1\" style=\"width: 222px;\">Action button to notify the store that the customer has arrived</td>\n\t\t\t<td colspan=\"1\" style=\"width: 59px;\">N/A</td>\n\t\t\t<td colspan=\"1\">Enabled regardless of vehicle/parking spot info entered. Vehicle/parking spot info text is not mandatory.</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>&nbsp;</p>\n</div></div></p>\r\n\r\n<h4><a name=\"digital-self-service-localization\" id=\"digital-self-service-localization\"></a>Digital Self-Service Localization</h4>\r\n\r\n<p>Digital Self-Service can be translated into languages which are currently supported in Manhattan&nbsp;Active® Omni. See the <a hqid=\"2465753\" href=\"/ui-theming-customization$DSS Localization\">UI Theming & Customization Guide </a>for information localization.</p>\r\n\r\n<h4><a name=\"using-digital-self-service-store-fulfillment-with-cross-org-visibility\" id=\"using-digital-self-service-store-fulfillment-with-cross-org-visibility\"></a>Using Digital Self-Service & Store Fulfillment with Cross-Org Visibility</h4>\r\n\r\n<p>If cross-organization fulfillment is enabled (see more details here: <a hqid=\"2423112\" href=\"/cross-org-fulfillment-configuration\">Cross-Organization Fulfillment Guide</a>), then the order organization can differ from the fulfillment organization. This section describes how DSS supports cross-org fulfillment.</p>\r\n\r\n<ul>\r\n</ul>\r\n\r\n<h5>How Organization Switching works in Digital Self-Service</h5>\r\n\r\n<p>Digital Self-Service has the following logic to support cross-organization fulfillment, wherein the order organization differs from the fulfillment organization:</p>\r\n\r\n<ol>\r\n\t<li>Take location from DSS URL</li>\r\n\t<li>Get/Search location from the organization component (the location can always be retrieved regardless of in which org it exists, because the location entity is not profile-based)</li>\r\n\t<li>Get parentOrg of the location, set context with parentOrg</li>\r\n\t<li>Call Fulfillment with parentOrg in the context</li>\r\n</ol>\r\n\r\n<p>For example, if the following organization structure is in place:</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td colspan=\"2\">\r\n\t\t\t<p><strong>Europe Organization</strong></p>\r\n\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Store A</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong>France Organization</strong></p>\r\n\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Store B</li>\r\n\t\t\t\t<li>Parent Org = Europe</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<p><strong>Italy Organization</strong></p>\r\n\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Store C</li>\r\n\t\t\t\t<li>Parent Org = Europe</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>When&nbsp;an&nbsp;order is placed by a French customer, the order has organizationId = France. The order is allocated to the Italy store C, so the fulfillment is released to store C with&nbsp;organization = Italy. The DSS URL will include orgId = France (from the order); hence&nbsp;DSS will check for the configured&nbsp;user for the France org. This configured user needs to have access to the Europe and Italy orgs so that DSS can retrieve fulfillments from those orgs.</p>\r\n\r\n<h5>Required Configuration for Cross-Org Fulfillment in DSS</h5>\r\n\r\n<p>If cross-organization fulfillment is enabled, then the following needs to be taken care of&nbsp;for DSS to be able to access and update fulfillments across different organizations.</p>\r\n\r\n<ul>\r\n\t<li>Cross-organization fulfillment must be enabled&nbsp;for all organizations which require cross-org access.</li>\r\n\t<li>LocationId values must be unique across all organizations.</li>\r\n\t<li>The configured&nbsp;DSS user has access to all organizations within the entire org structure. For example, if the&nbsp;user in the below org structure is admin@france-org.com, then this user needs to be granted access to Europe-org and Italy-org in the Organization Users configuration (Users &gt; Organization Users in the application).</li>\r\n</ul>\r\n\r\n<h3><a name=\"configuration\" id=\"configuration\"></a>Configuration</h3>\r\n\r\n<p>Below is a&nbsp;checklist of all configuration or interface mapping changes required to enable curbside pickup.</p>\r\n\r\n<p>*Indicates that help is required by Manhattan services to complete this configuration. Otherwise, configuration can be done within the application or on external, customer-owned systems.</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width: 900px;\">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"row\">Order & Email</th>\r\n\t\t\t<td>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Populate the self-service host name, so the outbound order messages can form the full DSS URL*</li>\r\n\t\t\t\t<li>Enable the outbound Email Message or Publish Order messages for generating emails/texts</li>\r\n\t\t\t\t<li>Add the curbside pickup URL to existing Publish Order templates, to use in emails or texts</li>\r\n\t\t\t\t<li>Map the URL to existing emails or text messages to include a link to the Digital Self-Service curbside pickup</li>\r\n\t\t\t\t<li>In the inbound order interface, map Delivery Method Sub Type = Curbside for relevant order lines (optional)</li>\r\n\t\t\t\t<li>Add Delivery Method Sub Type to existing Publish Order templates, to use in emails or texts (optional)</li>\r\n\t\t\t\t<li>Configure required component properties for component-email and component-message if using email/texts</li>\r\n\t\t\t\t<li>Update any downstream mappings to consume the order&nbsp;line-level ‘Curbside’ attribute (e.g.&nbsp;Sales Postings, for reporting purposes) (optional)</li>\r\n\t\t\t\t<li>Enable 'On my Way' notifications to stores\r\n\t\t\t\t<ul>\r\n\t\t\t\t</ul>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t\t<td>See <a hqid=\"2497831\" href=\"/curbsidepickup$Order config\">detailed configuration steps here</a>.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"row\">Digital Self-Service</th>\r\n\t\t\t<td>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Enable required&nbsp;feature flags*</li>\r\n\t\t\t\t<li>Modify CSS fonts, colors, and logo&nbsp;to match your brand*</li>\r\n\t\t\t\t<li>Link the header logo to your e-commerce site or other URL (optional)</li>\r\n\t\t\t\t<li>Map the item webURL on the item interface to link item images to e-commerce (optional)</li>\r\n\t\t\t\t<li>Configure a user to be used by the Digital Self-Service UI for authenticating with backend APIs*</li>\r\n\t\t\t\t<li>If localization is required, verify, and update&nbsp;localized labels for supported locales. *</li>\r\n\t\t\t\t<li>If localization is required, ensure the orderLocale is populated with imported orders.</li>\r\n\t\t\t\t<li>Review the <a hqid=\"2465753\" href=\"/ui-theming-customization\">UI labels and error messages</a>, and customize as needed to fit your branding.</li>\r\n\t\t\t\t<li>Add a curbside-specific phone number for the store, instead of the phone number on the store location (optional)</li>\r\n\t\t\t\t<li>Configure a Google API license key&nbsp;in the KV store under&nbsp;selfservice.mapsKey&nbsp;(optional)*</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t\t<td>See <a hqid=\"2497831\" href=\"/curbsidepickup$DSS Config\">detailed configuration steps here</a>.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"row\">Store Fulfillment</th>\r\n\t\t\t<td>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Install the new mobile application*</li>\r\n\t\t\t\t<li>Add grant for Curbside Pickup menu option to required user groups</li>\r\n\t\t\t\t<li>Enable/disable sending text messages</li>\r\n\t\t\t\t<li>Add&nbsp;grant \"ui-fulfillment::fulfillment::curbside-sendtext-message\" for sending text messages to customers</li>\r\n\t\t\t\t<li>Add grant \"ui-fulfillment::fulfillment::curbside-sendtext-custom-messages\"&nbsp;for allowing store associates to send custom text messages to customers. The grant to send text messages (above) must also be added for&nbsp;this work.</li>\r\n\t\t\t\t<li>Enable push notifications, if not already enabled</li>\r\n\t\t\t\t<li>Enable/disable signature capture for curbside pickup orders as desired</li>\r\n\t\t\t\t<li>If two-way texts are required\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li>Inbound queue from Customer Interaction to push notifications should be configured</li>\r\n\t\t\t\t\t<li>The notification template should be configured to push a notification when customers reply to the text messages sent from the stores.</li>\r\n\t\t\t\t</ul>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>Enable automatic refreshing if required</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t\t<td>See <a hqid=\"2497831\" href=\"/curbsidepickup$store config\">detailed configuration steps here</a>.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"row\">Location</th>\r\n\t\t\t<td>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Enable/Disable Curbside PickUp for a specific location in the organization location entity</li>\r\n\t\t\t\t<li>The Curbside Pickup attribute is exposed in the pickup notification email so that customers can configure email templates based on the&nbsp;location level attribute.</li>\r\n\t\t\t\t<li>Setup contact number for contact type&nbsp;StoreInteractionContact</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t\t<td>See <a hqid=\"2497831\" href=\"/curbsidepickup$Curbside_Location_Configuration\">detailed configuration steps here.</a></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"row\">Customer Service</th>\r\n\t\t\t<td>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Add Delivery Method Sub Type configurations if curbside options are the same for all locations&nbsp;</li>\r\n\t\t\t\t<li>Enable \"Restrict Pickup Options by Location\" parameter if curbside options are controlled at a location level</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t\t<td>See <a hqid=\"2497831\" href=\"/curbsidepickup$Curbside_Location_Configuration\">detailed configuration steps here.</a></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"row\">Customer Interaction</th>\r\n\t\t\t<td>\r\n\t\t\t<p>If two-way texts are required</p>\r\n\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Enable push notifications on store devices for incoming text messages from customers to a store</li>\r\n\t\t\t\t<li>Configure outbound queue to push notifications should be configured</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t\t<td>See <a href=\"/curbsidepickup$Curstomer_Interaction_Configuration\">detailed configuration steps here.</a></td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<h4><a name=\"order-configuration\" id=\"order-configuration\"></a><a id=\"Order config\" name=\"Order config\"></a>Order Configuration</h4>\r\n\r\n<h5>Include&nbsp;DSS Link in Outbound Messages for Emails or Texts</h5>\r\n\r\n<p>For customers to access the self-service curbside pickup page, a link to this page must be provided in the email or text message which they receive.&nbsp;If pick up in a store is already supported, then existing emails or text messages are likely to be sent to customers when items are ready for pickup. This is typically triggered when items are picked by store associates, who updates the item to 'Picked' status on the order.&nbsp;</p>\r\n\r\n<p data-pm-slice=\"1 1 [&quot;bulletList&quot;,null,&quot;listItem&quot;,null]\"><img height=\"294\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/image(344).png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL2ltYWdlKDM0NCkucG5nIiwiQ29uZGl0aW9uIjp7IkRhdGVMZXNzVGhhbiI6eyJBV1M6RXBvY2hUaW1lIjoxNzU0NzUxNjIxfX19XX0_&Signature=JoyqyhLgUb8-yvFrmqfXoRwQ6YjCt9IStX8hyem6RO4hKbhCqqURwQ3UuIIsRfh7Bd3bxoPtgketxB2wUHuMIT9eb1HLOvq15dpq2zeAsi0EdcDCYJwdJtxBCpzArIEJtbGRIzRc8ukYt4LJEtJzFk7ch9U1Dh5FTfnq4OuA3LTZeeitc3tdVa4VRbnoqE3dRGeo0vF8GzUx0d0H1XXJCQLArEb5fYhZv3m8vrn2r9DrFAoYDLJN~deN4wThIw5lANmqwjPXCYLZUjycfwZFfuKwEjBk2xj70uedNEzyP9MY4wLwsyG1jrZdu7V6PkrYC~LE07AOqUPjyPR0Wgzo8Q__&Key-Pair-Id=K2TK3EG287XSFC\" style=\"width: 425px; height: 167px;\" width=\"750\"></p>\r\n\r\n<p>The DSS URL is populated in&nbsp;the&nbsp;SelfServiceUrl and ShortSelfServiceUrl&nbsp;fields, which are included&nbsp;in publish order outbound messages as well as relevant outbound email messages. The&nbsp;SelfServiceUrl and ShortSelfServiceUrl&nbsp;fields included in the publish order outbound messages will be populated any time the Picked quantity increases,&nbsp;irrespective of the delivery method sub type (for curbside and in-store pickup lines).</p>\r\n\r\n<p><strong>Note: </strong>The SelfServiceUrl and ShortSelfServiceUrl fields are never populated as part of the GET Order response. These URLs are formed dynamically as part of certain publish order or email message outbound messages.</p>\r\n\r\n<p>To trigger an outbound and to publish order message when items are ready for pickup, enable the Publish Order checkbox for Picked status on the Order Configuration &gt; Modification Rules UI (select the Quantity radio button). Outbound messages&nbsp;are generated any time the quantity moves to Picked status, so filtering logic needs to be added&nbsp;to the email layer to filter out for non-BOPIS flows. For example, emails or texts should not be triggered when stores pick items which are shipping to a customer's home, or&nbsp;in case WM systems also send Picked status updates.</p>\r\n\r\n<p data-pm-slice=\"1 1 [&quot;bulletList&quot;,null,&quot;listItem&quot;,null]\">To add the&nbsp;curbside pickup URL and Delivery Method Sub Type to existing Publish Order templates:</p>\r\n\r\n<ol>\r\n\t<li data-pm-slice=\"1 1 [&quot;bulletList&quot;,null,&quot;listItem&quot;,null]\">Find the template id being used for publishing outbound messages by navigating to Order Configuration &gt; General &gt; Publish Options</li>\r\n\t<li data-pm-slice=\"1 1 [&quot;bulletList&quot;,null,&quot;listItem&quot;,null]\">Get the template using GET&nbsp;/order/api/fwcore/responseTemplate/templateId/{TemplateId}</li>\r\n\t<li data-pm-slice=\"1 1 [&quot;bulletList&quot;,null,&quot;listItem&quot;,null]\">Add the following attributes to the template json:\r\n\t<ol>\r\n\t\t<li data-pm-slice=\"1 1 [&quot;bulletList&quot;,null,&quot;listItem&quot;,null]\">\"SelfServiceUrl\": null<span style=\"color: rgb(192, 57, 43);\"> </span>(add in the order line section)</li>\r\n\t\t<li data-pm-slice=\"1 1 [&quot;bulletList&quot;,null,&quot;listItem&quot;,null]\">\"DeliveryMethodSubType\":null (add in the order line section)</li>\r\n\t</ol>\r\n\t</li>\r\n\t<li data-pm-slice=\"1 1 [&quot;bulletList&quot;,null,&quot;listItem&quot;,null]\">Upload the updated&nbsp;template json to POST: /order/api/fwcore/responseTemplate/save:</li>\r\n</ol>\r\n\r\n<pre><code>{ \"TemplateId\": \"{TemplateId}\",\r\n&nbsp; \"BaseEntity\": \"Release\",\r\n&nbsp; \"TemplateJson\": \"{Your Template Goes Here}\"\r\n}</code>\r\n</pre>\r\n\r\n<p style=\"text-align: justify;\">With the help of services, populate the component property order.selfServiceHostName with the host information for Digital-Self Service in Order Component (path: CONFIG/COM-MANH-CP-ORDER,OM-SIDE/&nbsp;). This ensures that the DSS URL is ready to be included in emails or text messages. In the order component consul server config, add a value such as \"https://abc.manh.com\" for the selfServiceHostName property. Be sure to configure this with \"https:\" not \"http:\".</p>\r\n\r\n<h5><a id=\"on my way config emails\" name=\"on my way config emails\"></a>Enabling&nbsp;'On My Way' notifications to stores:</h5>\r\n\r\n<ul>\r\n\t<li>If using Active Omni email templates, upload the updated email templates for <a hqid=\"2444800\" href=\"/transactional-emails$Ready for pickup email template JSON\">ready for pickup</a> and <a hqid=\"2444800\" href=\"/transactional-emails$Pickup reminder email template JSON\">pickup reminders</a></li>\r\n\t<li>If embedding the DSS 'On My Way' link using the outbound Email Message, read the new&nbsp;SelfServiceOnMyWayUrl&nbsp;in your integration layer to include the link in your ready for pickup and pickup reminder emails</li>\r\n\t<li>If forming your own DSS URLs in your integration layer/email provider, add&nbsp;&onMyWay=true to the curbside URL included in your customer communications</li>\r\n</ul>\r\n\r\n<h4><a name=\"digital-self-service-configuration\" id=\"digital-self-service-configuration\"></a><a id=\"DSS Config\" name=\"DSS Config\"></a>Digital Self-Service Configuration</h4>\r\n\r\n<p>For the above list of required configurations in Digital Self-Service, below are some additional details.</p>\r\n\r\n<h5>Configure a User for the Digital Self-Service UI to authenticate with backend APIs*</h5>\r\n\r\n<p>See the <a hqid=\"2465749\" href=\"/overview-authentication$Accessing DSS and Authentication\">Overview & Authentication Guide </a>for&nbsp;steps to configure authentication.</p>\r\n\r\n<h5>Configuration to Customize for your Brand</h5>\r\n\r\n<p>For instructions to modify CSS fonts, colors, and logo to match your brand, see the <a hqid=\"2465753\" href=\"/ui-theming-customization\">UI Theming & Customization Guide</a>. To apply the updated CSS styling, work with services to update your environment.</p>\r\n\r\n<h5>Update Localized Labels</h5>\r\n\r\n<p>If multiple locales are required, view the Digital Self-Service UI in different locales by replacing the \"locale\" variable in the URL. For instance, to view the UI in French, replace \"locale=EN\" in the URL with \"locale=FR\". After testing the UI in all required locales (typically the same list as e-comm supports), work with services to make any required updates to the localized values by following steps in&nbsp;the <a hqid=\"2465753\" href=\"/ui-theming-customization$DSS Localization\">UI Theming & Customization Guide</a>.</p>\r\n\r\n<h5><a id=\"Curbside phone number\" name=\"Curbside phone number\"></a>Store Phone Number for Curbside</h5>\r\n\r\n<p>The customer has the option to call the store while viewing the Digital Self-Service page. By default, the phone number used is the store location's general phone number. However, it may be desired to use a different phone number, in case the store has a phone number specific for curbside, or if the store location phone number is used for other purposes. To add a curbside-specific phone number:</p>\r\n\r\n<ol>\r\n\t<li>Navigate to the Locations page and search for the store</li>\r\n\t<li>View the store location and select Location Contact</li>\r\n\t<li>Add a contact with&nbsp;Location Contact Type = Curbside Pickup and the desired phone number</li>\r\n\t<li>Save</li>\r\n</ol>\r\n\r\n<h4><a name=\"store-fulfillment-configuration\" id=\"store-fulfillment-configuration\"></a><a id=\"store config\" name=\"store config\"></a>Store Fulfillment Configuration</h4>\r\n\r\n<p>Work with the services team to enable the feature flag and install the latest mobile application to use this feature.</p>\r\n\r\n<h5>Resources for Update Pickup Fulfillments and Notify&nbsp;API</h5>\r\n\r\n<p data-pm-slice=\"1 1 []\">An API is called to&nbsp;indicate that the customer has arrived&nbsp;at the store and it&nbsp;performs the updates described earlier in this document. This API is invoked by DSS but can&nbsp;also be invoked by a custom screen. This API can also be used to indicate that the customer is on the way to the store along with an&nbsp;optional ETA in minutes. This API internally calls the notification method to send the notifications to the Firebase.&nbsp;This API is protected by the resource below.</p>\r\n\r\n<div class=\"computer_code\"><strong>API Name:</strong> URL: “/fulfillment/api/fulfillment/fulfillment/updatePickupFulfillmentsAndNotify”</div>\r\n\r\n<div class=\"computer_code\"><strong>Resource Name: </strong>api::fulfillment::updatepickupfulfillmentsandnotify::admin</div>\r\n\r\n<h5>Resources for Curbside Pickups Menu</h5>\r\n\r\n<p>Assign grants (resources) from the curbside pickups menu to the required user groups.</p>\r\n\r\n<div class=\"computer_code\" data-pm-slice=\"1 1 []\"><strong>Resource Name:</strong> ui-fulfillment::fulfillment::menu-curbsidepickups</div>\r\n\r\n<p>Assign grants (resources) to allow texting to customers&nbsp;to the required user groups.</p>\r\n\r\n<div class=\"computer_code\" data-pm-slice=\"1 1 []\"><strong>Resource Name:</strong> ui-fulfillment::fulfillment::curbside-sendtext-message</div>\r\n\r\n<h5>Push Notification for Curbside Pickup</h5>\r\n\r\n<p>For more information on how to enable push notifications, refer to&nbsp;the <a hqid=\"2526052\" href=\"/push-notification\">push notification</a>&nbsp;overview document.</p>\r\n\r\n<h5>Customer Signature Capture</h5>\r\n\r\n<p>Configuration&nbsp;in Store Fulfillment Parameters defines whether&nbsp;the customer's signature is captured for curbside pickup orders.&nbsp;The&nbsp;default in this configuration is set as 'Curbside'. Multiple delivery method subtypes can be configured in this configuration. Use colon (:) to separate delivery method subtypes.</p>\r\n\r\n<p>If the fulfillment has a delivery method subtype as 'InStore' and if the configuration&nbsp;value is set as 'InStore', then it skips the customer&nbsp;signature during the pickup of 'InStore' orders.&nbsp;&nbsp;If the value is not present in the new configuration, then it reads the OLD configuration (i.e. Skip customer signature capture before confirm pickup) and, based on the configuration, it skips or captures&nbsp;the customer signature.</p>\r\n\r\n<p>&nbsp;If the fulfillment has the delivery method subtype as NULL, then it always reads the old&nbsp;configuration (Skip customer signature capture before confirm pickup).</p>\r\n\r\n<div class=\"computer_code\"><strong>Configuration Name:</strong>&nbsp;Skip customer signature capture for the pickup subtypes</div>\r\n\r\n<h5>Customer Arrived UI Notification</h5>\r\n\r\n<p>Configuration&nbsp;in the Store Fulfillment Parameters defines whether&nbsp;the customer arrived curbside pickup notification should persist on the UI indefinitely or&nbsp;auto-dismiss after six&nbsp;seconds. The default value of this configuration is set as 'disabled', meaning the notification auto-dismisses.</p>\r\n\r\n<p>If the configuration is enabled, the notification remains on the UI and shows 'Dismiss' and 'View' buttons. Until the associate taps 'Dismiss' or 'View', the notification remains on the UI even upon navigating between screens. If the store associate&nbsp;doesn't tap on the toast message notification, and notifications for pickup order and customer shipment&nbsp;appear&nbsp;on the UI, then the&nbsp;pickup order and customer shipment notification will be shown on top of the curbside notification. After 6 seconds, the pickup order and customer shipment order&nbsp;notifications are dismissed automatically,&nbsp;but the curbside notification&nbsp;remains.</p>\r\n\r\n<p>The customer \"on their way\" notification is not controlled by this parameter&nbsp;and is always automatically dismissed after 6 seconds.</p>\r\n\r\n<div class=\"computer_code\"><strong>Configuration Name:</strong>&nbsp;Enable 'Dismiss' button for all push notifications.</div>\r\n\r\n<div class=\"tip\"><strong>Note</strong>:&nbsp;This&nbsp;Store Fulfillment Parameter applies to all push notifications, except “New pickup order”.</div>\r\n\r\n<h5><a id=\"Automatic Refreshing Of Curbside Pickups Configuration\" name=\"Automatic Refreshing Of Curbside Pickups Configuration\"></a>Automatic Refreshing Of Curbside Pickups</h5>\r\n\r\n<p>Configuration&nbsp;in the Store Fulfillment Parameters defines the interval in seconds to automatically reload the curbside pickups list. A value of less than 30 seconds is treated as a 30 second interval. The refresh interval time starts from the instance when the curbside pickups list was loaded or refreshed (automatic and manual).&nbsp;To stop automatic refreshing of the curbside pickup list, a value of 0 can be used or left with no value. A manual refresh option is always available to reload data anytime.</p>\r\n\r\n<div class=\"computer_code\"><strong>Configuration Name:</strong>&nbsp;Refresh interval in seconds for transaction screens that automatically reload</div>\r\n\r\n<h5><a id=\"Capture actual pickup type\" name=\"Capture actual pickup type\"></a>Capture Actual Pickup Type (Curbside or In-Store)</h5>\r\n\r\n<p>Immediately after the pickup process has been completed, associates can be prompted to select the actual pickup type (curbside or in-store). Retailers can use this data to analyze how many pickup orders were&nbsp;delivered&nbsp;curbside versus in-store. This is useful in&nbsp;scenarios when customers originally&nbsp;select one method during order capture&nbsp;but choose the other when they arrive at the store.</p>\r\n\r\n<p>If captured, this&nbsp;value is updated to the delivery method&nbsp;subtype attribute on the fulfillment. The original value of order capture is retained in the order delivery method subtype attribute.</p>\r\n\r\n<p>This&nbsp;functionality is controlled by configuration&nbsp;in Store Fulfillment Parameters&nbsp;and is disabled by default.</p>\r\n\r\n<div class=\"computer_code\"><strong>Configuration Name:</strong>&nbsp;Capture the actual pickup type of the pickup at store order during the pickup</div>\r\n\r\n<h4><a name=\"text-messaging\" id=\"text-messaging\"></a><a id=\"Text Messaging - Config\" name=\"Text Messaging - Config\"></a>Text Messaging</h4>\r\n\r\n<p>Configuration&nbsp;in Store Fulfillment Parameters defines whether stores can&nbsp;send a text to customers to provide updates about the delivery processing of curbside orders. When enabled, store associates with the necessary&nbsp;permissions can send these texts to customers.&nbsp;&nbsp;</p>\r\n\r\n<div class=\"computer_code\"><strong>Configuration Name:</strong>&nbsp;Allow store to text customers during curbside pickup</div>\r\n\r\n<p>For more information on how to enable text messages, refer to&nbsp;the <a href=\"https://omni.helpdocsonline.com/storecustomerengagement-configuration$text-message-configuration\">Text Message Configuration</a>. The following are some of the curbside related recommendations</p>\r\n\r\n<ul>\r\n\t<li>Text message templates\r\n\t<ul>\r\n\t\t<li>Use the text message types below to set customized curbside related text message templates\r\n\t\t<ul>\r\n\t\t\t<li>SIF-Curbside-CannedMessage - The store associate can just tap on the message to send a message</li>\r\n\t\t\t<li>SIF-Curbside-TypedMessage - The store associate can type a custom message to send to a customer</li>\r\n\t\t</ul>\r\n\t\t</li>\r\n\t\t<li>Use the Description property on the template to configure the display text. Consider a length that can be easily displayed on mobile devices.&nbsp;</li>\r\n\t\t<li>To configure text message templates, navigate to Application Configuration &gt; Manage POS Configuration&nbsp;&gt; POS Customer Engagement Configuration &gt; Text Message Template Configuration in configuration UI or use the below API\r\n\t\t<ul>\r\n\t\t\t<li>\r\n\t\t\t<div class=\"computer_code\">API Name: URL: “/text/api/text/textMsgTemplate/import”</div>\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t<div class=\"computer_code\"><strong>Sample:</strong></div>\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t<div class=\"computer_code\">Below sample sends order information only when fulfillment information exists as incoming messages don't have fullfillment context and replies to such messages can't have a fulfillment object.</div>\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t<div class=\"computer_code\">Sample also sends DO NOT REPLY at the end of the message when only one-way text is required.&nbsp;MiscellaneousData.IsOneWayEnabled is true when no push notifications are enabled for incoming text messages Interaction Configurations.</div>\r\n\r\n\t\t\t<ul>\r\n\t\t\t\t<li>\r\n\t\t\t\t<div class=\"computer_code\">{<br>\r\n\t\t\t\t&nbsp; \"data\": [<br>\r\n\t\t\t\t&nbsp; &nbsp; {<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"TemplateMsgId\": \"OnMyWay\",<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"Name\": \"OnMyWay\",<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"Description\": \"On my way\",<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"MessagePrefix\": null,<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"MessageSuffix\": null,<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"MessageBody\": \"We are getting your order now and will be out in 5 minutes. &lt;#if Fulfillment??&gt;Order ${Fulfillment.FulfillmentList[0].FulfillmentLine[0].OrderId}&lt;/#if&gt;.&lt;#if MiscellaneousData.IsOneWayEnabled == \\\"true\\\"&gt; DO NOT REPLY &lt;/#if&gt;\",<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"ConditionalExpression\": \"TextMsgTemplate.TemplateMsgId == \\\"OnMyWay\\\"\",<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"MessagePrefixInterval\": 0,<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"MessageSuffixInterval\": 0,<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"SequenceNumber\": 7,<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"TextMessageType\": {<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; \"TextMessageTypeId\": \"SIF-Curbside-CannedMessage\"<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; }<br>\r\n\t\t\t\t&nbsp; &nbsp; },<br>\r\n\t\t\t\t&nbsp; &nbsp; {<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"TemplateMsgId\": \"NeedFewMinutes\",<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"Name\": \"NeedFewMinutes\",<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"Description\": \"Need a few minutes\",<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"MessagePrefix\": null,<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"MessageSuffix\": null,<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"MessageBody\": \"We need a few minutes to get your order &lt;#if Fulfillment??&gt;${Fulfillment.FulfillmentList[0].FulfillmentLine[0].OrderId}&lt;/#if&gt;.&lt;#if MiscellaneousData.IsOneWayEnabled == \\\"true\\\"&gt; DO NOT REPLY &lt;/#if&gt;\",<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"ConditionalExpression\": \"TextMsgTemplate.TemplateMsgId == \\\"NeedFewMinutes\\\"\",<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"MessagePrefixInterval\": 0,<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"MessageSuffixInterval\": 0,<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"SequenceNumber\": 6,<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"TextMessageType\": {<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; \"TextMessageTypeId\": \"SIF-Curbside-CannedMessage\"<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; }<br>\r\n\t\t\t\t&nbsp; &nbsp; },<br>\r\n\t\t\t\t&nbsp; &nbsp; {<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"TemplateMsgId\": \"WeAreCallingYou\",<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"Name\": \"WeAreCallingYou\",<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"Description\": \"We are calling you\",<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"MessagePrefix\": null,<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"SequenceNumber\": 9,<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"MessageSuffix\": null,<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"MessageBody\": \"We are calling you regarding your order &lt;#if Fulfillment??&gt;${Fulfillment.FulfillmentList[0].FulfillmentLine[0].OrderId}&lt;/#if&gt;.&lt;#if MiscellaneousData.IsOneWayEnabled == \\\"true\\\"&gt; DO NOT REPLY &lt;/#if&gt;\",<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"ConditionalExpression\": \"TextMsgTemplate.TemplateMsgId == \\\"WeAreCallingYou\\\"\",<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"MessagePrefixInterval\": 0,<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"MessageSuffixInterval\": 0,<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"TextMessageType\": {<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; \"TextMessageTypeId\": \"SIF-Curbside-CannedMessage\"<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; }<br>\r\n\t\t\t\t&nbsp; &nbsp; },<br>\r\n\t\t\t\t&nbsp; &nbsp; {<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"TemplateMsgId\": \"PleaseCallStore\",<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"Name\": \"PleaseCallStore\",<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"Description\": \"Please call the store\",<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"MessagePrefix\": null,<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"MessageSuffix\": null,<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"MessageBody\": \"Please call the store at &lt;#list Location.LocationContact as contact&gt;&lt;#if contact.LocationContactType.LocationContactTypeId == \\\"StoreInteractionContact\\\"&gt; ${contact.PhoneNumber}&lt;/#if&gt;&lt;/#list&gt; with regards to your order.&lt;#if MiscellaneousData.IsOneWayEnabled == \\\"false\\\"&gt; DO NOT REPLY &lt;/#if&gt;\",<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"ConditionalExpression\": \"TextMsgTemplate.TemplateMsgId == \\\"PleaseCallStore\\\"\",<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"MessagePrefixInterval\": 0,<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"MessageSuffixInterval\": 0,<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"SequenceNumber\": 8,<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"TextMessageType\": {<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; \"TextMessageTypeId\": \"SIF-Curbside-CannedMessage\"<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; }<br>\r\n\t\t\t\t&nbsp; &nbsp; },<br>\r\n\t\t\t\t&nbsp; &nbsp; {<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"TemplateMsgId\": \"MsgCustomer\",<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"Name\": \"MsgCustomer\",<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"Description\": \"Message Customer\",<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"MessagePrefix\": null,<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"MessageSuffix\": null,<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"MessageBody\": \"&lt;#if Fulfillment??&gt;Regarding your order ${Fulfillment.FulfillmentList[0].FulfillmentLine[0].OrderId}.&lt;/#if&gt; ${CustomMsg.Msg}.&lt;#if MiscellaneousData.IsOneWayEnabled == \\\"true\\\"&gt; DO NOT REPLY &lt;/#if&gt;\",<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"ConditionalExpression\": \"TextMsgTemplate.TemplateMsgId == \\\"MsgCustomer\\\"\",<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"MessagePrefixInterval\": 0,<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"MessageSuffixInterval\": 0,<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"SequenceNumber\": 10,<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; \"TextMessageType\": {<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; \"TextMessageTypeId\": \"SIF-Curbside-TypedMessage\"<br>\r\n\t\t\t\t&nbsp; &nbsp; &nbsp; }<br>\r\n\t\t\t\t&nbsp; &nbsp; }<br>\r\n\t\t\t\t&nbsp; ]<br>\r\n\t\t\t\t}</div>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\t\t</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li>Setup a phone number for each store when configuring&nbsp;text message service providers such as Twilio. Set&nbsp;the same phone number as Store Interaction Contact in the contact section for the store.</li>\r\n\t<li>When only one-way texting is required,&nbsp;setup an auto responder in the text message service provider&nbsp;to be used if a customer replies back to a message sent by the store.</li>\r\n</ul>\r\n\r\n<ul>\r\n</ul>\r\n\r\n<h4><a name=\"two-way-text-messaging\" id=\"two-way-text-messaging\"></a><a id=\"Two-way Text Messaging - Config1\" name=\"Two-way Text Messaging - Config1\"></a>Two-way Text Messaging</h4>\r\n\r\n<h5><strong>Store Fulfillment Configurations</strong></h5>\r\n\r\n<p>Following is the inbound queue that needs to be setup in the fulfillment component if not already setup.</p>\r\n\r\n<div class=\"computer_code\"><strong>API Name: </strong>{URL}/fulfillment/api/ServiceDefinition/inBoundMessageType/save</div>\r\n\r\n<div class=\"computer_code\">{<br>\r\n&nbsp; \"MessageType\": \"PushNotificationMSGType\",<br>\r\n&nbsp; \"NoOfConsumer\": 10,<br>\r\n&nbsp; \"MinNoOfConsumer\": 1,<br>\r\n&nbsp; \"MaxDesiredInstances\": 6,<br>\r\n&nbsp; \"ScaleUpTimeWindow\": 10,<br>\r\n&nbsp; \"ScaleDownTimeWindow\": 20,<br>\r\n&nbsp; \"ServiceId\": \"PushNotificationListener\",<br>\r\n&nbsp; \"InBoundQueues\": {<br>\r\n&nbsp; &nbsp; \"QueueName\": \"queue.PushNotification\"<br>\r\n&nbsp; }<br>\r\n}</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Notification templates have to be setup in order to understand the messages in the push notification queue and push the notifications to the right devices. The following is the base template which can be modified.</p>\r\n\r\n<div class=\"computer_code\"><strong>API Name: </strong>{URL}/fulfillment/api/fulfillment/notificationTemplate/import</div>\r\n\r\n<div class=\"computer_code\">{<br>\r\n&nbsp; \"data\": [<br>\r\n&nbsp; &nbsp; {<br>\r\n&nbsp; &nbsp; &nbsp; \"NotificationTemplateId\": \"PushNotificationForIncomingTextMessage\",<br>\r\n&nbsp; &nbsp; &nbsp; \"Name\": \"PushNotificationForIncomingTextMessage\",<br>\r\n&nbsp; &nbsp; &nbsp; \"TopicName\": \"common-notification.&lt;#if StackName??&gt;${StackName}.&lt;#else&gt;&lt;/#if&gt;${TextMessage.OrgId}.${TextMessage.LocationId}\",<br>\r\n&nbsp; &nbsp; &nbsp; \"Description\": \"Push notification template for incoming text message\",<br>\r\n&nbsp; &nbsp; &nbsp; \"NotificationTitle\": \"New message from&lt;#if TextMessage.CustomerFirstName??&gt; ${TextMessage.CustomerFirstName}&lt;#else&gt;&lt;/#if&gt;&lt;#if TextMessage.CustomerLastName??&gt; ${TextMessage.CustomerLastName}&lt;#else&gt;&lt;/#if&gt;\",<br>\r\n&nbsp; &nbsp; &nbsp; \"ConditionalExpression\": \"Interaction.InteractionType.InteractionTypeId == \\\"TextMessage\\\" && TextMessage.IsIncoming == true && TextMessage.BusinessChannelId.BusinessChannelId == \\\"Store\\\" && (TextMessage.CustomerFirstName != null || TextMessage.CustomerLastName != null)\",<br>\r\n&nbsp; &nbsp; &nbsp; \"NotificationSound\": \"curbsidenotificationsound.mp3\",<br>\r\n&nbsp; &nbsp; &nbsp; \"NotificationPriority\": \"High\",<br>\r\n&nbsp; &nbsp; &nbsp; \"NotificationPayload\": [<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; {<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"NotificationBody\": \"New message from&lt;#if TextMessage.CustomerFirstName??&gt; ${TextMessage.CustomerFirstName}&lt;#else&gt;&lt;/#if&gt;&lt;#if TextMessage.CustomerLastName??&gt; ${TextMessage.CustomerLastName}&lt;#else&gt;&lt;/#if&gt;\",<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"PageId\": \"text-interaction-popup\",<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"LocalizeLabelKey\": \"notificationTitleLocalizedLabel\",<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"PagePayload\": [<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"PayloadKey\": \"CustomerId\",<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"PayloadValue\": \"&lt;#if TextMessage.CustomerId??&gt;${TextMessage.CustomerId}&lt;#else&gt;null&lt;/#if&gt;\"<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"PayloadKey\": \"CustomerPhone\",<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"PayloadValue\": \"${TextMessage.FromPhone}\"<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"PayloadKey\": \"CustomerFirstName\",<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"PayloadValue\": \"&lt;#if TextMessage.CustomerFirstName??&gt;${TextMessage.CustomerFirstName}&lt;#else&gt;null&lt;/#if&gt;\"<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"PayloadKey\": \"CustomerLastName\",<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"PayloadValue\": \"&lt;#if TextMessage.CustomerLastName??&gt;${TextMessage.CustomerLastName}&lt;#else&gt;null&lt;/#if&gt;\"<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"PayloadKey\": \"CountryCode\",<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"PayloadValue\": \"${TextMessage.ToCountry}\"<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"PayloadKey\": \"StoreInteractionContact\",<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"PayloadValue\": \"${TextMessage.ToPhone}\"<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"PayloadValue\": true<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ]<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; }<br>\r\n&nbsp; &nbsp; &nbsp; ]<br>\r\n&nbsp; &nbsp; },<br>\r\n&nbsp; &nbsp; {<br>\r\n&nbsp; &nbsp; &nbsp; \"NotificationTemplateId\": \"PushNotificationForMessageFromAnonymousCustomer\",<br>\r\n&nbsp; &nbsp; &nbsp; \"Name\": \"PushNotificationForMessageFromAnonymousCustomer\",<br>\r\n&nbsp; &nbsp; &nbsp; \"TopicName\": \"common-notification.&lt;#if StackName??&gt;${StackName}.&lt;#else&gt;&lt;/#if&gt;${TextMessage.OrgId}.${TextMessage.LocationId}\",<br>\r\n&nbsp; &nbsp; &nbsp; \"Description\": \"Push notification template for incoming text message from anonymous customer\",<br>\r\n&nbsp; &nbsp; &nbsp; \"NotificationTitle\": \"New message from ${TextMessage.FromPhone}\",<br>\r\n&nbsp; &nbsp; &nbsp; \"ConditionalExpression\": \"Interaction.InteractionType.InteractionTypeId == \\\"TextMessage\\\" && TextMessage.IsIncoming == true && TextMessage.BusinessChannelId.BusinessChannelId == \\\"Store\\\" && TextMessage.CustomerFirstName == null && TextMessage.CustomerLastName == null\",<br>\r\n&nbsp; &nbsp; &nbsp; \"NotificationSound\": \"curbsidenotificationsound.mp3\",<br>\r\n&nbsp; &nbsp; &nbsp; \"NotificationPriority\": \"High\",<br>\r\n&nbsp; &nbsp; &nbsp; \"NotificationPayload\": [<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; {<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"NotificationBody\": \"New message from ${TextMessage.FromPhone}\",<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"PageId\": \"text-interaction-popup\",<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"LocalizeLabelKey\": \"notificationTitleForAnonymousCustomer\",<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"PagePayload\": [<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"PayloadKey\": \"CustomerPhone\",<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"PayloadValue\": \"${TextMessage.FromPhone}\"<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"PayloadKey\": \"CountryCode\",<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"PayloadValue\": \"${TextMessage.ToCountry}\"<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"PayloadKey\": \"StoreInteractionContact\",<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"PayloadValue\": \"${TextMessage.ToPhone}\"<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"PayloadValue\": true<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ]<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; }<br>\r\n&nbsp; &nbsp; &nbsp; ]<br>\r\n&nbsp; &nbsp; }<br>\r\n&nbsp; ]<br>\r\n}</div>\r\n\r\n<div class=\"computer_code\"><strong>Topic:</strong> the Firebase topic to which store devices are subscribed to<br>\r\n<strong>NotificationTitle:</strong> Shown by the OS when app is inactive<br>\r\n<strong>NotificationSound: </strong>Should have a valid sound file that is packaged within the Store app that should be played when the notification arrives.&nbsp;<br>\r\n<strong>LocalizeLabelKey:</strong> Notification text&nbsp;to be shown in a specific language should be available in the KV store. Values for out of the box template are already available.<br>\r\n<br>\r\n<strong>NotificationTitle:</strong> Shown by the OS when app is inactive</div>\r\n\r\n<h5><a id=\"Customer Interaction - Config\" name=\"Customer Interaction - Config\"></a><a id=\"Curstomer_Interaction_Configuration\" name=\"Curstomer_Interaction_Configuration\"></a><strong>Customer Interaction Configuration</strong></h5>\r\n\r\n<p>The <strong>IsPushNotificationEnabled</strong> flag needs to be set to true to send messages to push the notification outbound queue for the applicable channel types. The following is the API and payload required to perform the same for the store channel.</p>\r\n\r\n<div class=\"computer_code\"><strong>API Name: </strong>{URL}/customerinteraction/api/customerinteraction/interactionConfig/save&nbsp;</div>\r\n\r\n<div class=\"computer_code\">{<br>\r\n&nbsp; \"ConfigId\": \"defaultConfig\",<br>\r\n&nbsp; \"EmailAddress\": \"system@dummyorg.com\",<br>\r\n&nbsp; \"PublishInboundTextInteraction\": [<br>\r\n&nbsp; &nbsp; {<br>\r\n&nbsp; &nbsp; &nbsp; \"BusinessChannelId\": {<br>\r\n&nbsp; &nbsp; &nbsp; &nbsp; \"BusinessChannelId\": \"Store\"<br>\r\n&nbsp; &nbsp; &nbsp; },<br>\r\n&nbsp; &nbsp; &nbsp; \"IsPushNotificationEnabled\": true<br>\r\n&nbsp; &nbsp; }<br>\r\n&nbsp; ]<br>\r\n}</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Following is the outbound queue&nbsp;that needs to be set</p>\r\n\r\n<div class=\"computer_code\"><strong>API Name:</strong> {URL}/customerinteraction/api/ServiceDefinition/outBoundMessageType/import</div>\r\n\r\n<div class=\"computer_code\">{<br>\r\n&nbsp; \"MessageType\": \"PushNotificationMSGType\",<br>\r\n&nbsp; \"Transactional\": true,<br>\r\n&nbsp; \"PersistMessageToMsgStore\": false,<br>\r\n&nbsp; \"OutBoundQueues\": {<br>\r\n&nbsp; &nbsp; \"QueueName\": \"queue.PushNotification\"<br>\r\n&nbsp; }<br>\r\n}</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Extension point to message type mapping should be set as below.</p>\r\n\r\n<div class=\"computer_code\"><strong>API Name: </strong>{URL}/customerinteraction/api/ServiceDefinition/extPointToMessageType/import</div>\r\n\r\n<div class=\"computer_code\">{<br>\r\n&nbsp; \"ExtensionPointId\": \"PushNotification\",<br>\r\n&nbsp; \"MessageType\": \"PushNotificationMSGType\"<br>\r\n}</div>\r\n\r\n<h4><a name=\"location-configuration\" id=\"location-configuration\"></a><a id=\"Curbside_Location_Configuration\" name=\"Curbside_Location_Configuration\"></a>Location Configuration</h4>\r\n\r\n<p>Retailers can configure whether a location is eligible for Pickup or Curbside or both. This allows them to configure emails accordingly so that the customer can choose to either pick the package up or opt for a curbside delivery depending on the location once they get the pick up notification.&nbsp;The new attribute CurbsidePickup can be configured in the location fulfillment attribute child entity under the organization location parent entity.</p>\r\n\r\n<ol>\r\n\t<li>Navigate to Menu -&gt; Master Data -&gt; Manage Locations -&gt; Locations.</li>\r\n\t<li>Search for the location that needs to be updated and click on View.</li>\r\n\t<li>Click on the Location Fulfillment Attribute tab and select the Curbside PickUp check box.</li>\r\n</ol>\r\n\r\n<p>As part of the curated message created for pickup notification email, the following child entities from the organization location entity are exposed.</p>\r\n\r\n<ul>\r\n\t<li>LocationFulfillmentAttr mapped to PickupStoreDetails.LocationFulfillmentAttr in the curated message. This will make sure that the PickupAtStore and CurbsidePickup flags are exposed in the Pickup notification curated messages.</li>\r\n\t<li>Address is mapped to PickupStoreDetails.Address in the curated message. Additionally, the location's address and postal code are also exposed on the PickUp notification curated messages.</li>\r\n</ul>\r\n\r\n<h3><a name=\"implementation-variations\" id=\"implementation-variations\"></a><a id=\"dss implementation variations\" name=\"dss implementation variations\"></a>Implementation Variations</h3>\r\n\r\n<p>Below are some examples of implementation variations in which&nbsp;Active® Omni curbside capabilities can be integrated with existing emails, texts, and&nbsp;third-party self-service application.</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"row\">Implementation Variation</th>\r\n\t\t\t<th scope=\"col\">Notify customer that the order is ready</th>\r\n\t\t\t<th scope=\"col\">A customer arrives at A store</th>\r\n\t\t\t<th scope=\"col\">Store associate is alerted</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"row\">Existing Email/Text with&nbsp;Digital Self-Service Curbside Pickup UI</th>\r\n\t\t\t<td>Augment existing email with link to Digital-Self Service</td>\r\n\t\t\t<td>Digital Self-Service Curbside Pickup UI</td>\r\n\t\t\t<td>Push notification in Store application</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"row\">Existing Email/Text with Custom Curbside Pickup UI</th>\r\n\t\t\t<td>Augment existing email with link to custom self-service UI</td>\r\n\t\t\t<td>Custom self-service app calls Store \"I'm at the store\" API</td>\r\n\t\t\t<td>Push notification in Store application</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<h4><a name=\"existing-email-text-with-custom-curbside-pickup-ui\" id=\"existing-email-text-with-custom-curbside-pickup-ui\"></a>Existing Email/Text with Custom Curbside Pickup UI</h4>\r\n\r\n<p>If using an external curbside pickup UI instead of Manhattan's, here are some integration pointers. The self-service application should make a few calls to Active® Omni Store Fulfillment:</p>\r\n\r\n<p><strong>Step 1:</strong> An authentication call to retrieve an OAuth token</p>\r\n\r\n<p><strong>Step 2: </strong>A call to get the list of fulfillments which are ready for pickup -&nbsp;POST to&nbsp;/fulfillment/api/fulfillment/fulfillment/search.<b> </b>Provide&nbsp;query input parameters such as the below to retrieve relevant curbside fulfillment:</p>\r\n\r\n<div class=\"computer_code\">\r\n<p>{ \"Query\": \"FulfillmentLine.OrderId = :orderID AND ShipFromLocationId = :locationID&nbsp;AND ((DeliveryMethodId ='PickUpAtStore') OR (DeliveryMethodId ='ShipToStore' AND DestinationActionId='Pickup'))\"}</p>\r\n</div>\r\n\r\n<p><strong>Step 3: </strong>A call to let the store know that the customer has arrived or the customer is on the way to the store to pick up certain fulfillment(s) -&nbsp;POST to&nbsp;/fulfillment/api/fulfillment/fulfillment/updatePickupFulfillmentsAndNotify.&nbsp;</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width: 705px;\" summary=\"Parameters to update pickup fulfillments and notify\">\r\n\t<caption>\r\n\t<p style=\"text-align: left;\">Parameters to updatePickupFulfillmentsAndNotify&nbsp;along with corresponding status updates:</p>\r\n\t</caption>\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\" style=\"width: 297px;\">Request parameters (not an exhaustive list)</th>\r\n\t\t\t<th scope=\"col\" style=\"width: 137px;\">Status updates</th>\r\n\t\t\t<th scope=\"col\" style=\"width: 233px;\">Dates/times updates</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 294px;\">A customer is on the way flag is not sent</td>\r\n\t\t\t<td style=\"width: 135px;\">\"Arrived\"</td>\r\n\t\t\t<td style=\"width: 231px;\">Arrival date and time are saved</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 294px;\">\r\n\t\t\t<p>The customer is on the way flag is provided as true</p>\r\n\r\n\t\t\t<p>ETA (in minutes) is null</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width: 135px;\">\"On the way\"</td>\r\n\t\t\t<td style=\"width: 231px;\">\r\n\t\t\t<p>Arrival date and time are not updated.</p>\r\n\r\n\t\t\t<p>Pickup ETA date and time are not updated</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 294px;\">\r\n\t\t\t<p>The customer is on the way flag is provided as true</p>\r\n\r\n\t\t\t<p>ETA (in minutes) is provided</p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"width: 135px;\">\"On the way\"</td>\r\n\t\t\t<td style=\"width: 231px;\">\r\n\t\t\t<p>Arrival date and time are not updated.</p>\r\n\r\n\t\t\t<p>Pickup ETA date and time is saved</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 294px;\">The customer is on the way flag is provided as false</td>\r\n\t\t\t<td style=\"width: 135px;\">Reset to \"Ready for pickup\"</td>\r\n\t\t\t<td style=\"width: 231px;\">\r\n\t\t\t<p>Arrival date and time not updated</p>\r\n\r\n\t\t\t<p>Pickup ETA date and time is cleared</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>Refer to the Fulfillment API documentation for more details on these APIs.</p>\r\n\r\n<h4><a name=\"allowing-customers-to-switch-from-curbside-to-in-store-in-store-to-curbside\" id=\"allowing-customers-to-switch-from-curbside-to-in-store-in-store-to-curbside\"></a>Allowing Customers to Switch from Curbside to In-Store, In-store to Curbside</h4>\r\n\r\n<p>You can offer the option for customers to change their mind at the time of pickup by including instructions or links in the emails/texts. In the email/text delivered when the items are ready for pickup:</p>\r\n\r\n<ul>\r\n\t<li>If the original order is designated as curbside pickup, but you want to provide the option for the customer to pick up in-store, then add verbiage to your email/text&nbsp;to make the customer aware of this option. If the customer walks into the store without using the DSS prompts to let the store know that they've arrived, then the pickup can be completed. After the pickup, the&nbsp;store associate can use the prompt to mark the pickup as 'In-Store'; otherwise, the pickup will remain categorized as curbside.</li>\r\n\t<li>If the original order is designated as in-store, but you want to provide the option for curbside pickup, then include a link to the DSS&nbsp;URL&nbsp;(or short URL if in text). This provides the customer to remain in their vehicle and request a curbside delivery upon arrival. When the customer uses the DSS UI to notify the store of their arrival, the fulfillment is automatically updated to 'Curbside'.</li>\r\n</ul>\r\n\r\n<p>The delivery method type&nbsp;actually chosen by the customer can optionally be captured by the store associate using a <a hqid=\"2497831\" href=\"/curbsidepickup$Capture actual pickup type\">post-pickup prompt</a>.</p>\r\n\r\n<h3><a name=\"feature-scope\" id=\"feature-scope\"></a>Feature Scope</h3>\r\n\r\n<p>The following features are not&nbsp;supported in the Curbside Pickup feature:</p>\r\n\r\n<ul>\r\n\t<li>Designating certain stores in MAO that support curbside pickup and others that do not</li>\r\n\t<li>Designating an order line as 'curbside' in Manhattan Active® Omni Point of Sale</li>\r\n\t<li>Calculating the ETA for other modes of transportation such as walking, cycling, or public transit is not supported within DSS</li>\r\n</ul>\r\n\r\n<h3><a name=\"rfid\" id=\"rfid\"></a>RFID</h3>\r\n\r\n<p>Store associates can fulfill curbside orders by reading their unit-level RFID tags using an RFID reader. When these orders are picked up by their respective customers, the units picked up as part of these orders are moved to \"Departed\" status.</p>\r\n\r\n<p>Please refer to the&nbsp;<a href=\"https://omni.helpdocsonline.com/storerfid\">Store RFID guide</a>&nbsp;for more information on the RFID support available in Stores.</p>\r\n\r\n<div class=\"tip\"><strong>Note</strong>: Any units which are cancelled right through the Curbside Pickup process or returned to shelf are moved back to \"Available\" from \"Reserved\".</div>\r\n\r\n<h3><a name=\"services\" id=\"services\"></a>Services</h3>\r\n\r\n<p>The&nbsp;APIs listed in the following table are referenced in this document. Refer to the API documentation for additional details on&nbsp;each service.</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\"><strong><font face=\"Open Sans, Arial, Helvetica, sans-serif\">Service</font></strong></th>\r\n\t\t\t<th scope=\"col\"><strong>Component</strong></th>\r\n\t\t\t<th scope=\"col\"><strong>Group</strong></th>\r\n\t\t\t<th scope=\"col\"><strong><font face=\"Open Sans, Arial, Helvetica, sans-serif\">Service Endpoint</font></strong></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Update Pickup Fulfillments And Notify</td>\r\n\t\t\t<td>Fulfillment</td>\r\n\t\t\t<td>fulfillment-process-controller</td>\r\n\t\t\t<td>fulfillment/api/fulfillment/fulfillment/updatePickupFulfillmentsAndNotify</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n\t  </div>\r\n </div>\r\n <div id=\"ui-page-fb-wrap\"></div>\r\n <div class=\"hiq-footer-wrap\">\r\n    \r\n                \r\n  </div>\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n",
  "content_length": 89741,
  "scraped_at": "2025-08-09T21:55:21.411202",
  "content_clean": "Home ››Manhattan Active® Omni››Order Management››Process & Configuration Guides››Digital Self-Service ››Curbside Pickup Curbside Pickup OverviewFunctional FlowNotifying Stores when Customers are 'On The Way'Curbside Order Capture & ProcessingCapturing Curbside Pickup Orders in Contact CenterCapturing Curbside Pickup Orders in E-CommerceCurbside Pickup in Store FulfillmentCustomer ArrivedText MessagingNotification SoundsOptional StepsExceptionsDigital Self-Service AuthenticationCustomizing for your BrandDigital Self-Service UI Field MappingsDigital Self-Service LocalizationUsing Digital Self-Service & Store Fulfillment with Cross-Org VisibilityConfigurationOrder ConfigurationDigital Self-Service ConfigurationStore Fulfillment ConfigurationText MessagingTwo-way Text MessagingLocation ConfigurationImplementation VariationsExisting Email/Text with Custom Curbside Pickup UIAllowing Customers to Switch from Curbside to In-Store, In-store to CurbsideFeature ScopeRFIDServices Overview Curbside pickup is a fast-growing alternative to the traditional buy online pick up in store (BOPIS) process. With curbside pickup, a customer places a store pickup order, drives to the store to pick up the items and notifies the store once he has arrived. A store associate is notified that the customer has arrived, who then locates the items and brings them outside to the customer's vehicle. In recent times, contact-less curbside pickup has become a safe alternative to in-store pickups. Manhattan Active® Omni delivers a seamless curbside pickup experience through Digital Self-Service (DSS) in conjunction with Store Inventory & Fulfillment (SIF). Here's how it works: A customer places an order online or in a Contact Center and designates it as a ‘Curbside Pickup’. Once the store picks the items, the customer receives an email or text message notifying that items are ready for pickup. This email/text contains a link to the DSS Curbside Pickup page. When the customer opens the DSS webpage, a push notification is then sent to the store to notify them that the customer is on the way. Once the customer arrives at the store, they click on the link which launches the DSS Curbside pickup page in a web browser on their device. In DSS, the customer inputs some information to help the associate locate the customer (i.e., description of their car or parking spot number) and clicks a button to indicate they have arrived. The store associate receives a push notification on their device that the customer has arrived to pick up the order. The associate can send a text message to the customer to confirm that their arrival message was received (i.e. \"On the way\" or \"Need a few minutes\"). If the customer replies to the message sent, a push notification arrives on the devices to alert the store associates. The associate carries the order items to the customer's vehicle, completing the pickup process. This guide gives an overview of the curbside pickup flow in Manhattan Active® Omni's Contact Center, Order Management, Digital Self-Service, and Store Inventory & Fulfillment applications. However, if third party applications are used instead of Manhattan applications, then integration details are provided to accomplish different plug-and-play variations. Note that Manhattan's Digital Self-Service application currently only integrates with Manhattan Store Fulfillment and does not provide hooks to integrate with third party store fulfillment applications. See the Implementation Variations section below for details. To know more on the  curbside pickup activity during offline mode, please refer to the Store Offline Support page. Functional Flow Curbside Flow Notifying Stores when Customers are 'On The Way' Two variations of the curbside pickup flow can be used: Notifying stores when customers are on their way and when they arrive: In this flow, a link to the 'I'm on my way' DSS page is included in the customer's ready for pickup email. When the customer opens the DSS Curbside page, the store is notified that the customer is on their way and is given an ETA*. When the customer inputs their car/parking information and clicks 'I'm at the store', the store is notified that the customer has arrived. Notifying stores when customers arrive: In this flow, a link to the 'I'm at the store' DSS page is included in the customer's ready for pickup email. When the customer opens the DSS page and inputs their car/parking information and clicks 'I'm at the store', the store is notified that the customer has arrived. Here, the store does not receive a notification that the customer is on their way. *The customer's ETA is provided to the store associate only if the customer consents to share their browser location on the DSS page. If the customer does not share their location in the browser prompt, the store still receives a notification that the customer is on the way, but no ETA is shared. If the customer notifies the store that they are coming, the 'Is Customer On The Way' attribute on the fulfillment is updated to true. If the optional ETA (in minutes) is sent, the 'Pickup ETA Date and Time' attribute is converted to a date/time by adding ETA minutes to the current time (in UTC format). A 'Curbside pickup customer is on their way' push notification is also sent to the store. A Google API Distance Matrix license is required to get the customer’s location and calculate their ETA. If a Google API license is not configured, the store can still be notified that the customer is on their way, but no ETA is provided. To enable the 'On My Way' notifications to stores, follow the steps here. When the customer notifies the store that they are on the way to pickup their curbside order, store can also optionally accept latitude and longitude and distance attributes and save geographical information about the customer that can be used for reporting purposes. Curbside Order Capture & Processing An item is designated as curbside pickup at the order line level. For a BOPIS order, the order line attribute \"Delivery Method Sub Type\" defines whether the line is a curbside pickup or an in-store pickup line. This field is used by downstream systems including: Email or text service providers (i.e., to include curbside instructions vs. in-store instructions in emails or texts) Sales audit or reporting systems This field is populated in the Release in Release Lines and the Release will be grouped by the Delivery Method Sub Type attribute along with other attributes that are currently used to group the Release. Please refer to the Release Guide - Release Grouping for more information. Delivery method sub-type values of 'Curbside' and 'InStore' are hard coded in the system and are not configurable. Delivery method sub-type should be populated only for lines with delivery methods 'PickUpAtStore' or 'ShipToStore'. If this field is populated with any unsupported values or for any other delivery methods, an error is returned. Capturing Curbside Pickup Orders in Contact Center In-store pickup items ordered at the contact center can be designated as curbside or in-store. The delivery method sub-type (curbside or in-store) can be captured on the Item Details UIweb while adding an item to an order. This attribute currently cannot be edited after an item is added, so a user must delete the line and add it again to modify the order. Delivery method sub-type is currently not visible on the Order Status, Order Details, or Edit Order pages. Curbside order capture can be enabled in the contact center at two levels: Organization level, if all locations in an organization are eligible for in store, curbside, or both options Location level, if only some stores support curbside Organization Level Curbside Pickup If the organization-level configuration is being used, then the curbside vs. in-store selection is made using radio buttons on the Item Details page. When a user selects 'pick up at store' as the delivery method for an item, they are presented with additional options between curbside or in-store. For the 'pick up at store' delivery method, there is an existing configuration to indicate what delivery method sub-types are supported (curbside, in-store, or both). To configure the delivery method sub types for each organization and their display sequence, use the Call Center Configuration > Delivery Method Sub Types UI. The lowest number in the sequence is displayed first. For example, if 'Curbside' has sequence 1 and 'In Store' has sequence 2, then the 'Curbside' radio button is the first option displayed in the list. The 'Is Default' attribute defines which Delivery Method Sub Type is selected by default. The following combinations can be configured: Delivery Method Available Sub-Type Selections Pick up in store Curbside In Store Curbside & In Store None Ship to store Curbside In Store Curbside & In Store None Location Level Curbside Pickup If curbside support is managed by location, then the ‘Curbside Pickup’ attribute is displayed on the store locator popup. If a location allows curbside pickup, an option to select 'Curbside' is displayed in the store locator popup. When curbside support is managed by location, the delivery method sub type options are not enabled on the Item Details page, even if Delivery Method Sub Types are configured in the Call Center Configuration. If managing curbside order capture at a location level, the following configurations are required: Configuration UI Configuration Parameter Description Location Location Fulfillment Attribute > Curbside Pickup To make a location eligible for curbside pickup, set \"Curbside Pickup\" = true in the Org Location. See detailed configuration steps here. Call Center Restrict Pickup Options by Location This parameter indicates if the Curbside pickup is managed at a location level. If this parameter is enabled, the ‘Curbside Pickup’ attribute is displayed on the store locator popup with an option to select 'Curbside' if the location allows curbside pickup. If this parameter is disabled, the \"Curbside Pickup\" column is not displayed on the Store Locator. This parameter is disabled by default. The curbside pickup options behave as follows in the store locator. These scenarios assume inventory is available for the Pickup At Store view. If inventory is not available, Pickup At Store cannot be selected. Org Location Pickup At Store Action Curbside Pickup Options Curbside Pickup - Disabled Pickup At Store - Disabled Pickup At Store action button is disabled. None (there are not any options to select) Curbside Pickup - Disabled Pickup At Store - Enabled Pickup At Store action button is enabled. None (there are not any options to select) Curbside Pickup - Enabled Pickup At Store - Disabled Pickup At Store action button is enabled. \"Curbside Only\" is visible for the location. This cannot be de-selected Curbside Pickup - Enabled Pickup At Store - Enabled Pickup At Store action button is enabled. A \"Curbside\" checkbox is available for selection. By default, it is de-selected The Ship To Store button behavior in the store locator is not impacted by the \"Curbside Pickup\" parameter. If Ship To Store is not enabled at a location, it cannot be selected in the Store Locator. Capturing Curbside Pickup Orders in E-Commerce For orders imported from e-commerce or other order capture systems, the delivery method sub-type should be populated as 'Curbside' for BOPIS and Ship to Store items which require curbside pickup. Mapping Details Interface: Create Order Attribute: Order.OrderLine.DeliveryMethodSubType How to Populate: Set to 'Curbside' for items requiring curbside pickup. Leave null or set to 'InStore' for traditional in-store pickups. Populate only for lines with delivery methods 'PickUpAtStore' or 'ShipToStore'; Do not populate for ShipToAddress lines. Note: This attribute currently cannot be modified in the contact center. Once an order is released, this attribute cannot be updated. However, the customer can switch from in-store to curbside or vice-versa by using email or text communications. See more details here. Curbside Pickup in Store Fulfillment Curbside pickups follow the same process for releasing the store and picking as in-store orders. Refer to the Picking guide for additional information. The processes BOPIS and curbside pickup orders differ only after the customer arrives for pickup. The key pieces of information below are saved on the fulfillment for curbside pickups: The ‘Delivery Method Sub Type’ attribute on the fulfillment differentiates ‘Curbside’ versus ‘InStore’ pickup orders. If the customer indicates that they are en route to the store, the 'Is Customer On The Way' attribute on the fulfillment is updated. The customer's ETA (in minutes) can optionally be included and is saved as a timestamp in the 'Pickup ETA Date and Time' attribute on the fulfillment. The ‘Pickup Arrival Date and Time’ attribute on the fulfillment is updated with the customer's arrival time. The ‘Pickup’ fulfillment instruction type stores any information that the customer provides to help the associate locate them, such as vehicle description or parking spot number. Customer Arrived Once the customer notifies the store that they have arrived at the store, they can either walk-in and pick up their order in the store or select \"Curbside\". If \"Curbside\" is selected, the 'Delivery Method Sub-Type' attribute is updated with the value 'Curbside', the ‘Pickup Arrival Date and Time’ is updated with the customer's arrival time (in UTC format), and a push notification is sent to the store's devices. Note: Only fulfillments in Picked (3000.000) or Sort (3300.000) status are eligible for curbside pickup. If the fulfillment status is not Picked or Sort, the error message “Order [fulfillment number] with status (status ID) is not valid for pickup” is returned when SIF is notified that the customer has arrived. Store associates use the Curbside Pickups menu to confirm the pickup process for curbside orders. If the store associates tap on the push notification, they navigate directly to the Curbside Pickup screen. As with other push notifications, the push notification bell icon's badge count on the Store home screen is updated for each unread notification. The menu is protected by a resource; hence, store associates must have the corresponding grant to confirm the pickup for these orders. Upon entering the Curbside Pickup UI, the screen only displays curbside orders which are ready for pickup and the customer has either arrived or has notified that they are on the way. Of these orders, arrived orders are listed first in order of their arrival, followed by orders with a customer who is on the way. On the way orders that contain a provided ETA are shown first and are sequenced by their expected arrival time. Any on the way orders that do not have an ETA provided are shown last. The customer arrival time and pickup instructions are displayed on the Curbside Pickup and Order Detail screens. The menu count for Curbside Pickups menu considers only arrived status fulfillments. It does not include those whose customers are on the way. Display Primary Pickup Person Details When the order creator provides the primary pickup person’s details while placing the order, the curbside pickup UI will display those details on both the order list screen and details screen. Store associates can search for the order using either the primary pickup person’s or the order creator’s details. If the order creator provides details for an alternate pickup person who is not the primary pickup person, the curbside pickup order list screen will show the order creator’s details, and the details screen will display both the order creator’s and alternate pickup person’s details. Summary Points: Curbside Pickup Search: Allows searching order by either Ordered By or Primary Pickup person. Curbside Pickup List UI: Shows Primary Pickup (if provided), or Ordered By (if no Primary Pickup exists). Curbside Pickup Details UI: Displays Ordered By, Primary Pickup (if available), or Alternate Pickup (if provided). Examples: Scenario 1: Steve placed an order and listed Amy as the primary pickup person. The curbside pickup UI shows Amy’s name since she is the primary pickup person. Store associates can search for the order using either Amy's or Steve's details. Scenario 2: Steve placed an order and listed Amy as the alternate pickup person. The curbside pickup UI displays Steve’s name, not Amy’s, since she is not the primary pickup person. Store associates can search for the order using either Amy's or Steve's details. Configuration to require parking information: The text field for parking information on the 'I'm at the store' Curbside Pickup UI can be set to required through the DSS configuration UI. Once the configuration field 'Curbside Parking and Vehicle Information Mandatory' is set to true, the customer can not select 'I'm at the store' until that information is provided. There is an asterick on the field along with text 'required' once this feature is enabled. Automatic Refreshing The Curbside Pickups screen can be enabled to reload automatically at a defined interval. Refer to Automatic Refreshing Of Curbside Pickups for additional information. Text Messaging Once the store receives the notification that the customer has arrived, store associates can send a text message to the customer confirming that the store is aware of their arrival. The associate can choose from out of the box text message templates, a template created by the retailer, or directly type a message to the customer. The ability to send a text message and the ability to directly type text messages are controlled by two separate grants. Texts can only be sent to the phone number saved on the order. Texting to alternate pickup contacts is not supported. For an associate to be able to text a customer, the customer must have opted into the retailer's text program. Two-way Text Messaging When a customer replies to a store's message, retailers can configure the system to notify store associates on their devices. If the store associate taps on the push notification, the conversation popover is displayed. It lists the text messages exchanged between a store and the customer. The latest message is listed at the bottom and (visible by default) and the previous messages can be viewed by scrolling up. If the customer sends another message while the conversation popover is open, the screen automatically refreshes to show the latest message. In addition, if an associate opens the conversation popover but another associate has already replied to the customer, the screen shows the earlier reply as well. This helps to avoid multiple replies to the same message. After the popover is closed, the control navigates back to the page where the notification was tapped. As with other push notifications, the push notification bell icon's badge count on the Store home screen is updated for each unread notification. If the customer is not registered within the MAO application, the customer name will be replaced by the phone number from which the messages were texted. For example, the notification will be shown as a new message from 9921349322 instead of New message from Jack Reacher. Note: Customers can reply to the messages but cannot initiate a conversation with stores. Notification Sounds Specific sound files can be specified to alarm the store associates for notifications. Refer to Push Notifications guide for additional information. Notification sound configuration is available in UI for curbside arrived and, on the way notifications. For incoming text notifications, the notification template needs to have a sound file specified. Refer to the Two-way Text Messaging section for details. Optional Steps Configuration determines if the customer's signature is required to complete the curbside order. Also, the verify customer ID configuration determines if the store associate must verify the customer ID in the Order Detail screen before the 'Confirm Pickup' button is enabled to complete the process. Based on configuration, associates can also be prompted to capture the actual pickup type (i.e., curbside or in store) that occurred for the order after the pickup is completed. Exceptions Cancellation For curbside pickups, the store associate can cancel a line item or the entire order during the pickup process if the customer does not want the item/order. If the associate needs to investigate an order that isn't listed (i.e., if a family member has already picked up the order, or the customer didn't notify the store upon his/her arrival), he/she can search for orders by order id, name, phone, or e-mail, which returns both curbside pickup and in-store orders. Substitution during Picking If an in-store substitution occurred, the substitute item is displayed in place of the ordered item in the Curbside Pickups Order Details UI. Such lines are also denoted by a red substituted indicator. If the store associate taps on such a line, the item details UI also displays the substitute item details along with a substituted indicator. For more details on substitution in stores, refer to its documentation here. Curbside Pickup in Digital Self-Service Digital Self-Service Authentication See the Overview & Authentication Guide for information on accessing Digital Self-Service and for steps to configure authentication. Customizing for your Brand Digital Self-Service can be customized to reflect the look and feel of an individual brand. See the UI Theming & Customization Guide for information on how the logo, fonts, colors, and labels can be customized. Digital Self-Service UI Field Mappings The text box for the customer to input their car and parking spot details is optional. A customer can click 'I'm at the store' without inputting any information into the text box. Curbside Pickup Field Mappings UI Field Name Entity/Attribute Max Length Additional Logic Order Order.OrderId 50 Store Name Organization.Location.Address.DisplayId 50 Store Address Organization.Location.Address N/A Address is concatenated with comma ( , ) between all the fields (Address1 + Address2 + City + State) Phone Icon/Call Button Organization.Location.Address.Phone 50 Map Icon/Get Directions Organization.Location.Address N/A Search String is concatenation of (Address1 + PostalCode + City + State + Country) Item Image Order.OrderLine.SmallImageURI 750 If null, UI shows 'no item' image Item image is linked to web URL if orderLine.itemWebURL is populated item Description Order.OrderLine.ItemShortDescription 50 If null, UI do not display Item Size Order.OrderLine.ItemSize 100 If null, UI shows: \"Size: --\" Item Color Order.OrderLine.ItemColorDescription 100 If null, UI shows: \"Color: --\" Item Price Order.OrderLine.UnitPrice 16,2 Currency symbol displayed based on Order.Currency If currency is null, then defaulted to USD Quantity Sum of quantity from fulfillment N/A Quantity in Picked status I'm at the Store Action button to notify the store that the customer has arrived N/A Enabled regardless of vehicle/parking spot info entered. Vehicle/parking spot info text is not mandatory. Digital Self-Service Localization Digital Self-Service can be translated into languages which are currently supported in Manhattan Active® Omni. See the UI Theming & Customization Guide for information localization. Using Digital Self-Service & Store Fulfillment with Cross-Org Visibility If cross-organization fulfillment is enabled (see more details here: Cross-Organization Fulfillment Guide), then the order organization can differ from the fulfillment organization. This section describes how DSS supports cross-org fulfillment. How Organization Switching works in Digital Self-Service Digital Self-Service has the following logic to support cross-organization fulfillment, wherein the order organization differs from the fulfillment organization: Take location from DSS URL Get/Search location from the organization component (the location can always be retrieved regardless of in which org it exists, because the location entity is not profile-based) Get parentOrg of the location, set context with parentOrg Call Fulfillment with parentOrg in the context For example, if the following organization structure is in place: Europe Organization Store A France Organization Store B Parent Org = Europe Italy Organization Store C Parent Org = Europe When an order is placed by a French customer, the order has organizationId = France. The order is allocated to the Italy store C, so the fulfillment is released to store C with organization = Italy. The DSS URL will include orgId = France (from the order); hence DSS will check for the configured user for the France org. This configured user needs to have access to the Europe and Italy orgs so that DSS can retrieve fulfillments from those orgs. Required Configuration for Cross-Org Fulfillment in DSS If cross-organization fulfillment is enabled, then the following needs to be taken care of for DSS to be able to access and update fulfillments across different organizations. Cross-organization fulfillment must be enabled for all organizations which require cross-org access. LocationId values must be unique across all organizations. The configured DSS user has access to all organizations within the entire org structure. For example, if the user in the below org structure is admin@france-org.com, then this user needs to be granted access to Europe-org and Italy-org in the Organization Users configuration (Users > Organization Users in the application). Configuration Below is a checklist of all configuration or interface mapping changes required to enable curbside pickup. *Indicates that help is required by Manhattan services to complete this configuration. Otherwise, configuration can be done within the application or on external, customer-owned systems. Order & Email Populate the self-service host name, so the outbound order messages can form the full DSS URL* Enable the outbound Email Message or Publish Order messages for generating emails/texts Add the curbside pickup URL to existing Publish Order templates, to use in emails or texts Map the URL to existing emails or text messages to include a link to the Digital Self-Service curbside pickup In the inbound order interface, map Delivery Method Sub Type = Curbside for relevant order lines (optional) Add Delivery Method Sub Type to existing Publish Order templates, to use in emails or texts (optional) Configure required component properties for component-email and component-message if using email/texts Update any downstream mappings to consume the order line-level ‘Curbside’ attribute (e.g. Sales Postings, for reporting purposes) (optional) Enable 'On my Way' notifications to stores See detailed configuration steps here. Digital Self-Service Enable required feature flags* Modify CSS fonts, colors, and logo to match your brand* Link the header logo to your e-commerce site or other URL (optional) Map the item webURL on the item interface to link item images to e-commerce (optional) Configure a user to be used by the Digital Self-Service UI for authenticating with backend APIs* If localization is required, verify, and update localized labels for supported locales. * If localization is required, ensure the orderLocale is populated with imported orders. Review the UI labels and error messages, and customize as needed to fit your branding. Add a curbside-specific phone number for the store, instead of the phone number on the store location (optional) Configure a Google API license key in the KV store under selfservice.mapsKey (optional)* See detailed configuration steps here. Store Fulfillment Install the new mobile application* Add grant for Curbside Pickup menu option to required user groups Enable/disable sending text messages Add grant \"ui-fulfillment::fulfillment::curbside-sendtext-message\" for sending text messages to customers Add grant \"ui-fulfillment::fulfillment::curbside-sendtext-custom-messages\" for allowing store associates to send custom text messages to customers. The grant to send text messages (above) must also be added for this work. Enable push notifications, if not already enabled Enable/disable signature capture for curbside pickup orders as desired If two-way texts are required Inbound queue from Customer Interaction to push notifications should be configured The notification template should be configured to push a notification when customers reply to the text messages sent from the stores. Enable automatic refreshing if required See detailed configuration steps here. Location Enable/Disable Curbside PickUp for a specific location in the organization location entity The Curbside Pickup attribute is exposed in the pickup notification email so that customers can configure email templates based on the location level attribute. Setup contact number for contact type StoreInteractionContact See detailed configuration steps here. Customer Service Add Delivery Method Sub Type configurations if curbside options are the same for all locations Enable \"Restrict Pickup Options by Location\" parameter if curbside options are controlled at a location level See detailed configuration steps here. Customer Interaction If two-way texts are required Enable push notifications on store devices for incoming text messages from customers to a store Configure outbound queue to push notifications should be configured See detailed configuration steps here. Order Configuration Include DSS Link in Outbound Messages for Emails or Texts For customers to access the self-service curbside pickup page, a link to this page must be provided in the email or text message which they receive. If pick up in a store is already supported, then existing emails or text messages are likely to be sent to customers when items are ready for pickup. This is typically triggered when items are picked by store associates, who updates the item to 'Picked' status on the order. The DSS URL is populated in the SelfServiceUrl and ShortSelfServiceUrl fields, which are included in publish order outbound messages as well as relevant outbound email messages. The SelfServiceUrl and ShortSelfServiceUrl fields included in the publish order outbound messages will be populated any time the Picked quantity increases, irrespective of the delivery method sub type (for curbside and in-store pickup lines). Note: The SelfServiceUrl and ShortSelfServiceUrl fields are never populated as part of the GET Order response. These URLs are formed dynamically as part of certain publish order or email message outbound messages. To trigger an outbound and to publish order message when items are ready for pickup, enable the Publish Order checkbox for Picked status on the Order Configuration > Modification Rules UI (select the Quantity radio button). Outbound messages are generated any time the quantity moves to Picked status, so filtering logic needs to be added to the email layer to filter out for non-BOPIS flows. For example, emails or texts should not be triggered when stores pick items which are shipping to a customer's home, or in case WM systems also send Picked status updates. To add the curbside pickup URL and Delivery Method Sub Type to existing Publish Order templates: Find the template id being used for publishing outbound messages by navigating to Order Configuration > General > Publish Options Get the template using GET /order/api/fwcore/responseTemplate/templateId/{TemplateId} Add the following attributes to the template json: \"SelfServiceUrl\": null (add in the order line section) \"DeliveryMethodSubType\":null (add in the order line section) Upload the updated template json to POST: /order/api/fwcore/responseTemplate/save: { \"TemplateId\": \"{TemplateId}\", \"BaseEntity\": \"Release\", \"TemplateJson\": \"{Your Template Goes Here}\" } With the help of services, populate the component property order.selfServiceHostName with the host information for Digital-Self Service in Order Component (path: CONFIG/COM-MANH-CP-ORDER,OM-SIDE/ ). This ensures that the DSS URL is ready to be included in emails or text messages. In the order component consul server config, add a value such as \"https://abc.manh.com\" for the selfServiceHostName property. Be sure to configure this with \"https:\" not \"http:\". Enabling 'On My Way' notifications to stores: If using Active Omni email templates, upload the updated email templates for ready for pickup and pickup reminders If embedding the DSS 'On My Way' link using the outbound Email Message, read the new SelfServiceOnMyWayUrl in your integration layer to include the link in your ready for pickup and pickup reminder emails If forming your own DSS URLs in your integration layer/email provider, add &onMyWay=true to the curbside URL included in your customer communications Digital Self-Service Configuration For the above list of required configurations in Digital Self-Service, below are some additional details. Configure a User for the Digital Self-Service UI to authenticate with backend APIs* See the Overview & Authentication Guide for steps to configure authentication. Configuration to Customize for your Brand For instructions to modify CSS fonts, colors, and logo to match your brand, see the UI Theming & Customization Guide. To apply the updated CSS styling, work with services to update your environment. Update Localized Labels If multiple locales are required, view the Digital Self-Service UI in different locales by replacing the \"locale\" variable in the URL. For instance, to view the UI in French, replace \"locale=EN\" in the URL with \"locale=FR\". After testing the UI in all required locales (typically the same list as e-comm supports), work with services to make any required updates to the localized values by following steps in the UI Theming & Customization Guide. Store Phone Number for Curbside The customer has the option to call the store while viewing the Digital Self-Service page. By default, the phone number used is the store location's general phone number. However, it may be desired to use a different phone number, in case the store has a phone number specific for curbside, or if the store location phone number is used for other purposes. To add a curbside-specific phone number: Navigate to the Locations page and search for the store View the store location and select Location Contact Add a contact with Location Contact Type = Curbside Pickup and the desired phone number Save Store Fulfillment Configuration Work with the services team to enable the feature flag and install the latest mobile application to use this feature. Resources for Update Pickup Fulfillments and Notify API An API is called to indicate that the customer has arrived at the store and it performs the updates described earlier in this document. This API is invoked by DSS but can also be invoked by a custom screen. This API can also be used to indicate that the customer is on the way to the store along with an optional ETA in minutes. This API internally calls the notification method to send the notifications to the Firebase. This API is protected by the resource below. API Name: URL: “/fulfillment/api/fulfillment/fulfillment/updatePickupFulfillmentsAndNotify” Resource Name: api::fulfillment::updatepickupfulfillmentsandnotify::admin Resources for Curbside Pickups Menu Assign grants (resources) from the curbside pickups menu to the required user groups. Resource Name: ui-fulfillment::fulfillment::menu-curbsidepickups Assign grants (resources) to allow texting to customers to the required user groups. Resource Name: ui-fulfillment::fulfillment::curbside-sendtext-message Push Notification for Curbside Pickup For more information on how to enable push notifications, refer to the push notification overview document. Customer Signature Capture Configuration in Store Fulfillment Parameters defines whether the customer's signature is captured for curbside pickup orders. The default in this configuration is set as 'Curbside'. Multiple delivery method subtypes can be configured in this configuration. Use colon (:) to separate delivery method subtypes. If the fulfillment has a delivery method subtype as 'InStore' and if the configuration value is set as 'InStore', then it skips the customer signature during the pickup of 'InStore' orders.  If the value is not present in the new configuration, then it reads the OLD configuration (i.e. Skip customer signature capture before confirm pickup) and, based on the configuration, it skips or captures the customer signature. If the fulfillment has the delivery method subtype as NULL, then it always reads the old configuration (Skip customer signature capture before confirm pickup). Configuration Name: Skip customer signature capture for the pickup subtypes Customer Arrived UI Notification Configuration in the Store Fulfillment Parameters defines whether the customer arrived curbside pickup notification should persist on the UI indefinitely or auto-dismiss after six seconds. The default value of this configuration is set as 'disabled', meaning the notification auto-dismisses. If the configuration is enabled, the notification remains on the UI and shows 'Dismiss' and 'View' buttons. Until the associate taps 'Dismiss' or 'View', the notification remains on the UI even upon navigating between screens. If the store associate doesn't tap on the toast message notification, and notifications for pickup order and customer shipment appear on the UI, then the pickup order and customer shipment notification will be shown on top of the curbside notification. After 6 seconds, the pickup order and customer shipment order notifications are dismissed automatically, but the curbside notification remains. The customer \"on their way\" notification is not controlled by this parameter and is always automatically dismissed after 6 seconds. Configuration Name: Enable 'Dismiss' button for all push notifications. Note: This Store Fulfillment Parameter applies to all push notifications, except “New pickup order”. Automatic Refreshing Of Curbside Pickups Configuration in the Store Fulfillment Parameters defines the interval in seconds to automatically reload the curbside pickups list. A value of less than 30 seconds is treated as a 30 second interval. The refresh interval time starts from the instance when the curbside pickups list was loaded or refreshed (automatic and manual). To stop automatic refreshing of the curbside pickup list, a value of 0 can be used or left with no value. A manual refresh option is always available to reload data anytime. Configuration Name: Refresh interval in seconds for transaction screens that automatically reload Capture Actual Pickup Type (Curbside or In-Store) Immediately after the pickup process has been completed, associates can be prompted to select the actual pickup type (curbside or in-store). Retailers can use this data to analyze how many pickup orders were delivered curbside versus in-store. This is useful in scenarios when customers originally select one method during order capture but choose the other when they arrive at the store. If captured, this value is updated to the delivery method subtype attribute on the fulfillment. The original value of order capture is retained in the order delivery method subtype attribute. This functionality is controlled by configuration in Store Fulfillment Parameters and is disabled by default. Configuration Name: Capture the actual pickup type of the pickup at store order during the pickup Text Messaging Configuration in Store Fulfillment Parameters defines whether stores can send a text to customers to provide updates about the delivery processing of curbside orders. When enabled, store associates with the necessary permissions can send these texts to customers. Configuration Name: Allow store to text customers during curbside pickup For more information on how to enable text messages, refer to the Text Message Configuration. The following are some of the curbside related recommendations Text message templates Use the text message types below to set customized curbside related text message templates SIF-Curbside-CannedMessage - The store associate can just tap on the message to send a message SIF-Curbside-TypedMessage - The store associate can type a custom message to send to a customer Use the Description property on the template to configure the display text. Consider a length that can be easily displayed on mobile devices. To configure text message templates, navigate to Application Configuration > Manage POS Configuration > POS Customer Engagement Configuration > Text Message Template Configuration in configuration UI or use the below API API Name: URL: “/text/api/text/textMsgTemplate/import” Sample: Below sample sends order information only when fulfillment information exists as incoming messages don't have fullfillment context and replies to such messages can't have a fulfillment object. Sample also sends DO NOT REPLY at the end of the message when only one-way text is required. MiscellaneousData.IsOneWayEnabled is true when no push notifications are enabled for incoming text messages Interaction Configurations. { \"data\": [ { \"TemplateMsgId\": \"OnMyWay\", \"Name\": \"OnMyWay\", \"Description\": \"On my way\", \"MessagePrefix\": null, \"MessageSuffix\": null, \"MessageBody\": \"We are getting your order now and will be out in 5 minutes. <#if Fulfillment??>Order ${Fulfillment.FulfillmentList[0].FulfillmentLine[0].OrderId}</#if>.<#if MiscellaneousData.IsOneWayEnabled == \\\"true\\\"> DO NOT REPLY </#if>\", \"ConditionalExpression\": \"TextMsgTemplate.TemplateMsgId == \\\"OnMyWay\\\"\", \"MessagePrefixInterval\": 0, \"MessageSuffixInterval\": 0, \"SequenceNumber\": 7, \"TextMessageType\": { \"TextMessageTypeId\": \"SIF-Curbside-CannedMessage\" } }, { \"TemplateMsgId\": \"NeedFewMinutes\", \"Name\": \"NeedFewMinutes\", \"Description\": \"Need a few minutes\", \"MessagePrefix\": null, \"MessageSuffix\": null, \"MessageBody\": \"We need a few minutes to get your order <#if Fulfillment??>${Fulfillment.FulfillmentList[0].FulfillmentLine[0].OrderId}</#if>.<#if MiscellaneousData.IsOneWayEnabled == \\\"true\\\"> DO NOT REPLY </#if>\", \"ConditionalExpression\": \"TextMsgTemplate.TemplateMsgId == \\\"NeedFewMinutes\\\"\", \"MessagePrefixInterval\": 0, \"MessageSuffixInterval\": 0, \"SequenceNumber\": 6, \"TextMessageType\": { \"TextMessageTypeId\": \"SIF-Curbside-CannedMessage\" } }, { \"TemplateMsgId\": \"WeAreCallingYou\", \"Name\": \"WeAreCallingYou\", \"Description\": \"We are calling you\", \"MessagePrefix\": null, \"SequenceNumber\": 9, \"MessageSuffix\": null, \"MessageBody\": \"We are calling you regarding your order <#if Fulfillment??>${Fulfillment.FulfillmentList[0].FulfillmentLine[0].OrderId}</#if>.<#if MiscellaneousData.IsOneWayEnabled == \\\"true\\\"> DO NOT REPLY </#if>\", \"ConditionalExpression\": \"TextMsgTemplate.TemplateMsgId == \\\"WeAreCallingYou\\\"\", \"MessagePrefixInterval\": 0, \"MessageSuffixInterval\": 0, \"TextMessageType\": { \"TextMessageTypeId\": \"SIF-Curbside-CannedMessage\" } }, { \"TemplateMsgId\": \"PleaseCallStore\", \"Name\": \"PleaseCallStore\", \"Description\": \"Please call the store\", \"MessagePrefix\": null, \"MessageSuffix\": null, \"MessageBody\": \"Please call the store at <#list Location.LocationContact as contact><#if contact.LocationContactType.LocationContactTypeId == \\\"StoreInteractionContact\\\"> ${contact.PhoneNumber}</#if></#list> with regards to your order.<#if MiscellaneousData.IsOneWayEnabled == \\\"false\\\"> DO NOT REPLY </#if>\", \"ConditionalExpression\": \"TextMsgTemplate.TemplateMsgId == \\\"PleaseCallStore\\\"\", \"MessagePrefixInterval\": 0, \"MessageSuffixInterval\": 0, \"SequenceNumber\": 8, \"TextMessageType\": { \"TextMessageTypeId\": \"SIF-Curbside-CannedMessage\" } }, { \"TemplateMsgId\": \"MsgCustomer\", \"Name\": \"MsgCustomer\", \"Description\": \"Message Customer\", \"MessagePrefix\": null, \"MessageSuffix\": null, \"MessageBody\": \"<#if Fulfillment??>Regarding your order ${Fulfillment.FulfillmentList[0].FulfillmentLine[0].OrderId}.</#if> ${CustomMsg.Msg}.<#if MiscellaneousData.IsOneWayEnabled == \\\"true\\\"> DO NOT REPLY </#if>\", \"ConditionalExpression\": \"TextMsgTemplate.TemplateMsgId == \\\"MsgCustomer\\\"\", \"MessagePrefixInterval\": 0, \"MessageSuffixInterval\": 0, \"SequenceNumber\": 10, \"TextMessageType\": { \"TextMessageTypeId\": \"SIF-Curbside-TypedMessage\" } } ] } Setup a phone number for each store when configuring text message service providers such as Twilio. Set the same phone number as Store Interaction Contact in the contact section for the store. When only one-way texting is required, setup an auto responder in the text message service provider to be used if a customer replies back to a message sent by the store. Two-way Text Messaging Store Fulfillment Configurations Following is the inbound queue that needs to be setup in the fulfillment component if not already setup. API Name: {URL}/fulfillment/api/ServiceDefinition/inBoundMessageType/save { \"MessageType\": \"PushNotificationMSGType\", \"NoOfConsumer\": 10, \"MinNoOfConsumer\": 1, \"MaxDesiredInstances\": 6, \"ScaleUpTimeWindow\": 10, \"ScaleDownTimeWindow\": 20, \"ServiceId\": \"PushNotificationListener\", \"InBoundQueues\": { \"QueueName\": \"queue.PushNotification\" } } Notification templates have to be setup in order to understand the messages in the push notification queue and push the notifications to the right devices. The following is the base template which can be modified. API Name: {URL}/fulfillment/api/fulfillment/notificationTemplate/import { \"data\": [ { \"NotificationTemplateId\": \"PushNotificationForIncomingTextMessage\", \"Name\": \"PushNotificationForIncomingTextMessage\", \"TopicName\": \"common-notification.<#if StackName??>${StackName}.<#else></#if>${TextMessage.OrgId}.${TextMessage.LocationId}\", \"Description\": \"Push notification template for incoming text message\", \"NotificationTitle\": \"New message from<#if TextMessage.CustomerFirstName??> ${TextMessage.CustomerFirstName}<#else></#if><#if TextMessage.CustomerLastName??> ${TextMessage.CustomerLastName}<#else></#if>\", \"ConditionalExpression\": \"Interaction.InteractionType.InteractionTypeId == \\\"TextMessage\\\" && TextMessage.IsIncoming == true && TextMessage.BusinessChannelId.BusinessChannelId == \\\"Store\\\" && (TextMessage.CustomerFirstName != null || TextMessage.CustomerLastName != null)\", \"NotificationSound\": \"curbsidenotificationsound.mp3\", \"NotificationPriority\": \"High\", \"NotificationPayload\": [ { \"NotificationBody\": \"New message from<#if TextMessage.CustomerFirstName??> ${TextMessage.CustomerFirstName}<#else></#if><#if TextMessage.CustomerLastName??> ${TextMessage.CustomerLastName}<#else></#if>\", \"PageId\": \"text-interaction-popup\", \"LocalizeLabelKey\": \"notificationTitleLocalizedLabel\", \"PagePayload\": [ { \"PayloadKey\": \"CustomerId\", \"PayloadValue\": \"<#if TextMessage.CustomerId??>${TextMessage.CustomerId}<#else>null</#if>\" }, { \"PayloadKey\": \"CustomerPhone\", \"PayloadValue\": \"${TextMessage.FromPhone}\" }, { \"PayloadKey\": \"CustomerFirstName\", \"PayloadValue\": \"<#if TextMessage.CustomerFirstName??>${TextMessage.CustomerFirstName}<#else>null</#if>\" }, { \"PayloadKey\": \"CustomerLastName\", \"PayloadValue\": \"<#if TextMessage.CustomerLastName??>${TextMessage.CustomerLastName}<#else>null</#if>\" }, { \"PayloadKey\": \"CountryCode\", \"PayloadValue\": \"${TextMessage.ToCountry}\" }, { \"PayloadKey\": \"StoreInteractionContact\", \"PayloadValue\": \"${TextMessage.ToPhone}\" }, { \"PayloadValue\": true } ] } ] }, { \"NotificationTemplateId\": \"PushNotificationForMessageFromAnonymousCustomer\", \"Name\": \"PushNotificationForMessageFromAnonymousCustomer\", \"TopicName\": \"common-notification.<#if StackName??>${StackName}.<#else></#if>${TextMessage.OrgId}.${TextMessage.LocationId}\", \"Description\": \"Push notification template for incoming text message from anonymous customer\", \"NotificationTitle\": \"New message from ${TextMessage.FromPhone}\", \"ConditionalExpression\": \"Interaction.InteractionType.InteractionTypeId == \\\"TextMessage\\\" && TextMessage.IsIncoming == true && TextMessage.BusinessChannelId.BusinessChannelId == \\\"Store\\\" && TextMessage.CustomerFirstName == null && TextMessage.CustomerLastName == null\", \"NotificationSound\": \"curbsidenotificationsound.mp3\", \"NotificationPriority\": \"High\", \"NotificationPayload\": [ { \"NotificationBody\": \"New message from ${TextMessage.FromPhone}\", \"PageId\": \"text-interaction-popup\", \"LocalizeLabelKey\": \"notificationTitleForAnonymousCustomer\", \"PagePayload\": [ { \"PayloadKey\": \"CustomerPhone\", \"PayloadValue\": \"${TextMessage.FromPhone}\" }, { \"PayloadKey\": \"CountryCode\", \"PayloadValue\": \"${TextMessage.ToCountry}\" }, { \"PayloadKey\": \"StoreInteractionContact\", \"PayloadValue\": \"${TextMessage.ToPhone}\" }, { \"PayloadValue\": true } ] } ] } ] } Topic: the Firebase topic to which store devices are subscribed to NotificationTitle: Shown by the OS when app is inactive NotificationSound: Should have a valid sound file that is packaged within the Store app that should be played when the notification arrives. LocalizeLabelKey: Notification text to be shown in a specific language should be available in the KV store. Values for out of the box template are already available. NotificationTitle: Shown by the OS when app is inactive Customer Interaction Configuration The IsPushNotificationEnabled flag needs to be set to true to send messages to push the notification outbound queue for the applicable channel types. The following is the API and payload required to perform the same for the store channel. API Name: {URL}/customerinteraction/api/customerinteraction/interactionConfig/save { \"ConfigId\": \"defaultConfig\", \"EmailAddress\": \"system@dummyorg.com\", \"PublishInboundTextInteraction\": [ { \"BusinessChannelId\": { \"BusinessChannelId\": \"Store\" }, \"IsPushNotificationEnabled\": true } ] } Following is the outbound queue that needs to be set API Name: {URL}/customerinteraction/api/ServiceDefinition/outBoundMessageType/import { \"MessageType\": \"PushNotificationMSGType\", \"Transactional\": true, \"PersistMessageToMsgStore\": false, \"OutBoundQueues\": { \"QueueName\": \"queue.PushNotification\" } } Extension point to message type mapping should be set as below. API Name: {URL}/customerinteraction/api/ServiceDefinition/extPointToMessageType/import { \"ExtensionPointId\": \"PushNotification\", \"MessageType\": \"PushNotificationMSGType\" } Location Configuration Retailers can configure whether a location is eligible for Pickup or Curbside or both. This allows them to configure emails accordingly so that the customer can choose to either pick the package up or opt for a curbside delivery depending on the location once they get the pick up notification. The new attribute CurbsidePickup can be configured in the location fulfillment attribute child entity under the organization location parent entity. Navigate to Menu -> Master Data -> Manage Locations -> Locations. Search for the location that needs to be updated and click on View. Click on the Location Fulfillment Attribute tab and select the Curbside PickUp check box. As part of the curated message created for pickup notification email, the following child entities from the organization location entity are exposed. LocationFulfillmentAttr mapped to PickupStoreDetails.LocationFulfillmentAttr in the curated message. This will make sure that the PickupAtStore and CurbsidePickup flags are exposed in the Pickup notification curated messages. Address is mapped to PickupStoreDetails.Address in the curated message. Additionally, the location's address and postal code are also exposed on the PickUp notification curated messages. Implementation Variations Below are some examples of implementation variations in which Active® Omni curbside capabilities can be integrated with existing emails, texts, and third-party self-service application. Implementation Variation Notify customer that the order is ready A customer arrives at A store Store associate is alerted Existing Email/Text with Digital Self-Service Curbside Pickup UI Augment existing email with link to Digital-Self Service Digital Self-Service Curbside Pickup UI Push notification in Store application Existing Email/Text with Custom Curbside Pickup UI Augment existing email with link to custom self-service UI Custom self-service app calls Store \"I'm at the store\" API Push notification in Store application Existing Email/Text with Custom Curbside Pickup UI If using an external curbside pickup UI instead of Manhattan's, here are some integration pointers. The self-service application should make a few calls to Active® Omni Store Fulfillment: Step 1: An authentication call to retrieve an OAuth token Step 2: A call to get the list of fulfillments which are ready for pickup - POST to /fulfillment/api/fulfillment/fulfillment/search. Provide query input parameters such as the below to retrieve relevant curbside fulfillment: { \"Query\": \"FulfillmentLine.OrderId = :orderID AND ShipFromLocationId = :locationID AND ((DeliveryMethodId ='PickUpAtStore') OR (DeliveryMethodId ='ShipToStore' AND DestinationActionId='Pickup'))\"} Step 3: A call to let the store know that the customer has arrived or the customer is on the way to the store to pick up certain fulfillment(s) - POST to /fulfillment/api/fulfillment/fulfillment/updatePickupFulfillmentsAndNotify. Parameters to updatePickupFulfillmentsAndNotify along with corresponding status updates: Request parameters (not an exhaustive list) Status updates Dates/times updates A customer is on the way flag is not sent \"Arrived\" Arrival date and time are saved The customer is on the way flag is provided as true ETA (in minutes) is null \"On the way\" Arrival date and time are not updated. Pickup ETA date and time are not updated The customer is on the way flag is provided as true ETA (in minutes) is provided \"On the way\" Arrival date and time are not updated. Pickup ETA date and time is saved The customer is on the way flag is provided as false Reset to \"Ready for pickup\" Arrival date and time not updated Pickup ETA date and time is cleared Refer to the Fulfillment API documentation for more details on these APIs. Allowing Customers to Switch from Curbside to In-Store, In-store to Curbside You can offer the option for customers to change their mind at the time of pickup by including instructions or links in the emails/texts. In the email/text delivered when the items are ready for pickup: If the original order is designated as curbside pickup, but you want to provide the option for the customer to pick up in-store, then add verbiage to your email/text to make the customer aware of this option. If the customer walks into the store without using the DSS prompts to let the store know that they've arrived, then the pickup can be completed. After the pickup, the store associate can use the prompt to mark the pickup as 'In-Store'; otherwise, the pickup will remain categorized as curbside. If the original order is designated as in-store, but you want to provide the option for curbside pickup, then include a link to the DSS URL (or short URL if in text). This provides the customer to remain in their vehicle and request a curbside delivery upon arrival. When the customer uses the DSS UI to notify the store of their arrival, the fulfillment is automatically updated to 'Curbside'. The delivery method type actually chosen by the customer can optionally be captured by the store associate using a post-pickup prompt. Feature Scope The following features are not supported in the Curbside Pickup feature: Designating certain stores in MAO that support curbside pickup and others that do not Designating an order line as 'curbside' in Manhattan Active® Omni Point of Sale Calculating the ETA for other modes of transportation such as walking, cycling, or public transit is not supported within DSS RFID Store associates can fulfill curbside orders by reading their unit-level RFID tags using an RFID reader. When these orders are picked up by their respective customers, the units picked up as part of these orders are moved to \"Departed\" status. Please refer to the Store RFID guide for more information on the RFID support available in Stores. Note: Any units which are cancelled right through the Curbside Pickup process or returned to shelf are moved back to \"Available\" from \"Reserved\". Services The APIs listed in the following table are referenced in this document. Refer to the API documentation for additional details on each service. Service Component Group Service Endpoint Update Pickup Fulfillments And Notify Fulfillment fulfillment-process-controller fulfillment/api/fulfillment/fulfillment/updatePickupFulfillmentsAndNotify"
}