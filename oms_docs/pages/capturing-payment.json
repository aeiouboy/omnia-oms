{
  "id": "2617706",
  "permalink": "capturing-payment",
  "title": "Capturing Payment",
  "type": "topic",
  "level": 5,
  "path": "Manhattan Active® Omni/Order Management/Process & Configuration Guides/Order Selling/Payment/Capturing Payment",
  "raw_item": {
    "id": "2617706",
    "text": "Capturing Payment",
    "title": "Capturing Payment",
    "permalink": "capturing-payment",
    "leaf": false,
    "droppable": true,
    "expanded": true,
    "closed": true,
    "visible": true,
    "editable": true,
    "type": "topic",
    "topicType": "0",
    "status": "1",
    "iconCls": "icon-topic",
    "cls": "",
    "folder_id": "129592",
    "parent": "f;129592",
    "created_date": "1597860809",
    "modified_date": "1737398286",
    "instructor_id": null,
    "loaded": true,
    "haschildren": false,
    "callout": "0",
    "order": "2"
  },
  "success": true,
  "content": "\r\n\r\n\r\n<div class=\"hiq-page-wrap\">\r\n<div class=\"hiq-t-wrap\">\r\n\t\t\r\n  \t  <div class=\"hiq-t \">\r\n\t\t\t\t<ul class=\"breadcrumbs\"><li><a class=\"breadcrumb-links\" hqid=\"1788908\"  href=\"/home\">Home</a></li> <li><span>&rsaquo;&rsaquo;</span><a hqid=\"3500940\" href=\"/omni\" class=\"breadcrumb-links\">Manhattan Active® Omni</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158393\" href=\"/order-management\" class=\"breadcrumb-links\">Order Management</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158394\" href=\"/process-configuration-guides\" class=\"breadcrumb-links\">Process & Configuration Guides</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2163646\" href=\"/order-selling-2\" class=\"breadcrumb-links\">Order Selling</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2163647\" href=\"/payment-2\" class=\"breadcrumb-links\">Payment</a></li><li> <span>››</span>Capturing Payment</li></ul>  \t\r\n\t\t<h2>Capturing Payment</h2>\r\n\r\n<p></p>\r\n\r\n<a href=\"/paymentoverview\" hqid=\"2688302\">Previous</a>&nbsp;I&nbsp;<a href=\"/payment-types\" hqid=\"2617707\">Next</a>\r\n<p>&nbsp;</p>\r\n\r\n<p>Payment can be captured in various ways: on e-commerce, at the point of sale (POS),&nbsp;via contact center, or in self-service applications. Regardless of where an order was captured, the payment data for that order is stored in the Active&reg; Omni payment component to be used for future settlements, refunds, or re-authorizations. This section describes the basics of enabling&nbsp;payment and how to map payment data to Active&reg; Omni.</p>\r\n\r\n<div class=\"info\"><ul><li><a href=\"/capturing-payment$enabling-payment-capabilities\">Enabling Payment Capabilities</a></li><li><a href=\"/capturing-payment$capturing-payment\">Capturing Payment</a><ul><li><a href=\"/capturing-payment$payment-captured-in-the-contact-center\">Payment Captured in the Contact Center</a></li><li><a href=\"/capturing-payment$payment-captured-at-the-point-of-sale-pos\">Payment Captured at the Point of Sale (POS)</a></li><li><a href=\"/capturing-payment$payment-captured-on-the-web\">Payment Captured on the Web</a></li><li><a href=\"/capturing-payment$marketplace-orders\">Marketplace Orders</a></li><li><a href=\"/capturing-payment$balance-due\">Balance Due</a></li><li><a href=\"/capturing-payment$payment-capture-configuration\">Payment Capture Configuration</a></li></ul></li><li><a href=\"/capturing-payment$mapping-payment-data\">Mapping Payment Data</a><ul><li><a href=\"/capturing-payment$saving-sensitive-data-as-part-of-payment-transactions\">Saving Sensitive Data as part of Payment Transactions</a></li><li><a href=\"/capturing-payment$list-of-encrypted-fields-for-storing-payment-information\">List of Encrypted Fields for Storing Payment Information</a><ul><li><a href=\"/capturing-payment$component-payment\">Component: Payment</a></li><li><a href=\"/capturing-payment$component-order\">Component: Order</a></li><li><a href=\"/capturing-payment$component-customer\">Component: Customer</a></li></ul></li></ul></li><li><a href=\"/capturing-payment$payment-methods\">Payment Methods</a><ul><li><a href=\"/capturing-payment$payment-transactions\">Payment Transactions</a></li><li><a href=\"/capturing-payment$pre-paid-payment-methods\">Pre-Paid Payment Methods</a></li><li><a href=\"/capturing-payment$suspending-payments\">Suspending Payments</a></li></ul></li><li><a href=\"/capturing-payment$tokenization\">Tokenization</a></li><li><a href=\"/capturing-payment$currency-conversion\">Currency Conversion</a><ul><li><a href=\"/capturing-payment$currency-conversion-configuration-maintenance\">Currency Conversion Configuration & Maintenance</a></li></ul></li><li><a href=\"/capturing-payment$implementation-flavor\">Implementation Flavor</a><ul><li><a href=\"/capturing-payment$how-to-add-ldquo-member-credits-certificates-quot-as-a-new-payment-method-like-the-electronic-gift-cards\">How to add &ldquo;Member Credits Certificates&quot; as a new payment method like the electronic gift cards</a></li></ul></li><li><a href=\"/capturing-payment$related-articles\">Related Articles</a></li></ul></div>\r\n\r\n<h3><a name=\"enabling-payment-capabilities\" id=\"enabling-payment-capabilities\"></a><a id=\"Enabling Payment\" name=\"Enabling Payment\"></a>Enabling Payment Capabilities</h3>\r\n\r\n<p>Payment processing can be enabled or disabled by order type. For example, most&nbsp;e-commerce and point of sale (POS) orders require payment processing, but most retail replenishment orders do not. To achieve this, the order configuration for e-commerce and POS orders can enable&nbsp;payment, while the order configuration for replenishment orders can disable&nbsp;payment. When&nbsp;payment is enabled:</p>\r\n\r\n<ul>\r\n\t<li>Invoices are created for shipments, returns, appeasements, and so on.</li>\r\n\t<li>Authorizations, settlements, and refunds are processed</li>\r\n\t<li>Sales postings are published when payment is processed</li>\r\n\t<li>Each order&#39;s payment status is maintained</li>\r\n</ul>\r\n\r\n<p>If payment is not enabled, invoices are not created, sales postings are not published, and the payment status of each order defaults to &#39;Not Applicable&#39;. Even if an order is imported with payment transactions, if payment is disabled, no payment processing will occur. To enable or disable payment&nbsp;for a set of order types,&nbsp;navigate to the <a hqid=\"1827458\" href=\"/payment-configuration-2$Enabling_payment\">Order Configuration UI</a> and select the Payment checkbox.</p>\r\n\r\n<h3><a name=\"capturing-payment\" id=\"capturing-payment\"></a><a id=\"Capturing Payment in Contact Center\" name=\"Capturing Payment in Contact Center\"></a>Capturing Payment</h3>\r\n\r\n<h5 id=\"OrderPayments-PaymentCapturedinCallCenter\"><a name=\"payment-captured-in-the-contact-center\" id=\"payment-captured-in-the-contact-center\"></a>Payment Captured in the Contact Center</h5>\r\n\r\n<p>Payment methods&nbsp;captured in the Contact Center are saved with an open authorization transaction which is processed when the order is confirmed&nbsp;without having been authorized or settled. If the payment failed to authorize or was flagged as fraud, then the user is prompted to ask the customer for an alternate form of payment.&nbsp;If user reloads the call center while capturing payment, they will be sent back to the initial tab of shipping and reselect payment.</p>\r\n\r\n<h6>Configuring Payment Types for Contact Center</h6>\r\n\r\n<p>The Payment Capture Config UI can be used to define which payment types can be captured in the contact center. In the contact center, by default the payment options are credit card, e-check, and gift card. Custom payment types can be captured in the contact center by:</p>\r\n\r\n<ul>\r\n\t<li>Add the new payment type in the Payment Types UI</li>\r\n\t<li>In the Payment Capture Config UI, add an entry for this payment type and enable &#39;Permit Assisted Sales&#39; so that the option is displayed in the contact center</li>\r\n\t<li>In the Payment Capture Config UI, configure the &#39;Assisted Sales Sequence&#39; as a unique integer to determine where the payment option is displayed relative to other payment types in the contact center</li>\r\n\t<li>Implement extension capabilities as per the requirements, or use the out of the box fields for capturing the custom payment type</li>\r\n</ul>\r\n\r\n<div class=\"info\">Please note: If user would like to not capture payment in the call center but continue in processing an order, payment in&nbsp;order configuration and permit assisted sales must be disabled.&nbsp;</div>\r\n\r\n<h5 id=\"OrderPayments-PaymentCapturedatthePointofSale(POS)\"><a name=\"payment-captured-at-the-point-of-sale-pos\" id=\"payment-captured-at-the-point-of-sale-pos\"></a>Payment Captured at the Point of Sale (POS)</h5>\r\n\r\n<p>When orders are captured in store, POS processes payments and&nbsp;saves completed payment transactions&nbsp;in the Payment component. Since the terminal or mobile sled used to capture payments typically integrates directly with payment gateways, POS does not use the Payment component to&nbsp;calculate or execute services to create and execute transactions. Instead, POS uses the Total Payment Summary API to get the total amount to authorize, settle, or refund, and then POS creates payment transactions and calls the gateway to execute them.</p>\r\n\r\n<h6>Configuring Payment Types for POS</h6>\r\n\r\n<p>The Payment Capture Config UI can be used to define which payment types can be captured in POS. Configure payment types eligible for use at the&nbsp;POS&nbsp;by enabling&nbsp;&#39;Permit Customer Present Sales&#39;&nbsp; and setting the &#39;Customer Present Sale Sequence&#39; in the Payment Capture Config UI.</p>\r\n\r\n<p>If you want to restrict a particular&nbsp;Payment Type to not be split , set PaymentCapture Config&gt;Payment Capture Config Detail&gt;&nbsp;<strong>Restrict Split Payment (T) -</strong>&nbsp;A payment type with this configured True must be the only or final payment type.&nbsp;&nbsp;</p>\r\n\r\n<div class=\"info\">&quot;Restrict Split Payment&quot; flag works on the balance due amount.&nbsp; If you have a 100 dollar amount, and you are first select&nbsp;credit card which, for illustration,&nbsp;has &quot;Restrict Split Payment&quot; set to true, you have to pay the total 100 dollars with that credit card. However, for the same order, if you initially paid 25 dollars on a gift card, paying the rest with credit card is still allowed - but following the choice of credit card, the remainder of 75 dollars should be paid with that method.</div>\r\n\r\n<h6>PayCaptureExclusionConfig</h6>\r\n\r\n<p><br />\r\nAllows retailer to control allowed/displayed payment types for a transaction based on order line attributes.&nbsp;</p>\r\n\r\n<p>POS allows dynamical display of available payment types based on the attributes of the order line items, so that customers are presented with relevant payment options based on their purchases, thus improving checkout efficiency.</p>\r\n\r\n<p>For example, if a retailer does not want to accept PERSONAL CHECK on Mobile devices, or if the retailer does not want prepaid payment types such as CASH&nbsp;for Omni orders(Ship to address, pick-up at store), add exclusion &quot;Mobile&quot; and/or &quot;OmniOrder&quot; as Pay Capture Exclusions for those payment types using&nbsp;payCaptureExclusionConfig under Payment Capture Configuration for each.<br />\r\n&nbsp;</p>\r\n\r\n<h5 id=\"OrderPayments-PaymentCapturedExternally\"><a name=\"payment-captured-on-the-web\" id=\"payment-captured-on-the-web\"></a>Payment Captured on the Web</h5>\r\n\r\n<p>In channels like&nbsp;e-commerce, the order capture system captures payment information and integrates with the payment gateway to authorize or settle the payment. An order is imported with a completed authorization or settlement in the order import message, and the order component sends&nbsp;the payment header to the payment component to be saved.&nbsp;If an order is imported with an authorization, then&nbsp;a follow-on settlement is processed when items are fulfilled. If an order is pre-paid and imported with a settlement, then no payment is processed upon shipment.&nbsp;If an order is imported with an open authorization, then the authorization is sent to the third-party payment gateway in the next scheduled authorization run. If an order is imported with no payment information, then a customer service representative (CSR) must call the customer to obtain payment information.</p>\r\n\r\n<h5 id=\"OrderPayments-MarketplaceOrders\"><a name=\"marketplace-orders\" id=\"marketplace-orders\"></a>Marketplace Orders</h5>\r\n\r\n<p>If an order is captured in a third-party marketplace&nbsp;which processes payments, then payment data does not need to be sent to Active&reg; Omni, as payment is processed by the marketplace. For these orders, order status messages can be published to the marketplace upon cancellations and shipment events. Each time a unit is shipped, an order update is sent to the marketplace, and the marketplace settles for the shipped unit.</p>\r\n\r\n<h5><a name=\"balance-due\" id=\"balance-due\"></a>Balance Due</h5>\r\n\r\n<p>When an order capture UI needs to display the balance due so that a store associate or customer care representative can collect payment, then the order component calculates the balance due by calling the payment component. The Get Order API includes a balance due attribute in the response. To calculate the balance due, the order component&nbsp;calls the Get Payment Header API to get all the payment methods from the payment component. Then, the order component calculates the balance due as&nbsp;</p>\r\n\r\n<p><span class=\"math-tex\">\\(Balance Due = Order Total - \\sum (Amount - Current Refund Amount, \\forall Payment Methods)\\)</span></p>\r\n\r\n<h5><a name=\"payment-capture-configuration\" id=\"payment-capture-configuration\"></a>Payment Capture Configuration</h5>\r\n\r\n<p>The payment capture configuration is used to define rules for accepting and issuing payments in different order capture channels. For example, this configuration is used to define cash as an acceptable refund tender in customer present situations such as POS, but not in situations where the customer is not present such as the Contact Center. This configuration is required for any implementation with payment processing, although some&nbsp;attributes are only applicable in customer present situations.&nbsp;In the Payment Capture Config&nbsp;UI, configure the following for each payment type:</p>\r\n\r\n<ul>\r\n\t<li>Whether the payment type can be accepted for customer present sales (for example,&nbsp;POS)</li>\r\n\t<li>Details such as whether the payment type can be over-tendered, should be included in the drawer count, and minimum and maximum amounts accepted or issued</li>\r\n\t<li>What type(s) of change can be issued, when the payment type is over-tendered. For example, when a $50 traveler&#39;s check is used to pay for a $41 order, and cash is configured as the change payment type for traveler&#39;s check, then the customer receives $9 change in cash.&nbsp;&nbsp;(used only when customer present flows like POS are in scope)</li>\r\n\t<li>A list of accepted currencies for the payment type, which is applicable primarily to cash (used only when customer present flows like POS are in scope)</li>\r\n\t<li>What payment types can be issued as a refund, when the given payment type is used on the original order. The refund payment type configuration is categorized by interaction mode, which defines the order capture channel as customer present, customer not present, and so on. Follow-on refunds are supported for credit card, PayPal, and e-check payment types. For Interaction Mode = Customer Not Present, all other payment types must be configured to refund via&nbsp;Gift Card.</li>\r\n</ul>\r\n\r\n<h3><a name=\"mapping-payment-data\" id=\"mapping-payment-data\"></a>Mapping Payment Data</h3>\r\n\r\n<p>Each tender used should be mapped to a single payment method entity. Each payment method can have an optional billing address and a list of payment transactions. In addition to this basic data, if any additional payment data needs to be stored at the payment method or transaction level, then there are key-value pair tables which can be used. The payment method has two child tables which can store additional attributes:</p>\r\n\r\n<ul>\r\n\t<li>The payment method attribute table&nbsp;is used to store plain text data&nbsp;which is not sensitive and is stored un-encrypted in the database.</li>\r\n\t<li>The payment method encrypted attribute table is used to store sensitive payment data. This table encrypts all of the values as they are stored, and un-encrypts them upon retrieval.&nbsp;</li>\r\n</ul>\r\n\r\n<p>The&nbsp;payment transaction has two child tables which can store additional attributes:</p>\r\n\r\n<ul>\r\n\t<li>The payment transaction attribute table&nbsp;is used to store plain text data&nbsp;which is not sensitive and is stored un-encrypted in the database.</li>\r\n\t<li>The payment transaction encrypted attribute table is used to store sensitive payment transaction data. This table encrypts all of the values as they are stored, and un-encrypts them upon retrieval.&nbsp;</li>\r\n</ul>\r\n\r\n<h4 data-renderer-start-pos=\"4547\" id=\"Saving-Sensitive-Data-as-part-of-Payment-Transactions\"><a name=\"saving-sensitive-data-as-part-of-payment-transactions\" id=\"saving-sensitive-data-as-part-of-payment-transactions\"></a>Saving Sensitive Data as part of Payment Transactions</h4>\r\n\r\n<p data-renderer-start-pos=\"4602\">In some cases, there may be requirements to store sensitive information&nbsp;retrieved as part of a payment gateway call like Authorization, Settlement or Refund. In such cases, the sensitive information can be encrypted and stored in a child key/value table to PaymentTransaction called PaymentTransEncrAttribute.</p>\r\n\r\n<h4 data-renderer-start-pos=\"4602\"><a name=\"list-of-encrypted-fields-for-storing-payment-information\" id=\"list-of-encrypted-fields-for-storing-payment-information\"></a>List of Encrypted Fields for Storing Payment Information</h4>\r\n\r\n<h5 data-renderer-start-pos=\"5209\" id=\"Component-:-Payment\"><a name=\"component-payment\" id=\"component-payment\"></a>Component: Payment</h5>\r\n\r\n<h6 data-renderer-start-pos=\"5230\" id=\"PaymentMethod\">PaymentMethod</h6>\r\n\r\n<ul>\r\n\t<li data-renderer-start-pos=\"5247\">accountNumber</li>\r\n\t<li data-renderer-start-pos=\"5264\">nameOnCard</li>\r\n\t<li data-renderer-start-pos=\"5278\">cardExpiryMonth</li>\r\n\t<li data-renderer-start-pos=\"5297\">cardExpiryYear</li>\r\n\t<li data-renderer-start-pos=\"5315\">giftCardPin</li>\r\n\t<li data-renderer-start-pos=\"5330\">routingNumber</li>\r\n\t<li data-renderer-start-pos=\"5347\">checkNumber</li>\r\n\t<li data-renderer-start-pos=\"5362\">driversLicenseNumber</li>\r\n\t<li data-renderer-start-pos=\"5386\">driversLicenseState</li>\r\n\t<li data-renderer-start-pos=\"5409\">driversLicenseCountry</li>\r\n\t<li data-renderer-start-pos=\"5434\">businessName</li>\r\n\t<li data-renderer-start-pos=\"5450\">businessTaxId</li>\r\n\t<li data-renderer-start-pos=\"5467\">customerSignature (For POS use cases)</li>\r\n\t<li data-renderer-start-pos=\"5508\">swipeData (For POS use cases)</li>\r\n</ul>\r\n\r\n<h6 data-renderer-start-pos=\"5541\" id=\"PaymentMethodEncrAttribute\">PaymentMethodEncrAttribute</h6>\r\n\r\n<ul>\r\n\t<li data-renderer-start-pos=\"5571\">value</li>\r\n</ul>\r\n\r\n<h6 data-renderer-start-pos=\"5580\" id=\"PaymentTransEncrAttribute\">PaymentTransEncrAttribute</h6>\r\n\r\n<ul data-indent-level=\"1\">\r\n\t<li>\r\n\t<p data-renderer-start-pos=\"5609\">value</p>\r\n\t</li>\r\n</ul>\r\n\r\n<h6 data-renderer-start-pos=\"5618\" id=\"PaymentTransactionEMVTags\">PaymentTransactionEMVTags</h6>\r\n\r\n<ul>\r\n\t<li data-renderer-start-pos=\"5647\">All fields</li>\r\n</ul>\r\n\r\n<h6 data-renderer-start-pos=\"5661\" id=\"GatewayEncryptedAttribute\">GatewayEncryptedAttribute</h6>\r\n\r\n<ul>\r\n\t<li data-renderer-start-pos=\"5690\">value</li>\r\n</ul>\r\n\r\n<h5 data-renderer-start-pos=\"5699\" id=\"Component-:-Order\"><a name=\"component-order\" id=\"component-order\"></a>Component: Order</h5>\r\n\r\n<h6 data-renderer-start-pos=\"5718\" id=\"FulfillmentDetail\">FulfillmentDetail</h6>\r\n\r\n<ul>\r\n\t<li data-renderer-start-pos=\"5739\">gcNumber</li>\r\n\t<li data-renderer-start-pos=\"5751\">gcPIN</li>\r\n</ul>\r\n\r\n<h5 data-renderer-start-pos=\"5760\" id=\"Component:-Customer\"><a name=\"component-customer\" id=\"component-customer\"></a>Component: Customer</h5>\r\n\r\n<h6 data-renderer-start-pos=\"5781\" id=\"CustomerPaymentMethod\">CustomerPaymentMethod</h6>\r\n\r\n<ul>\r\n\t<li data-renderer-start-pos=\"5806\">accountNumber</li>\r\n\t<li data-renderer-start-pos=\"5823\">nameOnCard</li>\r\n\t<li data-renderer-start-pos=\"5837\">cardExpiryMonth</li>\r\n\t<li data-renderer-start-pos=\"5856\">cardExpiryYear</li>\r\n\t<li data-renderer-start-pos=\"5874\">routingNumber</li>\r\n\t<li data-renderer-start-pos=\"5891\">driversLicenseNumber</li>\r\n\t<li data-renderer-start-pos=\"5915\">driversLicenseState</li>\r\n\t<li data-renderer-start-pos=\"5938\">driversLicenseCountry</li>\r\n\t<li data-renderer-start-pos=\"5963\">businessName</li>\r\n\t<li data-renderer-start-pos=\"5979\">businessTaxId</li>\r\n</ul>\r\n\r\n<h3><a name=\"payment-methods\" id=\"payment-methods\"></a>Payment Methods</h3>\r\n\r\n<p>The payment method represents one tender, such as one credit card or one cash payment. If two credit cards exist on an order, then two payment methods are saved. The payment method contains the amount applied to the payment type and key payment data such as the account token.&nbsp;</p>\r\n\r\n<p>As transactions are processed against a payment method, the&nbsp;currentAuthAmount,&nbsp;currentSettleAmount, and&nbsp;currentRefundAmount&nbsp;attributes are updated. CurrentAuthAmount increases when an authorization is successful and decreases when an authorization expires or is used for settlement. CurrentSettleAmount increases when a settlement is successful and decreases when a refund occurs. CurrentRefundAmount increases when a refund is processed.</p>\r\n\r\n<h4><a name=\"payment-transactions\" id=\"payment-transactions\"></a>Payment Transactions</h4>\r\n\r\n<p>The Payment Transaction entity is a log of each payment event, including authorizations, settlements, refunds, and balance checks. The payment transaction is the parent object used to communicate&nbsp;with the payment gateway. When the payment gateway responds, the payment transaction is updated to reflect the decision made by the payment gateway. Payment transactions are the system of record used to calculate how much has been authorized, paid, and refunded for each order.</p>\r\n\r\n<p>Transaction type is an attribute on the payment transaction that communicates to the payment gateway what action needs to be taken. The Payment component&nbsp;uses the transaction type attribute to calculate the current authorization amount, current settlement amount, and current refund amount for each payment method and for the payment summary. Transaction types are provided as system data and cannot be modified. Supported transaction types include authorization, authorization reversal, settlement, refund, balance check, and return credit.</p>\r\n\r\n<h4 id=\"SavePaymentHeaderService-Pre-PaidPaymentMethods\"><a name=\"pre-paid-payment-methods\" id=\"pre-paid-payment-methods\"></a>Pre-Paid Payment Methods</h4>\r\n\r\n<p>The payment configuration attribute&nbsp;isPrepaid&nbsp;indicates if payment method is considered pre-paid when saved. This attribute is used to determine if any payment transactions need to be created for payment methods. If true, then a successful, closed settlement is created upon saving. For example, cash is configured as pre-paid. When a $60 cash payment is saved, a closed, successful $60 settlement is created against the payment method.</p>\r\n\r\n<p>If false, then no payment transactions are created upon save, but rather they are created when the calculate service determines what transaction type to create by using the payment summary. For example, credit cards are not configured as pre-paid. When a $60 credit card payment is saved, no payment transactions are created. When the calculate service is called, it determines whether the credit card needs to be authorized, settled, or refunded and creates transactions accordingly.</p>\r\n\r\n<h4><a name=\"suspending-payments\" id=\"suspending-payments\"></a>Suspending Payments</h4>\r\n\r\n<p>Payment methods can be suspended when a customer requests that the card is not used for future payments. When a payment method is suspended, the customer should provide a new payment method to be used for any remaining balance due.&nbsp;Suspending a card does not affect settlements or refunds which have already been processed and therefore will not issue a refund on already settled amount.&nbsp;When a payment method is suspended, it is not considered by the Payment component&nbsp;when selecting payment methods to authorize or settle against. Suspended payment methods are eligible for refund.&nbsp;</p>\r\n\r\n<p>To suspend a payment method, send a partial payment header update with&nbsp;isSuspended&nbsp;set to true on the payment method. When a payment is suspended, the following updates occur:</p>\r\n\r\n<ul>\r\n\t<li>Delete&nbsp;open authorizations and settlement transactions (do not delete refunds or in progress transactions, do not delete in progress or&nbsp;closed settlement transaction)</li>\r\n\t<li>Create a reverse authorization for any closed authorizations</li>\r\n\t<li>Update the payment method and payment summary amounts</li>\r\n</ul>\r\n\r\n<div class=\"tip\"><strong>Note</strong>: Once a payment method is&nbsp;suspended for an order it can be used&nbsp;for other orders but cannot be used for the same order.&nbsp;</div>\r\n\r\n<h3 id=\"OrderPayments-Currency\"><a name=\"tokenization\" id=\"tokenization\"></a><a id=\"Tokenization\" name=\"Tokenization\"></a>Tokenization</h3>\r\n\r\n<p>Tokenization is a process in which&nbsp;the parent account number (PAN) is replaced with&nbsp;an irreversible&nbsp;token. Instead of storing PANs in the Payment component, irreversible tokens are stored to reduce the level of security which is associated with cardholder data such as PANs. This also removes the Payment component from the scope of PCI compliance. There is no tokenization engine within the Payment&nbsp;or Payment Gateway components, so a third-party tokenization provider must be used.</p>\r\n\r\n<p>When payment is captured in the Customer Service UI, the unencrypted payment data is sent directly from the browser, a page which is hosted by the payment gateway,&nbsp;to the payment gateway, which tokenizes the cardholder data. The gateway responds to the browser with an irreversible&nbsp;token, and the browser saves that token in the Payment component. When the payment needs to be authorized, the UI sends a payment request to the Payment component to trigger authorization, and the Payment component sends the token to the gateway with an authorization request. All subsequent communication between the Payment component and the gateway is done using the irreversible&nbsp;token.</p>\r\n\r\n<p>Two types of irreversible tokens can be provided by the tokenization engine: card-based and transaction-based. Card-based tokens are created based on cardholder data such as the card number and security code. Card-based tokens can be used to perform standalone payment transactions, if the original transaction has expired and a follow-on transaction cannot be performed. For example, if a settlement expires on January 1 and a refund needs to be issued on February 1, then a standalone refund can be performed against the card if the token is card-based.</p>\r\n\r\n<p>Transaction-based tokens are created based on a combination of cardholder data and transaction data which is specific to an authorization, settlement, or refund transaction. Transaction-based tokens can be used to perform follow-on transactions but are ineligible to be used for standalone transactions. For example, if a settlement expires on January 1 and a refund needs to be issued on February 1, then new payment information must be captured to issue a refund. The original transaction-based token cannot be used.</p>\r\n\r\n<p>If the payment gateway is used as a tokenization engine, then the data flow is as follows</p>\r\n\r\n<p><img src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/Tokenization%20data%20flow%20(1).png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL1Rva2VuaXphdGlvbiUyMGRhdGElMjBmbG93JTIwKDEpLnBuZyIsIkNvbmRpdGlvbiI6eyJEYXRlTGVzc1RoYW4iOnsiQVdTOkVwb2NoVGltZSI6MTc1NDc1MTgxN319fV19&Signature=WZCQ2Gfg-lwtT2~7q0SLOwtoY2j40M-pvXFYmvupCtN0N96g4RO2-Fx2VhW0EHPK5u74yhJr9JOHEK-HUGCS93rGPfCRxib6Hrj0y8SltUVtQtTAsSZ5HTLppFdyrybW6rCTXpiL~c8tAhcxbeuXLzid18146BeGPGdOPfv8VMJRunKFzo8eAfXL1N4EQvsgkv7TKT39~bcKvQ80fAQuNxyXxTUFGpSNRVsVbAA6psuGTwz9RtcqlPH-SLlskJR0dHsYXc3g4pieQW6WzgzAV2CGzEhFfbCX5mtDa2qcoQruQ5qHaVq-vF8VZRrOzZ7JZiuwbneWF7RGAyXUSkL8qA__&Key-Pair-Id=K2TK3EG287XSFC\" /></p>\r\n\r\n<p>If a separate tokenization engine is used instead of the payment gateway, then the data flow is as follows</p>\r\n\r\n<p><img src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/Tokenization%20with%20separate%20engine%20(1).png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL1Rva2VuaXphdGlvbiUyMHdpdGglMjBzZXBhcmF0ZSUyMGVuZ2luZSUyMCgxKS5wbmciLCJDb25kaXRpb24iOnsiRGF0ZUxlc3NUaGFuIjp7IkFXUzpFcG9jaFRpbWUiOjE3NTQ3NTE4MTd9fX1dfQ__&Signature=pnL8YGj2xak3aKoPVcSTNfyKEr47DS56k10sYGnnPRcTXVvPho1mt4nnhfVKEV86g~Dz~0h0tJAN5OAHfSETkWSt6ZngXjHtoyu~kO6Upfs-fXCOUUDcMh~ZewXltKdDOzRwWa17t5iikqx-0qvYom6Wa6WEbg3gj3M35vyCmpJzs4J4OVBpisBDx7NzaIeML4Ha0hUTxYmO-RxwQnxYR30gm2SojEGU7UC-b5LVNJR72mUsZ3spgt0hsX3tmmIJQSDzyN0gztSWbXrnQigL3zL6bnU5YZaLxWSY1m1ssVoiye86bpL0dbm7SirQZhqP4u5JDxnuqDuaaVwdxtJ7NQ__&Key-Pair-Id=K2TK3EG287XSFC\" /></p>\r\n\r\n<p>If payment is captured in store at a terminal which communicates directly with a payment gateway, then the data flow is as follows</p>\r\n\r\n<p><img src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/POS%20terminal%20payment%20tokenization.png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL1BPUyUyMHRlcm1pbmFsJTIwcGF5bWVudCUyMHRva2VuaXphdGlvbi5wbmciLCJDb25kaXRpb24iOnsiRGF0ZUxlc3NUaGFuIjp7IkFXUzpFcG9jaFRpbWUiOjE3NTQ3NTE4MTd9fX1dfQ__&Signature=d9T8wCUrCHcasm48yPePLP9icXE5ZEpZibRiHNg6ApT3LCEBj2ZTxK1Eutv2UZ6Pdmfe~2PohxUPGSPO7Blyuw67v~06rbP08PPAJgvrSbs1Alc2t3X9mYaFiqlWeBFfHeSDnibvxwWWGg5yi~bpgcCRXeMMSrl6bCjKmLKrN9qtOK6xJ4Ho4Uonb7uX7ttEG31IyrKIB~cYC3dUyzhHgXNYnpNNU4tyH24BVwTXY62e-dqSRT3i4Ld2mRwOlx~SA1DTHX1krsMAmEJnev2L-CNW2HLmntC99z~hRFDerk8ffg4TWWFmf974vS41lo5gGARNwHPbRwOfHwuI1LfNDQ__&Key-Pair-Id=K2TK3EG287XSFC\" /></p>\r\n\r\n<h3><a name=\"currency-conversion\" id=\"currency-conversion\"></a>Currency Conversion</h3>\r\n\r\n<p>If a payment is accepted in a foreign currency, the Save Payment Header service can be used to convert the foreign currency into the base currency. For example, if a store on the United States - Canada border accepts U.S. Dollars (USD) as a base currency but also accepts Canadian Dollars (CAD), then this service can be used to convert the Canadian Dollars to U.S. Dollars when saving the payment method.</p>\r\n\r\n<p>When a payment method is saved with an alternate currency and alternate currency amount but no base currency amount, then the Payment component converts the alternate currency amount to the base currency amount and outputs an updated payment method with the base currency amount and conversion rate. Since currency exchange rates are maintained in the Omni Util component, the Payment component does this conversion by making a web service call to the Omni Util component to convert between currencies.&nbsp;</p>\r\n\r\n<p>For example, when a payment method is saved with:</p>\r\n\r\n<ul>\r\n\t<li>Currency = USD (base currency)</li>\r\n\t<li>Alternate Currency = CAD</li>\r\n\t<li>Alternate Currency Amount = 15</li>\r\n</ul>\r\n\r\n<p>Then the output of the Save Payment Header service contains:</p>\r\n\r\n<ul>\r\n\t<li>Currency = USD (base currency)</li>\r\n\t<li>Amount = 11.16 (base currency)</li>\r\n\t<li>Alternate&nbsp;Currency&nbsp;= CAD</li>\r\n\t<li>Alternate Currency Amount = 15</li>\r\n\t<li>Conversion Rate = 0.741134</li>\r\n</ul>\r\n\r\n<h4><a name=\"currency-conversion-configuration-maintenance\" id=\"currency-conversion-configuration-maintenance\"></a>Currency Conversion Configuration & Maintenance</h4>\r\n\r\n<p>Currency exchange rates must be kept up to date by an external system which feeds updated exchange rates to the Omni&nbsp;Util&nbsp;component. The Omni&nbsp;Util&nbsp;component does not integrate with any external services to maintain this data. Current rates must be bridged in regularly to ensure accurate conversions. Conversion rates are imported using the Save Currency Conversion Rate service. There is currently no UI to view or edit currency conversion rates.</p>\r\n\r\n<p>An exchange rate must be saved for each combination of &#39;From Currency&#39; and &#39;To Currency.&#39; For example, if a retailer needs to convert USD to CAD and CAD to USD, then two records should be created: one from USD to CAD, and one from CAD to USD.</p>\r\n\r\n<h3><a name=\"implementation-flavor\" id=\"implementation-flavor\"></a>Implementation Flavor</h3>\r\n\r\n<h4><a name=\"how-to-add-ldquo-member-credits-certificates-quot-as-a-new-payment-method-like-the-electronic-gift-cards\" id=\"how-to-add-ldquo-member-credits-certificates-quot-as-a-new-payment-method-like-the-electronic-gift-cards\"></a>How to add &ldquo;Member Credits Certificates&quot; as a new payment method like the electronic gift cards</h4>\r\n\r\n<ul>\r\n\t<li>Approach 1:&nbsp;Use the base refund gift card flow but customize the SKU used for the digital item on the order line\r\n\t<ul>\r\n\t\t<li>Configure Member Credits to refund to new gift card.</li>\r\n\t\t<li>Implement user exit Order:Order:UserExit:PreCreateGiftCardLine when refund gift card line is added to swap out the base configured refund Gift Card Item ID for the Member Credits refund Item ID</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li>Approach 2:&nbsp;Build an entirely custom refund gift card flow to resemble the base flow with an alternate payment type\r\n\t<ul>\r\n\t\t<li>Call Gateway user exit logic for Member Credit Open Refund payment transactions:\r\n\t\t<ul>\r\n\t\t\t<li>Suppress refund call (do not send to gateway)</li>\r\n\t\t\t<li>Call Gateway UE response - update refund to In Progress</li>\r\n\t\t\t<li>Add a new order line&nbsp;containing&nbsp;refund Member Credit Item ID</li>\r\n\t\t</ul>\r\n\t\t</li>\r\n\t\t<li>Post Order Event for fulfillment of new order line containing refund Member Credit Item ID\r\n\t\t<ul>\r\n\t\t\t<li>Update the &ldquo;In Progress&rdquo; refund to Closed/Success</li>\r\n\t\t</ul>\r\n\t\t</li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<h3><a name=\"related-articles\" id=\"related-articles\"></a>Related Articles</h3>\r\n\r\n<div class=\"info\"><ul class=\"related-articles\"><li><a href=\"/paymentfailures\" hqid=\"2660553\">Payment Failures</a></li><li><a href=\"/payment-types\" hqid=\"2617707\">Payment Types</a></li><li><a href=\"/invoicing-sales-posting\" hqid=\"2617713\">Invoicing and Sales Posting</a></li><li><a href=\"/authorization\" hqid=\"2617709\">Authorization</a></li><li><a href=\"/how-payment-processing-works\" hqid=\"2617708\">How Payment Processing Works</a></li><li><a href=\"/refunds\" hqid=\"2617711\">Refunds</a></li><li><a href=\"/settlement\" hqid=\"2617710\">Settlement</a></li><li><a href=\"/payment-rest-apis-and-user-exits\" hqid=\"2617717\">Rest APIs and User Exits</a></li><li><a href=\"/payment-troubleshooting\" hqid=\"2617718\">Testing & Troubleshooting Payment</a></li><li><a href=\"/payment-health-dashboard\" hqid=\"3127204\">Payment Health Dashboard</a></li><li><a href=\"/paymentoverview\" hqid=\"2688302\">Payment Overview</a></li><li><a href=\"/einvoice\" hqid=\"3061519\">eInvoice </a></li><li><a href=\"/payment-fraud\" hqid=\"2617716\">Fraud</a></li><li><a href=\"/payment-gateway-integration\" hqid=\"2617714\">Payment Gateway Integration</a></li><li><a href=\"/other-transaction-types\" hqid=\"2617712\">Other Transaction Types</a></li><li><a href=\"/payment-schedulers\" hqid=\"2617715\">Payment Schedulers & Batch Processing</a></li></ul></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n\t  </div>\r\n </div>\r\n <div id=\"ui-page-fb-wrap\"></div>\r\n <div class=\"hiq-footer-wrap\">\r\n    \r\n                \r\n  </div>\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n",
  "content_length": 35055,
  "scraped_at": "2025-08-09T21:58:37.295811",
  "content_clean": "Home ››Manhattan Active® Omni››Order Management››Process & Configuration Guides››Order Selling››Payment ››Capturing Payment Capturing Payment Previous I Next Payment can be captured in various ways: on e-commerce, at the point of sale (POS), via contact center, or in self-service applications. Regardless of where an order was captured, the payment data for that order is stored in the Active® Omni payment component to be used for future settlements, refunds, or re-authorizations. This section describes the basics of enabling payment and how to map payment data to Active® Omni. Enabling Payment CapabilitiesCapturing PaymentPayment Captured in the Contact CenterPayment Captured at the Point of Sale (POS)Payment Captured on the WebMarketplace OrdersBalance DuePayment Capture ConfigurationMapping Payment DataSaving Sensitive Data as part of Payment TransactionsList of Encrypted Fields for Storing Payment InformationComponent: PaymentComponent: OrderComponent: CustomerPayment MethodsPayment TransactionsPre-Paid Payment MethodsSuspending PaymentsTokenizationCurrency ConversionCurrency Conversion Configuration & MaintenanceImplementation FlavorHow to add “Member Credits Certificates\" as a new payment method like the electronic gift cardsRelated Articles Enabling Payment Capabilities Payment processing can be enabled or disabled by order type. For example, most e-commerce and point of sale (POS) orders require payment processing, but most retail replenishment orders do not. To achieve this, the order configuration for e-commerce and POS orders can enable payment, while the order configuration for replenishment orders can disable payment. When payment is enabled: Invoices are created for shipments, returns, appeasements, and so on. Authorizations, settlements, and refunds are processed Sales postings are published when payment is processed Each order's payment status is maintained If payment is not enabled, invoices are not created, sales postings are not published, and the payment status of each order defaults to 'Not Applicable'. Even if an order is imported with payment transactions, if payment is disabled, no payment processing will occur. To enable or disable payment for a set of order types, navigate to the Order Configuration UI and select the Payment checkbox. Capturing Payment Payment Captured in the Contact Center Payment methods captured in the Contact Center are saved with an open authorization transaction which is processed when the order is confirmed without having been authorized or settled. If the payment failed to authorize or was flagged as fraud, then the user is prompted to ask the customer for an alternate form of payment. If user reloads the call center while capturing payment, they will be sent back to the initial tab of shipping and reselect payment. Configuring Payment Types for Contact Center The Payment Capture Config UI can be used to define which payment types can be captured in the contact center. In the contact center, by default the payment options are credit card, e-check, and gift card. Custom payment types can be captured in the contact center by: Add the new payment type in the Payment Types UI In the Payment Capture Config UI, add an entry for this payment type and enable 'Permit Assisted Sales' so that the option is displayed in the contact center In the Payment Capture Config UI, configure the 'Assisted Sales Sequence' as a unique integer to determine where the payment option is displayed relative to other payment types in the contact center Implement extension capabilities as per the requirements, or use the out of the box fields for capturing the custom payment type Please note: If user would like to not capture payment in the call center but continue in processing an order, payment in order configuration and permit assisted sales must be disabled. Payment Captured at the Point of Sale (POS) When orders are captured in store, POS processes payments and saves completed payment transactions in the Payment component. Since the terminal or mobile sled used to capture payments typically integrates directly with payment gateways, POS does not use the Payment component to calculate or execute services to create and execute transactions. Instead, POS uses the Total Payment Summary API to get the total amount to authorize, settle, or refund, and then POS creates payment transactions and calls the gateway to execute them. Configuring Payment Types for POS The Payment Capture Config UI can be used to define which payment types can be captured in POS. Configure payment types eligible for use at the POS by enabling 'Permit Customer Present Sales'  and setting the 'Customer Present Sale Sequence' in the Payment Capture Config UI. If you want to restrict a particular Payment Type to not be split , set PaymentCapture Config>Payment Capture Config Detail> Restrict Split Payment (T) - A payment type with this configured True must be the only or final payment type. \"Restrict Split Payment\" flag works on the balance due amount.  If you have a 100 dollar amount, and you are first select credit card which, for illustration, has \"Restrict Split Payment\" set to true, you have to pay the total 100 dollars with that credit card. However, for the same order, if you initially paid 25 dollars on a gift card, paying the rest with credit card is still allowed - but following the choice of credit card, the remainder of 75 dollars should be paid with that method. PayCaptureExclusionConfig Allows retailer to control allowed/displayed payment types for a transaction based on order line attributes. POS allows dynamical display of available payment types based on the attributes of the order line items, so that customers are presented with relevant payment options based on their purchases, thus improving checkout efficiency. For example, if a retailer does not want to accept PERSONAL CHECK on Mobile devices, or if the retailer does not want prepaid payment types such as CASH for Omni orders(Ship to address, pick-up at store), add exclusion \"Mobile\" and/or \"OmniOrder\" as Pay Capture Exclusions for those payment types using payCaptureExclusionConfig under Payment Capture Configuration for each. Payment Captured on the Web In channels like e-commerce, the order capture system captures payment information and integrates with the payment gateway to authorize or settle the payment. An order is imported with a completed authorization or settlement in the order import message, and the order component sends the payment header to the payment component to be saved. If an order is imported with an authorization, then a follow-on settlement is processed when items are fulfilled. If an order is pre-paid and imported with a settlement, then no payment is processed upon shipment. If an order is imported with an open authorization, then the authorization is sent to the third-party payment gateway in the next scheduled authorization run. If an order is imported with no payment information, then a customer service representative (CSR) must call the customer to obtain payment information. Marketplace Orders If an order is captured in a third-party marketplace which processes payments, then payment data does not need to be sent to Active® Omni, as payment is processed by the marketplace. For these orders, order status messages can be published to the marketplace upon cancellations and shipment events. Each time a unit is shipped, an order update is sent to the marketplace, and the marketplace settles for the shipped unit. Balance Due When an order capture UI needs to display the balance due so that a store associate or customer care representative can collect payment, then the order component calculates the balance due by calling the payment component. The Get Order API includes a balance due attribute in the response. To calculate the balance due, the order component calls the Get Payment Header API to get all the payment methods from the payment component. Then, the order component calculates the balance due as \\(Balance Due = Order Total - \\sum (Amount - Current Refund Amount, \\forall Payment Methods)\\) Payment Capture Configuration The payment capture configuration is used to define rules for accepting and issuing payments in different order capture channels. For example, this configuration is used to define cash as an acceptable refund tender in customer present situations such as POS, but not in situations where the customer is not present such as the Contact Center. This configuration is required for any implementation with payment processing, although some attributes are only applicable in customer present situations. In the Payment Capture Config UI, configure the following for each payment type: Whether the payment type can be accepted for customer present sales (for example, POS) Details such as whether the payment type can be over-tendered, should be included in the drawer count, and minimum and maximum amounts accepted or issued What type(s) of change can be issued, when the payment type is over-tendered. For example, when a $50 traveler's check is used to pay for a $41 order, and cash is configured as the change payment type for traveler's check, then the customer receives $9 change in cash.  (used only when customer present flows like POS are in scope) A list of accepted currencies for the payment type, which is applicable primarily to cash (used only when customer present flows like POS are in scope) What payment types can be issued as a refund, when the given payment type is used on the original order. The refund payment type configuration is categorized by interaction mode, which defines the order capture channel as customer present, customer not present, and so on. Follow-on refunds are supported for credit card, PayPal, and e-check payment types. For Interaction Mode = Customer Not Present, all other payment types must be configured to refund via Gift Card. Mapping Payment Data Each tender used should be mapped to a single payment method entity. Each payment method can have an optional billing address and a list of payment transactions. In addition to this basic data, if any additional payment data needs to be stored at the payment method or transaction level, then there are key-value pair tables which can be used. The payment method has two child tables which can store additional attributes: The payment method attribute table is used to store plain text data which is not sensitive and is stored un-encrypted in the database. The payment method encrypted attribute table is used to store sensitive payment data. This table encrypts all of the values as they are stored, and un-encrypts them upon retrieval. The payment transaction has two child tables which can store additional attributes: The payment transaction attribute table is used to store plain text data which is not sensitive and is stored un-encrypted in the database. The payment transaction encrypted attribute table is used to store sensitive payment transaction data. This table encrypts all of the values as they are stored, and un-encrypts them upon retrieval. Saving Sensitive Data as part of Payment Transactions In some cases, there may be requirements to store sensitive information retrieved as part of a payment gateway call like Authorization, Settlement or Refund. In such cases, the sensitive information can be encrypted and stored in a child key/value table to PaymentTransaction called PaymentTransEncrAttribute. List of Encrypted Fields for Storing Payment Information Component: Payment PaymentMethod accountNumber nameOnCard cardExpiryMonth cardExpiryYear giftCardPin routingNumber checkNumber driversLicenseNumber driversLicenseState driversLicenseCountry businessName businessTaxId customerSignature (For POS use cases) swipeData (For POS use cases) PaymentMethodEncrAttribute value PaymentTransEncrAttribute value PaymentTransactionEMVTags All fields GatewayEncryptedAttribute value Component: Order FulfillmentDetail gcNumber gcPIN Component: Customer CustomerPaymentMethod accountNumber nameOnCard cardExpiryMonth cardExpiryYear routingNumber driversLicenseNumber driversLicenseState driversLicenseCountry businessName businessTaxId Payment Methods The payment method represents one tender, such as one credit card or one cash payment. If two credit cards exist on an order, then two payment methods are saved. The payment method contains the amount applied to the payment type and key payment data such as the account token. As transactions are processed against a payment method, the currentAuthAmount, currentSettleAmount, and currentRefundAmount attributes are updated. CurrentAuthAmount increases when an authorization is successful and decreases when an authorization expires or is used for settlement. CurrentSettleAmount increases when a settlement is successful and decreases when a refund occurs. CurrentRefundAmount increases when a refund is processed. Payment Transactions The Payment Transaction entity is a log of each payment event, including authorizations, settlements, refunds, and balance checks. The payment transaction is the parent object used to communicate with the payment gateway. When the payment gateway responds, the payment transaction is updated to reflect the decision made by the payment gateway. Payment transactions are the system of record used to calculate how much has been authorized, paid, and refunded for each order. Transaction type is an attribute on the payment transaction that communicates to the payment gateway what action needs to be taken. The Payment component uses the transaction type attribute to calculate the current authorization amount, current settlement amount, and current refund amount for each payment method and for the payment summary. Transaction types are provided as system data and cannot be modified. Supported transaction types include authorization, authorization reversal, settlement, refund, balance check, and return credit. Pre-Paid Payment Methods The payment configuration attribute isPrepaid indicates if payment method is considered pre-paid when saved. This attribute is used to determine if any payment transactions need to be created for payment methods. If true, then a successful, closed settlement is created upon saving. For example, cash is configured as pre-paid. When a $60 cash payment is saved, a closed, successful $60 settlement is created against the payment method. If false, then no payment transactions are created upon save, but rather they are created when the calculate service determines what transaction type to create by using the payment summary. For example, credit cards are not configured as pre-paid. When a $60 credit card payment is saved, no payment transactions are created. When the calculate service is called, it determines whether the credit card needs to be authorized, settled, or refunded and creates transactions accordingly. Suspending Payments Payment methods can be suspended when a customer requests that the card is not used for future payments. When a payment method is suspended, the customer should provide a new payment method to be used for any remaining balance due. Suspending a card does not affect settlements or refunds which have already been processed and therefore will not issue a refund on already settled amount. When a payment method is suspended, it is not considered by the Payment component when selecting payment methods to authorize or settle against. Suspended payment methods are eligible for refund. To suspend a payment method, send a partial payment header update with isSuspended set to true on the payment method. When a payment is suspended, the following updates occur: Delete open authorizations and settlement transactions (do not delete refunds or in progress transactions, do not delete in progress or closed settlement transaction) Create a reverse authorization for any closed authorizations Update the payment method and payment summary amounts Note: Once a payment method is suspended for an order it can be used for other orders but cannot be used for the same order. Tokenization Tokenization is a process in which the parent account number (PAN) is replaced with an irreversible token. Instead of storing PANs in the Payment component, irreversible tokens are stored to reduce the level of security which is associated with cardholder data such as PANs. This also removes the Payment component from the scope of PCI compliance. There is no tokenization engine within the Payment or Payment Gateway components, so a third-party tokenization provider must be used. When payment is captured in the Customer Service UI, the unencrypted payment data is sent directly from the browser, a page which is hosted by the payment gateway, to the payment gateway, which tokenizes the cardholder data. The gateway responds to the browser with an irreversible token, and the browser saves that token in the Payment component. When the payment needs to be authorized, the UI sends a payment request to the Payment component to trigger authorization, and the Payment component sends the token to the gateway with an authorization request. All subsequent communication between the Payment component and the gateway is done using the irreversible token. Two types of irreversible tokens can be provided by the tokenization engine: card-based and transaction-based. Card-based tokens are created based on cardholder data such as the card number and security code. Card-based tokens can be used to perform standalone payment transactions, if the original transaction has expired and a follow-on transaction cannot be performed. For example, if a settlement expires on January 1 and a refund needs to be issued on February 1, then a standalone refund can be performed against the card if the token is card-based. Transaction-based tokens are created based on a combination of cardholder data and transaction data which is specific to an authorization, settlement, or refund transaction. Transaction-based tokens can be used to perform follow-on transactions but are ineligible to be used for standalone transactions. For example, if a settlement expires on January 1 and a refund needs to be issued on February 1, then new payment information must be captured to issue a refund. The original transaction-based token cannot be used. If the payment gateway is used as a tokenization engine, then the data flow is as follows If a separate tokenization engine is used instead of the payment gateway, then the data flow is as follows If payment is captured in store at a terminal which communicates directly with a payment gateway, then the data flow is as follows Currency Conversion If a payment is accepted in a foreign currency, the Save Payment Header service can be used to convert the foreign currency into the base currency. For example, if a store on the United States - Canada border accepts U.S. Dollars (USD) as a base currency but also accepts Canadian Dollars (CAD), then this service can be used to convert the Canadian Dollars to U.S. Dollars when saving the payment method. When a payment method is saved with an alternate currency and alternate currency amount but no base currency amount, then the Payment component converts the alternate currency amount to the base currency amount and outputs an updated payment method with the base currency amount and conversion rate. Since currency exchange rates are maintained in the Omni Util component, the Payment component does this conversion by making a web service call to the Omni Util component to convert between currencies. For example, when a payment method is saved with: Currency = USD (base currency) Alternate Currency = CAD Alternate Currency Amount = 15 Then the output of the Save Payment Header service contains: Currency = USD (base currency) Amount = 11.16 (base currency) Alternate Currency = CAD Alternate Currency Amount = 15 Conversion Rate = 0.741134 Currency Conversion Configuration & Maintenance Currency exchange rates must be kept up to date by an external system which feeds updated exchange rates to the Omni Util component. The Omni Util component does not integrate with any external services to maintain this data. Current rates must be bridged in regularly to ensure accurate conversions. Conversion rates are imported using the Save Currency Conversion Rate service. There is currently no UI to view or edit currency conversion rates. An exchange rate must be saved for each combination of 'From Currency' and 'To Currency.' For example, if a retailer needs to convert USD to CAD and CAD to USD, then two records should be created: one from USD to CAD, and one from CAD to USD. Implementation Flavor How to add “Member Credits Certificates\" as a new payment method like the electronic gift cards Approach 1: Use the base refund gift card flow but customize the SKU used for the digital item on the order line Configure Member Credits to refund to new gift card. Implement user exit Order:Order:UserExit:PreCreateGiftCardLine when refund gift card line is added to swap out the base configured refund Gift Card Item ID for the Member Credits refund Item ID Approach 2: Build an entirely custom refund gift card flow to resemble the base flow with an alternate payment type Call Gateway user exit logic for Member Credit Open Refund payment transactions: Suppress refund call (do not send to gateway) Call Gateway UE response - update refund to In Progress Add a new order line containing refund Member Credit Item ID Post Order Event for fulfillment of new order line containing refund Member Credit Item ID Update the “In Progress” refund to Closed/Success Related Articles Payment FailuresPayment TypesInvoicing and Sales PostingAuthorizationHow Payment Processing WorksRefundsSettlementRest APIs and User ExitsTesting & Troubleshooting PaymentPayment Health DashboardPayment OvervieweInvoice FraudPayment Gateway IntegrationOther Transaction TypesPayment Schedulers & Batch Processing"
}