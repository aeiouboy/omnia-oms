{
  "success": true,
  "permalink": "payment-fraud",
  "title": "Fraud",
  "content": "\r\n\r\n\r\n<div class=\"hiq-page-wrap\">\r\n<div class=\"hiq-t-wrap\">\r\n\t\t\r\n  \t  <div class=\"hiq-t \">\r\n\t\t\t\t<ul class=\"breadcrumbs\"><li><a class=\"breadcrumb-links\" hqid=\"1788908\"  href=\"/home\">Home</a></li> <li><span>&rsaquo;&rsaquo;</span><a hqid=\"3500940\" href=\"/omni\" class=\"breadcrumb-links\">Manhattan Active® Omni</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158393\" href=\"/order-management\" class=\"breadcrumb-links\">Order Management</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158394\" href=\"/process-configuration-guides\" class=\"breadcrumb-links\">Process & Configuration Guides</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2163646\" href=\"/order-selling-2\" class=\"breadcrumb-links\">Order Selling</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2163647\" href=\"/payment-2\" class=\"breadcrumb-links\">Payment</a></li><li> <span>››</span>Fraud</li></ul>  \t\r\n\t\t<h2>Fraud</h2>\r\n\r\n<p></p>\r\n\r\n<a href=\"/payment-schedulers\" hqid=\"2617715\">Previous</a>&nbsp;I&nbsp;<a href=\"/payment-rest-apis-and-user-exits\" hqid=\"2617717\">Next</a>\r\n<p>&nbsp;</p>\r\n\r\n<p>While Active&reg;&nbsp;Omni does not have any fraud detection capabilities, workflows are provided to integrate with third party fraud detection services and hold orders which are flagged as fraudulent. If an order has been put on hold due to potential fraud, then a fraud analyst can analyze the situation and either resolve the hold if there is no risk of fraud, or the analyst can cancel the order if fraudulent activity is confirmed. Two workflows are available for integrating with fraud detection services: using a payment gateway which has built-in fraud detection or using a standalone third-party fraud detection service.</p>\r\n\r\n<div class=\"info\"><ul><li><a href=\"/payment-fraud$fraud-workflow\">Fraud Workflow</a></li><li><a href=\"/payment-fraud$holding-orders-for-fraud\">Holding Orders for Fraud</a></li><li><a href=\"/payment-fraud$detecting-fraud-via-the-payment-gateway\">Detecting Fraud via the Payment Gateway</a></li><li><a href=\"/payment-fraud$detecting-fraud-via-fraud-providers\">Detecting Fraud via Fraud Providers</a></li><li><a href=\"/payment-fraud$fraud-integration-mappings\">Fraud Integration Mappings</a></li><li><a href=\"/payment-fraud$fraud-resolution\">Fraud Resolution</a></li><li><a href=\"/payment-fraud$fraud-configuration\">Fraud Configuration</a><ul><li><a href=\"/payment-fraud$fraud-hold-type\">Fraud Hold Type</a></li><li><a href=\"/payment-fraud$milestones-to-prevent-release-of-fraudulent-orders\">Milestones to Prevent Release of Fraudulent Orders</a></li></ul></li><li><a href=\"/payment-fraud$implementation-flavor\">Implementation Flavor</a><ul><li><a href=\"/payment-fraud$how-to-generate-invoice-on-carrier-scan-if-the-fraud-check-passes\">How to generate invoice on carrier scan if the fraud check passes</a></li></ul></li><li><a href=\"/payment-fraud$related-articles\">Related Articles</a></li></ul></div>\r\n\r\n<h3><a name=\"fraud-workflow\" id=\"fraud-workflow\"></a>Fraud Workflow</h3>\r\n\r\n<p>The fraud workflow is typically as follows:</p>\r\n\r\n<ul>\r\n\t<li>Customer places an order</li>\r\n\t<li>A fraud check is initiated, usually at order creation, on payment capture, or before release\r\n\t<ul>\r\n\t\t<li>If the fraud check passes, then the order is released for fulfillment</li>\r\n\t\t<li>If the fraud check fails, then the order is canceled (Manhattan Active&reg; Omni does not have a systematic process to perform this cancelation, however, one can be implemented depending on the specific fraud process)</li>\r\n\t\t<li>If the fraud check requires further analysis, then the order is put on hold, and a fraud analyst manually reviews the risks and decides to cancel the order or un-hold the order so that it can be fulfilled</li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<h3><a name=\"holding-orders-for-fraud\" id=\"holding-orders-for-fraud\"></a>Holding Orders for Fraud</h3>\r\n\r\n<p>When an order is identified as potentially fraudulent, the order is put on hold to ensure it is not released for fulfillment. Fraud analyst teams can filter for orders on hold for fraud review and&nbsp;review the fraud risks. If the order is deemed to be a fraud risk, the analyst can cancel the order. If the order is not deemed a risk, then the analyst can un-hold the order and release it for fulfillment.</p>\r\n\r\n<p>Fraud detection can be done via the payment gateway or by a third party fraud provider. Regardless of how fraud is detected, the order hold is the primary mechanism to prevent potentially-fraudulent orders from being fulfilled.</p>\r\n\r\n<h3 id=\"OrderPayments-FraudDetectionbyaPaymentGateway\"><a name=\"detecting-fraud-via-the-payment-gateway\" id=\"detecting-fraud-via-the-payment-gateway\"></a>Detecting Fraud via the Payment Gateway</h3>\r\n\r\n<p>One manner in which fraud can be detected is during payment processing in the third-party payment gateway. When the payment gateway receives payment requests, it performs a fraud check and can flag a payment as Fraud as part of the payment response. If the payment gateway responds with a Fraud result for a payment transaction, then the Payment component holds the order with a Payment Fraud reason code.</p>\r\n\r\n<p>When a transaction is marked as fraud, no new payment transactions are created against the payment method until the fraud is resolved. For example, if a payment method has a $100 authorization which is flagged as fraud, then&nbsp;follow-on settlement or&nbsp;re-authorization transactions are not created until the fraud is resolved.</p>\r\n\r\n<p><img src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/Payment%20fraud%20hold%20application(2).png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL1BheW1lbnQlMjBmcmF1ZCUyMGhvbGQlMjBhcHBsaWNhdGlvbigyKS5wbmciLCJDb25kaXRpb24iOnsiRGF0ZUxlc3NUaGFuIjp7IkFXUzpFcG9jaFRpbWUiOjE3NTQ3NTM5Njd9fX1dfQ__&Signature=pHKBnh2HWYjVqy37yi9GCWBGEQG6j94AMNn2ePXB8Bd9pFz4-ECdnrjjeXmU9ipqpfdbt9L2kyyKNC9umOm-Mm5cXbz76SUpbLF7CDbHr8EoVVMOGUljlWOF5y5ltyqeQMDUXOabPh8~EHFaSy5nMJ4GOIcCCCd~rNt0MzYYNhgbdISDM2NSFBrMYKVMOLwv0aFRyUlkTzfL2X-O57QhS-MugZSGm9r-j9Y9XoiZjydQcA-0~dvevP0suGwAhP4NFCBi0TEEuCameBk5h8KPxEsF6O4TsEzvyJNNarmuKMelglDDejP7TXgp-FDQmYP7PIVjpKBTTFZtJ4Ps5FZA4A__&Key-Pair-Id=K2TK3EG287XSFC\" /></p>\r\n\r\n<h3 id=\"OrderPayments-FraudDetectionbyaPaymentGateway\"><a name=\"detecting-fraud-via-fraud-providers\" id=\"detecting-fraud-via-fraud-providers\"></a>Detecting Fraud via Fraud Providers</h3>\r\n\r\n<p>If a third-party fraud service other than a payment gateway is used, then a user exit can be used to perform a fraud check at any time during the order life cycle. For example, during order capture&nbsp;or before order confirmation a request can be sent to a fraud service, and if that service detects potential fraud, then the service puts the order on hold with a &#39;PaymentFraud&#39; hold type.</p>\r\n\r\n<p>Fraud service integration must be built as part of the project. Here are some commonly-used touch points for integrating with fraud services. The following APIs and user exits can be used to implement a fraud check within a synchronous flow, wherein the order can be updated as part of the response.</p>\r\n\r\n<ul>\r\n\t<li><strong>Save Order</strong> - To perform a fraud check upon first-time order creation</li>\r\n\t<li><strong>Pre-Release Order user exit</strong> - To perform fraud checks before releasing orders</li>\r\n\t<li><strong>Confirm Order user exit </strong>- To perform fraud checks on order confirmation</li>\r\n</ul>\r\n\r\n<p>Events can also be used to trigger fraud checks in a &quot;push&quot; fashion. The following are commonly-used events for triggering fraud checks:</p>\r\n\r\n<ul>\r\n\t<li>Confirm order</li>\r\n\t<li>Update shipping method</li>\r\n\t<li>Update shipping address</li>\r\n\t<li>Update quantity</li>\r\n\t<li>Update payment method</li>\r\n\t<li>Add line</li>\r\n\t<li>Add discount</li>\r\n</ul>\r\n\r\n<h3><a name=\"fraud-integration-mappings\" id=\"fraud-integration-mappings\"></a>Fraud Integration Mappings</h3>\r\n\r\n<p>When integrating with the third party fraud provider, translate&nbsp;the Order and Payment objects into the third-party fraud request format. A payment gateway entity can optionally be used to configure the third party fraud provider credentials and connection properties.<br />\r\nThe fraud provider&#39;s response typically comes as a partial&nbsp;order update using the save order API. Fraud-related attributes such as reason code, fraud status, and so on&nbsp;can be saved in extended attributes on the order or payment entities. Based on the fraud check result, the order update should contain key attributes as follows:</p>\r\n\r\n<ul>\r\n\t<li>If the fraud system deems the order failed the fraud check, then a partial order update with isCancelled = true and any fraud-related attributes (reason code, fraud status, and so on) for reporting purposes.</li>\r\n\t<li>If the fraud system deems the order passed the fraud check and can be released for fulfillment, then the order update can include only the reason code and fraud status for informational purposes, and the order will be released per normal processing.</li>\r\n\t<li>If the fraud system deems the order needs manual review, then the order update can include isOnHold = true with a fraud hold type and any relevant reason codes, fraud status, and so on.</li>\r\n</ul>\r\n\r\n<h3><a name=\"fraud-resolution\" id=\"fraud-resolution\"></a>Fraud Resolution</h3>\r\n\r\n<p>After an analyst researches the fraud, they need to update the payment transaction from Fraud status to either Success or Failure status using the Manage Payment Transactions UI. The &#39;Mark as Success&#39; button in the Order Details page under Payment Transactions can also be used to change the&nbsp;payment transaction response Fraud to Success. The &#39;Mark as Success&#39; button only changes the response status; it does not update the processed amount and cannot be used to close open transactions.</p>\r\n\r\n<p>When all payment transactions are&nbsp;updated from Fraud to Success or Failure, the fraud hold on the order is removed with resolve reason &#39;PaymentFraudResolved&#39;.&nbsp;This logic works even for inactive payment transactions. If a transaction is inactive (isActive = false) and an authorization transaction is updated from Fraud to Success, then the order fraud hold is removed.</p>\r\n\r\n<p><img src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/Payment%20fraud%20resolution%20flow(1).png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL1BheW1lbnQlMjBmcmF1ZCUyMHJlc29sdXRpb24lMjBmbG93KDEpLnBuZyIsIkNvbmRpdGlvbiI6eyJEYXRlTGVzc1RoYW4iOnsiQVdTOkVwb2NoVGltZSI6MTc1NDc1Mzk2N319fV19&Signature=B6lzxokClBimQ~NFaQVNWEfFZ56tTae7MPoygnDDYvqjz-cp9s8ma-I8~OR8Knzc3LyQaMA5-W~cCk~rO4zbuIJUQW6pRuy5XjpTxgWbEd7oJUiZJpwdYUAZhX9bFWOZOFRf6MseID5Cu~yhv9OmPhqj-yuNMvYWQ5thS434exnz7Ost4yu~MXezmIzRu91ZJLfW~MKB7t-qwHACblJI2gxuJwffqH00Xv1ib4xJW7RPBQt0KbFu5H66jsIOyxn6AEVbNUec3Lpdf5wjOzL~dQMiZYOHo6RAqlF7yw8GEvqsr4~kS6Rrya4JaUx99h8859MZYH0zk2GkwQCyIj~OdA__&Key-Pair-Id=K2TK3EG287XSFC\" /></p>\r\n\r\n<h3><a name=\"fraud-configuration\" id=\"fraud-configuration\"></a>Fraud Configuration</h3>\r\n\r\n<h4><a name=\"fraud-hold-type\" id=\"fraud-hold-type\"></a>Fraud Hold Type</h4>\r\n\r\n<p>The Fraud Hold Type attribute controls the behavior to hold orders when the payment gateway flags a payment as fraud. Configure this&nbsp;setting in&nbsp;the&nbsp;<a hqid=\"1827458\" href=\"/payment-configuration-2$payment_parameter_UI\">Payment Parameters UI</a>.&nbsp;</p>\r\n\r\n<ul>\r\n\t<li>If this setting is not null, then the value should be configured as a valid hold type from the order<em>&nbsp;</em>component. When a payment transaction is updated with response status fraud, then the payment<em>&nbsp;</em>component applies an order-level hold with the configured hold type. For example, if set to &quot;Payment Fraud Detected,&quot; then if a credit card authorization is flagged as fraud, the corresponding order is put on hold with the hold type &quot;Payment Fraud Detected&quot;.<br />\r\n\tUnlike most communication between payment and order that update is made synchronously to avoid finding an order release but updated with a fraud hold after the fact.&nbsp;</li>\r\n\t<li>If this setting is null, then the payment<em>&nbsp;</em>component does not put orders on hold when a&nbsp;payment transaction is updated with response status fraud.</li>\r\n</ul>\r\n\r\n<h4><a name=\"milestones-to-prevent-release-of-fraudulent-orders\" id=\"milestones-to-prevent-release-of-fraudulent-orders\"></a>Milestones to Prevent Release of Fraudulent Orders</h4>\r\n\r\n<p>Because the payment component updates to the order component are asynchronous, there can be fraud flows which need special consideration. For example, if fraud systems update the payment transaction to &#39;fraud&#39; status and then hold the order, there can be a very slight delay in this asynchronous processing in which time the&nbsp;order could get released. To&nbsp;avoid this, add a delay using milestones (for example,&nbsp;0.02 hours between Confirmed and Released status) to ensure that orders with fraud payment are not released.</p>\r\n\r\n<h3><a name=\"implementation-flavor\" id=\"implementation-flavor\"></a>Implementation Flavor</h3>\r\n\r\n<h4><a name=\"how-to-generate-invoice-on-carrier-scan-if-the-fraud-check-passes\" id=\"how-to-generate-invoice-on-carrier-scan-if-the-fraud-check-passes\"></a>How to generate invoice on carrier scan if the fraud check passes</h4>\r\n\r\n<ul>\r\n\t<li>Configure invoices to be created on &quot;Carrier Scan&quot; within Order Configuration.</li>\r\n\t<li>Enable &ldquo;IsEligibleForChargeback&ldquo; for a specific payment type in payment configuration.</li>\r\n\t<li>Implement the Order:Order:UserExit:isInvoiceOnCarrierScan user exit to perform fraud check.</li>\r\n</ul>\r\n\r\n<h3><a name=\"related-articles\" id=\"related-articles\"></a>Related Articles</h3>\r\n\r\n<div class=\"info\"><ul class=\"related-articles\"><li><a href=\"/settlement\" hqid=\"2617710\">Settlement</a></li><li><a href=\"/paymentfailures\" hqid=\"2660553\">Payment Failures</a></li><li><a href=\"/payment-schedulers\" hqid=\"2617715\">Payment Schedulers & Batch Processing</a></li><li><a href=\"/capturing-payment\" hqid=\"2617706\">Capturing Payment</a></li><li><a href=\"/how-payment-processing-works\" hqid=\"2617708\">How Payment Processing Works</a></li><li><a href=\"/authorization\" hqid=\"2617709\">Authorization</a></li><li><a href=\"/einvoice\" hqid=\"3061519\">eInvoice </a></li><li><a href=\"/payment-gateway-integration\" hqid=\"2617714\">Payment Gateway Integration</a></li><li><a href=\"/other-transaction-types\" hqid=\"2617712\">Other Transaction Types</a></li><li><a href=\"/paymentoverview\" hqid=\"2688302\">Payment Overview</a></li><li><a href=\"/payment-types\" hqid=\"2617707\">Payment Types</a></li><li><a href=\"/invoicing-sales-posting\" hqid=\"2617713\">Invoicing and Sales Posting</a></li><li><a href=\"/payment-health-dashboard\" hqid=\"3127204\">Payment Health Dashboard</a></li><li><a href=\"/payment-rest-apis-and-user-exits\" hqid=\"2617717\">Rest APIs and User Exits</a></li><li><a href=\"/payment-troubleshooting\" hqid=\"2617718\">Testing & Troubleshooting Payment</a></li><li><a href=\"/refunds\" hqid=\"2617711\">Refunds</a></li></ul></div>\r\n\r\n<ul>\r\n</ul>\r\n\r\n\t  </div>\r\n </div>\r\n <div id=\"ui-page-fb-wrap\"></div>\r\n <div class=\"hiq-footer-wrap\">\r\n    \r\n                \r\n  </div>\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n",
  "content_length": 15379,
  "scraped_at": "2025-08-09T22:34:27.306357"
}