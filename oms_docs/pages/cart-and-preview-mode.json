{
  "id": "2746028",
  "permalink": "cart-and-preview-mode",
  "title": "Cart and Preview Mode",
  "type": "topic",
  "level": 4,
  "path": "Manhattan Active® Omni/Order Management/Process & Configuration Guides/Order Orchestration/Cart and Preview Mode",
  "raw_item": {
    "id": "2746028",
    "text": "Cart and Preview Mode",
    "title": "Cart and Preview Mode",
    "permalink": "cart-and-preview-mode",
    "leaf": false,
    "droppable": true,
    "expanded": true,
    "closed": true,
    "visible": true,
    "editable": true,
    "type": "topic",
    "topicType": "0",
    "status": "1",
    "iconCls": "icon-topic",
    "cls": "",
    "folder_id": "129589",
    "parent": "f;129589",
    "created_date": "1616186520",
    "modified_date": "1751608893",
    "instructor_id": null,
    "loaded": true,
    "haschildren": false,
    "callout": "0",
    "order": "4"
  },
  "success": true,
  "content": "\r\n\r\n\r\n<div class=\"hiq-page-wrap\">\r\n<div class=\"hiq-t-wrap\">\r\n\t\t\r\n  \t  <div class=\"hiq-t \">\r\n\t\t\t\t<ul class=\"breadcrumbs\"><li><a class=\"breadcrumb-links\" hqid=\"1788908\"  href=\"/home\">Home</a></li> <li><span>&rsaquo;&rsaquo;</span><a hqid=\"3500940\" href=\"/omni\" class=\"breadcrumb-links\">Manhattan Active® Omni</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158393\" href=\"/order-management\" class=\"breadcrumb-links\">Order Management</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158394\" href=\"/process-configuration-guides\" class=\"breadcrumb-links\">Process & Configuration Guides</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158746\" href=\"/order-orchestration-2\" class=\"breadcrumb-links\">Order Orchestration</a></li><li> <span>››</span>Cart and Preview Mode</li></ul>  \t\r\n\t\t<h2>Cart and Preview Mode</h2>\r\n\r\n<p></p>\r\n\r\n<p>&nbsp;<a href=\"/order-cancellation\" hqid=\"2601857\">Next</a>\r\n<div class=\"info\"><ul><li><a href=\"/cart-and-preview-mode$overview\">Overview</a></li><li><a href=\"/cart-and-preview-mode$configuration\">Configuration</a><ul><li><a href=\"/cart-and-preview-mode$profile-configuration\">Profile Configuration</a></li><li><a href=\"/cart-and-preview-mode$initializing-nbsp-the-cart\">Initializing&nbsp;the Cart</a></li><li><a href=\"/cart-and-preview-mode$keeping-nbsp-cart-and-order-in-sync\">Keeping&nbsp;Cart and Order in Sync</a></li><li><a href=\"/cart-and-preview-mode$extended-attributes-in-the-nbsp-cart\">Extended Attributes in the&nbsp;Cart</a></li><li><a href=\"/cart-and-preview-mode$user-exits-in-the-cart\">User Exits in the Cart</a></li><li><a href=\"/cart-and-preview-mode$consul-server-configuration\">Consul Server Configuration</a></li><li><a href=\"/cart-and-preview-mode$message-type-configuration\">Message Type Configuration</a></li></ul></li><li><a href=\"/cart-and-preview-mode$cart-apis\">Cart APIs</a><ul><li><a href=\"/cart-and-preview-mode$cart-initialization-status-check-api\">Cart Initialization Status Check API</a></li><li><a href=\"/cart-and-preview-mode$cancel-line-api\">Cancel Line API</a></li><li><a href=\"/cart-and-preview-mode$get-nbsp-current-cart-version-api\">Get&nbsp;Current Cart Version API</a></li><li><a href=\"/cart-and-preview-mode$confirm-order-changes-nbsp-api\">Confirm Order Changes&nbsp;API</a></li></ul></li><li><a href=\"/cart-and-preview-mode$managing-discarded-carts\">Managing Discarded Carts</a></li><li><a href=\"/cart-and-preview-mode$implementation-flavors\">Implementation Flavors</a></li><li><a href=\"/cart-and-preview-mode$feature-scope\">Feature Scope</a></li><li><a href=\"/cart-and-preview-mode$related-articles\">Related Articles</a></li></ul></div>\r\n\r\n<h3><a name=\"overview\" id=\"overview\"></a>Overview</h3>\r\n\r\n<p data-renderer-start-pos=\"120\">The cart enables customers and customer service agents&nbsp;to preview order changes before saving them to the order. For example, a customer can select an item to cancel, preview the new order total, and then confirm the changes, as opposed to directly canceling the items without the ability to preview the impact it would have on the order. Without the cart&nbsp;to manage this preview step, changes are saved directly on the order, which results in unnecessary payment processing if users then reverted the change.</p>\r\n\r\n<p data-renderer-start-pos=\"120\">Currently, the cart supports preview mode for the following use cases:</p>\r\n\r\n<ul>\r\n\t<li data-renderer-start-pos=\"120\">Order line cancellation</li>\r\n</ul>\r\n\r\n<p>Previewing order modifications not included in this list is not supported.</p>\r\n\r\n<h3><a name=\"configuration\" id=\"configuration\"></a><a id=\"cartConfiguration\" name=\"cartConfiguration\"></a>Configuration</h3>\r\n\r\n<h4><a name=\"profile-configuration\" id=\"profile-configuration\"></a><a id=\"CartProfileConfig\" name=\"CartProfileConfig\"></a>Profile Configuration</h4>\r\n\r\n<p data-renderer-start-pos=\"1550\">The cart component profile configuration requires all&nbsp;three profiles purposes listed below to belong to the same profile. If that is not the case in your environment,&nbsp;change the profile configuration before you enable the feature. If you change the profile configuration&nbsp;after you've enabled preview mode, you will have to disable and enable the feature again.</p>\r\n\r\n<table data-number-column=\"false\">\r\n\t<colgroup>\r\n\t\t<col>\r\n\t\t<col>\r\n\t</colgroup>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td colorname=\"\" colspan=\"1\" data-colwidth=\"340\" rowspan=\"1\">\r\n\t\t\t<p data-renderer-start-pos=\"2049\"><strong data-renderer-mark=\"true\">Profile Purpose</strong></p>\r\n\t\t\t</td>\r\n\t\t\t<td colorname=\"\" colspan=\"1\" data-colwidth=\"340\" rowspan=\"1\">\r\n\t\t\t<p data-renderer-start-pos=\"2068\"><strong data-renderer-mark=\"true\">Entities</strong></p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td colorname=\"\" colspan=\"1\" data-colwidth=\"340\" rowspan=\"1\">\r\n\t\t\t<p data-renderer-start-pos=\"2082\">ord::orderConfig&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\t\t\t</td>\r\n\t\t\t<td colorname=\"\" colspan=\"1\" data-colwidth=\"340\" rowspan=\"1\">\r\n\t\t\t<p data-renderer-start-pos=\"2110\">orderConfig, orderParameters, holdType, holdStatus, holdResolveReason</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td colorname=\"\" colspan=\"1\" data-colwidth=\"340\" rowspan=\"1\">\r\n\t\t\t<p data-renderer-start-pos=\"2185\">ord::orderCoreConfig&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\t\t\t</td>\r\n\t\t\t<td colorname=\"\" colspan=\"1\" data-colwidth=\"340\" rowspan=\"1\">\r\n\t\t\t<p data-renderer-start-pos=\"2213\">reason, chargeSubType, noteType, appeasement, sellingChannel, orderType</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td colorname=\"\" colspan=\"1\" data-colwidth=\"340\" rowspan=\"1\">\r\n\t\t\t<p data-renderer-start-pos=\"2290\">crt::processDefinition&nbsp;&nbsp;</p>\r\n\t\t\t</td>\r\n\t\t\t<td colorname=\"\" colspan=\"1\" data-colwidth=\"340\" rowspan=\"1\">\r\n\t\t\t<p data-renderer-start-pos=\"2318\">statusDefinition&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div class=\"tip\">crt::batch and crt::messaging profile purposes have to be a the same org level than the corresponding ord::batch and ord::messaging profile prurpose</div>\r\n\r\n<p>If you cannot find the cart profile purposes in your provisioning profile, click the \"Sync\" button in the UI to sync&nbsp;the provisioning profile with the new profile purpose created.</p>\r\n\r\n<p>Once the profile are configured, run the below APIs to check if you have the required data in your profile:&nbsp;</p>\r\n\r\n<ul>\r\n\t<li data-renderer-start-pos=\"1561\">GET: {{url}}/cart/api/cart/inBoundMessageType?size=100 =&gt; you should have at least 16 message types</li>\r\n\t<li data-renderer-start-pos=\"1618\">GET: {{url}}/cart/api/cart/outBoundMessageType?size=100 =&gt; you should have at least 9 message types</li>\r\n\t<li data-renderer-start-pos=\"1676\">GET: {{url}}/cart/api/cart/extPointToMessageType?size=100 =&gt; you should have at least 5 extension points to message types</li>\r\n</ul>\r\n\r\n<p>If you have no data in the response of these API, that means that the profile copy did not happen correctly.&nbsp;</p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-1\" class=\"toggle-content\"><span class=\"toggle-title\">See here to see what to do if the profile copy failed</span></a></p><div id=\"tg-1\"><p>Run the below API with three different payloads as mentioned. This process will copy seed data from the retail profile to mentioned ToProfileId for a given profile purpose.</p>\n\n<p>POST: {{url}}/com-manh-cp-cart/api/fwcore/profiles/copy with bodies</p>\n\n<div class=\"computer_code\">{<br />\n&quot;FromProfileId&quot;: &quot;retail&quot;,<br />\n&quot;ToProfileId&quot;: {profileId to which crt::batch is pointing},<br />\n&quot;ProfilePurpose&quot;: &quot;crt::batch&quot;<br />\n}</div>\n\n<p>&nbsp;</p>\n\n<div class=\"computer_code\">{<br />\n&quot;FromProfileId&quot;: &quot;retail&quot;,<br />\n&quot;ToProfileId&quot;: {profileId to which crt::processDefinition is pointing},<br />\n&quot;ProfilePurpose&quot;: &quot;crt::processDefinition&quot;<br />\n}</div>\n\n<p>&nbsp;</p>\n\n<div class=\"computer_code\">{<br />\n&quot;FromProfileId&quot;: &quot;retail&quot;,<br />\n&quot;ToProfileId&quot;: {profileId to which crt::messaging is pointing},<br />\n&quot;ProfilePurpose&quot;: &quot;crt::messaging&quot;<br />\n}</div>\n\n<p>&nbsp;</p>\n\n<p>Once this is done, run these APIs again to check if the message types got created.&nbsp;</p>\n\n<ul>\n\t<li data-renderer-start-pos=\"1561\">GET: {{url}}/cart/api/cart/inBoundMessageType?size=100&nbsp;</li>\n\t<li data-renderer-start-pos=\"1618\">GET: {{url}}/cart/api/cart/outBoundMessageType?size=100&nbsp;</li>\n\t<li data-renderer-start-pos=\"1676\">GET: {{url}}/cart/api/cart/extPointToMessageType?size=100</li>\n</ul>\n</div></div></p>\r\n\r\n<h4><a name=\"initializing-nbsp-the-cart\" id=\"initializing-nbsp-the-cart\"></a>Initializing&nbsp;the Cart</h4>\r\n\r\n<p data-renderer-start-pos=\"486\">For the cart to&nbsp;provide the same information as the order component would, it requires a copy of the order configuration and must remain in sync at all times. A process called \"initializing\" the cart is used to ensure that the cart and order components are in sync, so that users only need to manage the configuration in the order component.</p>\r\n\r\n<p data-renderer-start-pos=\"486\">To initialize the cart:</p>\r\n\r\n<ul>\r\n\t<li data-renderer-start-pos=\"486\">Navigate to the Order Parameters UI</li>\r\n\t<li data-renderer-start-pos=\"486\">Update Enable Preview Mode to true</li>\r\n\t<li data-renderer-start-pos=\"486\">Wait for about 20 minutes for the initialization to complete</li>\r\n\t<li data-renderer-start-pos=\"486\">Check the status of the process by calling the API&nbsp;GET /cart/api/cart/preview/config/sync/status\r\n\t<ul>\r\n\t\t<li data-renderer-start-pos=\"486\">This API returns the below attributes:\r\n\t\t<ul>\r\n\t\t\t<li data-renderer-start-pos=\"486\">Extended Attribute Sync Status (Values are Started, Failure, or Success)</li>\r\n\t\t\t<li data-renderer-start-pos=\"486\">Config Entity Sync Status (Values are Started, Failure, or Success)</li>\r\n\t\t\t<li data-renderer-start-pos=\"486\">Sync Status (Will be true if the other two attributes are in Success status)</li>\r\n\t\t</ul>\r\n\t\t</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li data-renderer-start-pos=\"486\">Once the Sync Status is true,&nbsp;begin using preview mode</li>\r\n</ul>\r\n\r\n<div class=\"tip\"><strong>Note</strong>:&nbsp;Features like post-release cancelation and Ship It Instead flow should work irrespective of Enable Preview Mode configuration. This configuration is necessary only for payment promotions.</div>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-2\" class=\"toggle-content\"><span class=\"toggle-title\">Why 20 min?</span></a></p><div id=\"tg-2\"><p>Before being able to copy the extended attributes, the cart component has to fully copy the configuration and perform a rolling restart. The extended attribute sync will be delayed by as many minutes as configured in the property &ldquo;cart.syncStatus.delayedMessageMinutes&rdquo;. the default value for this property is 20 min.</p>\n</div></div></p>\r\n\r\n<p data-renderer-start-pos=\"993\">This is a one time activation per organization. The system automatically does the following during the initialization process:</p>\r\n\r\n<ul>\r\n\t<li data-renderer-start-pos=\"993\">Creates messaging configuration to automatically propagate configuration updates from&nbsp;the order component to the cart</li>\r\n\t<li data-renderer-start-pos=\"993\">Entities that are synchronized between order and cart&nbsp;are:&nbsp;reason, chargeSubType, noteType, appeasement, sellingChannel, statusDefinition, nextUpConfiguration, orderConfig, orderType, orderParameters, modType, holdType, holdStatus, holdResolveReason, taxCodeOverride.&nbsp;</li>\r\n</ul>\r\n\r\n<p data-renderer-start-pos=\"25062\">There are two ways to&nbsp;manually re-trigger the synchronization of the configuration:</p>\r\n\r\n<ul>\r\n\t<li data-renderer-start-pos=\"25150\">Disable and re-enable the parameter in the order parameter</li>\r\n\t<li data-renderer-start-pos=\"25212\">Or call directly the below sync API to&nbsp;trigger the configuration&nbsp;sync:&nbsp;POST /cart/api/cart/preview/config/sync (body is empty). Note that if the order parameter activation did not succeed, there is a low chance the direct API will succeed. Check all your message type and profile configuration before trying with the order parameter again. Direct API should be used only when directly instructed.&nbsp;</li>\r\n\t<li data-renderer-start-pos=\"25212\">If a sync is re-triggered while another sync is in progress, the API returns an error telling that the sync process is ongoing.</li>\r\n</ul>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-3\" class=\"toggle-content\"><span class=\"toggle-title\">Cart Initialization Process</span></a></p><div id=\"tg-3\"><p><img height=\"933\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/qu/image(45).png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL3F1L2ltYWdlKDQ1KS5wbmciLCJDb25kaXRpb24iOnsiRGF0ZUxlc3NUaGFuIjp7IkFXUzpFcG9jaFRpbWUiOjE3NTQ3NTE2OTZ9fX1dfQ__&Signature=C~N-6iGG20zt7uDsETs~K6h1ElYIDI-dF07pMWFKOLjh5GsG1xCtDmIjomC2wDEpzL2aPS29O1tpTTMCb6pUugVdfjlO8bsbNeWIBIWJHGbm7hiYLIFLxk9dFWOq0U~7W1vaX6X4JjJWum75q4PAeemZJNzo8AA7Tf8tg-MyBNvMs8iWxz0~3as7PEdxmzAqbht4Oo3bsXAOukCFbZVlg9a~rC2z253JxB6noTk-VU0MPK9kjTAlm9NKoul45WO6sbjP-C86oC0e9f8dKxIlhgJoRF3S7LFjhLwLDt0hkFwpTp6VQTjIcQEZWFz3-EviA4UHMAxYWMmHyYVqqFT~5A__&Key-Pair-Id=K2TK3EG287XSFC\" width=\"467\" /></p>\n</div></div></p>\r\n\r\n<h4 data-renderer-start-pos=\"22751\"><a name=\"keeping-nbsp-cart-and-order-in-sync\" id=\"keeping-nbsp-cart-and-order-in-sync\"></a>Keeping&nbsp;Cart and Order in Sync</h4>\r\n\r\n<p>Once the cart component is initialized, order broadcasts every configuration change&nbsp;using a queue: ConfigEntityChangeMSGType. The cart component consumes these updates to remain in sync with order. Updating the cart configuration directly is not supported; the configuration API does not have resources, ensuring that configuration is always updated through the order component.</p>\r\n\r\n<p><img height=\"346\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/qu/image(46).png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL3F1L2ltYWdlKDQ2KS5wbmciLCJDb25kaXRpb24iOnsiRGF0ZUxlc3NUaGFuIjp7IkFXUzpFcG9jaFRpbWUiOjE3NTQ3NTE2OTZ9fX1dfQ__&Signature=GvZf192c8Ng5rbaPh5vr-z7m~4xo7BXY-Y8LO8RUArELwA3ma31RKFXqLYZDsqrZ2u2~z3EWjI7dL1mhnnh0RxSdGPavyDc7JRPKW2pLT9ClpLyu5SQmyxrRN5injXLfhHA9JF~t0VRlGE6~YxtdarT9FS63iEslSXuVJKToCZbzhf4ahX91PkYznkZXToQe5w2t-5cZRrRoY4uHzCuXDsBQqyZC9~36e1swzlB6fRisQQCWngU4VcyFU83bWuSi47oZV5t2BlIrSkaSpIGprurjpncqvKVKUIdNb5Lp8Qaw7s7VL0PM6C1xVOUV4skE9du7796y3wgSO8lLftMxCg__&Key-Pair-Id=K2TK3EG287XSFC\" width=\"556\"></p>\r\n\r\n<h4 data-renderer-start-pos=\"22210\" id=\"Extended-attribute-copy\"><a name=\"extended-attributes-in-the-nbsp-cart\" id=\"extended-attributes-in-the-nbsp-cart\"></a>Extended Attributes in the&nbsp;Cart</h4>\r\n\r\n<p data-renderer-start-pos=\"22236\">The cart only uses database-based extended attributes. File-based extended attributes are expected to be updated to database-based extended attributes before cart initialization.</p>\r\n\r\n<p data-renderer-start-pos=\"22450\">Extended attributes are copied during cart initialization. Past&nbsp;the initial configuration, there is no feature to date to broadcast extended attributes updates. Projects must&nbsp;maintain them both in the order and cart components.</p>\r\n\r\n<h4 data-renderer-start-pos=\"22751\"><a name=\"user-exits-in-the-cart\" id=\"user-exits-in-the-cart\"></a>User Exits in the Cart</h4>\r\n\r\n<p data-renderer-start-pos=\"22751\">User exits in the cart are the same as in the order component order selling flows. However, the user exit configuration must be duplicated in the cart component. There are no capabilities to automatically duplicate user exits configuration&nbsp;in order and cart.</p>\r\n\r\n<p data-renderer-start-pos=\"22751\"><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-4\" class=\"toggle-content\"><span class=\"toggle-title\">List of User Exits available in cart component</span></a></p><div id=\"tg-4\"><ul>\n\t<li>Order:Order:UserExit:PreCalculatePrice</li>\n\t<li>Order:Order:UserExit:CalculatePrice</li>\n\t<li>Order:Order:UserExit:PostCalculatePrice</li>\n\t<li>Order:Order:UserExit:PreCalculateSNH</li>\n\t<li>Order:Order:UserExit:CalculateSNH</li>\n\t<li>Order:Order:UserExit:PostCalculateSNH</li>\n\t<li>Order:Order:UserExit:PreCalculateTax</li>\n\t<li>Order:Order:UserExit:CalculateTax</li>\n\t<li>Order:Order:UserExit:TranslateTaxRequest</li>\n\t<li>Order:Order:UserExit:TranslateTaxResponse</li>\n\t<li>Order:Order:UserExit:PostCalculateTax</li>\n</ul>\n</div></div></p>\r\n\r\n<p data-renderer-start-pos=\"22751\">When a cart is confirmed and the changes are persisted on the order, the cart component uses the response template&nbsp;<strong>CartOrderConfirmChangesTemplate</strong>. If any field of the cart is updated by a User exit, this response template will have to be updated to include these fields.&nbsp;</p>\r\n\r\n<h4 data-renderer-start-pos=\"22751\"><a name=\"consul-server-configuration\" id=\"consul-server-configuration\"></a>Consul Server Configuration</h4>\r\n\r\n<p data-renderer-start-pos=\"22751\">During code drops, the system ensures that the order consul server is in sync with the cart consul server for&nbsp;feature flags, labels and component properties. Any configurations in the consul server need to be made in both the order and cart components. Work with services to ensure these configurations are in sync.</p>\r\n\r\n<p data-renderer-start-pos=\"9\"><strong data-renderer-mark=\"true\">Mark the fields in order entity as labels&nbsp;for cart also:</strong></p>\r\n\r\n<div class=\"computer_code\" data-renderer-start-pos=\"68\">\r\n<p>{{url}}/cart/api/fwcore/attributeLabelsConfig/save</p>\r\n\r\n<p>{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"EntitysName\": \"Order\",<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"FieldNames\": \"Extended.Refrence\"<br>\r\n}</p>\r\n</div>\r\n\r\n<h4><a name=\"message-type-configuration\" id=\"message-type-configuration\"></a>Message Type Configuration</h4>\r\n\r\n<p>The below message types are required for the initialization process and configuration propagation. These&nbsp;message types&nbsp;are part of the seed data included out of the box, so you do not need to create these message types. However, the list is included&nbsp;for troubleshooting.&nbsp;</p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-5\" class=\"toggle-content\"><span class=\"toggle-title\">Inbound Message Types for the Cart (seed data)</span></a></p><div id=\"tg-5\"><table data-autosize=\"false\" data-layout=\"default\" data-number-column=\"false\" data-pm-slice=\"1 1 []\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th data-colwidth=\"340\">\n\t\t\t<p><strong>Message type</strong></p>\n\t\t\t</th>\n\t\t\t<th data-colwidth=\"340\">\n\t\t\t<p><strong>Json</strong></p>\n\t\t\t</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<p>ConfigEntityChangeMSGType</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<pre>\n<code data-language=\"json\">{\n      &quot;MessageType&quot;: &quot;ConfigEntityChangeMSGType&quot;,\n      &quot;NoOfConsumer&quot;: 10,\n      &quot;MinNoOfConsumer&quot;: 1,\n      &quot;Idempotent&quot;: true,\n      &quot;ExternalIntegrationRequired&quot;: false,\n      &quot;MaxDesiredInstances&quot;: 6,\n      &quot;ScaleUpTimeWindow&quot;: 10,\n      &quot;ScaleDownTimeWindow&quot;: 20,\n      &quot;Description&quot;: &quot;Inbound message type of syncing the config entities from order&quot;,\n      &quot;ServiceId&quot;: &quot;ConfigEntityChangeService&quot;\n    }</code></pre>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<p>UpdateExtendedAttributesSyncStatus</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<pre>\n<code>{\n      &quot;MessageType&quot;: &quot;UpdateExtendedAttributesSyncStatus&quot;,\n      &quot;NoOfConsumer&quot;: 10,\n      &quot;MinNoOfConsumer&quot;: 1,\n      &quot;Idempotent&quot;: true,\n      &quot;ExternalIntegrationRequired&quot;: false,\n      &quot;MaxDesiredInstances&quot;: 6,\n      &quot;ScaleUpTimeWindow&quot;: 10,\n      &quot;ScaleDownTimeWindow&quot;: 20,\n      &quot;Description&quot;: &quot;Inbound message type to update status of extended attributes sync process&quot;,\n      &quot;ServiceId&quot;: &quot;UpdateExtendedAttributesSyncStatus&quot;,\n      &quot;InBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;queue.updateExtendedAttributesSyncStatus&quot;\n      }\n    }</code></pre>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<p>SyncConfigEntities</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<pre>\n<code>{\n      &quot;MessageType&quot;: &quot;SyncConfigEntities&quot;,\n      &quot;NoOfConsumer&quot;: 10,\n      &quot;MinNoOfConsumer&quot;: 1,\n      &quot;Idempotent&quot;: true,\n      &quot;ExternalIntegrationRequired&quot;: false,\n      &quot;MaxDesiredInstances&quot;: 6,\n      &quot;ScaleUpTimeWindow&quot;: 10,\n      &quot;ScaleDownTimeWindow&quot;: 20,\n      &quot;Description&quot;: &quot;Inbound message type to sync systemAugmentable entities during config sync process&quot;,\n      &quot;ServiceId&quot;: &quot;SyncConfigEntities&quot;,\n      &quot;InBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;queue.syncConfigEntities&quot;\n      }\n    }</code></pre>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<p>SyncExtendedAttributes</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<pre>\n<code>\n      &quot;MessageType&quot;: &quot;SyncExtendedAttributes&quot;,\n      &quot;NoOfConsumer&quot;: 10,\n      &quot;MinNoOfConsumer&quot;: 1,\n      &quot;Idempotent&quot;: true,\n      &quot;ExternalIntegrationRequired&quot;: false,\n      &quot;MaxDesiredInstances&quot;: 6,\n      &quot;ScaleUpTimeWindow&quot;: 10,\n      &quot;ScaleDownTimeWindow&quot;: 20,\n      &quot;Description&quot;: &quot;Inbound message type to sync Extended Attributes during sync process&quot;,\n      &quot;ServiceId&quot;: &quot;SyncExtendedAttributes&quot;,\n      &quot;InBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;queue.syncExtendedAttributes&quot;\n      }\n    }</code></pre>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<p>UpdateSyncProcessStatus</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<pre>\n<code>{\n      &quot;MessageType&quot;: &quot;UpdateSyncProcessStatus&quot;,\n      &quot;NoOfConsumer&quot;: 10,\n      &quot;MinNoOfConsumer&quot;: 1,\n      &quot;Idempotent&quot;: true,\n      &quot;ExternalIntegrationRequired&quot;: false,\n      &quot;MaxDesiredInstances&quot;: 6,\n      &quot;ScaleUpTimeWindow&quot;: 10,\n      &quot;ScaleDownTimeWindow&quot;: 20,\n      &quot;Description&quot;: &quot;Inbound message type to update config entities sync status during config sync process&quot;,\n      &quot;ServiceId&quot;: &quot;UpdateSyncProcessStatus&quot;,\n      &quot;InBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;queue.updateSyncProcessStatus&quot;\n      }\n    }</code></pre>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<p>TriggerSyncCart</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<pre>\n<code>{\n      &quot;MessageType&quot;: &quot;TriggerSyncCart&quot;,\n      &quot;NoOfConsumer&quot;: 10,\n      &quot;MinNoOfConsumer&quot;: 1,\n      &quot;Idempotent&quot;: true,\n      &quot;ExternalIntegrationRequired&quot;: false,\n      &quot;MaxDesiredInstances&quot;: 6,\n      &quot;ScaleUpTimeWindow&quot;: 10,\n      &quot;ScaleDownTimeWindow&quot;: 20,\n      &quot;Description&quot;: &quot;Inbound message type to start sync process&quot;,\n      &quot;ServiceId&quot;: &quot;TriggerSyncCart&quot;,\n      &quot;InBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;queue.triggerSyncCart&quot;\n      }\n    }</code></pre>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<p>JobScheduleMsg</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<pre>\n<code>{\n      &quot;MessageType&quot;: &quot;JobScheduleMsg&quot;,\n      &quot;NoOfConsumer&quot;: 10,\n      &quot;MinNoOfConsumer&quot;: 1,\n      &quot;Idempotent&quot;: true,\n      &quot;ExternalIntegrationRequired&quot;: false,\n      &quot;MaxDesiredInstances&quot;: 6,\n      &quot;ScaleUpTimeWindow&quot;: 10,\n      &quot;ScaleDownTimeWindow&quot;: 20,\n      &quot;Description&quot;: &quot;&quot;,\n      &quot;ServiceId&quot;: &quot;JobScheduleListener&quot;,\n      &quot;InBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;JobScheduleQueue.COMPONENT-CART-BATCH&quot;\n      }\n    }</code></pre>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<p>jobStatusMonitorJob</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<pre>\n<code>{\n      &quot;MessageType&quot;: &quot;jobStatusMonitorJob&quot;,\n      &quot;NoOfConsumer&quot;: 10,\n      &quot;MinNoOfConsumer&quot;: 1,\n      &quot;Idempotent&quot;: true,\n      &quot;ExternalIntegrationRequired&quot;: false,\n      &quot;MaxDesiredInstances&quot;: 6,\n      &quot;ScaleUpTimeWindow&quot;: 10,\n      &quot;ScaleDownTimeWindow&quot;: 20,\n      &quot;Description&quot;: &quot;&quot;,\n      &quot;ServiceId&quot;: &quot;JobStatusMonitor&quot;,\n      &quot;InBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;JobStatusMonitorQueue.COMPONENT-CART-BATCH&quot;\n      }\n    }</code></pre>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<p>awpf-payload</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<pre>\n<code>{\n      &quot;MessageType&quot;: &quot;awpf-payload&quot;,\n      &quot;NoOfConsumer&quot;: 10,\n      &quot;MinNoOfConsumer&quot;: 1,\n      &quot;Idempotent&quot;: true,\n      &quot;ExternalIntegrationRequired&quot;: false,\n      &quot;MaxDesiredInstances&quot;: 6,\n      &quot;ScaleUpTimeWindow&quot;: 10,\n      &quot;ScaleDownTimeWindow&quot;: 20,\n      &quot;Description&quot;: &quot;&quot;,\n      &quot;ServiceId&quot;: &quot;PayloadMsgProcessor&quot;,\n      &quot;InBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;awpf-payload-queue-crt&quot;\n      }\n    }</code></pre>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<p>awpf-processedmsg</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<pre>\n<code>{\n      &quot;MessageType&quot;: &quot;awpf-processedmsg&quot;,\n      &quot;NoOfConsumer&quot;: 10,\n      &quot;MinNoOfConsumer&quot;: 1,\n      &quot;Idempotent&quot;: true,\n      &quot;ExternalIntegrationRequired&quot;: false,\n      &quot;MaxDesiredInstances&quot;: 6,\n      &quot;ScaleUpTimeWindow&quot;: 10,\n      &quot;ScaleDownTimeWindow&quot;: 20,\n      &quot;Description&quot;: &quot;&quot;,\n      &quot;ServiceId&quot;: &quot;ProcessedMessageListener&quot;,\n      &quot;InBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;awpf-processedmsg-queue-crt&quot;\n      }\n    }</code></pre>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<p>JobScheduleManagerMsg</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<pre>\n<code>{\n      &quot;MessageType&quot;: &quot;JobScheduleManagerMsg&quot;,\n      &quot;NoOfConsumer&quot;: 10,\n      &quot;MinNoOfConsumer&quot;: 1,\n      &quot;Idempotent&quot;: true,\n      &quot;ExternalIntegrationRequired&quot;: false,\n      &quot;MaxDesiredInstances&quot;: 6,\n      &quot;ScaleUpTimeWindow&quot;: 10,\n      &quot;ScaleDownTimeWindow&quot;: 20,\n      &quot;Description&quot;: &quot;&quot;,\n      &quot;ServiceId&quot;: &quot;JobScheduleManager&quot;,\n      &quot;InBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;JobScheduleManagerQueue.COMPONENT-CART-BATCH&quot;\n      }\n    }</code></pre>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<p>DiscardCart</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<pre>\n<code>{\n  &quot;MessageType&quot;: &quot;DiscardCart&quot;,\n  &quot;NoOfConsumer&quot;: 10,\n  &quot;MinNoOfConsumer&quot;: 1,\n  &quot;Idempotent&quot;: true,\n  &quot;ExternalIntegrationRequired&quot;: false,\n  &quot;MaxDesiredInstances&quot;: 6,\n  &quot;ScaleUpTimeWindow&quot;: 10,\n  &quot;ScaleDownTimeWindow&quot;: 20,\n  &quot;Description&quot;: &quot;Inbound message type to discard cart&quot;,\n  &quot;ServiceId&quot;: &quot;DiscardCart&quot;,\n  &quot;InBoundQueues&quot;: {\n    &quot;QueueName&quot;: &quot;queue.discardCart&quot;\n  }\n}</code></pre>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<p>awpf-delayed-payload-schedule</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<pre>\n<code>{\n  &quot;MessageType&quot;: &quot;awpf-delayed-payload-schedule&quot;,\n  &quot;MinNoOfConsumer&quot;: 1,\n  &quot;NoOfConsumer&quot;: 1,\n  &quot;ServiceId&quot;: &quot;DelayedPayloadPublisherService&quot;,\n  &quot;InBoundQueues&quot;:\n  {\n    &quot;QueueName&quot;: &quot;awpf-delayed-payload-schedule-{:unique.app.code}&quot;\n  }\n}</code></pre>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<p>awpf-delayed-payload</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<pre>\n<code>{\n  &quot;MessageType&quot;: &quot;awpf-delayed-payload&quot;,\n  &quot;ServiceId&quot;: &quot;PayloadMsgProcessor&quot;,\n  &quot;MinNoOfConsumer&quot;: 1,\n  &quot;NoOfConsumer&quot;: 10,\n  &quot;InBoundQueues&quot;:\n  {\n    &quot;QueueName&quot;: &quot;awpf-delayed-payload-{:unique.app.code}&quot;\n  }\n}</code></pre>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<p>awpf-track-payload</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<pre>\n<code>{\n  &quot;MessageType&quot;: &quot;awpf-track-payload&quot;,\n  &quot;ServiceId&quot;: &quot;PayloadMsgProcessor&quot;,\n  &quot;MinNoOfConsumer&quot;: 1,\n  &quot;NoOfConsumer&quot;: 10,\n  &quot;InBoundQueues&quot;:\n  {\n    &quot;QueueName&quot;: &quot;awpf-track-payload-{:unique.app.code}&quot;\n  }\n}</code></pre>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<p>awpf-consolidate-payload</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<pre>\n<code>{\n  &quot;MessageType&quot;: &quot;awpf-consolidate-payload&quot;,\n  &quot;ServiceId&quot;: &quot;ConsolidatePayload&quot;,\n  &quot;MinNoOfConsumer&quot;: 1,\n  &quot;NoOfConsumer&quot;: 10,\n  &quot;InBoundQueues&quot;:\n  {\n    &quot;QueueName&quot;: &quot;awpf-consolidate-payload-{:unique.app.code}&quot;\n  }\n}</code></pre>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div></div></p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-6\" class=\"toggle-content\"><span class=\"toggle-title\">Outbound Message Types for the Cart (seed data)</span></a></p><div id=\"tg-6\"><table data-autosize=\"false\" data-layout=\"default\" data-number-column=\"false\" data-pm-slice=\"1 1 []\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th data-colwidth=\"340\">\n\t\t\t<p><strong>Message Type</strong></p>\n\t\t\t</th>\n\t\t\t<th data-colwidth=\"340\">\n\t\t\t<p><strong>Json</strong></p>\n\t\t\t</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<p>UpdateExtendedAttributesSyncStatus</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<pre>\n<code>{\n      &quot;MessageType&quot;: &quot;UpdateExtendedAttributesSyncStatus&quot;,\n      &quot;Transactional&quot;: true,\n      &quot;PersistMessageToMsgStore&quot;: false,\n      &quot;OutBoundDeliveryConfig&quot;: {\n        &quot;DeliveryDelay&quot;: &quot;20 minute&quot;,\n        &quot;OutBoundDeliveryConfigId&quot;: &quot;updateExtendedAttributesSyncStatusConfig&quot;\n      },\n      &quot;OutBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;queue.updateExtendedAttributesSyncStatus&quot;\n      }\n    }</code></pre>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<p>SyncConfigEntities</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<pre>\n<code>{\n      &quot;MessageType&quot;: &quot;SyncConfigEntities&quot;,\n      &quot;Transactional&quot;: true,\n      &quot;PersistMessageToMsgStore&quot;: false,\n      &quot;OutBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;queue.syncConfigEntities&quot;\n      }\n    }</code></pre>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<p>SyncExtendedAttributes</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<pre>\n<code>{\n      &quot;MessageType&quot;: &quot;SyncExtendedAttributes&quot;,\n      &quot;Transactional&quot;: true,\n      &quot;PersistMessageToMsgStore&quot;: false,\n      &quot;OutBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;queue.syncExtendedAttributes&quot;\n      }\n    }</code></pre>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<p>UpdateSyncProcessStatus</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<pre>\n<code>{\n      &quot;MessageType&quot;: &quot;UpdateSyncProcessStatus&quot;,\n      &quot;Transactional&quot;: true,\n      &quot;PersistMessageToMsgStore&quot;: false,\n      &quot;OutBoundQueues&quot;: {\n        &quot;QueueName&quot;: &quot;queue.updateSyncProcessStatus&quot;\n      }\n    }</code></pre>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<p>JobScheduleMsg</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<pre>\n<code>{\n      &quot;MessageType&quot;: &quot;JobScheduleMsg&quot;,\n      &quot;Transactional&quot;: false,\n      &quot;PersistMessageToMsgStore&quot;: false,\n      &quot;MessageCategory&quot;: &quot;systembatch&quot;,\n      &quot;OutBoundQueues&quot;: [\n        {\n          &quot;QueueName&quot;: &quot;JobScheduleQueue.COMPONENT-CART-BATCH&quot;\n        }\n      ]\n    }</code></pre>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<p>jobStatusMonitorJob</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<pre>\n<code>\n      &quot;MessageType&quot;: &quot;jobStatusMonitorJob&quot;,\n      &quot;Transactional&quot;: false,\n      &quot;PersistMessageToMsgStore&quot;: false,\n      &quot;MessageCategory&quot;: &quot;systembatch&quot;,\n      &quot;OutBoundQueues&quot;: [\n        {\n          &quot;QueueName&quot;: &quot;JobStatusMonitorQueue.COMPONENT-CART-BATCH&quot;\n        }\n      ]\n    }</code></pre>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<p>awpf-payload</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<pre>\n<code>{\n      &quot;MessageType&quot;: &quot;awpf-payload&quot;,\n      &quot;Transactional&quot;: false,\n      &quot;PersistMessageToMsgStore&quot;: false,\n      &quot;MessageCategory&quot;: &quot;awpf&quot;,\n      &quot;DeliveryDelay&quot;: &quot;200&quot;,\n      &quot;OutBoundQueues&quot;: [\n        {\n          &quot;QueueName&quot;: &quot;awpf-payload-queue-crt&quot;\n        }\n      ]\n    }</code></pre>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<p>awpf-processedmsg</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<pre>\n<code>\n      &quot;MessageType&quot;: &quot;awpf-processedmsg&quot;,\n      &quot;Transactional&quot;: false,\n      &quot;PersistMessageToMsgStore&quot;: false,\n      &quot;MessageCategory&quot;: &quot;awpf&quot;,\n      &quot;DeliveryDelay&quot;: &quot;0&quot;,\n      &quot;OutBoundQueues&quot;: [\n        {\n          &quot;QueueName&quot;: &quot;awpf-processedmsg-queue-crt&quot;\n        }\n      ]\n    }</code></pre>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<p>DiscardCart</p>\n\t\t\t</td>\n\t\t\t<td data-colwidth=\"340\">\n\t\t\t<pre>\n<code>{\n  &quot;MessageType&quot;: &quot;DiscardCart&quot;,\n  &quot;Transactional&quot;: true,\n  &quot;PersistMessageToMsgStore&quot;: false,\n  &quot;OutBoundQueues&quot;: {\n    &quot;QueueName&quot;: &quot;queue.discardCart&quot;\n  }\n}</code></pre>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div></div></p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-7\" class=\"toggle-content\"><span class=\"toggle-title\">Order Outbound Message type - seed data for cart</span></a></p><div id=\"tg-7\"><p>Outbound message type (in order component)</p>\n\n<pre>\n<code>{\n    &quot;MessageType&quot;: &quot;ConfigEntityChangeMSGType&quot;,\n    &quot;Transactional&quot;: true,\n    &quot;PersistMessageToMsgStore&quot;: false\n}</code></pre>\n\n<p>&nbsp;</p>\n</div></div></p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-8\" class=\"toggle-content\"><span class=\"toggle-title\">Extension points to message types for the Cart (seed data)</span></a></p><div id=\"tg-8\"><p>Here is a list of the seed data for extension points to message types</p>\n\n<p>POST{{url}}/cart/api/ServiceDefinition/extPointToMessageType/import</p>\n\n<div class=\"computer_code\">\n<p>{</p>\n\n<p>&quot;data&quot;: [</p>\n\n<p>{</p>\n\n<p>&quot;ExtensionPointId&quot;: &quot;Cart:Cart:Event:UpdateExtendedAttributesSyncStatus&quot;,</p>\n\n<p>&quot;MessageType&quot;: &quot;UpdateExtendedAttributesSyncStatus&quot;</p>\n\n<p>},</p>\n\n<p>{</p>\n\n<p>&quot;ExtensionPointId&quot;: &quot;Cart:Cart:Event:SyncConfigEntities&quot;,</p>\n\n<p>&quot;MessageType&quot;: &quot;SyncConfigEntities&quot;</p>\n\n<p>},</p>\n\n<p>{</p>\n\n<p>&quot;ExtensionPointId&quot;: &quot;Cart:Cart:Event:SyncExtendedAttributes&quot;,</p>\n\n<p>&quot;MessageType&quot;: &quot;SyncExtendedAttributes&quot;</p>\n\n<p>},</p>\n\n<p>{</p>\n\n<p>&quot;ExtensionPointId&quot;: &quot;Cart:Cart:Event:UpdateSyncProcessStatus&quot;,</p>\n\n<p>&quot;MessageType&quot;: &quot;UpdateSyncProcessStatus&quot;</p>\n\n<p>},</p>\n\n<p>{</p>\n\n<p>&quot;ExtensionPointId&quot;: &quot;Cart:Cart:Event:DiscardCart&quot;,</p>\n\n<p>&quot;MessageType&quot;: &quot;DiscardCart&quot;</p>\n\n<p>}</p>\n\n<p>]</p>\n\n<p>}</p>\n</div>\n</div></div></p>\r\n\r\n<h3><a name=\"cart-apis\" id=\"cart-apis\"></a>Cart APIs</h3>\r\n\r\n<p>The list of APIs currently supported in the cart component can be found&nbsp;in this section. See the below diagram for an illustration of which APIs to call to build a cancellation feature with preview.</p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-9\" class=\"toggle-content\"><span class=\"toggle-title\">How to use cart APIs for cancellation preview</span></a></p><div id=\"tg-9\"><p><img height=\"619\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/qu/image(59).png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL3F1L2ltYWdlKDU5KS5wbmciLCJDb25kaXRpb24iOnsiRGF0ZUxlc3NUaGFuIjp7IkFXUzpFcG9jaFRpbWUiOjE3NTQ3NTE2OTZ9fX1dfQ__&Signature=HGf~uhk3hJMMUjzyopguV7IjEe7g~Btp~ldCtHK22iFbvRa1xqHquRN0KV1Z19Nf1wxn3ux-dy-BoUTBXXzm9l1pPfI1MkqtHXBcRvBawEsOGn0HHXp2zOo77bDiDbXJGKCpO3j1-LeO7YZYvHe~YKbujwDtOnvMuzKhyqnhpUZow8rE7k37zovGZ0IWl6D3JsnY~3k5fOVH1SfNMOYkX-t6NsHVHs9KTCK0wex-vc4lYqLEr8VRKQXI-w560Jp4wmv0tJBR2fb3LCvFTpUGbEZpxYd6A43s4k0F1qXn12Oc8IgKptcl4~oSosRirdDMaUJGok9QwLg7uo95~~v59A__&Key-Pair-Id=K2TK3EG287XSFC\" width=\"553\" /></p>\n</div></div></p>\r\n\r\n<h4 data-renderer-start-pos=\"24583\" id=\"Cart-component-initialization-and-sync-status-check\"><a name=\"cart-initialization-status-check-api\" id=\"cart-initialization-status-check-api\"></a>Cart Initialization Status Check API</h4>\r\n\r\n<p data-renderer-start-pos=\"24636\">After initializing the cart via the Order Parameters UI,&nbsp;check the status of the cart component with the below API:</p>\r\n\r\n<div class=\"computer_code\" data-renderer-start-pos=\"24636\">GET : /cart/api/cart/preview/config/sync/status</div>\r\n\r\n<p data-renderer-start-pos=\"25062\">&nbsp;</p>\r\n\r\n<p data-renderer-start-pos=\"25062\"><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-10\" class=\"toggle-content\"><span class=\"toggle-title\">How is the sync status used by the other cart APIs?</span></a></p><div id=\"tg-10\"><p>By default, all the APIs sent to cart will always check for the value of the &quot;SyncStatus&quot; boolean flag. If this flag is set to false meaning that comething went wrong during the sync process, the functioanl APIs detailed in the rest of this section will fail.&nbsp;</p>\n\n<p>There is one way to bypass this verification. It is possible to change a KV store property &quot;cart.enableSyncStatusValidation&quot; (true by default) to false. In this case, the cart component configuration does not need to be in sync to allow funcitoanl APIs to hit the cart. Unless sepecifically instructed, it is not advised to change this value as it can have consequences in the accuracy of the cart component computation.&nbsp;</p>\n</div></div></p>\r\n\r\n<h4 data-renderer-start-pos=\"25062\"><a name=\"cancel-line-api\" id=\"cancel-line-api\"></a>Cancel Line API</h4>\r\n\r\n<p data-renderer-start-pos=\"25880\">Canceling a line in the cart component provides the user with a preview of the new, estimated order totals and canceled order totals. The changes made in cart do not have any impact on the order or payment until the user confirms the changes.</p>\r\n\r\n<p data-renderer-start-pos=\"26042\">Currently, preview mode for order line cancellation is supported for end customers in Digital Self-Service. Refer to this guide for&nbsp;more information on cancellation preview in Digital Self-Service:&nbsp;<a hqid=\"2737255\" href=\"/cancellations\">Order Cancellation</a>.</p>\r\n\r\n<p data-renderer-start-pos=\"26148\">Calling the below API will:</p>\r\n\r\n<ol>\r\n\t<li>Create a cart based on the current status of the order. This cart will not contain the lines that were previously canceled (or the lines that are “requested for cancelation” in the order component).</li>\r\n\t<li>Cancel the line in cart</li>\r\n\t<li>Recompute&nbsp;the order totals, taxes, charges, and other charges&nbsp;with this line canceled</li>\r\n\t<li>Return what the order would look like once the line gets canceled&nbsp;in the response</li>\r\n</ol>\r\n\r\n<div class=\"info\">On post-release cancelation: The cart always allows you to preview&nbsp;the new order total by canceling a line, even if it is already released. If in cart, you try to cancel a line that cannot be canceled, the persist cart API will fail. See&nbsp;<a hqid=\"2733510\" href=\"/lateordercancellation\">Late Order Cancellation</a>&nbsp;for more information.</div>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-11\" class=\"toggle-content\"><span class=\"toggle-title\">Cancel line in cart API</span></a></p><div id=\"tg-11\"><p data-renderer-start-pos=\"26564\">POST {{url}}/commerceservice-facade/api/cart/order/edit/cancel?orderId=&lt;orderID&gt;</p>\n\n<p data-renderer-start-pos=\"26564\">Body:&nbsp;</p>\n\n<div class=\"computer_code\" data-renderer-start-pos=\"26628\">{<br />\n&nbsp; &nbsp; &quot;CancelReason&quot;: {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &quot;ReasonId&quot;: &quot;&lt;add here a reason for cancelation&gt;&quot;<br />\n&nbsp; &nbsp; },<br />\n&nbsp; &nbsp; &quot;OrderId&quot;: null, &lt;this can stay null in the body as the API will only consider the order id in the URL&gt;&nbsp;<br />\n&nbsp; &nbsp; &quot;OrderLine&quot;: [<br />\n&nbsp; &nbsp; &nbsp; &nbsp; {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;OrderLineId&quot;: &quot;&lt;order line id to cancel&gt;&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; }<br />\n&nbsp; &nbsp; ],<br />\n&nbsp; &nbsp; &quot;CancelComments&quot;: &quot;&lt;cancel comments if required&gt;&quot;<br />\n}</div>\n\n<p data-renderer-start-pos=\"27005\">&nbsp;</p>\n\n<p data-renderer-start-pos=\"27005\">This API will not allow you to modify an existing cart. It will delete all the cart currently active for this order and create a new one. if you want to cancel multiple lines on the same order, do that in the same API call.</p>\n\n<div class=\"tip\" data-renderer-start-pos=\"27233\">In the response of this API, you will note that the value of the &ldquo;orderId&rdquo; field is not the same one as the order ID you were expected.<br />\n<br />\n<strong data-renderer-mark=\"true\">This is normal.</strong><br />\n<br />\nIn any cart related API, the field &ldquo;OrderID&rdquo; actually contains the cart ID (UUID autogenerated). You will need that cart ID to persist the changes to the order component.<br />\nThe cart ID is different than the order ID as an order can have multiple carts active at the same time but a user can only persist one cart.<br />\n<br />\nThere is an entity in the cart component that lists all the cart active for an order at any given time:<br />\n<br />\nGET: {{url}}/cart/api/cart/cartDetail?query=&quot;OrderId=&#39;&lt;your order ID&gt;&#39;&quot;</div>\n</div></div></p>\r\n\r\n<h4><a name=\"get-nbsp-current-cart-version-api\" id=\"get-nbsp-current-cart-version-api\"></a>Get&nbsp;Current Cart Version API</h4>\r\n\r\n<p data-renderer-start-pos=\"28267\">To get to the version of the order that exist in cart you need to know the cart ID for your specific order. This can be found in the response of the API that created the cart or using</p>\r\n\r\n<div class=\"computer_code\" data-renderer-start-pos=\"28454\">GET: {{url}}/cart/api/cart/cartDetail?query=\"OrderId='&lt;your order ID&gt;'\"</div>\r\n\r\n<h4 data-renderer-start-pos=\"28698\" id=\"Persist-changes\"><a name=\"confirm-order-changes-nbsp-api\" id=\"confirm-order-changes-nbsp-api\"></a>Confirm Order Changes&nbsp;API</h4>\r\n\r\n<p data-renderer-start-pos=\"28715\">Once all the modifications have been done in the cart and the user is happy with the result, it is required to persist the changes in the order component. To do this, call the persist cart API with your cart ID:</p>\r\n\r\n<div class=\"computer_code\" data-renderer-start-pos=\"28911\">POST {{url}}/commerceservice-facade/api/cart/order/edit/confirmChanges?cartId=&lt;your cart ID&gt; (empty body)</div>\r\n\r\n<p data-renderer-start-pos=\"29000\">This API&nbsp;updates the order with the changes made in the cart. Once the order is updated, the cart is deleted and the payment processes (like refund or adjustment invoices) are triggered.</p>\r\n\r\n<p data-renderer-start-pos=\"29206\">The Persist Change API could fail if the order is no longer eligible for such updates. For example, if the order was updated since the cart processes started (if a line was released for example), it could make it ineligible for update.</p>\r\n\r\n<p data-renderer-start-pos=\"29405\">There is no version comparison between the cart and the order. The system will get to the current version of the order and will use an order save call to save the current version of the cart.</p>\r\n\r\n<h3 data-renderer-start-pos=\"29600\" id=\"Discarded-cart-management\"><a name=\"managing-discarded-carts\" id=\"managing-discarded-carts\"></a>Managing Discarded Carts</h3>\r\n\r\n<p data-renderer-start-pos=\"29627\">Carts are intended to be short-lived. The longer a cart stays active, the higher the probability of discrepancy with the order is. If it is not explicitly deleted by the calling system, it will be deleted automatically by an internal cart process.</p>\r\n\r\n<p data-renderer-start-pos=\"29820\">Whenever a cart is created, a delayed message will be posted in a queue. That message will be set up to be processed 60&nbsp;minutes after it was posted. 60 min is the default value&nbsp;but can&nbsp;be changed in the KV store of the cart component in the property \"cart.discard.delayedMessageMinute\".</p>\r\n\r\n<h3><a name=\"implementation-flavors\" id=\"implementation-flavors\"></a>Implementation Flavors</h3>\r\n\r\n<p>N/A</p>\r\n\r\n<h3><a name=\"feature-scope\" id=\"feature-scope\"></a>Feature Scope</h3>\r\n\r\n<p>The following is not supported in the cart:</p>\r\n\r\n<ul>\r\n\t<li>Preview of order modifications other than full line cancellations (for example, preview quantity changes, adding items, change shipping address, and so on)</li>\r\n</ul>\r\n\r\n<h3><a name=\"related-articles\" id=\"related-articles\"></a>Related Articles</h3>\r\n\r\n<div class=\"info\"><ul class=\"related-articles\"><li><a href=\"/shipping-restriction\" hqid=\"2918532\">Shipping Restriction</a></li><li><a href=\"/order-hold-and-unhold\" hqid=\"2601859\">Holds</a></li><li><a href=\"/order-orchestration-configuration\" hqid=\"1809211\">Order Orchestration Configuration</a></li><li><a href=\"/order_tagging\" hqid=\"2656391\">Order Tagging</a></li><li><a href=\"/order-orchestration-process\" hqid=\"1809208\">Order Orchestration Process</a></li><li><a href=\"/order-cancellation\" hqid=\"2601857\">Order Cancellation</a></li><li><a href=\"/order-audit\" hqid=\"2700329\">Order Audit </a></li><li><a href=\"/mod-types\" hqid=\"2729796\">Mod Types</a></li><li><a href=\"/how-publish-order-works\" hqid=\"3041650\">Publishing Order </a></li><li><a href=\"/order-archiving\" hqid=\"2993718\">Order Archiving</a></li><li><a href=\"/deliverytracking\" hqid=\"2837045\">Delivery Tracking</a></li><li><a href=\"/creating-and-updating-order\" hqid=\"2700326\">Creating and Updating Order</a></li></ul></div>\r\n\r\n\t  </div>\r\n </div>\r\n <div id=\"ui-page-fb-wrap\"></div>\r\n <div class=\"hiq-footer-wrap\">\r\n    \r\n                \r\n  </div>\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n",
  "content_length": 47915,
  "scraped_at": "2025-08-09T21:56:36.152353",
  "content_clean": "Home ››Manhattan Active® Omni››Order Management››Process & Configuration Guides››Order Orchestration ››Cart and Preview Mode Cart and Preview Mode Next OverviewConfigurationProfile ConfigurationInitializing the CartKeeping Cart and Order in SyncExtended Attributes in the CartUser Exits in the CartConsul Server ConfigurationMessage Type ConfigurationCart APIsCart Initialization Status Check APICancel Line APIGet Current Cart Version APIConfirm Order Changes APIManaging Discarded CartsImplementation FlavorsFeature ScopeRelated Articles Overview The cart enables customers and customer service agents to preview order changes before saving them to the order. For example, a customer can select an item to cancel, preview the new order total, and then confirm the changes, as opposed to directly canceling the items without the ability to preview the impact it would have on the order. Without the cart to manage this preview step, changes are saved directly on the order, which results in unnecessary payment processing if users then reverted the change. Currently, the cart supports preview mode for the following use cases: Order line cancellation Previewing order modifications not included in this list is not supported. Configuration Profile Configuration The cart component profile configuration requires all three profiles purposes listed below to belong to the same profile. If that is not the case in your environment, change the profile configuration before you enable the feature. If you change the profile configuration after you've enabled preview mode, you will have to disable and enable the feature again. Profile Purpose Entities ord::orderConfig orderConfig, orderParameters, holdType, holdStatus, holdResolveReason ord::orderCoreConfig reason, chargeSubType, noteType, appeasement, sellingChannel, orderType crt::processDefinition statusDefinition crt::batch and crt::messaging profile purposes have to be a the same org level than the corresponding ord::batch and ord::messaging profile prurpose If you cannot find the cart profile purposes in your provisioning profile, click the \"Sync\" button in the UI to sync the provisioning profile with the new profile purpose created. Once the profile are configured, run the below APIs to check if you have the required data in your profile: GET: {{url}}/cart/api/cart/inBoundMessageType?size=100 => you should have at least 16 message types GET: {{url}}/cart/api/cart/outBoundMessageType?size=100 => you should have at least 9 message types GET: {{url}}/cart/api/cart/extPointToMessageType?size=100 => you should have at least 5 extension points to message types If you have no data in the response of these API, that means that the profile copy did not happen correctly. See here to see what to do if the profile copy failedRun the below API with three different payloads as mentioned. This process will copy seed data from the retail profile to mentioned ToProfileId for a given profile purpose. POST: {{url}}/com-manh-cp-cart/api/fwcore/profiles/copy with bodies { \"FromProfileId\": \"retail\", \"ToProfileId\": {profileId to which crt::batch is pointing}, \"ProfilePurpose\": \"crt::batch\" } { \"FromProfileId\": \"retail\", \"ToProfileId\": {profileId to which crt::processDefinition is pointing}, \"ProfilePurpose\": \"crt::processDefinition\" } { \"FromProfileId\": \"retail\", \"ToProfileId\": {profileId to which crt::messaging is pointing}, \"ProfilePurpose\": \"crt::messaging\" } Once this is done, run these APIs again to check if the message types got created. GET: {{url}}/cart/api/cart/inBoundMessageType?size=100 GET: {{url}}/cart/api/cart/outBoundMessageType?size=100 GET: {{url}}/cart/api/cart/extPointToMessageType?size=100 Initializing the Cart For the cart to provide the same information as the order component would, it requires a copy of the order configuration and must remain in sync at all times. A process called \"initializing\" the cart is used to ensure that the cart and order components are in sync, so that users only need to manage the configuration in the order component. To initialize the cart: Navigate to the Order Parameters UI Update Enable Preview Mode to true Wait for about 20 minutes for the initialization to complete Check the status of the process by calling the API GET /cart/api/cart/preview/config/sync/status This API returns the below attributes: Extended Attribute Sync Status (Values are Started, Failure, or Success) Config Entity Sync Status (Values are Started, Failure, or Success) Sync Status (Will be true if the other two attributes are in Success status) Once the Sync Status is true, begin using preview mode Note: Features like post-release cancelation and Ship It Instead flow should work irrespective of Enable Preview Mode configuration. This configuration is necessary only for payment promotions. Why 20 min?Before being able to copy the extended attributes, the cart component has to fully copy the configuration and perform a rolling restart. The extended attribute sync will be delayed by as many minutes as configured in the property “cart.syncStatus.delayedMessageMinutes”. the default value for this property is 20 min. This is a one time activation per organization. The system automatically does the following during the initialization process: Creates messaging configuration to automatically propagate configuration updates from the order component to the cart Entities that are synchronized between order and cart are: reason, chargeSubType, noteType, appeasement, sellingChannel, statusDefinition, nextUpConfiguration, orderConfig, orderType, orderParameters, modType, holdType, holdStatus, holdResolveReason, taxCodeOverride. There are two ways to manually re-trigger the synchronization of the configuration: Disable and re-enable the parameter in the order parameter Or call directly the below sync API to trigger the configuration sync: POST /cart/api/cart/preview/config/sync (body is empty). Note that if the order parameter activation did not succeed, there is a low chance the direct API will succeed. Check all your message type and profile configuration before trying with the order parameter again. Direct API should be used only when directly instructed. If a sync is re-triggered while another sync is in progress, the API returns an error telling that the sync process is ongoing. Cart Initialization Process Keeping Cart and Order in Sync Once the cart component is initialized, order broadcasts every configuration change using a queue: ConfigEntityChangeMSGType. The cart component consumes these updates to remain in sync with order. Updating the cart configuration directly is not supported; the configuration API does not have resources, ensuring that configuration is always updated through the order component. Extended Attributes in the Cart The cart only uses database-based extended attributes. File-based extended attributes are expected to be updated to database-based extended attributes before cart initialization. Extended attributes are copied during cart initialization. Past the initial configuration, there is no feature to date to broadcast extended attributes updates. Projects must maintain them both in the order and cart components. User Exits in the Cart User exits in the cart are the same as in the order component order selling flows. However, the user exit configuration must be duplicated in the cart component. There are no capabilities to automatically duplicate user exits configuration in order and cart. List of User Exits available in cart component Order:Order:UserExit:PreCalculatePrice Order:Order:UserExit:CalculatePrice Order:Order:UserExit:PostCalculatePrice Order:Order:UserExit:PreCalculateSNH Order:Order:UserExit:CalculateSNH Order:Order:UserExit:PostCalculateSNH Order:Order:UserExit:PreCalculateTax Order:Order:UserExit:CalculateTax Order:Order:UserExit:TranslateTaxRequest Order:Order:UserExit:TranslateTaxResponse Order:Order:UserExit:PostCalculateTax When a cart is confirmed and the changes are persisted on the order, the cart component uses the response template CartOrderConfirmChangesTemplate. If any field of the cart is updated by a User exit, this response template will have to be updated to include these fields. Consul Server Configuration During code drops, the system ensures that the order consul server is in sync with the cart consul server for feature flags, labels and component properties. Any configurations in the consul server need to be made in both the order and cart components. Work with services to ensure these configurations are in sync. Mark the fields in order entity as labels for cart also: {{url}}/cart/api/fwcore/attributeLabelsConfig/save { \"EntitysName\": \"Order\", \"FieldNames\": \"Extended.Refrence\" } Message Type Configuration The below message types are required for the initialization process and configuration propagation. These message types are part of the seed data included out of the box, so you do not need to create these message types. However, the list is included for troubleshooting. Inbound Message Types for the Cart (seed data) Message type Json ConfigEntityChangeMSGType { \"MessageType\": \"ConfigEntityChangeMSGType\", \"NoOfConsumer\": 10, \"MinNoOfConsumer\": 1, \"Idempotent\": true, \"ExternalIntegrationRequired\": false, \"MaxDesiredInstances\": 6, \"ScaleUpTimeWindow\": 10, \"ScaleDownTimeWindow\": 20, \"Description\": \"Inbound message type of syncing the config entities from order\", \"ServiceId\": \"ConfigEntityChangeService\" } UpdateExtendedAttributesSyncStatus { \"MessageType\": \"UpdateExtendedAttributesSyncStatus\", \"NoOfConsumer\": 10, \"MinNoOfConsumer\": 1, \"Idempotent\": true, \"ExternalIntegrationRequired\": false, \"MaxDesiredInstances\": 6, \"ScaleUpTimeWindow\": 10, \"ScaleDownTimeWindow\": 20, \"Description\": \"Inbound message type to update status of extended attributes sync process\", \"ServiceId\": \"UpdateExtendedAttributesSyncStatus\", \"InBoundQueues\": { \"QueueName\": \"queue.updateExtendedAttributesSyncStatus\" } } SyncConfigEntities { \"MessageType\": \"SyncConfigEntities\", \"NoOfConsumer\": 10, \"MinNoOfConsumer\": 1, \"Idempotent\": true, \"ExternalIntegrationRequired\": false, \"MaxDesiredInstances\": 6, \"ScaleUpTimeWindow\": 10, \"ScaleDownTimeWindow\": 20, \"Description\": \"Inbound message type to sync systemAugmentable entities during config sync process\", \"ServiceId\": \"SyncConfigEntities\", \"InBoundQueues\": { \"QueueName\": \"queue.syncConfigEntities\" } } SyncExtendedAttributes \"MessageType\": \"SyncExtendedAttributes\", \"NoOfConsumer\": 10, \"MinNoOfConsumer\": 1, \"Idempotent\": true, \"ExternalIntegrationRequired\": false, \"MaxDesiredInstances\": 6, \"ScaleUpTimeWindow\": 10, \"ScaleDownTimeWindow\": 20, \"Description\": \"Inbound message type to sync Extended Attributes during sync process\", \"ServiceId\": \"SyncExtendedAttributes\", \"InBoundQueues\": { \"QueueName\": \"queue.syncExtendedAttributes\" } } UpdateSyncProcessStatus { \"MessageType\": \"UpdateSyncProcessStatus\", \"NoOfConsumer\": 10, \"MinNoOfConsumer\": 1, \"Idempotent\": true, \"ExternalIntegrationRequired\": false, \"MaxDesiredInstances\": 6, \"ScaleUpTimeWindow\": 10, \"ScaleDownTimeWindow\": 20, \"Description\": \"Inbound message type to update config entities sync status during config sync process\", \"ServiceId\": \"UpdateSyncProcessStatus\", \"InBoundQueues\": { \"QueueName\": \"queue.updateSyncProcessStatus\" } } TriggerSyncCart { \"MessageType\": \"TriggerSyncCart\", \"NoOfConsumer\": 10, \"MinNoOfConsumer\": 1, \"Idempotent\": true, \"ExternalIntegrationRequired\": false, \"MaxDesiredInstances\": 6, \"ScaleUpTimeWindow\": 10, \"ScaleDownTimeWindow\": 20, \"Description\": \"Inbound message type to start sync process\", \"ServiceId\": \"TriggerSyncCart\", \"InBoundQueues\": { \"QueueName\": \"queue.triggerSyncCart\" } } JobScheduleMsg { \"MessageType\": \"JobScheduleMsg\", \"NoOfConsumer\": 10, \"MinNoOfConsumer\": 1, \"Idempotent\": true, \"ExternalIntegrationRequired\": false, \"MaxDesiredInstances\": 6, \"ScaleUpTimeWindow\": 10, \"ScaleDownTimeWindow\": 20, \"Description\": \"\", \"ServiceId\": \"JobScheduleListener\", \"InBoundQueues\": { \"QueueName\": \"JobScheduleQueue.COMPONENT-CART-BATCH\" } } jobStatusMonitorJob { \"MessageType\": \"jobStatusMonitorJob\", \"NoOfConsumer\": 10, \"MinNoOfConsumer\": 1, \"Idempotent\": true, \"ExternalIntegrationRequired\": false, \"MaxDesiredInstances\": 6, \"ScaleUpTimeWindow\": 10, \"ScaleDownTimeWindow\": 20, \"Description\": \"\", \"ServiceId\": \"JobStatusMonitor\", \"InBoundQueues\": { \"QueueName\": \"JobStatusMonitorQueue.COMPONENT-CART-BATCH\" } } awpf-payload { \"MessageType\": \"awpf-payload\", \"NoOfConsumer\": 10, \"MinNoOfConsumer\": 1, \"Idempotent\": true, \"ExternalIntegrationRequired\": false, \"MaxDesiredInstances\": 6, \"ScaleUpTimeWindow\": 10, \"ScaleDownTimeWindow\": 20, \"Description\": \"\", \"ServiceId\": \"PayloadMsgProcessor\", \"InBoundQueues\": { \"QueueName\": \"awpf-payload-queue-crt\" } } awpf-processedmsg { \"MessageType\": \"awpf-processedmsg\", \"NoOfConsumer\": 10, \"MinNoOfConsumer\": 1, \"Idempotent\": true, \"ExternalIntegrationRequired\": false, \"MaxDesiredInstances\": 6, \"ScaleUpTimeWindow\": 10, \"ScaleDownTimeWindow\": 20, \"Description\": \"\", \"ServiceId\": \"ProcessedMessageListener\", \"InBoundQueues\": { \"QueueName\": \"awpf-processedmsg-queue-crt\" } } JobScheduleManagerMsg { \"MessageType\": \"JobScheduleManagerMsg\", \"NoOfConsumer\": 10, \"MinNoOfConsumer\": 1, \"Idempotent\": true, \"ExternalIntegrationRequired\": false, \"MaxDesiredInstances\": 6, \"ScaleUpTimeWindow\": 10, \"ScaleDownTimeWindow\": 20, \"Description\": \"\", \"ServiceId\": \"JobScheduleManager\", \"InBoundQueues\": { \"QueueName\": \"JobScheduleManagerQueue.COMPONENT-CART-BATCH\" } } DiscardCart { \"MessageType\": \"DiscardCart\", \"NoOfConsumer\": 10, \"MinNoOfConsumer\": 1, \"Idempotent\": true, \"ExternalIntegrationRequired\": false, \"MaxDesiredInstances\": 6, \"ScaleUpTimeWindow\": 10, \"ScaleDownTimeWindow\": 20, \"Description\": \"Inbound message type to discard cart\", \"ServiceId\": \"DiscardCart\", \"InBoundQueues\": { \"QueueName\": \"queue.discardCart\" } } awpf-delayed-payload-schedule { \"MessageType\": \"awpf-delayed-payload-schedule\", \"MinNoOfConsumer\": 1, \"NoOfConsumer\": 1, \"ServiceId\": \"DelayedPayloadPublisherService\", \"InBoundQueues\": { \"QueueName\": \"awpf-delayed-payload-schedule-{:unique.app.code}\" } } awpf-delayed-payload { \"MessageType\": \"awpf-delayed-payload\", \"ServiceId\": \"PayloadMsgProcessor\", \"MinNoOfConsumer\": 1, \"NoOfConsumer\": 10, \"InBoundQueues\": { \"QueueName\": \"awpf-delayed-payload-{:unique.app.code}\" } } awpf-track-payload { \"MessageType\": \"awpf-track-payload\", \"ServiceId\": \"PayloadMsgProcessor\", \"MinNoOfConsumer\": 1, \"NoOfConsumer\": 10, \"InBoundQueues\": { \"QueueName\": \"awpf-track-payload-{:unique.app.code}\" } } awpf-consolidate-payload { \"MessageType\": \"awpf-consolidate-payload\", \"ServiceId\": \"ConsolidatePayload\", \"MinNoOfConsumer\": 1, \"NoOfConsumer\": 10, \"InBoundQueues\": { \"QueueName\": \"awpf-consolidate-payload-{:unique.app.code}\" } } Outbound Message Types for the Cart (seed data) Message Type Json UpdateExtendedAttributesSyncStatus { \"MessageType\": \"UpdateExtendedAttributesSyncStatus\", \"Transactional\": true, \"PersistMessageToMsgStore\": false, \"OutBoundDeliveryConfig\": { \"DeliveryDelay\": \"20 minute\", \"OutBoundDeliveryConfigId\": \"updateExtendedAttributesSyncStatusConfig\" }, \"OutBoundQueues\": { \"QueueName\": \"queue.updateExtendedAttributesSyncStatus\" } } SyncConfigEntities { \"MessageType\": \"SyncConfigEntities\", \"Transactional\": true, \"PersistMessageToMsgStore\": false, \"OutBoundQueues\": { \"QueueName\": \"queue.syncConfigEntities\" } } SyncExtendedAttributes { \"MessageType\": \"SyncExtendedAttributes\", \"Transactional\": true, \"PersistMessageToMsgStore\": false, \"OutBoundQueues\": { \"QueueName\": \"queue.syncExtendedAttributes\" } } UpdateSyncProcessStatus { \"MessageType\": \"UpdateSyncProcessStatus\", \"Transactional\": true, \"PersistMessageToMsgStore\": false, \"OutBoundQueues\": { \"QueueName\": \"queue.updateSyncProcessStatus\" } } JobScheduleMsg { \"MessageType\": \"JobScheduleMsg\", \"Transactional\": false, \"PersistMessageToMsgStore\": false, \"MessageCategory\": \"systembatch\", \"OutBoundQueues\": [ { \"QueueName\": \"JobScheduleQueue.COMPONENT-CART-BATCH\" } ] } jobStatusMonitorJob \"MessageType\": \"jobStatusMonitorJob\", \"Transactional\": false, \"PersistMessageToMsgStore\": false, \"MessageCategory\": \"systembatch\", \"OutBoundQueues\": [ { \"QueueName\": \"JobStatusMonitorQueue.COMPONENT-CART-BATCH\" } ] } awpf-payload { \"MessageType\": \"awpf-payload\", \"Transactional\": false, \"PersistMessageToMsgStore\": false, \"MessageCategory\": \"awpf\", \"DeliveryDelay\": \"200\", \"OutBoundQueues\": [ { \"QueueName\": \"awpf-payload-queue-crt\" } ] } awpf-processedmsg \"MessageType\": \"awpf-processedmsg\", \"Transactional\": false, \"PersistMessageToMsgStore\": false, \"MessageCategory\": \"awpf\", \"DeliveryDelay\": \"0\", \"OutBoundQueues\": [ { \"QueueName\": \"awpf-processedmsg-queue-crt\" } ] } DiscardCart { \"MessageType\": \"DiscardCart\", \"Transactional\": true, \"PersistMessageToMsgStore\": false, \"OutBoundQueues\": { \"QueueName\": \"queue.discardCart\" } } Order Outbound Message type - seed data for cartOutbound message type (in order component) { \"MessageType\": \"ConfigEntityChangeMSGType\", \"Transactional\": true, \"PersistMessageToMsgStore\": false } Extension points to message types for the Cart (seed data)Here is a list of the seed data for extension points to message types POST{{url}}/cart/api/ServiceDefinition/extPointToMessageType/import { \"data\": [ { \"ExtensionPointId\": \"Cart:Cart:Event:UpdateExtendedAttributesSyncStatus\", \"MessageType\": \"UpdateExtendedAttributesSyncStatus\" }, { \"ExtensionPointId\": \"Cart:Cart:Event:SyncConfigEntities\", \"MessageType\": \"SyncConfigEntities\" }, { \"ExtensionPointId\": \"Cart:Cart:Event:SyncExtendedAttributes\", \"MessageType\": \"SyncExtendedAttributes\" }, { \"ExtensionPointId\": \"Cart:Cart:Event:UpdateSyncProcessStatus\", \"MessageType\": \"UpdateSyncProcessStatus\" }, { \"ExtensionPointId\": \"Cart:Cart:Event:DiscardCart\", \"MessageType\": \"DiscardCart\" } ] } Cart APIs The list of APIs currently supported in the cart component can be found in this section. See the below diagram for an illustration of which APIs to call to build a cancellation feature with preview. How to use cart APIs for cancellation preview Cart Initialization Status Check API After initializing the cart via the Order Parameters UI, check the status of the cart component with the below API: GET : /cart/api/cart/preview/config/sync/status How is the sync status used by the other cart APIs?By default, all the APIs sent to cart will always check for the value of the \"SyncStatus\" boolean flag. If this flag is set to false meaning that comething went wrong during the sync process, the functioanl APIs detailed in the rest of this section will fail. There is one way to bypass this verification. It is possible to change a KV store property \"cart.enableSyncStatusValidation\" (true by default) to false. In this case, the cart component configuration does not need to be in sync to allow funcitoanl APIs to hit the cart. Unless sepecifically instructed, it is not advised to change this value as it can have consequences in the accuracy of the cart component computation. Cancel Line API Canceling a line in the cart component provides the user with a preview of the new, estimated order totals and canceled order totals. The changes made in cart do not have any impact on the order or payment until the user confirms the changes. Currently, preview mode for order line cancellation is supported for end customers in Digital Self-Service. Refer to this guide for more information on cancellation preview in Digital Self-Service: Order Cancellation. Calling the below API will: Create a cart based on the current status of the order. This cart will not contain the lines that were previously canceled (or the lines that are “requested for cancelation” in the order component). Cancel the line in cart Recompute the order totals, taxes, charges, and other charges with this line canceled Return what the order would look like once the line gets canceled in the response On post-release cancelation: The cart always allows you to preview the new order total by canceling a line, even if it is already released. If in cart, you try to cancel a line that cannot be canceled, the persist cart API will fail. See Late Order Cancellation for more information. Cancel line in cart APIPOST {{url}}/commerceservice-facade/api/cart/order/edit/cancel?orderId=<orderID> Body: { \"CancelReason\": { \"ReasonId\": \"<add here a reason for cancelation>\" }, \"OrderId\": null, <this can stay null in the body as the API will only consider the order id in the URL> \"OrderLine\": [ { \"OrderLineId\": \"<order line id to cancel>\" } ], \"CancelComments\": \"<cancel comments if required>\" } This API will not allow you to modify an existing cart. It will delete all the cart currently active for this order and create a new one. if you want to cancel multiple lines on the same order, do that in the same API call. In the response of this API, you will note that the value of the “orderId” field is not the same one as the order ID you were expected. This is normal. In any cart related API, the field “OrderID” actually contains the cart ID (UUID autogenerated). You will need that cart ID to persist the changes to the order component. The cart ID is different than the order ID as an order can have multiple carts active at the same time but a user can only persist one cart. There is an entity in the cart component that lists all the cart active for an order at any given time: GET: {{url}}/cart/api/cart/cartDetail?query=\"OrderId='<your order ID>'\" Get Current Cart Version API To get to the version of the order that exist in cart you need to know the cart ID for your specific order. This can be found in the response of the API that created the cart or using GET: {{url}}/cart/api/cart/cartDetail?query=\"OrderId='<your order ID>'\" Confirm Order Changes API Once all the modifications have been done in the cart and the user is happy with the result, it is required to persist the changes in the order component. To do this, call the persist cart API with your cart ID: POST {{url}}/commerceservice-facade/api/cart/order/edit/confirmChanges?cartId=<your cart ID> (empty body) This API updates the order with the changes made in the cart. Once the order is updated, the cart is deleted and the payment processes (like refund or adjustment invoices) are triggered. The Persist Change API could fail if the order is no longer eligible for such updates. For example, if the order was updated since the cart processes started (if a line was released for example), it could make it ineligible for update. There is no version comparison between the cart and the order. The system will get to the current version of the order and will use an order save call to save the current version of the cart. Managing Discarded Carts Carts are intended to be short-lived. The longer a cart stays active, the higher the probability of discrepancy with the order is. If it is not explicitly deleted by the calling system, it will be deleted automatically by an internal cart process. Whenever a cart is created, a delayed message will be posted in a queue. That message will be set up to be processed 60 minutes after it was posted. 60 min is the default value but can be changed in the KV store of the cart component in the property \"cart.discard.delayedMessageMinute\". Implementation Flavors N/A Feature Scope The following is not supported in the cart: Preview of order modifications other than full line cancellations (for example, preview quantity changes, adding items, change shipping address, and so on) Related Articles Shipping RestrictionHoldsOrder Orchestration ConfigurationOrder TaggingOrder Orchestration ProcessOrder CancellationOrder Audit Mod TypesPublishing Order Order ArchivingDelivery TrackingCreating and Updating Order"
}