{
  "id": "2017948",
  "permalink": "pospayment-process",
  "title": "POS Payment Process",
  "type": "topic",
  "level": 7,
  "path": "Manhattan Active® Omni/Store/Process & Configuration Guides/Point of Sale/POS Classic Guides/POS Order Selling/POS Payment/POS Payment Process",
  "raw_item": {
    "id": "2017948",
    "text": "POS Payment Process",
    "title": "POS Payment Process",
    "permalink": "pospayment-process",
    "leaf": false,
    "droppable": true,
    "expanded": true,
    "closed": true,
    "visible": true,
    "editable": true,
    "type": "topic",
    "topicType": "0",
    "status": "1",
    "iconCls": "icon-topic",
    "cls": "",
    "folder_id": "175419",
    "parent": "f;175419",
    "created_date": "1527613496",
    "modified_date": "1725372001",
    "instructor_id": null,
    "loaded": true,
    "haschildren": false,
    "callout": "0",
    "order": "1"
  },
  "success": true,
  "content": "\r\n\r\n\r\n<div class=\"hiq-page-wrap\">\r\n<div class=\"hiq-t-wrap\">\r\n\t\t\r\n  \t  <div class=\"hiq-t \">\r\n\t\t\t\t<ul class=\"breadcrumbs\"><li><a class=\"breadcrumb-links\" hqid=\"1788908\"  href=\"/home\">Home</a></li> <li><span>&rsaquo;&rsaquo;</span><a hqid=\"3500940\" href=\"/omni\" class=\"breadcrumb-links\">Manhattan Active® Omni</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"3426481\" href=\"/store-3\" class=\"breadcrumb-links\">Store</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158412\" href=\"/process-configuration-guides-3\" class=\"breadcrumb-links\">Process & Configuration Guides</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158737\" href=\"/point-of-sale\" class=\"breadcrumb-links\">Point of Sale</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2225114\" href=\"/process-configuration-guides-4\" class=\"breadcrumb-links\">POS Classic Guides</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2672964\" href=\"/pos-order-selling\" class=\"breadcrumb-links\">POS Order Selling</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2178705\" href=\"/pos-payment\" class=\"breadcrumb-links\">POS Payment</a></li><li> <span>››</span>POS Payment Process</li></ul>  \t\r\n\t\t<h2><a name=\"payment-process\" id=\"payment-process\"></a>Payment Process</h2>\r\n\r\n<p></p>\r\n\r\n<div class=\"info\"><ul><li><a href=\"/pospayment-process$payment-process\">Payment Process</a><ul><li><a href=\"/pospayment-process$capturing-payment\">Capturing Payment</a><ul><li><a href=\"/pospayment-process$payment-captured-at-the-point-of-sale-pos\">Payment Captured at the Point of Sale (POS)</a><ul><li><a href=\"/pospayment-process$balance-due\">Balance Due</a></li><li><a href=\"/pospayment-process$foreign-or-alternate-currency\">Foreign (or alternate) Currency</a></li></ul></li><li><a href=\"/pospayment-process$emv-data\">EMV data</a></li><li><a href=\"/pospayment-process$deposits\">Deposits</a></li><li><a href=\"/pospayment-process$custom-tender-creation\">Custom Tender Creation</a><ul><li><a href=\"/pospayment-process$custom-payment-types\">Custom Payment Types</a></li><li><a href=\"/pospayment-process$private-label-credit-card\">Private Label Credit Card</a></li></ul></li><li><a href=\"/pospayment-process$configuring-a-single-card-option-for-both-credit-and-debit-payments\">Configuring a Single Card Option for Both Credit and Debit Payments</a></li><li><a href=\"/pospayment-process$payment-capture-configuration\">Payment Capture Configuration</a><ul><li><a href=\"/pospayment-process$user-input-forms\">User Input Forms</a></li><li><a href=\"/pospayment-process$tender-franking\">Tender Franking</a></li></ul></li><li><a href=\"/pospayment-process$sharing-payment-terminals-between-mobile-registers-delay-payment-terminal-session\">Sharing Payment Terminals between Mobile Registers - Delay Payment Terminal Session</a></li><li><a href=\"/pospayment-process$exchange-tender-et-transactions\">Exchange Tender (ET) Transactions</a><ul><li><a href=\"/pospayment-process$et-workflow-diagram\">ET Workflow diagram</a></li><li><a href=\"/pospayment-process$et-associating-a-customer\">ET - Associating a customer</a></li><li><a href=\"/pospayment-process$et-charging-nbsp-the-tender-to-be-nbsp-exchanged\">ET - Charging&nbsp;the tender to be&nbsp;exchanged</a></li><li><a href=\"/pospayment-process$et-payback-process\">ET - Payback process</a></li><li><a href=\"/pospayment-process$et-receipt-and-reprint\">ET - Receipt and Reprint</a></li></ul></li><li><a href=\"/pospayment-process$gift-card-cash-out\">Gift card Cash out</a></li></ul></li><li><a href=\"/pospayment-process$payment-hardening-and-failure-handling\">Payment Hardening and Failure Handling</a><ul><li><a href=\"/pospayment-process$requestlogs-uniqueid\">RequestLogs/UniqueId</a></li><li><a href=\"/pospayment-process$hardening-workflow\">Hardening workflow</a></li><li><a href=\"/pospayment-process$handling-communication-error\">Handling Communication error</a><ul><li><a href=\"/pospayment-process$prior-to-release-23-1-legacy-comm-failure-handling-nbsp\">Prior to Release 23.1- Legacy Comm failure handling&nbsp;</a></li><li><a href=\"/pospayment-process$following-nbsp-release-23-1-flexible-comm-failure-handling\">Following&nbsp;Release 23.1- Flexible Comm failure handling</a></li></ul></li></ul></li><li><a href=\"/pospayment-process$payment-reconciliation\">Payment Reconciliation</a><ul><li><a href=\"/pospayment-process$work-flow-of-payment-reconciliation\">Work Flow of payment reconciliation</a><ul><li><a href=\"/pospayment-process$reconciliation-process-outline\">Reconciliation Process Outline</a></li></ul></li></ul></li><li><a href=\"/pospayment-process$refresh-payment\">Refresh Payment</a></li><li><a href=\"/pospayment-process$services\">Services</a></li></ul></li></ul></div>\r\n\r\n<p>The Payment component processes payments for orders initiating in any channel, including&nbsp;e-commerce, point of sale (POS), or call center. During the life cycle of each order, the Payment component manages order authorizations, settlements, and refunds through integration&nbsp;with payment gateways such as CyberSource, PayPal, or PAYware Connect.</p>\r\n\r\n<p>If a payment is captured and authorized in the order capture system such as POS or e-commerce, then the Payment component&nbsp;performs follow-on re-authorizations, settlements and refunds against the initial authorization.</p>\r\n\r\n<p>The Payment component&nbsp;uses order data to determines the type of transactions that are required. Settlements are created for the value of the fulfilled items,&nbsp;and authorizations are created for those that are ordered but not yet shipped or picked up. For example, when an in-store purchase is made using a credit card,&nbsp;the Payment component&nbsp;attempts to settle for the value of the order.&nbsp;When an online order is placed using a credit card,&nbsp;the Payment component&nbsp;attempts to authorize for the value of the order and will settle the value when the order ships.</p>\r\n\r\n<p>Each order can be paid with an unlimited number of payment methods. Supported payment types include&nbsp;cash, check, credit card, debit card, e-check, gift card, PayPal, store credit, and Travelers&#39; check. Additional payment types can be configured as required.</p>\r\n\r\n<h3><a name=\"capturing-payment\" id=\"capturing-payment\"></a>Capturing Payment</h3>\r\n\r\n<h4 id=\"OrderPayments-PaymentCapturedatthePointofSale(POS)\"><a name=\"payment-captured-at-the-point-of-sale-pos\" id=\"payment-captured-at-the-point-of-sale-pos\"></a>Payment Captured at the Point of Sale (POS)</h4>\r\n\r\n<p>When orders are captured in store, POS processes payments and&nbsp;saves completed payment transactions&nbsp;in the Payment component. Since the terminal or mobile sled used to capture payments typically integrates directly with payment gateways, POS does not use the Payment component to&nbsp;calculate or execute services to create and execute transactions. Instead, POS uses the Total Payment Summary API to get the total amount to authorize, settle, or refund, and then POS creates payment transactions and calls the gateway to execute them.</p>\r\n\r\n<div class=\"info\">If Gift card is used to pay for an omni sale (Order having&nbsp;in-store and ship to address lines), the user will be asked to swipe the GC twice even though both will be settlement records.</div>\r\n\r\n<h5><a name=\"balance-due\" id=\"balance-due\"></a>Balance Due</h5>\r\n\r\n<p style=\"font-size: 14px;\">When a UI needs to display the balance due so that a store associate or customer care representative can collect payment, then the Order component calculates the balance due by calling the Payment component. The Get Order API includes a balance due attribute in the response. To calculate the balance due, the Order component&nbsp;calls the Get Payment Header API to get all the payment methods from the Payment component. Then, the Order component calculates the balance due as&nbsp;</p>\r\n\r\n<p style=\"font-size: 14px;\"><span style=\"font-size:16px;\"><span class=\"math-tex\">\\(Balance Due = Order Total - \\sum (Amount - Current Refund Amount, \\forall Payment Methods)\\)</span></span></p>\r\n\r\n<h5><a name=\"foreign-or-alternate-currency\" id=\"foreign-or-alternate-currency\"></a><a id=\"ForeignCurrencyProcess\" name=\"ForeignCurrencyProcess\"></a>Foreign (or alternate) Currency</h5>\r\n\r\n<p>POS allows retailers to accept foreign currency as a form of cash payment.&nbsp; There are multiple configurations to set this up (see <a href=\"https://omni.helpdocsonline.com/pospayment-configuration$ForeignCurrencyconfig\">POS Payment Configuration guide</a> for more details)</p>\r\n\r\n<p>When configured, the user will see an additional dropdown on the Order Summary &gt; Cash tab.&nbsp; By default, the stores base currency will be selected.&nbsp; Should the customer wish to pay in an alternate currency, the user can tap on the dropdown and a list of allowed currencies will be displayed.</p>\r\n\r\n<p>Upon selection of an alternate currency:</p>\r\n\r\n<ul>\r\n\t<li>The user will see two additional details on the screen:\r\n\t<ul>\r\n\t\t<li>The converted balance will show under the base currency balance due\r\n\t\t<ul>\r\n\t\t\t<li>This allows the user to easily tell the customer how much to pay in the alternate currency.</li>\r\n\t\t</ul>\r\n\t\t</li>\r\n\t\t<li>The converted amount under the Enter Amount field\r\n\t\t<ul>\r\n\t\t\t<li>This allows the user to see the conversion as it is being typed into the Enter Amount field.</li>\r\n\t\t</ul>\r\n\t\t</li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<p>Users can accept multiple currencies, or combine an alternate currency with a different payment method.&nbsp;</p>\r\n\r\n<div class=\"tip\"><strong>Note</strong>: If an overtender occurs and there is a change due to the customer, the change due will display in the store&#39;s base currency.&nbsp; Currently, POS does not allow for change to be returned via alternate currency.</div>\r\n\r\n<h4><a name=\"emv-data\" id=\"emv-data\"></a>EMV data</h4>\r\n\r\n<p>The term EMV stands for&nbsp;<strong>Europay, MasterCard and Visa</strong>. EMV is a global standard for authenticating credit and debit card transactions with integrated circuit cards, or &ldquo;chip cards&rdquo; at capable point of sale (POS) terminals. Manhattan Active&reg; Omni POS Receipts will be able to capture EMV data.&nbsp;EMV data should be divided into 2 parts i.e. EMV header and EMV secondary details. EMV data is configurable, retailers need to enable business flags to &quot;Receipt Inc Emv Primary&quot; and/or &quot;Receipt Inc Emv Secondary&quot; on receipt parameters to have this printed on the base POS receipts.</p>\r\n\r\n<p>If a transaction is made via chip card, all receipts must include the following EMV information in addition to standard receipt information.</p>\r\n\r\n<p>EMV Primary receipt data and related mapping to the metadata entity attributes. <a hqid=\"2188485\" href=\"/sample-receipts\">Link</a> for sample receipt.</p>\r\n\r\n<table align=\"center\" resolved=\"\" role=\"grid\">\r\n\t<tbody aria-live=\"polite\" aria-relevant=\"all\">\r\n\t\t<tr>\r\n\t\t\t<th style=\"text-align: center;\"><strong>EMV Primary</strong></th>\r\n\t\t\t<th style=\"text-align: center;\"><strong>Mapping</strong></th>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td>Card Holder Verification Method</td>\r\n\t\t\t<td>PaymentTransactionEMVTags.EMV_CVM</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td>Transaction Sequence Counter</td>\r\n\t\t\t<td>PaymentTransactionEMVTags.EMV_TAG_9F41</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td>Application Label</td>\r\n\t\t\t<td>PaymentTransactionEMVTags.EMV_TAG_50</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td>AID (Application Identifier)</td>\r\n\t\t\t<td>PaymentTransactionEMVTags.EMV_TAG_4F</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td>TVR (Terminal Verification Results)</td>\r\n\t\t\t<td>PaymentTransactionEMVTags.EMV_TAG_95</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td>IAD (Issuer Application Data)</td>\r\n\t\t\t<td>PaymentTransactionEMVTags.EMV_TAG_9F10</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td>TSI (Transaction Status Indicator)</td>\r\n\t\t\t<td>PaymentTransactionEMVTags.EMV_TAG_9B</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td>ARC (Application Response Code)</td>\r\n\t\t\t<td>PaymentTransactionEMVTags.EMV_TAG_8A</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>EMV Secondary receipt data and related mapping to the metadata entity attributes. <a hqid=\"2188485\" href=\"/sample-receipts\">Link</a> for sample receipt.</p>\r\n\r\n<table align=\"center\" resolved=\"\" role=\"grid\">\r\n\t<tbody aria-live=\"polite\" aria-relevant=\"all\">\r\n\t\t<tr>\r\n\t\t\t<th style=\"text-align: center;\"><strong>EMV Secondary fields</strong></th>\r\n\t\t\t<th style=\"text-align: center;\"><strong>Mapping</strong></th>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td>Application Version Number</td>\r\n\t\t\t<td>PaymentTransactionEMVTags.EMV_TAG_9F09</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td>Application Usage Control</td>\r\n\t\t\t<td>PaymentTransactionEMVTags.EMV_TAG_9F07</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td>Application Identifier (AID) &ndash; card</td>\r\n\t\t\t<td>PaymentTransactionEMVTags.EMV_TAG_9F06</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td>Issuer Action Code &ndash; Default</td>\r\n\t\t\t<td>PaymentTransactionEMVTags.EMV_TAG_9F0D</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td>TacDefault</td>\r\n\t\t\t<td>PaymentTransactionEMVTags.TAC_DEFAULT</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td>Issuer Action Code &ndash; Online</td>\r\n\t\t\t<td>PaymentTransactionEMVTags.EMV_TAG_9F0F</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td>Issuer Action Code &ndash; Denial</td>\r\n\t\t\t<td>PaymentTransactionEMVTags.EMV_TAG_9F0E</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td>Application Preferred Name</td>\r\n\t\t\t<td>PaymentTransactionEMVTags.EMV_TAG_9F12</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td>CARD ENTRY MODE</td>\r\n\t\t\t<td>PaymentTransactionEMVTags.CARD_ENTRY_MODE</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td>Issuer Code Table Index</td>\r\n\t\t\t<td>PaymentTransactionEMVTags.EMV_TAG_9F11</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td>Application Primary Account Number (PAN) Sequence Number</td>\r\n\t\t\t<td>PaymentTransactionEMVTags.EMV_TAG_5F34</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td>Terminal Action Code &ndash; Denial</td>\r\n\t\t\t<td>PaymentTransactionEMVTags.TAC_DENIAL</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td>Transaction Type</td>\r\n\t\t\t<td>PaymentTransactionEMVTags.EMV_TAG_9C</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td>Transaction Date</td>\r\n\t\t\t<td>PaymentTransactionEMVTags.EMV_TAG_9A</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td>Point-of-Service (POS) Entry Mode</td>\r\n\t\t\t<td>PaymentTransactionEMVTags.EMV_TAG_9F39</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td>Terminal Action Code &ndash; Online</td>\r\n\t\t\t<td>PaymentTransactionEMVTags.TAC_ONLINE</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td>Amount, Other (Numeric)</td>\r\n\t\t\t<td>PaymentTransactionEMVTags.EMV_TAG_9F03</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td>Amount, Authorised (Numeric)</td>\r\n\t\t\t<td>PaymentTransactionEMVTags.EMV_TAG_9F02</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td>EmvMode</td>\r\n\t\t\t<td>PaymentTransactionEMVTags.EMV_MODE</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td colspan=\"1\">Cryptogram Information Data</td>\r\n\t\t\t<td colspan=\"1\">PaymentTransactionEMVTags.EMV_TAG_9F27</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td colspan=\"1\">Transaction Currency Code</td>\r\n\t\t\t<td colspan=\"1\">PaymentTransactionEMVTags.EMV_TAG_5F2A</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td colspan=\"1\">EmvChipIndicator</td>\r\n\t\t\t<td colspan=\"1\">PaymentTransactionEMVTags.EMV_CHIP_INDICATOR</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td colspan=\"1\">Dedicated File (DF) Name</td>\r\n\t\t\t<td colspan=\"1\">PaymentTransactionEMVTags.EMV_TAG_84</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td colspan=\"1\">Application Interchange Profile</td>\r\n\t\t\t<td colspan=\"1\">PaymentTransactionEMVTags.EMV_TAG_82</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td colspan=\"1\">Unpredictable Number</td>\r\n\t\t\t<td colspan=\"1\">PaymentTransactionEMVTags.EMV_TAG_9F37</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td colspan=\"1\">Application Transaction Counter (ATC)</td>\r\n\t\t\t<td colspan=\"1\">PaymentTransactionEMVTags.EMV_TAG_9F36</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td colspan=\"1\">Terminal Type</td>\r\n\t\t\t<td colspan=\"1\">PaymentTransactionEMVTags.EMV_TAG_9F35</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td colspan=\"1\">Cardholder Verification Method (CVM) Results</td>\r\n\t\t\t<td colspan=\"1\">PaymentTransactionEMVTags.EMV_TAG_9F34</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td colspan=\"1\">Terminal Capabilities</td>\r\n\t\t\t<td colspan=\"1\">PaymentTransactionEMVTags.EMV_TAG_9F33</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td colspan=\"1\">TermId</td>\r\n\t\t\t<td colspan=\"1\">PaymentTransactionEMVTags.TERMID</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td colspan=\"1\">Interface Device (IFD) Serial Number</td>\r\n\t\t\t<td colspan=\"1\">PaymentTransactionEMVTags.EMV_TAG_9F1E</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td colspan=\"1\">Terminal Country Code</td>\r\n\t\t\t<td colspan=\"1\">PaymentTransactionEMVTags.EMV_TAG_9F1A</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td colspan=\"1\">Application Cryptogram</td>\r\n\t\t\t<td colspan=\"1\">PaymentTransactionEMVTags.EMV_TAG_9F26</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td colspan=\"1\">Transaction Time</td>\r\n\t\t\t<td colspan=\"1\">PaymentTransactionEMVTags.EMV_TAG_9F21</td>\r\n\t\t</tr>\r\n\t\t<tr role=\"row\">\r\n\t\t\t<td colspan=\"1\">MERCHID</td>\r\n\t\t\t<td colspan=\"1\">PaymentTransactionEMVTags.MERCHID</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4><a name=\"deposits\" id=\"deposits\"></a><span style=\"color: rgb(61, 61, 61); font-size: 1.125em;\">Deposits</span></h4>\r\n\r\n<p style=\"font-size: 14px;\"><span style=\"font-size:12px;\">Orders containing only Omni (STA/STS/PAS) items will&nbsp;qualify for partial payments (deposits). On the Order Summary screen, once a partial payment is made, the Deposit button will be available based upon a grant.&nbsp; If the Deposit button is selected, the order will be marked as partially paid and the order will progress to the receipt screen.&nbsp; &nbsp;From the Order Search screen, the order can be selected and viewed.&nbsp; The Order Detail screen will indicate the order is awaiting further payment and an option will be available to make additional payments.&nbsp; &nbsp;If an additional payment is selected, the&nbsp;Order Summary screen will be displayed with the previously applied payment(s) and allow for either&nbsp;partial or full payment.&nbsp;</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div class=\"tip\"><strong>Note:&nbsp;</strong>This feature&nbsp; requires the Upgraded Store Application.&nbsp; See <a href=\"https://omni.helpdocsonline.com/upgradedstoreapp\">Upgraded Store Application</a> for more information.</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4><a name=\"custom-tender-creation\" id=\"custom-tender-creation\"></a>Custom Tender Creation</h4>\r\n\r\n<p>The default supported payment types include cash, check,&nbsp;credit card, debit, e-check, gift card, PayPal, store credit, and traveler&#39;s check. Additional custom payment types can be configured as required.</p>\r\n\r\n<h5 id=\"PaymentProcessing-ExtendedPaymentTypes\"><a name=\"custom-payment-types\" id=\"custom-payment-types\"></a>Custom Payment Types</h5>\r\n\r\n<p>Custom payment types can be added as required. Newly created payment types can be used for both purchases as well as refunds. The payment configuration indicates how to process the payment type.</p>\r\n\r\n<h5><a name=\"private-label-credit-card\" id=\"private-label-credit-card\"></a>Private Label Credit Card</h5>\r\n\r\n<p data-renderer-start-pos=\"17\">A Private Label Credit Card (PLCC) is a custom integrated payment type which a client may accept as tender in store. PLCC payment processing is typically characterized as&quot;Stored Value Services&quot;, no processing over major card brand networks, valid only with the brand. As such, PLCC is typically not subject to PCI-DSS stipulations.</p>\r\n\r\n<div class=\"tip\" data-renderer-start-pos=\"366\">If the PLCC is processed over major card brand networks, is branded with a logo of a major card network, or is accepted outside of the client&rsquo;s selling operations, the payment type may be subject to PCI-DSS. Please, coordinate between the client and MA legal team as needed.</div>\r\n\r\n<h4><a name=\"configuring-a-single-card-option-for-both-credit-and-debit-payments\" id=\"configuring-a-single-card-option-for-both-credit-and-debit-payments\"></a>Configuring a Single Card Option for Both Credit and Debit Payments</h4>\r\n\r\n<p>If your business needs to display only one card option in the payment screen to handle both Credit and Debit transactions, you can achieve this through the following configuration steps:</p>\r\n\r\n<ol>\r\n\t<li>\r\n\t<p><strong>Edit the Credit Card Configuration:</strong></p>\r\n\r\n\t<ul>\r\n\t\t<li>Navigate to the <em>Payment Type</em> configuration section and select the Credit Card configuration to edit.</li>\r\n\t\t<li>Update the <em>Display Name</em> from &quot;Credit Card&quot; to &quot;Card.&quot;</li>\r\n\t\t<li>Save the configuration.</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Remove the Debit Card Configuration:</strong></p>\r\n\r\n\t<ul>\r\n\t\t<li>In the <em>Payment Type</em> configuration, delete the Debit Card configuration.</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Adjust the Payment Capture Settings:</strong></p>\r\n\r\n\t<ul>\r\n\t\t<li>Go to the <em>Payment Capture Configuration</em> and select the Credit Card option.</li>\r\n\t\t<li>In the <em>Payment Capture Configuration Detail</em> tab, disable the flag labeled &quot;Set payment type on gateway request.&quot;</li>\r\n\t\t<li>Save the configuration.</li>\r\n\t</ul>\r\n\t</li>\r\n</ol>\r\n\r\n<p>After making these changes, the payment options screen will only display &quot;Card&quot; as an option, allowing customers to use either a Credit or Debit card on the terminal.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4><a name=\"payment-capture-configuration\" id=\"payment-capture-configuration\"></a>Payment Capture Configuration</h4>\r\n\r\n<p>The behavior of payment types at POS is configurable via the Payment Capture Configuration utility.&nbsp; In addition to basic behavior, custom configurations can be added to base tenders as well as custom tenders.&nbsp; See the<a href=\"https://omni.helpdocsonline.com/pospayment-configuration\"> POS Payment Configuration guide</a> for details. The configurations will determine the following within the UI flow:</p>\r\n\r\n<ul>\r\n\t<li>Capture customer Information and Identity Documents</li>\r\n\t<li>Input Entry Required</li>\r\n\t<li>Input Entry Type</li>\r\n\t<li>Authorization required through payment terminal</li>\r\n\t<li>Franking required</li>\r\n\t<li>Capture denominations</li>\r\n\t<li>Pop cash drawer and include in drawer count</li>\r\n\t<li>Capture customer signature</li>\r\n\t<li>Delay Payment Terminal Session Until Time of Payment</li>\r\n\t<li>Pay By&nbsp;Link POS</li>\r\n</ul>\r\n\r\n<div>\r\n<div style=\"clear: both;\">\r\n<div style=\"clear: both;\">\r\n<div style=\"clear: both;\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<div data-attachmentid=\"25493832\" data-ceoid=\"14942610\" data-edit=\"/wiki/plugins/gliffy/editor.action?inline=false&pageId=15795355&name=Payment Gateway Integration&attachmentId=25493832&ceoid=14942610&key=OP&lastPage=%2Fpages%2Fviewpage.action%3FpageId%3D15795355\" data-filename=\"Payment Gateway Integration\" data-full=\"/wiki/plugins/gliffy/viewer.action?inline=false&pageId=15795355&attachmentId=25493832&name=Payment Gateway Integration&ceoid=14942610&key=OP&lastPage=%2Fpages%2Fviewpage.action%3FpageId%3D15795355\" data-fullwidth=\"824\" data-hasbody=\"false\" data-islinked=\"true\" data-macro-name=\"gliffy\" data-pageid=\"15795355\" data-version=\"0\" id=\"gliffy-container-25493832-2293\">\r\n<div class=\"info\" data-renderer-start-pos=\"2764\"><strong>Note</strong>: Ability to delete base tender, part of user-created profile. Owner of that profile has full control to create/delete entries.</div>\r\n</div>\r\n\r\n<div>\r\n<div style=\"clear: both;\">\r\n<div style=\"clear: both;\">\r\n<div style=\"clear: both;\">\r\n<p>Retailers can configure an order to be paid by credit/debit/gift card via an email link or QR code.&nbsp; &nbsp;Instead of the customer swiping/tapping/inserting their card at the payment terminal, they can opt to have a link sent&nbsp;to them via email or scan a QR code at the POS terminal to access the payment link.</p>\r\n\r\n<p>To do this, the retailer must first configure the Pay By Link as described in <a hqid=\"2017949\" href=\"/pospayment-configuration$pblconfig\">POS Payment Configuration.</a></p>\r\n\r\n<p>Pay By Link&nbsp;Workflow diagram</p>\r\n\r\n<p><img height=\"1316\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/qu/4029/PayByLink-2.jpg?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL3F1LzQwMjkvUGF5QnlMaW5rLTIuanBnIiwiQ29uZGl0aW9uIjp7IkRhdGVMZXNzVGhhbiI6eyJBV1M6RXBvY2hUaW1lIjoxNzU0NzUyMDcwfX19XX0_&Signature=LMFvcK6fERIBaK2Jov86fqEBbdiICUSab9Yn2rq-Y4mcf-4hsuRMyvsC1PmYpHbvQ0y3NHPRzQkd2idqdvvgBHrMuPLtsNVRpEbeL4DKCEgmfoV8~YFiIU-KnrsV0-P~cx30powZ~9dptNqABn4nnsE3DrfSMk33y~mQrzqjk4954THhiZmG9A8aXts0cKlbJiLMCLezF~Xa7BUJ5bUglO7luTQOhSZ5FEnWzRfo1oC7UHB1ZmPXVtkD1fC3WM872Anf-MldwE0sDUj6m7GG0gOikQU44iWCE4EaCrsnpaD1sQutp6nyFC6RubRN0yw2rw3yXwO6p4jHS-KE3qhCEA__&Key-Pair-Id=K2TK3EG287XSFC\" style=\"width: 709px; height: 910px;\" width=\"1024\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<div data-attachmentid=\"25493832\" data-ceoid=\"14942610\" data-edit=\"/wiki/plugins/gliffy/editor.action?inline=false&pageId=15795355&name=Payment Gateway Integration&attachmentId=25493832&ceoid=14942610&key=OP&lastPage=%2Fpages%2Fviewpage.action%3FpageId%3D15795355\" data-filename=\"Payment Gateway Integration\" data-full=\"/wiki/plugins/gliffy/viewer.action?inline=false&pageId=15795355&attachmentId=25493832&name=Payment Gateway Integration&ceoid=14942610&key=OP&lastPage=%2Fpages%2Fviewpage.action%3FpageId%3D15795355\" data-fullwidth=\"824\" data-hasbody=\"false\" data-islinked=\"true\" data-macro-name=\"gliffy\" data-pageid=\"15795355\" data-version=\"0\" id=\"gliffy-container-25493832-2293\">\r\n<div class=\"info\" data-renderer-start-pos=\"2764\"><strong>Note</strong>: Pay by Link by SMS/Text is not currently supported out of base POS.&nbsp; This would require further integration with a provider - for example, Twilio.&nbsp; Base deployments should use the &quot;hide&quot; metadata extension provided to hide the SMS option on the Order Summary screen, as it is not relevant at this time.</div>\r\n\r\n<p data-renderer-start-pos=\"2764\">When an associate selects &ldquo;Pay By Link&quot;, the options for how to send the link (email, QR CODE) will be displayed based upon configuration through extensions.&nbsp; Providing an email&nbsp; was previously entered in the transaction, it will be prepopulated for Pay By Link.&nbsp; &nbsp;The opt-in preferences of the customer will not be checked for Pay By Link (i.e. if the customer opted out of email but asked to pay by link via email, the link will be sent via email).&nbsp;&nbsp;&nbsp;All current POS error checking for email will be utilized.</p>\r\n\r\n<p data-renderer-start-pos=\"2764\">Once a valid email&nbsp; is entered, the associate will select the &ldquo;Send Link&rdquo; option.&nbsp; After the QR Code is scanned or the email&nbsp;is sent,&nbsp;the associate will advance to the &ldquo;Waiting for Customer&rdquo; screen with the email displayed.&nbsp; The associate can cancel out&nbsp;and return to the Order Summary screen (if the payment has not yet been approved) or&nbsp;check the status of the payment.&nbsp; Providing the payment is approved, the associate will advance to the receipt screen.&nbsp; If the payment was not approved, the associate will be informed to wait and recheck the status.&nbsp; If the payment failed&nbsp;(i.e. gateway timeout),&nbsp;an error message will be displayed to the user that the payment will be cancelled and the transaction will be abandoned.&nbsp;</p>\r\n\r\n<p data-renderer-start-pos=\"2900\">Pay By Link will be for positive totals only (in store, send sale, BOPIS, Ship to address) and uneditable for the entire amount due.</p>\r\n\r\n<p data-renderer-start-pos=\"2900\">&nbsp;</p>\r\n</div>\r\n\r\n<h5><a name=\"user-input-forms\" id=\"user-input-forms\"></a>User Input Forms</h5>\r\n\r\n<p>User input forms can be created to capture additional payment attributes for various tenders.&nbsp; Retailers can configure the fields per form, as well as the field sequence, form input method (Keyboard, Scanner and so on), and the form displays sequence for more than one form to be created for a tender.&nbsp; Additionally, forms have context for sales vs returns.&nbsp;</p>\r\n\r\n<p>See the flow below.&nbsp; User Input forms are only available&nbsp;for non-cash tenders for which Auth through Terminal is False.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img height=\"936\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/image(96).png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL2ltYWdlKDk2KS5wbmciLCJDb25kaXRpb24iOnsiRGF0ZUxlc3NUaGFuIjp7IkFXUzpFcG9jaFRpbWUiOjE3NTQ3NTIwNzB9fX1dfQ__&Signature=Z9qJ0mPLCInkXDtzcl6r6FRAyqCLoknsmnrH9e-AvT1Fwi7Jppi3~D68vxaiTClHNwEOr6prfrBwOKQwWuQ9S4w3SIW8vGgQni0s77A2vLN26RysRRiDodogyS9dmPuNO7RUvRl9jRzBleULdN3JhSGuiNuKzLN4~gneGQmdx91QbsSuEzvtsFCa6qDbSQu4MPqVFKWdLTC46GgjsIOH2-3soN7phpHiVHgiuaCw23hHUbQY70-sXHLmYWVqTTp6yXal-yeXcp-uB-Fd2TS--ryCsHVUwmNaD9ujyk6GMNIwYp2mZjf7FrrzGaXQGmDvcQ~SHr0VubwuE9okopY5-w__&Key-Pair-Id=K2TK3EG287XSFC\" width=\"646\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h5><a name=\"tender-franking\" id=\"tender-franking\"></a>Tender Franking</h5>\r\n\r\n<p>Retailers can configure endorsements to be franked on the back of any tender.&nbsp; To do this, they must first configure the tender to frank on redemption, and then configure the data to be franked at the time the tender is selected. For additional details, please refer to <a href=\"https://omni.helpdocsonline.com/pos-payment-config\">POS Payment Configuration</a>.</p>\r\n\r\n<p>For each tender selected, the frank occurs after any required input data has been captured.&nbsp; If no input data is required, then the frank will occur once the user presses Complete Payment.&nbsp;</p>\r\n\r\n<p><img height=\"795\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/image(134).png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL2ltYWdlKDEzNCkucG5nIiwiQ29uZGl0aW9uIjp7IkRhdGVMZXNzVGhhbiI6eyJBV1M6RXBvY2hUaW1lIjoxNzU0NzUyMDcwfX19XX0_&Signature=S-mxWM0jpM5QO0MTPZKzpgiFjGxhusJD8z21QAkM2gKe2TlPIGYKxjebhQmGtRin-nWPkN6Fom4ka9uI4I1fPGxdKxCGNdmlYJjBAuR3yH3Ewca8wIHyzkXT5Cbl2v0HryV7CMrZrhzNOVT-etphUtIO-d0gxzXey~rlB6nzcjX28Rcr7OT4Y1GLZ9zbxuCEk~KjddmHMf4tinGifsEXvWHs9Dbg2UIM05NPObH71ftffJMGqO0bxckwE2d1ILQYPq2zkfsLLndzQPuWaX6kdpV6lbEZWRZB5cFF2FiXdpmmW-HG~hpHHHAgYvGc6Subsl7vTC2WaPF8ku-8uUtNeg__&Key-Pair-Id=K2TK3EG287XSFC\" width=\"875\" /></p>\r\n\r\n<div class=\"tip\"><strong>Note</strong>: Franking is only supported in portrait mode.&nbsp; For example: User will need to remove personal check once MICR has been successfully read, and re-insert face down into the printer.</div>\r\n\r\n<div class=\"warning\"><strong>Important</strong>: Currently tender franking can only be used on a windows machine with the Epson TM-6000IV printer.</div>\r\n\r\n<h4><a name=\"sharing-payment-terminals-between-mobile-registers-delay-payment-terminal-session\" id=\"sharing-payment-terminals-between-mobile-registers-delay-payment-terminal-session\"></a>Sharing Payment Terminals between Mobile Registers - Delay Payment Terminal Session</h4>\r\n\r\n<p>Retailers can configure mobile registers (only) to establish a session with a payment terminal at the time of payment, instead of at the beginning of an order.&nbsp; This allows for multiple registers to share&nbsp;a single payment terminal, and also allows users to easily switch to a different terminal as needed. When this feature is enabled, the payment terminal will no longer act as a line item display.&nbsp; To enable this capability, posStoreConfig&gt;storeCommonConfig&gt;delayPTSessionTillPayment should be set to TRUE.</p>\r\n\r\n<p>When configured, the connected payment terminal will be displayed in the screen header of the Cart and Order Summary.&nbsp; If no terminal is connected, the display will show N/A.&nbsp; With the correct permissions, users can tap the payment terminal info, and a popup will appear. With this popup, users can select from a list of pre-configured terminals for the store.&nbsp; If paring to the terminal is required, the user will then be prompted to do so, else this will act as a selection.&nbsp; Once selected, the newly connected terminal will display in the screen header.&nbsp; Additionally, the terminal in the POS Settings screen will be updated and will persist until the terminal is again changed, either in the header or settings screen.</p>\r\n\r\n<p>The session for the device will not begin until the following:</p>\r\n\r\n<ul>\r\n\t<li>User selects a tender on Order Summary which requires the terminal to collect data or to process (credit, debit, gift card, etc.)</li>\r\n\t<li>User selects to issue or reload a gift card from the Cart</li>\r\n\t<li>User selects a &quot;from&quot; exchange tender which requires a payment terminal</li>\r\n</ul>\r\n\r\n<p>If a session is started in the Cart, due to a gift card activate or reload,&nbsp; where &quot;Activate Gift Card in Cart&quot; is true, the session will not end until the transaction is complete. The same will hold true for Exchange tenders where the &quot;from&quot; tender requires the payment terminal. If a partial payment has been made which established a session, the session will not be released until the user voids the partial payment and either returns to the Cart or completes the transaction.</p>\r\n\r\n<p>A register will not be able to engage an associated&nbsp;payment terminal while the terminal is actively engaged with another register,&nbsp;but can do so after the session is terminated.</p>\r\n\r\n<p>If another user attempts to establish a session with a payment terminal that is currently&nbsp;engaged, they will be notified and can try again once the other register has completed its transaction, or they can again go into the payment terminal popup to switch to another payment device.</p>\r\n\r\n<p>The session release will occur after the receipt has been printed or emailed, and the terminal will then become available for the next transaction.</p>\r\n\r\n<div class=\"tip\">Note: This feature is for mobile register type only. Fixed terminals will continue to start the session upon order initiation and will continue to be used for line display of items.</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4><a name=\"exchange-tender-et-transactions\" id=\"exchange-tender-et-transactions\"></a>Exchange Tender (ET) Transactions</h4>\r\n\r\n<p>Exchange tender in Active Store solution offers the retailers to&nbsp;accept a&nbsp;tender&nbsp;and refund the customer with another&nbsp;tender. Both the tenders i.e. the tender exchanged and the list of available refunded tender&nbsp;are configurable. The exchange refunded will be the same amount the tender is worth or the customer is charged on the tender to be exchanged.&nbsp;Exchange tender cannot be done partially and is always done for the full amount&nbsp;available on the tender to be exchanged.&nbsp;</p>\r\n\r\n<p>Exchange tender is a separate transaction by itself and cannot be combined in any existing sale/return/gift card/backoffice transactions. This feature is controlled by a specific UI grant,&nbsp;&quot;ui::posservice::exchangetender&quot;.&nbsp; Users with grant can perform this transaction else the menu option is not available. Every&nbsp;such transaction allows multiples of a single tender type to be&nbsp;exchanged. A typical&nbsp;exchange tender flow&nbsp;is mentioned below:</p>\r\n\r\n<ul>\r\n\t<li>Select EXCHANGE TENDER function.&nbsp; Application generates a unique exchange tender transaction ID when Exchange Tender option is selected.</li>\r\n\t<li>Select the type of tender to be exchanged. (This is dependent&nbsp;on the configuration;&nbsp;only applicable tenders can be exchanged).</li>\r\n\t<li>Accept the tenders to be exchanged and get the balance available on this tender&nbsp;from either third-party or from payware or based on the user input configurations.</li>\r\n\t<li>The maximum amount&nbsp;allowed to be exchanged is based on configuration. Any amount above this is not allowed.</li>\r\n\t<li>Charge/settle the full funds from the tender to be exchanged. (Partial processing of funds is not supported.)</li>\r\n\t<li>Get the list of eligible refund tenders.&nbsp;This is the list of tender types to which the amounts get&nbsp;refunded to.</li>\r\n\t<li>Select the refund tender and enter the amount to be refund and process the refund.</li>\r\n\t<li>Refund can be split across different tender types.</li>\r\n\t<li>If any of the tender types requires to be placed in/out of&nbsp;cash drawer, then cash drawer opens when the refund balance=0.</li>\r\n</ul>\r\n\r\n<p>Exchange tender does not support below features:</p>\r\n\r\n<ul>\r\n\t<li>A completed Exchange tender transaction&nbsp;cannot be post voided.</li>\r\n\t<li>Exchange tender transaction is not eligible to be returned.</li>\r\n\t<li>Exchange tender transactions cannot be suspended.</li>\r\n\t<li>Tenders with no balance is not eligible for exchange and is not accepted on UI as valid tender.</li>\r\n\t<li>Different types of tenders cannot be exchanged under the same exchange tender transaction.</li>\r\n\t<li>Partial amount exchange&nbsp;of any tender is not supported.&nbsp;</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h5><a name=\"et-workflow-diagram\" id=\"et-workflow-diagram\"></a>ET Workflow diagram</h5>\r\n\r\n<p><img alt=\"\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/ExchangeTender2.png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL0V4Y2hhbmdlVGVuZGVyMi5wbmciLCJDb25kaXRpb24iOnsiRGF0ZUxlc3NUaGFuIjp7IkFXUzpFcG9jaFRpbWUiOjE3NTQ3NTIwNzB9fX1dfQ__&Signature=XHzqBrKIeMr5kmFmCx2lFzrIlL3iJqRtYucqWZtsD-0qYwVrPHZ1L1Sa-FVTXHQxoU6qiNA72VDLhIE2ZsaP4q3XnQ5ahxz8B7GpN0b353oIgA10-EFo83RYQoM5g~O4STkp1dnYz4vkoWOCZWGjsicR3-ssFktkmVkWGhweUBoab5KpuZe9O3fOUqrwEo7v3Q8~TxURzjy7Vx6oBTYPWETcaOk9GbfcJ4~flQcxZcv~ZKjgsGNWRqv1x9ZjNGjVXkjgCqm4F8Or1mgFRIFi4B9mHi2JS4a1n-xdqjp6KS-XvH716EhuPfFQZ7-ELYWWgy2Ke8fRwKN4KrECOyl-Og__&Key-Pair-Id=K2TK3EG287XSFC\" style=\"width: 1046px; height: 1190px;\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>If a transaction ID was generated incorrectly or&nbsp;by accident, then the&nbsp;exchange tender transaction can&nbsp;be voided.&nbsp; If a tender is added to transaction and customers wants to remove, it can be selected and voided from the transaction&nbsp;before charging funds from the tenders.</p>\r\n\r\n<h5><a name=\"et-associating-a-customer\" id=\"et-associating-a-customer\"></a>ET - Associating a customer</h5>\r\n\r\n<p>Exchange tender transaction can be linked to a customer. After generating the exchange tender transaction ID, associates can use &quot;Tap to Apply&quot; option on the header and search for a customer&nbsp;and activate to link the customer to this transaction. Once any customer is linked it cannot be modified further to change to another customer.</p>\r\n\r\n<h5><a name=\"et-charging-nbsp-the-tender-to-be-nbsp-exchanged\" id=\"et-charging-nbsp-the-tender-to-be-nbsp-exchanged\"></a>ET - Charging&nbsp;the tender to be&nbsp;exchanged</h5>\r\n\r\n<p>When all the tenders to be exchanged are added in the exchange tender screen, user can click on Proceed. On clicking proceed, each tender is picked one at a time&nbsp;in the order in which they were added for charging.&nbsp; The removal of refunds is the amount available on the tenders and this will create a settlement records for every tender added on the payment component.</p>\r\n\r\n<p><strong>Error handling</strong>: If the only tender which is to be exchanged&nbsp;fails and retailer is not able to remove funds then app will error out and associate cannot proceed, then the associate either needs to retry or void this tender/transaction.&nbsp;Else if some amount of the tender&nbsp;to be&nbsp;exchanged fails and there is still some positive amount that was removed from the tender and needs to be refunded, then the associate will be&nbsp;proceeded to the Summary screen to allow the refund.</p>\r\n\r\n<h5><a name=\"et-payback-process\" id=\"et-payback-process\"></a>ET - Payback process</h5>\r\n\r\n<p>Based on the configuration, only selected tender is eligible as refund tender. And each tender has a maximum&nbsp;amount. Any amount above maximum limit is not allowed to be refunded for a selected refund tender. User can choose to split the refund across multiple tenders based on the configuration.</p>\r\n\r\n<p><strong>Handling cash drawer and till updates</strong>: If any refund tender requires engaging a&nbsp;cash drawer (config, popCashDrawer=TRUE),&nbsp;then cash drawer is opened and funds are removed from the cash drawer and closed. Till is also updated in the backoffice for the specific amount drawn from the till.</p>\r\n\r\n<p>If the tender which is&nbsp;to be exchanged&nbsp;requires&nbsp;engaging a cash drawer, then&nbsp;cash drawer is opened and funds&nbsp;are inserted into the cash drawer and closed.&nbsp;Till is also updated in the backoffice for the specific amount inserted into the till.</p>\r\n\r\n<p>If the tender which is&nbsp;to be exchanged does not require&nbsp;engaging a cash drawer but requires only till updates i.e. includeDrawerCount = TRUE, then&nbsp;cash drawer is not engaged but funds&nbsp;are&nbsp;inserted&nbsp;into the cash drawer. Only till updates are performed&nbsp;in&nbsp;the backoffice for the specific amount&nbsp;inserted&nbsp;into&nbsp;the till.</p>\r\n\r\n<h5><a name=\"et-receipt-and-reprint\" id=\"et-receipt-and-reprint\"></a>ET - Receipt and Reprint</h5>\r\n\r\n<p>Once all the amount is refunded and the balance to be refunded = 0, then the application navigates to the receipt screen. User can choose to print or email the exchange tender transaction.&nbsp;</p>\r\n\r\n<p>The receipt contains list of tenders from where the funds are transferred to&nbsp;with the amount details and the list of tenders to which the funds are transferred along the amount details.</p>\r\n\r\n<div class=\"tip\"><strong>Note</strong>: Reprinting of an exchange tender transaction is supported using reprint last transaction or from the customer purchase history screen.</div>\r\n\r\n<div class=\"tip\">\r\n<p class=\"auto-cursor-target\"><strong>Note</strong>:</p>\r\n\r\n<ul>\r\n\t<li class=\"auto-cursor-target\">If &quot;Capture customer Info&quot; or &quot;Capture Cust Id&quot; is turned ON for specific tender, then for Exchange Tender scenario we will skip these screens as it is not applicable.</li>\r\n\t<li class=\"auto-cursor-target\">Exchange Tender transaction are all non-taxable.</li>\r\n</ul>\r\n</div>\r\n\r\n<div>\r\n<h4><a name=\"gift-card-cash-out\" id=\"gift-card-cash-out\"></a>Gift card Cash out</h4>\r\n\r\n<div style=\"clear: both;\">\r\n<p>When gift card is used to tender a transaction and its remaining balance goes very low, retailer can provide the ability to cash this out.&nbsp; By this, the customer does not have to carry gift card with low balance on it.&nbsp; This also reduces the number of active gift cards the retailer must maintain.&nbsp; In case there is any balance to be satisfied, system tries to apply the remaining gift card amount towards this and rest gets cashed out.&nbsp; The balance amount which is eligible for cash out is configurable under payCaptureConfig.CashOutThreshold.&nbsp;GC cashout always returns money to customer in the form of Cash. Its not configurable.</p>\r\n\r\n<p>Once tendered, system validates the remaining balance with the threshold defined.&nbsp; If it has reached the eligible balance, prompts the option to cash out.&nbsp; If the customer chooses to, the balance amount is settled and gets utilized towards the remaining balance to be satisfied or cash out.&nbsp;</p>\r\n\r\n<p>Example: The threshold limit is set to 5.00.&nbsp; Customer uses a Gift card with 100.00 balance,&nbsp;pays 98.00, Order balance due=98.00.&nbsp; With this, the balance remaining is 2 which is eligible for cash out.&nbsp; If customer chooses the cash out option, 2.00 cash is handed over.&nbsp;&nbsp;</p>\r\n\r\n<div class=\"warning\">Gift card cash out is applicable to &quot;Gift Card&quot; payment type and to &quot;Store/merchadise credit&quot; but not applicable to any other payment type.</div>\r\n\r\n<h3><a name=\"payment-hardening-and-failure-handling\" id=\"payment-hardening-and-failure-handling\"></a>Payment Hardening and Failure Handling</h3>\r\n\r\n<p>Especially for payment types such as Credit, Debit, or Gift Cards which require authorization via a payment terminal and payment gateway, there can be scenarios during the day in a store, where transactions can be abandoned during a payment capture process due to various reasons such as (battery drain, network issues, gateway error etc) and thus the response from payment gateway is not captured on Manhattan Active solution.&nbsp; Depending on the failure, in these cases the user may able to attempt payment with another tender, but sometimes the&nbsp;transaction must be abandoned.&nbsp; If the customer has started interaction with the payment terminal prior to the network, device, or gateway failure, in such scenarios application would not know if the customer was charged on the gateway to start any process of reverting the payment.</p>\r\n\r\n<p>This problem will be systematically handled by capturing the&nbsp;payment request as logs before making the call to gateway and subsequently calls.&nbsp;When there are any discrepancies, the logs can be queried for all unconfirmed payments&nbsp;and checked with the gateway for any delta for reconciliation.</p>\r\n\r\n<p><img height=\"888\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/Screen%20Shot%202018-09-21%20at%203_16_42%20PM.png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL1NjcmVlbiUyMFNob3QlMjAyMDE4LTA5LTIxJTIwYXQlMjAzXzE2XzQyJTIwUE0ucG5nIiwiQ29uZGl0aW9uIjp7IkRhdGVMZXNzVGhhbiI6eyJBV1M6RXBvY2hUaW1lIjoxNzU0NzUyMDcwfX19XX0_&Signature=AFXDtbB3~xUdOkGeuMjYniEP8LFKiH0Is~JPL0GeCmf5cz5oHopNMSLJV7N3fzcVINjVDQjPoiGvGm5eBJKm6qJC1qgvwcfgaaqY3zKreNb3kkrSll6EQlYX9LMvSGbuChmaFkjU-ROpOxRvSNbIUfiXHybWvqrUQqHvBZw9750482Hrhk8odTwa0r~IX1kYbPhj90QL9NAVxwsdHWSTR7yj2PnXLJ19~ZZHbHegzwcFFiJ~IgpB6Xz3qUxKIelq~kcjhbaS06G7Ak8T5~9X-AOqvzTdJjfSkaRPu4Z9a1RhizTmWyRp1ot8zTn7jXYsu27a2FsLJUB53WaY6QymJw__&Key-Pair-Id=K2TK3EG287XSFC\" style=\"width: 767px; height: 335px;\" width=\"2198\" /></p>\r\n\r\n<h4><a name=\"requestlogs-uniqueid\" id=\"requestlogs-uniqueid\"></a><strong>RequestLogs/UniqueId</strong></h4>\r\n\r\n<p><strong>&nbsp;</strong>As mentioned above all payment request needs to be save before placing the call to payment gateway&nbsp;or Manhattan Active solution. The needs to be logs are saved at every touch point with the gateway and payment component. Please refer the above workflows for various touch points.&nbsp;Also check below the life cycle of the requestLog for any payment transaction.</p>\r\n\r\n<ol>\r\n\t<li>Create an&nbsp;uniqueId, well known as referenceId which needs to be saved on requestLogs entity and same id is sent as part of all payment request to the gateway and to payment transaction on cloud server. UniqueId is required to identify the payment on gateway and map that with the payment transaction on cloud server. This mapping will help to find the&nbsp;discrepancies for further reconciliation.</li>\r\n\t<li>Before making a call to MX terminal - Create requestLogs&nbsp;data in &quot;Created&quot; status along with uniqueId and payment request to be sent to gateway.</li>\r\n\t<li>If MX terminal is used flag, processThroughTerminal = TRUE, and if 3rd party application is used, then flag processThroughThirdParty = TRUE while saving the data to&nbsp;requestLogs.</li>\r\n\t<li>After successful&nbsp;response from gateway - Save the response from gateway for the same uniqueId for which the request was sent and update the status as &quot;Processed&quot;.</li>\r\n\t<li>Use this uniqueId from gateway and create request to save this uniqueId as paymentTransactionId on&nbsp;Manhattan Active solution (payment component). (For example: AddTender API)</li>\r\n\t<li>After successful response from Manhattan Active solution (payment component), save the response on requestLogs as &quot;Completed&quot;.</li>\r\n</ol>\r\n\r\n<div class=\"tip\"><strong>Note</strong>: The base mapping to save gateway response on&nbsp;Manhattan Active solution (payment component) is with respect to &quot;Payware connect&quot;, if retailers are using other gateway then&nbsp;refer&nbsp;user exits documentation to handle mapping to save the payment transaction.</div>\r\n\r\n<div class=\"tip\"><strong>Note</strong>:&nbsp;The plugin changes will also be required to create payment request and send&nbsp;uniqueId&nbsp;as part of referenceId or additional attribute that gateway provides,&nbsp;if&nbsp;retailers are using other gateway other than&nbsp;&quot;Payware connect&quot;.</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4><a name=\"hardening-workflow\" id=\"hardening-workflow\"></a><strong>Hardening workflow</strong></h4>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/Transaction%20Workflow.png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL1RyYW5zYWN0aW9uJTIwV29ya2Zsb3cucG5nIiwiQ29uZGl0aW9uIjp7IkRhdGVMZXNzVGhhbiI6eyJBV1M6RXBvY2hUaW1lIjoxNzU0NzUyMDcwfX19XX0_&Signature=jkkwliGfUitznKLLxeNRQWH75Q4R299SnMrkAFZEQxepJazeKDGfP9hR3E5MQIoxekYJWwH9YMzZuT074HGBVZDmGTPy9WVN0yjzOe2hTxjuQvoRT4LQqFsNCTN1M3khG7r2oQG29w1dnA8s8L2pyTVYjEFtO0vxnnzb-9PDmd4MOj3n0wD~9OyJOs8-9TShjALwbczw75C3V-S-jTxJB61rnG4mWWWJEluTUB7mrYQoDdXsPi7GHhyuKCmU458XIo3DQdqO6nET29dyfA4J2f1kJWB31F3NJTK5UHsvO55k0hW1UiKRzYPNvTH8dzETEwQJAlK5kc-XXCPA61kWfQ__&Key-Pair-Id=K2TK3EG287XSFC\" style=\"width: 1311px; height: 923px;\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4><a name=\"handling-communication-error\" id=\"handling-communication-error\"></a><strong><a id=\"payfailhandling\" name=\"payfailhandling\"></a>Handling Communication error</strong></h4>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>There can be communication errors from the payment terminal device, the gateway or from the Manhattan&nbsp;Active solution (Payment Component) which need&nbsp;to be handled in our application.&nbsp;&nbsp;When such a&nbsp;communication error occurs, the application will perform a get call to gateway or to the payment component 3 times to get the status. Please check below on the possible outcomes if all three attempts fail.</p>\r\n\r\n<p>MAO POS has recently developed an improved failure handling process that will result in fewer abandoned transactions and more flexible options for the user.&nbsp;&nbsp;</p>\r\n\r\n<div class=\"tip\">Note: The improved Failure Handling is controlled by Change in Behavior &quot;POS Payment Failure Handling&quot;.&nbsp;</div>\r\n\r\n<ul>\r\n\t<li>See the <a hqid=\"3092761\" href=\"/behaviorchange\">Behavior Change</a> documentation.\r\n\r\n\t<ul>\r\n\t\t<li>The new Failure Handling&nbsp;process will be enabled for any new customer environments created&nbsp;after Release 23.1.&nbsp;</li>\r\n\t\t<li>It will not be immediately enabled for existing customer environments.&nbsp; Existing customers <strong>may enable</strong> the new process after Release 23.1 and should do so in testing environments.</li>\r\n\t\t<li>It <strong>will be automatically enabled for them</strong> by the end of 2023.</li>\r\n\t\t<li>The legacy process will be deprecated and no longer available as an option by 30-Dec 2023.&nbsp;&nbsp;</li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<h5><a name=\"prior-to-release-23-1-legacy-comm-failure-handling-nbsp\" id=\"prior-to-release-23-1-legacy-comm-failure-handling-nbsp\"></a><strong>Prior to Release 23.1- Legacy Comm failure handling&nbsp;</strong></h5>\r\n\r\n<ol>\r\n\t<li>Error from gateway - if get call = found, and update&nbsp;requestLogs&nbsp;as &quot;Processed&quot; and move forward to confirm the order or partial payment.</li>\r\n\t<li>Error from gateway - if get call = not found, go back to summary screen&nbsp;and update requestLogs&nbsp;as &quot;Reconciled&quot; so that they are not considered durng EOD Payment&nbsp;reconciliation.\r\n\t<ol>\r\n\t\t<li>If the request had failed, this logic is appropriate.</li>\r\n\t\t<li>If the request had succeeded, this is a logical gap.&nbsp;\r\n\t\t<ol>\r\n\t\t\t<li>Associate must request customer to pay again, however, the not found but &#39;reconciled&#39; payment record may cause duplicate charges.</li>\r\n\t\t</ol>\r\n\t\t</li>\r\n\t</ol>\r\n\t</li>\r\n\t<li>Error from gateway - if get call receives communication error (no response).\r\n\t<ul>\r\n\t\t<li>Request log is created with status&nbsp;CREATED.</li>\r\n\t\t<li>No payment transaction is created.</li>\r\n\t\t<li>Abort&nbsp;the Order transaction, return user to empty cart.</li>\r\n\t\t<li>At end of day, payment&nbsp;reconciliation process will query the gateway and cleanup the data by creating and canceling (if needed) a payment transaction for the one that couldn&#39;t be created at transaction time -other cleanup may occur if payment not found in gateway at all, etc.</li>\r\n\t</ul>\r\n\t</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Legacy Workflow</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/Error%20Handler.png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL0Vycm9yJTIwSGFuZGxlci5wbmciLCJDb25kaXRpb24iOnsiRGF0ZUxlc3NUaGFuIjp7IkFXUzpFcG9jaFRpbWUiOjE3NTQ3NTIwNzB9fX1dfQ__&Signature=UP2EWpPTl6hsUJWpnb6M2VUj6gX3e2Oj2Rnp2xtldpnoCQTfPPNf1SzCTQAthBBVNj0F3FtjZLWaoAPfAgjkIt11mNfIrFzRotNGzjOxZOqVKuaJShl8aV6Vl1h6CMoTKbLl4UTTmdtEq166DWP2nwGKEdjFM7yWPGqSiIcgLrPtixfnQt2OPx15zu3JspOCqo-oKWoOyqq9BXngZq4FA7FImSCL8ubnZPBDp8nQLZv8172HfQAE3Yyawa5kE8PQMW9ZTUAzzvKeFaogfG7qHpgdV6ecC89O296ZDcQ0fL2c5WM7B4w506cVNEi9vcHEG6K~ObACfVpVINgzkDFdAw__&Key-Pair-Id=K2TK3EG287XSFC\" style=\"width: 927px; height: 700px;\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h5><a name=\"following-nbsp-release-23-1-flexible-comm-failure-handling\" id=\"following-nbsp-release-23-1-flexible-comm-failure-handling\"></a><strong>Following&nbsp;Release 23.1- Flexible Comm failure handling</strong></h5>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n\t<li>Error from gateway - if get call = found, and update&nbsp;requestLogs&nbsp;as &quot;Processed&quot; and move forward to confirm the order or partial payment, as appropriate.</li>\r\n</ol>\r\n\r\n<ol>\r\n\t<li>Error from gateway - if get call = not found, go back to summary screen.&nbsp; <strong>With new functionality do NOT update requestLogs&nbsp;as &quot;Reconciled&quot;.&nbsp;&nbsp;</strong>\r\n\r\n\t<ol>\r\n\t\t<li><strong>Since logs are left unreconciled (&quot;Created&quot;) they will be cleaned up as part of EOD Payment reconciliation.</strong></li>\r\n\t\t<li><strong>&nbsp;Allow user to try same or alternate payment method again</strong></li>\r\n\t</ol>\r\n\t</li>\r\n\t<li>Error from gateway - if get call receives communication error (no response), <strong>the new flow is the same as &quot;not found&quot; above.</strong>\r\n\t<ol>\r\n\t\t<li><strong>Leave logs unreconciled</strong>\r\n\t\t<ol>\r\n\t\t\t<li><strong>Since logs are left unreconciled (&quot;Created&quot;) they will be cleaned up as part of EOD Payment reconciliation.</strong></li>\r\n\t\t</ol>\r\n\t\t</li>\r\n\t\t<li><strong>&nbsp;Allow user to try same or alternate payment method again</strong></li>\r\n\t</ol>\r\n\t</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img height=\"772\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/qu/9281/PayFailFlow.png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL3F1LzkyODEvUGF5RmFpbEZsb3cucG5nIiwiQ29uZGl0aW9uIjp7IkRhdGVMZXNzVGhhbiI6eyJBV1M6RXBvY2hUaW1lIjoxNzU0NzUyMDcwfX19XX0_&Signature=glg3PDQs9NG7pOtKNDdjBUZ23NH7GoMdPP4t3wi6RE5tbii8ObuP9gC1tPKgodnWRyAVPu2lj-OXJVwlKRF-tSyaaiNVzYYSzJBS3flLJUsrwtjZR9EsMs~TfMukyDp9Ad63t42Og2jp5gAvpXSohPeUf1q8z8SyI6tJU4dDVcbTeIdaAR8f-xLLv-fpmDfFCKBwDc21L3eyOu847Q9qAeXcIbZSv7wlFI2lKWUIAmsmMEyCXTx0QxS4cXDXu7umX1yOBBAtGAsvH-ogGqByACG2Yd58iN2fr~T8mOBSsBnL2GM9DSEsiXuczgLqNSG6jlp1RTfWwPl16ZGUIyDn3Q__&Key-Pair-Id=K2TK3EG287XSFC\" width=\"1024\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><a name=\"payment-reconciliation\" id=\"payment-reconciliation\"></a>Payment Reconciliation</h3>\r\n\r\n<div style=\"clear: both;\">\r\n<div style=\"clear: both;\">\r\n<p>Payment reconciliation is a process of correcting the erroneous payment transaction with the payment gateway, the error can be when&nbsp;payware or payment component&nbsp;response resulted in communication error and where payment has gone through the point gateway but not saved on our payment component because of error in response from payware. The requestLogs data for such payment transaction will be in &quot;created&quot; or &quot;processed&quot; status,&nbsp;Such data is picked&nbsp;to revisit these transactions on gateway by performing a transsearch api call using the&nbsp;invoice # and check if these transaction made to payment, if not then capture payment component for&nbsp;reversal with point gateway.</p>\r\n\r\n<p><strong>Fetch gateway token for SAF transactions:</strong>&nbsp;The first step in Payment reconciliation is to fetch gateway if there were any store and forward transaction processed during the day. Please check below steps.</p>\r\n\r\n<ol>\r\n\t<li>Find all SAF transactions without gateway token.</li>\r\n\t<li>Check the reconciliation retry limit (pos general config &gt; reconciliationRetryLimit)&nbsp;, if the saf transaction has not reached the retry limit (everify the latest limit on reconciliationLogs) then pick this transaction for SAF reconciliation.</li>\r\n\t<li>Place a transsearch api call using invoice# and on successful&nbsp;response from the gateway, save the response of gateway token on&nbsp;requestLogs and payment component.</li>\r\n\t<li>Update reconciliationlogs for the SAF reconciliation attempt.</li>\r\n\t<li>\r\n\t<style type=\"text/css\">p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px 'Helvetica Neue'; color: #454545}\r\n\t</style>\r\n\t<p>If transsearch api call using invoice# and on unsuccessful&nbsp;then update&nbsp;reconciliationLog with a link to parent requestLog ID as&nbsp;[reconciliationType = SAF, numberOfRetry = runningNumber, retryLimit=&nbsp;{fromConfig},&nbsp;reconciliationStatus =Failed, requestData = {sent to gateway},&nbsp;responseData = {received from gateway}]</p>\r\n\t</li>\r\n</ol>\r\n\r\n<div class=\"tip\"><strong>Note</strong>: Milestone job (which run every 2 hours) will not picked abandoned&nbsp;orders&nbsp;in readyForTender = TRUE status.</div>\r\n\r\n<h4 class=\"auto-cursor-target\" id=\"PaymentTransactionReconciliation-WorkFlowofpaymentreconciliation\" style=\"margin: 20px 0px 0px; padding: 0px; color: rgb(51, 51, 51); font-size: 14px; font-weight: 700; line-height: 1.42857; font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Roboto, &quot;Noto Sans&quot;, Ubuntu, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;\"><a name=\"work-flow-of-payment-reconciliation\" id=\"work-flow-of-payment-reconciliation\"></a>Work Flow of payment reconciliation</h4>\r\n\r\n<p>Reconciliation process is called within the store close operations and has the follow steps:</p>\r\n\r\n<ol>\r\n\t<li>Perform SAF reconciliation as explained above for below data on requestLogs&nbsp;data&nbsp;and reconciliation retry limit is not reached.\r\n\t<ul>\r\n\t\t<li>SAF# or Voice Auth Present + ( requestLog status =Completed ) + Payment have this uniqued Id i.e. Processed.</li>\r\n\t\t<li>SAF# or Voice Auth Present + ( requestLog status =Processed) + Payment have this uniqued Id i.e. Processed.</li>\r\n\t\t<li>SAF# or Voice Auth Present + ( requestLog status =Created) + Payment does not have this uniqued Id i.e. Created.</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li>Perform the actual reconciliation for all below kind&nbsp;(reconciliation process is explained below).</li>\r\n</ol>\r\n\r\n<ul style=\"margin-left: 80px;\">\r\n\t<li>requestLogs status = Processed,&nbsp;PTT=True, 3rd Party False + Payment processed.</li>\r\n\t<li>requestLogs status = Processed, PTT=False, 3rd party False +Payment processed. (Should be taken care in user exit)</li>\r\n\t<li>requestLog status = Processed + PTT=False, 3rd party TRUE +Payment processed.&nbsp;(Should be taken care in user exit)</li>\r\n\t<li>requestLog status = Created + PTT=True&nbsp;+ Payment NOT processed.</li>\r\n</ul>\r\n\r\n<h5><a name=\"reconciliation-process-outline\" id=\"reconciliation-process-outline\"></a><strong>Reconciliation Process Outline</strong></h5>\r\n\r\n<ol>\r\n\t<li class=\"li1\">Validate if the requestLog status = processed or created.</li>\r\n\t<li class=\"li1\">Then check the PTT flag, if its true</li>\r\n\t<li class=\"li1\">Then, check 3rd party = false, if its false,</li>\r\n\t<li class=\"li1\">Then goto payment component and check if the payment transaction with this unique Id exists. If exists then do below:\r\n\t<ol>\r\n\t\t<li class=\"li1\">Validate Payment transaction status = Closed or Open</li>\r\n\t\t<li class=\"li1\">If Payment transaction status = Open , and&nbsp;mark&nbsp;requestLog status = reconciled.</li>\r\n\t\t<li class=\"li1\">And If not already present update&nbsp;Payment transaction with the CTROUTD, TROUTD and other payment details from the gateway.</li>\r\n\t\t<li>If&nbsp;Payment transaction status = Closed,&nbsp;further&nbsp;mark&nbsp;requestLog status = reconciled</li>\r\n\t\t<li class=\"li1\">Then update reconciliationLog as Passed with other details.</li>\r\n\t</ol>\r\n\t</li>\r\n\t<li class=\"li1\">If does not existing on payment component then perform transsearch&nbsp;api call on gateway using the invoice #</li>\r\n\t<li class=\"li1\">Validate the transsearch&nbsp;response with the payment component for this invoice and find the delta in payment component.</li>\r\n\t<li class=\"li1\">For all the delta, create payment transaction in open status and&nbsp;mark&nbsp;requestLog&nbsp;status = reconciled</li>\r\n\t<li class=\"li1\" style=\"line-height: 22.4px;\">Update&nbsp;reconciliationLog&nbsp;as passed with other details.</li>\r\n</ol>\r\n\r\n<p class=\"li1\" style=\"line-height: 22.4px;\">&nbsp;</p>\r\n\r\n<h3 class=\"li1\" style=\"line-height: 22.4px;\"><a name=\"refresh-payment\" id=\"refresh-payment\"></a><a id=\"refresh\" name=\"refresh\"></a>Refresh Payment</h3>\r\n\r\n<p>Retailers who use non-base&nbsp;pay by link or pay via an external website can add a Refresh option to the Order Summary screen.&nbsp; When the Refresh option is selected, it will go out and obtain the Payment Status.&nbsp; If the payment was approved, the balance due will be decreased accordingly.&nbsp;&nbsp;</p>\r\n\r\n<p>The grant for this function ui::posservice::refreshtender.</p>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<div data-attachmentid=\"25493832\" data-ceoid=\"14942610\" data-edit=\"/wiki/plugins/gliffy/editor.action?inline=false&pageId=15795355&name=Payment Gateway Integration&attachmentId=25493832&ceoid=14942610&key=OP&lastPage=%2Fpages%2Fviewpage.action%3FpageId%3D15795355\" data-filename=\"Payment Gateway Integration\" data-full=\"/wiki/plugins/gliffy/viewer.action?inline=false&pageId=15795355&attachmentId=25493832&name=Payment Gateway Integration&ceoid=14942610&key=OP&lastPage=%2Fpages%2Fviewpage.action%3FpageId%3D15795355\" data-fullwidth=\"824\" data-hasbody=\"false\" data-islinked=\"true\" data-macro-name=\"gliffy\" data-pageid=\"15795355\" data-version=\"0\" id=\"gliffy-container-25493832-2293\">\r\n<h3><a name=\"services\" id=\"services\"></a>Services</h3>\r\n\r\n<p>The following APIs are related&nbsp;to payment.&nbsp;Refer to the API documentation for additional details on&nbsp;each service.</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width: 1213px;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\" style=\"width: 224px;\">Service</th>\r\n\t\t\t<th scope=\"col\" style=\"width: 178px;\">Component</th>\r\n\t\t\t<th scope=\"col\" style=\"width: 300px;\">Group</th>\r\n\t\t\t<th scope=\"col\" style=\"width: 520px;\">Service Endpoint</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 221px;\">Close Invoice</td>\r\n\t\t\t<td style=\"width: 175px;\">Order</td>\r\n\t\t\t<td style=\"width: 297px;\">Order Services</td>\r\n\t\t\t<td style=\"width: 517px;\">/order/api/order/order/orderId/{orderId}/invoiceProcessedAmount</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 221px;\"><span style=\"font-family: &quot;Open Sans&quot;, arial, sans-serif;\">Get Order</span></td>\r\n\t\t\t<td style=\"width: 175px;\">Order</td>\r\n\t\t\t<td style=\"width: 297px;\">Order Services</td>\r\n\t\t\t<td style=\"width: 517px;\"><span style=\"font-family: &quot;Open Sans&quot;, arial, sans-serif;\">/order/api/order/order</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 221px;\">Get Order Value</td>\r\n\t\t\t<td style=\"width: 175px;\">Order</td>\r\n\t\t\t<td style=\"width: 297px;\">Order Services</td>\r\n\t\t\t<td style=\"width: 517px;\">/order/api/order/order/getOrderValue</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 221px;\"><span style=\"font-family: &quot;Open Sans&quot;, arial, sans-serif;\">Get Payment Header</span></td>\r\n\t\t\t<td style=\"width: 175px;\">Payment</td>\r\n\t\t\t<td style=\"width: 297px;\">PaymentHeader&nbsp;Services</td>\r\n\t\t\t<td style=\"width: 517px;\"><span style=\"font-family: &quot;Open Sans&quot;, arial, sans-serif;\">/payment/api/payment/</span>paymentHeader</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 221px;\"><span style=\"font-family: &quot;Open Sans&quot;, arial, sans-serif;\">Get Payment Status</span></td>\r\n\t\t\t<td style=\"width: 175px;\">Payment</td>\r\n\t\t\t<td style=\"width: 297px;\">PaymentStatus Services</td>\r\n\t\t\t<td style=\"width: 517px;\"><span style=\"font-family: &quot;Open Sans&quot;, arial, sans-serif;\">/payment/api/payment/</span>paymentStatus</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 221px;\">Save Payment Header</td>\r\n\t\t\t<td style=\"width: 175px;\"><span style=\"font-family: &quot;Open Sans&quot;, arial, sans-serif;\">Payment</span></td>\r\n\t\t\t<td style=\"width: 297px;\">PaymentHeader<span style=\"font-family: &quot;Open Sans&quot;, arial, sans-serif; background-color: rgb(230, 230, 230);\">&nbsp;Serv</span><span style=\"font-family: &quot;Open Sans&quot;, arial, sans-serif; background-color: rgb(230, 230, 230);\">ice</span><span style=\"font-family: &quot;Open Sans&quot;, arial, sans-serif; background-color: rgb(230, 230, 230);\">s</span></td>\r\n\t\t\t<td style=\"width: 517px;\">/payment/api/payment/paymentHeader/save</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 221px;\">Save Payment Request</td>\r\n\t\t\t<td style=\"width: 175px;\"><span style=\"font-family: &quot;Open Sans&quot;, arial, sans-serif;\">Payment</span></td>\r\n\t\t\t<td style=\"width: 297px;\">PaymentRequest Services</td>\r\n\t\t\t<td style=\"width: 517px;\">/payment/api/payment/paymentRequest/save</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 221px;\">Total Payment Summary</td>\r\n\t\t\t<td style=\"width: 175px;\"><span style=\"font-family: &quot;Open Sans&quot;, arial, sans-serif;\">Payment</span></td>\r\n\t\t\t<td style=\"width: 297px;\">payment-summary-controller</td>\r\n\t\t\t<td style=\"width: 517px;\">/payment/api/payment/paymentSummary/total/orderId/{orderId}</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"margin: 0px; width: 256px;\"><font face=\"Open Sans, Arial, Helvetica, sans-serif\">Exchange Tender Transaction</font></td>\r\n\t\t\t<td style=\"margin: 0px; width: 116px;\"><font face=\"Open Sans, Arial, Helvetica, sans-serif\">posservice</font></td>\r\n\t\t\t<td style=\"margin: 0px; width: 297px;\"><font face=\"Open Sans, Arial, Helvetica, sans-serif\">Order Service</font></td>\r\n\t\t\t<td style=\"margin: 0px; width: 517px;\"><font face=\"Open Sans, Arial, Helvetica, sans-serif\">POST /api/posservice/order/addAttributeToOrder</font></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"margin: 0px; width: 256px;\"><font face=\"Open Sans, Arial, Helvetica, sans-serif\">Transaction void</font></td>\r\n\t\t\t<td style=\"margin: 0px; width: 116px;\"><font face=\"Open Sans, Arial, Helvetica, sans-serif\">posService</font></td>\r\n\t\t\t<td style=\"margin: 0px; width: 297px;\"><font face=\"Open Sans, Arial, Helvetica, sans-serif\">POS Service</font></td>\r\n\t\t\t<td style=\"margin: 0px; width: 517px;\">POST /api/posservice/override/command/transVoid</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"margin: 0px; width: 256px;\"><font face=\"Open Sans, Arial, Helvetica, sans-serif\">Balance Enquiry</font></td>\r\n\t\t\t<td style=\"margin: 0px; width: 116px;\"><font face=\"Open Sans, Arial, Helvetica, sans-serif\">posservice</font></td>\r\n\t\t\t<td style=\"margin: 0px; width: 297px;\"><font face=\"Open Sans, Arial, Helvetica, sans-serif\">Payment Transaction&nbsp;Service</font></td>\r\n\t\t\t<td style=\"margin: 0px; width: 517px;\"><font face=\"Open Sans, Arial, Helvetica, sans-serif\">POST /api/posservice/payment/addGiftItemBalance</font></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"margin: 0px; width: 256px;\">Add Tender</td>\r\n\t\t\t<td style=\"margin: 0px; width: 116px;\">posservice</td>\r\n\t\t\t<td style=\"margin: 0px; width: 297px;\">Payment Header Service</td>\r\n\t\t\t<td style=\"margin: 0px; width: 517px;\">POST /api/posservice/payment/addTender</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"margin: 0px; width: 256px;\"><font face=\"Open Sans, Arial, Helvetica, sans-serif\">Update Ready for Tender</font></td>\r\n\t\t\t<td style=\"margin: 0px; width: 116px;\"><font face=\"Open Sans, Arial, Helvetica, sans-serif\">posservice</font></td>\r\n\t\t\t<td style=\"margin: 0px; width: 297px;\"><font face=\"Open Sans, Arial, Helvetica, sans-serif\">Payment Service</font></td>\r\n\t\t\t<td style=\"margin: 0px; width: 517px;\"><font face=\"Open Sans, Arial, Helvetica, sans-serif\">POST /api/posservice/order/updateReadyForTender</font></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"margin: 0px; width: 256px;\">Add Refund Tender</td>\r\n\t\t\t<td style=\"margin: 0px; width: 116px;\">posservice</td>\r\n\t\t\t<td style=\"margin: 0px; width: 297px;\">Payment Header Service</td>\r\n\t\t\t<td style=\"margin: 0px; width: 517px;\">POST /api/posservice/order/addRefundTender</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"margin: 0px; width: 256px;\">Search Customer</td>\r\n\t\t\t<td style=\"margin: 0px; width: 116px;\">Search</td>\r\n\t\t\t<td style=\"margin: 0px; width: 297px;\">Search Service</td>\r\n\t\t\t<td style=\"margin: 0px; width: 517px;\">GET /api/search/customer</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"margin: 0px; width: 256px;\">Activate Customer</td>\r\n\t\t\t<td style=\"margin: 0px; width: 116px;\">Search</td>\r\n\t\t\t<td style=\"margin: 0px; width: 297px;\">Search Service</td>\r\n\t\t\t<td style=\"margin: 0px; width: 517px;\">GET /api/search/customer/customerId</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"margin: 0px; width: 256px;\">Save requestLogs</td>\r\n\t\t\t<td style=\"margin: 0px; width: 116px;\">posservice</td>\r\n\t\t\t<td style=\"margin: 0px; width: 297px;\">Request Logs Service</td>\r\n\t\t\t<td style=\"margin: 0px; width: 517px;\">POST /api/posservice/requestLogs/save</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"margin: 0px; width: 256px;\">Save reconcileLog</td>\r\n\t\t\t<td style=\"margin: 0px; width: 116px;\"><span style=\"font-family: &quot;Open Sans&quot;, arial, sans-serif; background-color: rgb(230, 230, 230);\">posserv</span><span style=\"font-family: &quot;Open Sans&quot;, arial, sans-serif; background-color: rgb(230, 230, 230);\">ice</span></td>\r\n\t\t\t<td style=\"margin: 0px; width: 297px;\">Reconciliation Logs Service</td>\r\n\t\t\t<td style=\"margin: 0px; width: 517px;\">POST /api/posservice/reconcileLog/save</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"margin: 0px; width: 256px;\">SAF Payment Reconciliation&nbsp;</td>\r\n\t\t\t<td style=\"margin: 0px; width: 116px;\"><span style=\"font-family: &quot;Open Sans&quot;, arial, sans-serif;\">posservice</span></td>\r\n\t\t\t<td style=\"margin: 0px; width: 297px;\">Payment Reconciliation Service</td>\r\n\t\t\t<td style=\"margin: 0px; width: 517px;\">POST /api/backoffice/backofficeTransaction/SAFTransaction/updateTokenInfo</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"margin: 0px; width: 256px;\">Payment Reconciliation</td>\r\n\t\t\t<td style=\"margin: 0px; width: 116px;\">posservice</td>\r\n\t\t\t<td style=\"margin: 0px; width: 297px;\">Payment Reconciliation Service</td>\r\n\t\t\t<td style=\"margin: 0px; width: 517px;\">POST /api/backoffice/backofficeTransaction/paymentReconciliation</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n\t  </div>\r\n </div>\r\n <div id=\"ui-page-fb-wrap\"></div>\r\n <div class=\"hiq-footer-wrap\">\r\n    \r\n                \r\n  </div>\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n",
  "content_length": 71672,
  "scraped_at": "2025-08-09T22:02:50.750375",
  "content_clean": "Home ››Manhattan Active® Omni››Store››Process & Configuration Guides››Point of Sale››POS Classic Guides››POS Order Selling››POS Payment ››POS Payment Process Payment Process Payment ProcessCapturing PaymentPayment Captured at the Point of Sale (POS)Balance DueForeign (or alternate) CurrencyEMV dataDepositsCustom Tender CreationCustom Payment TypesPrivate Label Credit CardConfiguring a Single Card Option for Both Credit and Debit PaymentsPayment Capture ConfigurationUser Input FormsTender FrankingSharing Payment Terminals between Mobile Registers - Delay Payment Terminal SessionExchange Tender (ET) TransactionsET Workflow diagramET - Associating a customerET - Charging the tender to be exchangedET - Payback processET - Receipt and ReprintGift card Cash outPayment Hardening and Failure HandlingRequestLogs/UniqueIdHardening workflowHandling Communication errorPrior to Release 23.1- Legacy Comm failure handling Following Release 23.1- Flexible Comm failure handlingPayment ReconciliationWork Flow of payment reconciliationReconciliation Process OutlineRefresh PaymentServices The Payment component processes payments for orders initiating in any channel, including e-commerce, point of sale (POS), or call center. During the life cycle of each order, the Payment component manages order authorizations, settlements, and refunds through integration with payment gateways such as CyberSource, PayPal, or PAYware Connect. If a payment is captured and authorized in the order capture system such as POS or e-commerce, then the Payment component performs follow-on re-authorizations, settlements and refunds against the initial authorization. The Payment component uses order data to determines the type of transactions that are required. Settlements are created for the value of the fulfilled items, and authorizations are created for those that are ordered but not yet shipped or picked up. For example, when an in-store purchase is made using a credit card, the Payment component attempts to settle for the value of the order. When an online order is placed using a credit card, the Payment component attempts to authorize for the value of the order and will settle the value when the order ships. Each order can be paid with an unlimited number of payment methods. Supported payment types include cash, check, credit card, debit card, e-check, gift card, PayPal, store credit, and Travelers' check. Additional payment types can be configured as required. Capturing Payment Payment Captured at the Point of Sale (POS) When orders are captured in store, POS processes payments and saves completed payment transactions in the Payment component. Since the terminal or mobile sled used to capture payments typically integrates directly with payment gateways, POS does not use the Payment component to calculate or execute services to create and execute transactions. Instead, POS uses the Total Payment Summary API to get the total amount to authorize, settle, or refund, and then POS creates payment transactions and calls the gateway to execute them. If Gift card is used to pay for an omni sale (Order having in-store and ship to address lines), the user will be asked to swipe the GC twice even though both will be settlement records. Balance Due When a UI needs to display the balance due so that a store associate or customer care representative can collect payment, then the Order component calculates the balance due by calling the Payment component. The Get Order API includes a balance due attribute in the response. To calculate the balance due, the Order component calls the Get Payment Header API to get all the payment methods from the Payment component. Then, the Order component calculates the balance due as \\(Balance Due = Order Total - \\sum (Amount - Current Refund Amount, \\forall Payment Methods)\\) Foreign (or alternate) Currency POS allows retailers to accept foreign currency as a form of cash payment.  There are multiple configurations to set this up (see POS Payment Configuration guide for more details) When configured, the user will see an additional dropdown on the Order Summary > Cash tab.  By default, the stores base currency will be selected.  Should the customer wish to pay in an alternate currency, the user can tap on the dropdown and a list of allowed currencies will be displayed. Upon selection of an alternate currency: The user will see two additional details on the screen: The converted balance will show under the base currency balance due This allows the user to easily tell the customer how much to pay in the alternate currency. The converted amount under the Enter Amount field This allows the user to see the conversion as it is being typed into the Enter Amount field. Users can accept multiple currencies, or combine an alternate currency with a different payment method. Note: If an overtender occurs and there is a change due to the customer, the change due will display in the store's base currency.  Currently, POS does not allow for change to be returned via alternate currency. EMV data The term EMV stands for Europay, MasterCard and Visa. EMV is a global standard for authenticating credit and debit card transactions with integrated circuit cards, or “chip cards” at capable point of sale (POS) terminals. Manhattan Active® Omni POS Receipts will be able to capture EMV data. EMV data should be divided into 2 parts i.e. EMV header and EMV secondary details. EMV data is configurable, retailers need to enable business flags to \"Receipt Inc Emv Primary\" and/or \"Receipt Inc Emv Secondary\" on receipt parameters to have this printed on the base POS receipts. If a transaction is made via chip card, all receipts must include the following EMV information in addition to standard receipt information. EMV Primary receipt data and related mapping to the metadata entity attributes. Link for sample receipt. EMV Primary Mapping Card Holder Verification Method PaymentTransactionEMVTags.EMV_CVM Transaction Sequence Counter PaymentTransactionEMVTags.EMV_TAG_9F41 Application Label PaymentTransactionEMVTags.EMV_TAG_50 AID (Application Identifier) PaymentTransactionEMVTags.EMV_TAG_4F TVR (Terminal Verification Results) PaymentTransactionEMVTags.EMV_TAG_95 IAD (Issuer Application Data) PaymentTransactionEMVTags.EMV_TAG_9F10 TSI (Transaction Status Indicator) PaymentTransactionEMVTags.EMV_TAG_9B ARC (Application Response Code) PaymentTransactionEMVTags.EMV_TAG_8A EMV Secondary receipt data and related mapping to the metadata entity attributes. Link for sample receipt. EMV Secondary fields Mapping Application Version Number PaymentTransactionEMVTags.EMV_TAG_9F09 Application Usage Control PaymentTransactionEMVTags.EMV_TAG_9F07 Application Identifier (AID) – card PaymentTransactionEMVTags.EMV_TAG_9F06 Issuer Action Code – Default PaymentTransactionEMVTags.EMV_TAG_9F0D TacDefault PaymentTransactionEMVTags.TAC_DEFAULT Issuer Action Code – Online PaymentTransactionEMVTags.EMV_TAG_9F0F Issuer Action Code – Denial PaymentTransactionEMVTags.EMV_TAG_9F0E Application Preferred Name PaymentTransactionEMVTags.EMV_TAG_9F12 CARD ENTRY MODE PaymentTransactionEMVTags.CARD_ENTRY_MODE Issuer Code Table Index PaymentTransactionEMVTags.EMV_TAG_9F11 Application Primary Account Number (PAN) Sequence Number PaymentTransactionEMVTags.EMV_TAG_5F34 Terminal Action Code – Denial PaymentTransactionEMVTags.TAC_DENIAL Transaction Type PaymentTransactionEMVTags.EMV_TAG_9C Transaction Date PaymentTransactionEMVTags.EMV_TAG_9A Point-of-Service (POS) Entry Mode PaymentTransactionEMVTags.EMV_TAG_9F39 Terminal Action Code – Online PaymentTransactionEMVTags.TAC_ONLINE Amount, Other (Numeric) PaymentTransactionEMVTags.EMV_TAG_9F03 Amount, Authorised (Numeric) PaymentTransactionEMVTags.EMV_TAG_9F02 EmvMode PaymentTransactionEMVTags.EMV_MODE Cryptogram Information Data PaymentTransactionEMVTags.EMV_TAG_9F27 Transaction Currency Code PaymentTransactionEMVTags.EMV_TAG_5F2A EmvChipIndicator PaymentTransactionEMVTags.EMV_CHIP_INDICATOR Dedicated File (DF) Name PaymentTransactionEMVTags.EMV_TAG_84 Application Interchange Profile PaymentTransactionEMVTags.EMV_TAG_82 Unpredictable Number PaymentTransactionEMVTags.EMV_TAG_9F37 Application Transaction Counter (ATC) PaymentTransactionEMVTags.EMV_TAG_9F36 Terminal Type PaymentTransactionEMVTags.EMV_TAG_9F35 Cardholder Verification Method (CVM) Results PaymentTransactionEMVTags.EMV_TAG_9F34 Terminal Capabilities PaymentTransactionEMVTags.EMV_TAG_9F33 TermId PaymentTransactionEMVTags.TERMID Interface Device (IFD) Serial Number PaymentTransactionEMVTags.EMV_TAG_9F1E Terminal Country Code PaymentTransactionEMVTags.EMV_TAG_9F1A Application Cryptogram PaymentTransactionEMVTags.EMV_TAG_9F26 Transaction Time PaymentTransactionEMVTags.EMV_TAG_9F21 MERCHID PaymentTransactionEMVTags.MERCHID Deposits Orders containing only Omni (STA/STS/PAS) items will qualify for partial payments (deposits). On the Order Summary screen, once a partial payment is made, the Deposit button will be available based upon a grant.  If the Deposit button is selected, the order will be marked as partially paid and the order will progress to the receipt screen.   From the Order Search screen, the order can be selected and viewed.  The Order Detail screen will indicate the order is awaiting further payment and an option will be available to make additional payments.   If an additional payment is selected, the Order Summary screen will be displayed with the previously applied payment(s) and allow for either partial or full payment. Note: This feature  requires the Upgraded Store Application.  See Upgraded Store Application for more information. Custom Tender Creation The default supported payment types include cash, check, credit card, debit, e-check, gift card, PayPal, store credit, and traveler's check. Additional custom payment types can be configured as required. Custom Payment Types Custom payment types can be added as required. Newly created payment types can be used for both purchases as well as refunds. The payment configuration indicates how to process the payment type. Private Label Credit Card A Private Label Credit Card (PLCC) is a custom integrated payment type which a client may accept as tender in store. PLCC payment processing is typically characterized as\"Stored Value Services\", no processing over major card brand networks, valid only with the brand. As such, PLCC is typically not subject to PCI-DSS stipulations. If the PLCC is processed over major card brand networks, is branded with a logo of a major card network, or is accepted outside of the client’s selling operations, the payment type may be subject to PCI-DSS. Please, coordinate between the client and MA legal team as needed. Configuring a Single Card Option for Both Credit and Debit Payments If your business needs to display only one card option in the payment screen to handle both Credit and Debit transactions, you can achieve this through the following configuration steps: Edit the Credit Card Configuration: Navigate to the Payment Type configuration section and select the Credit Card configuration to edit. Update the Display Name from \"Credit Card\" to \"Card.\" Save the configuration. Remove the Debit Card Configuration: In the Payment Type configuration, delete the Debit Card configuration. Adjust the Payment Capture Settings: Go to the Payment Capture Configuration and select the Credit Card option. In the Payment Capture Configuration Detail tab, disable the flag labeled \"Set payment type on gateway request.\" Save the configuration. After making these changes, the payment options screen will only display \"Card\" as an option, allowing customers to use either a Credit or Debit card on the terminal. Payment Capture Configuration The behavior of payment types at POS is configurable via the Payment Capture Configuration utility.  In addition to basic behavior, custom configurations can be added to base tenders as well as custom tenders.  See the POS Payment Configuration guide for details. The configurations will determine the following within the UI flow: Capture customer Information and Identity Documents Input Entry Required Input Entry Type Authorization required through payment terminal Franking required Capture denominations Pop cash drawer and include in drawer count Capture customer signature Delay Payment Terminal Session Until Time of Payment Pay By Link POS Note: Ability to delete base tender, part of user-created profile. Owner of that profile has full control to create/delete entries. Retailers can configure an order to be paid by credit/debit/gift card via an email link or QR code.   Instead of the customer swiping/tapping/inserting their card at the payment terminal, they can opt to have a link sent to them via email or scan a QR code at the POS terminal to access the payment link. To do this, the retailer must first configure the Pay By Link as described in POS Payment Configuration. Pay By Link Workflow diagram Note: Pay by Link by SMS/Text is not currently supported out of base POS.  This would require further integration with a provider - for example, Twilio.  Base deployments should use the \"hide\" metadata extension provided to hide the SMS option on the Order Summary screen, as it is not relevant at this time. When an associate selects “Pay By Link\", the options for how to send the link (email, QR CODE) will be displayed based upon configuration through extensions.  Providing an email  was previously entered in the transaction, it will be prepopulated for Pay By Link.   The opt-in preferences of the customer will not be checked for Pay By Link (i.e. if the customer opted out of email but asked to pay by link via email, the link will be sent via email).   All current POS error checking for email will be utilized. Once a valid email  is entered, the associate will select the “Send Link” option.  After the QR Code is scanned or the email is sent, the associate will advance to the “Waiting for Customer” screen with the email displayed.  The associate can cancel out and return to the Order Summary screen (if the payment has not yet been approved) or check the status of the payment.  Providing the payment is approved, the associate will advance to the receipt screen.  If the payment was not approved, the associate will be informed to wait and recheck the status.  If the payment failed (i.e. gateway timeout), an error message will be displayed to the user that the payment will be cancelled and the transaction will be abandoned. Pay By Link will be for positive totals only (in store, send sale, BOPIS, Ship to address) and uneditable for the entire amount due. User Input Forms User input forms can be created to capture additional payment attributes for various tenders.  Retailers can configure the fields per form, as well as the field sequence, form input method (Keyboard, Scanner and so on), and the form displays sequence for more than one form to be created for a tender.  Additionally, forms have context for sales vs returns. See the flow below.  User Input forms are only available for non-cash tenders for which Auth through Terminal is False. Tender Franking Retailers can configure endorsements to be franked on the back of any tender.  To do this, they must first configure the tender to frank on redemption, and then configure the data to be franked at the time the tender is selected. For additional details, please refer to POS Payment Configuration. For each tender selected, the frank occurs after any required input data has been captured.  If no input data is required, then the frank will occur once the user presses Complete Payment. Note: Franking is only supported in portrait mode.  For example: User will need to remove personal check once MICR has been successfully read, and re-insert face down into the printer. Important: Currently tender franking can only be used on a windows machine with the Epson TM-6000IV printer. Sharing Payment Terminals between Mobile Registers - Delay Payment Terminal Session Retailers can configure mobile registers (only) to establish a session with a payment terminal at the time of payment, instead of at the beginning of an order.  This allows for multiple registers to share a single payment terminal, and also allows users to easily switch to a different terminal as needed. When this feature is enabled, the payment terminal will no longer act as a line item display.  To enable this capability, posStoreConfig>storeCommonConfig>delayPTSessionTillPayment should be set to TRUE. When configured, the connected payment terminal will be displayed in the screen header of the Cart and Order Summary.  If no terminal is connected, the display will show N/A.  With the correct permissions, users can tap the payment terminal info, and a popup will appear. With this popup, users can select from a list of pre-configured terminals for the store.  If paring to the terminal is required, the user will then be prompted to do so, else this will act as a selection.  Once selected, the newly connected terminal will display in the screen header.  Additionally, the terminal in the POS Settings screen will be updated and will persist until the terminal is again changed, either in the header or settings screen. The session for the device will not begin until the following: User selects a tender on Order Summary which requires the terminal to collect data or to process (credit, debit, gift card, etc.) User selects to issue or reload a gift card from the Cart User selects a \"from\" exchange tender which requires a payment terminal If a session is started in the Cart, due to a gift card activate or reload,  where \"Activate Gift Card in Cart\" is true, the session will not end until the transaction is complete. The same will hold true for Exchange tenders where the \"from\" tender requires the payment terminal. If a partial payment has been made which established a session, the session will not be released until the user voids the partial payment and either returns to the Cart or completes the transaction. A register will not be able to engage an associated payment terminal while the terminal is actively engaged with another register, but can do so after the session is terminated. If another user attempts to establish a session with a payment terminal that is currently engaged, they will be notified and can try again once the other register has completed its transaction, or they can again go into the payment terminal popup to switch to another payment device. The session release will occur after the receipt has been printed or emailed, and the terminal will then become available for the next transaction. Note: This feature is for mobile register type only. Fixed terminals will continue to start the session upon order initiation and will continue to be used for line display of items. Exchange Tender (ET) Transactions Exchange tender in Active Store solution offers the retailers to accept a tender and refund the customer with another tender. Both the tenders i.e. the tender exchanged and the list of available refunded tender are configurable. The exchange refunded will be the same amount the tender is worth or the customer is charged on the tender to be exchanged. Exchange tender cannot be done partially and is always done for the full amount available on the tender to be exchanged. Exchange tender is a separate transaction by itself and cannot be combined in any existing sale/return/gift card/backoffice transactions. This feature is controlled by a specific UI grant, \"ui::posservice::exchangetender\".  Users with grant can perform this transaction else the menu option is not available. Every such transaction allows multiples of a single tender type to be exchanged. A typical exchange tender flow is mentioned below: Select EXCHANGE TENDER function.  Application generates a unique exchange tender transaction ID when Exchange Tender option is selected. Select the type of tender to be exchanged. (This is dependent on the configuration; only applicable tenders can be exchanged). Accept the tenders to be exchanged and get the balance available on this tender from either third-party or from payware or based on the user input configurations. The maximum amount allowed to be exchanged is based on configuration. Any amount above this is not allowed. Charge/settle the full funds from the tender to be exchanged. (Partial processing of funds is not supported.) Get the list of eligible refund tenders. This is the list of tender types to which the amounts get refunded to. Select the refund tender and enter the amount to be refund and process the refund. Refund can be split across different tender types. If any of the tender types requires to be placed in/out of cash drawer, then cash drawer opens when the refund balance=0. Exchange tender does not support below features: A completed Exchange tender transaction cannot be post voided. Exchange tender transaction is not eligible to be returned. Exchange tender transactions cannot be suspended. Tenders with no balance is not eligible for exchange and is not accepted on UI as valid tender. Different types of tenders cannot be exchanged under the same exchange tender transaction. Partial amount exchange of any tender is not supported. ET Workflow diagram If a transaction ID was generated incorrectly or by accident, then the exchange tender transaction can be voided.  If a tender is added to transaction and customers wants to remove, it can be selected and voided from the transaction before charging funds from the tenders. ET - Associating a customer Exchange tender transaction can be linked to a customer. After generating the exchange tender transaction ID, associates can use \"Tap to Apply\" option on the header and search for a customer and activate to link the customer to this transaction. Once any customer is linked it cannot be modified further to change to another customer. ET - Charging the tender to be exchanged When all the tenders to be exchanged are added in the exchange tender screen, user can click on Proceed. On clicking proceed, each tender is picked one at a time in the order in which they were added for charging.  The removal of refunds is the amount available on the tenders and this will create a settlement records for every tender added on the payment component. Error handling: If the only tender which is to be exchanged fails and retailer is not able to remove funds then app will error out and associate cannot proceed, then the associate either needs to retry or void this tender/transaction. Else if some amount of the tender to be exchanged fails and there is still some positive amount that was removed from the tender and needs to be refunded, then the associate will be proceeded to the Summary screen to allow the refund. ET - Payback process Based on the configuration, only selected tender is eligible as refund tender. And each tender has a maximum amount. Any amount above maximum limit is not allowed to be refunded for a selected refund tender. User can choose to split the refund across multiple tenders based on the configuration. Handling cash drawer and till updates: If any refund tender requires engaging a cash drawer (config, popCashDrawer=TRUE), then cash drawer is opened and funds are removed from the cash drawer and closed. Till is also updated in the backoffice for the specific amount drawn from the till. If the tender which is to be exchanged requires engaging a cash drawer, then cash drawer is opened and funds are inserted into the cash drawer and closed. Till is also updated in the backoffice for the specific amount inserted into the till. If the tender which is to be exchanged does not require engaging a cash drawer but requires only till updates i.e. includeDrawerCount = TRUE, then cash drawer is not engaged but funds are inserted into the cash drawer. Only till updates are performed in the backoffice for the specific amount inserted into the till. ET - Receipt and Reprint Once all the amount is refunded and the balance to be refunded = 0, then the application navigates to the receipt screen. User can choose to print or email the exchange tender transaction. The receipt contains list of tenders from where the funds are transferred to with the amount details and the list of tenders to which the funds are transferred along the amount details. Note: Reprinting of an exchange tender transaction is supported using reprint last transaction or from the customer purchase history screen. Note: If \"Capture customer Info\" or \"Capture Cust Id\" is turned ON for specific tender, then for Exchange Tender scenario we will skip these screens as it is not applicable. Exchange Tender transaction are all non-taxable. Gift card Cash out When gift card is used to tender a transaction and its remaining balance goes very low, retailer can provide the ability to cash this out.  By this, the customer does not have to carry gift card with low balance on it.  This also reduces the number of active gift cards the retailer must maintain.  In case there is any balance to be satisfied, system tries to apply the remaining gift card amount towards this and rest gets cashed out.  The balance amount which is eligible for cash out is configurable under payCaptureConfig.CashOutThreshold. GC cashout always returns money to customer in the form of Cash. Its not configurable. Once tendered, system validates the remaining balance with the threshold defined.  If it has reached the eligible balance, prompts the option to cash out.  If the customer chooses to, the balance amount is settled and gets utilized towards the remaining balance to be satisfied or cash out. Example: The threshold limit is set to 5.00.  Customer uses a Gift card with 100.00 balance, pays 98.00, Order balance due=98.00.  With this, the balance remaining is 2 which is eligible for cash out.  If customer chooses the cash out option, 2.00 cash is handed over. Gift card cash out is applicable to \"Gift Card\" payment type and to \"Store/merchadise credit\" but not applicable to any other payment type. Payment Hardening and Failure Handling Especially for payment types such as Credit, Debit, or Gift Cards which require authorization via a payment terminal and payment gateway, there can be scenarios during the day in a store, where transactions can be abandoned during a payment capture process due to various reasons such as (battery drain, network issues, gateway error etc) and thus the response from payment gateway is not captured on Manhattan Active solution.  Depending on the failure, in these cases the user may able to attempt payment with another tender, but sometimes the transaction must be abandoned.  If the customer has started interaction with the payment terminal prior to the network, device, or gateway failure, in such scenarios application would not know if the customer was charged on the gateway to start any process of reverting the payment. This problem will be systematically handled by capturing the payment request as logs before making the call to gateway and subsequently calls. When there are any discrepancies, the logs can be queried for all unconfirmed payments and checked with the gateway for any delta for reconciliation. RequestLogs/UniqueId As mentioned above all payment request needs to be save before placing the call to payment gateway or Manhattan Active solution. The needs to be logs are saved at every touch point with the gateway and payment component. Please refer the above workflows for various touch points. Also check below the life cycle of the requestLog for any payment transaction. Create an uniqueId, well known as referenceId which needs to be saved on requestLogs entity and same id is sent as part of all payment request to the gateway and to payment transaction on cloud server. UniqueId is required to identify the payment on gateway and map that with the payment transaction on cloud server. This mapping will help to find the discrepancies for further reconciliation. Before making a call to MX terminal - Create requestLogs data in \"Created\" status along with uniqueId and payment request to be sent to gateway. If MX terminal is used flag, processThroughTerminal = TRUE, and if 3rd party application is used, then flag processThroughThirdParty = TRUE while saving the data to requestLogs. After successful response from gateway - Save the response from gateway for the same uniqueId for which the request was sent and update the status as \"Processed\". Use this uniqueId from gateway and create request to save this uniqueId as paymentTransactionId on Manhattan Active solution (payment component). (For example: AddTender API) After successful response from Manhattan Active solution (payment component), save the response on requestLogs as \"Completed\". Note: The base mapping to save gateway response on Manhattan Active solution (payment component) is with respect to \"Payware connect\", if retailers are using other gateway then refer user exits documentation to handle mapping to save the payment transaction. Note: The plugin changes will also be required to create payment request and send uniqueId as part of referenceId or additional attribute that gateway provides, if retailers are using other gateway other than \"Payware connect\". Hardening workflow Handling Communication error There can be communication errors from the payment terminal device, the gateway or from the Manhattan Active solution (Payment Component) which need to be handled in our application.  When such a communication error occurs, the application will perform a get call to gateway or to the payment component 3 times to get the status. Please check below on the possible outcomes if all three attempts fail. MAO POS has recently developed an improved failure handling process that will result in fewer abandoned transactions and more flexible options for the user. Note: The improved Failure Handling is controlled by Change in Behavior \"POS Payment Failure Handling\". See the Behavior Change documentation. The new Failure Handling process will be enabled for any new customer environments created after Release 23.1. It will not be immediately enabled for existing customer environments.  Existing customers may enable the new process after Release 23.1 and should do so in testing environments. It will be automatically enabled for them by the end of 2023. The legacy process will be deprecated and no longer available as an option by 30-Dec 2023. Prior to Release 23.1- Legacy Comm failure handling Error from gateway - if get call = found, and update requestLogs as \"Processed\" and move forward to confirm the order or partial payment. Error from gateway - if get call = not found, go back to summary screen and update requestLogs as \"Reconciled\" so that they are not considered durng EOD Payment reconciliation. If the request had failed, this logic is appropriate. If the request had succeeded, this is a logical gap. Associate must request customer to pay again, however, the not found but 'reconciled' payment record may cause duplicate charges. Error from gateway - if get call receives communication error (no response). Request log is created with status CREATED. No payment transaction is created. Abort the Order transaction, return user to empty cart. At end of day, payment reconciliation process will query the gateway and cleanup the data by creating and canceling (if needed) a payment transaction for the one that couldn't be created at transaction time -other cleanup may occur if payment not found in gateway at all, etc. Legacy Workflow Following Release 23.1- Flexible Comm failure handling Error from gateway - if get call = found, and update requestLogs as \"Processed\" and move forward to confirm the order or partial payment, as appropriate. Error from gateway - if get call = not found, go back to summary screen.  With new functionality do NOT update requestLogs as \"Reconciled\". Since logs are left unreconciled (\"Created\") they will be cleaned up as part of EOD Payment reconciliation. Allow user to try same or alternate payment method again Error from gateway - if get call receives communication error (no response), the new flow is the same as \"not found\" above. Leave logs unreconciled Since logs are left unreconciled (\"Created\") they will be cleaned up as part of EOD Payment reconciliation. Allow user to try same or alternate payment method again Payment Reconciliation Payment reconciliation is a process of correcting the erroneous payment transaction with the payment gateway, the error can be when payware or payment component response resulted in communication error and where payment has gone through the point gateway but not saved on our payment component because of error in response from payware. The requestLogs data for such payment transaction will be in \"created\" or \"processed\" status, Such data is picked to revisit these transactions on gateway by performing a transsearch api call using the invoice # and check if these transaction made to payment, if not then capture payment component for reversal with point gateway. Fetch gateway token for SAF transactions: The first step in Payment reconciliation is to fetch gateway if there were any store and forward transaction processed during the day. Please check below steps. Find all SAF transactions without gateway token. Check the reconciliation retry limit (pos general config > reconciliationRetryLimit) , if the saf transaction has not reached the retry limit (everify the latest limit on reconciliationLogs) then pick this transaction for SAF reconciliation. Place a transsearch api call using invoice# and on successful response from the gateway, save the response of gateway token on requestLogs and payment component. Update reconciliationlogs for the SAF reconciliation attempt. If transsearch api call using invoice# and on unsuccessful then update reconciliationLog with a link to parent requestLog ID as [reconciliationType = SAF, numberOfRetry = runningNumber, retryLimit= {fromConfig}, reconciliationStatus =Failed, requestData = {sent to gateway}, responseData = {received from gateway}] Note: Milestone job (which run every 2 hours) will not picked abandoned orders in readyForTender = TRUE status. Work Flow of payment reconciliation Reconciliation process is called within the store close operations and has the follow steps: Perform SAF reconciliation as explained above for below data on requestLogs data and reconciliation retry limit is not reached. SAF# or Voice Auth Present + ( requestLog status =Completed ) + Payment have this uniqued Id i.e. Processed. SAF# or Voice Auth Present + ( requestLog status =Processed) + Payment have this uniqued Id i.e. Processed. SAF# or Voice Auth Present + ( requestLog status =Created) + Payment does not have this uniqued Id i.e. Created. Perform the actual reconciliation for all below kind (reconciliation process is explained below). requestLogs status = Processed, PTT=True, 3rd Party False + Payment processed. requestLogs status = Processed, PTT=False, 3rd party False +Payment processed. (Should be taken care in user exit) requestLog status = Processed + PTT=False, 3rd party TRUE +Payment processed. (Should be taken care in user exit) requestLog status = Created + PTT=True + Payment NOT processed. Reconciliation Process Outline Validate if the requestLog status = processed or created. Then check the PTT flag, if its true Then, check 3rd party = false, if its false, Then goto payment component and check if the payment transaction with this unique Id exists. If exists then do below: Validate Payment transaction status = Closed or Open If Payment transaction status = Open , and mark requestLog status = reconciled. And If not already present update Payment transaction with the CTROUTD, TROUTD and other payment details from the gateway. If Payment transaction status = Closed, further mark requestLog status = reconciled Then update reconciliationLog as Passed with other details. If does not existing on payment component then perform transsearch api call on gateway using the invoice # Validate the transsearch response with the payment component for this invoice and find the delta in payment component. For all the delta, create payment transaction in open status and mark requestLog status = reconciled Update reconciliationLog as passed with other details. Refresh Payment Retailers who use non-base pay by link or pay via an external website can add a Refresh option to the Order Summary screen.  When the Refresh option is selected, it will go out and obtain the Payment Status.  If the payment was approved, the balance due will be decreased accordingly. The grant for this function ui::posservice::refreshtender. Services The following APIs are related to payment. Refer to the API documentation for additional details on each service. Service Component Group Service Endpoint Close Invoice Order Order Services /order/api/order/order/orderId/{orderId}/invoiceProcessedAmount Get Order Order Order Services /order/api/order/order Get Order Value Order Order Services /order/api/order/order/getOrderValue Get Payment Header Payment PaymentHeader Services /payment/api/payment/paymentHeader Get Payment Status Payment PaymentStatus Services /payment/api/payment/paymentStatus Save Payment Header Payment PaymentHeader Services /payment/api/payment/paymentHeader/save Save Payment Request Payment PaymentRequest Services /payment/api/payment/paymentRequest/save Total Payment Summary Payment payment-summary-controller /payment/api/payment/paymentSummary/total/orderId/{orderId} Exchange Tender Transaction posservice Order Service POST /api/posservice/order/addAttributeToOrder Transaction void posService POS Service POST /api/posservice/override/command/transVoid Balance Enquiry posservice Payment Transaction Service POST /api/posservice/payment/addGiftItemBalance Add Tender posservice Payment Header Service POST /api/posservice/payment/addTender Update Ready for Tender posservice Payment Service POST /api/posservice/order/updateReadyForTender Add Refund Tender posservice Payment Header Service POST /api/posservice/order/addRefundTender Search Customer Search Search Service GET /api/search/customer Activate Customer Search Search Service GET /api/search/customer/customerId Save requestLogs posservice Request Logs Service POST /api/posservice/requestLogs/save Save reconcileLog posservice Reconciliation Logs Service POST /api/posservice/reconcileLog/save SAF Payment Reconciliation posservice Payment Reconciliation Service POST /api/backoffice/backofficeTransaction/SAFTransaction/updateTokenInfo Payment Reconciliation posservice Payment Reconciliation Service POST /api/backoffice/backofficeTransaction/paymentReconciliation"
}