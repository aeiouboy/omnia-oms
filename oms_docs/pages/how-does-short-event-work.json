{
  "id": "2619338",
  "permalink": "how-does-short-event-work",
  "title": "Short Events",
  "type": "topic",
  "level": 6,
  "path": "Manhattan Active® Omni/Order Management/Process & Configuration Guides/Order Processing/Order Fulfillment/Order Events/Short Events",
  "raw_item": {
    "id": "2619338",
    "text": "Short Events",
    "title": "Short Events",
    "permalink": "how-does-short-event-work",
    "leaf": false,
    "droppable": true,
    "expanded": true,
    "closed": true,
    "visible": true,
    "editable": true,
    "type": "topic",
    "topicType": "0",
    "status": "1",
    "iconCls": "icon-topic",
    "cls": "",
    "folder_id": "298861",
    "parent": "f;298861",
    "created_date": "1598338171",
    "modified_date": "1718364008",
    "instructor_id": null,
    "loaded": true,
    "haschildren": false,
    "callout": "0",
    "order": "4"
  },
  "success": true,
  "content": "\r\n\r\n\r\n<div class=\"hiq-page-wrap\">\r\n<div class=\"hiq-t-wrap\">\r\n\t\t\r\n  \t  <div class=\"hiq-t \">\r\n\t\t\t\t<ul class=\"breadcrumbs\"><li><a class=\"breadcrumb-links\" hqid=\"1788908\"  href=\"/home\">Home</a></li> <li><span>&rsaquo;&rsaquo;</span><a hqid=\"3500940\" href=\"/omni\" class=\"breadcrumb-links\">Manhattan Active® Omni</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158393\" href=\"/order-management\" class=\"breadcrumb-links\">Order Management</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158394\" href=\"/process-configuration-guides\" class=\"breadcrumb-links\">Process & Configuration Guides</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158718\" href=\"/order-processing-2\" class=\"breadcrumb-links\">Order Processing</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158747\" href=\"/order-fulfillment\" class=\"breadcrumb-links\">Order Fulfillment</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2633521\" href=\"/order-events-2\" class=\"breadcrumb-links\">Order Events</a></li><li> <span>››</span>Short Events</li></ul>  \t\r\n\t\t<h2><a name=\"short-events\" id=\"short-events\"></a>Short Events</h2>\r\n\r\n<p></p>\r\n\r\n<div class=\"info\"><ul><li><a href=\"/how-does-short-event-work$short-events\">Short Events</a><ul><li><a href=\"/how-does-short-event-work$short-order-events\">Short Order Events</a><ul><li><a href=\"/how-does-short-event-work$sample-api-for-short-nbsp-order-events-nbsp\">Sample API for Short&nbsp;Order Events:&nbsp;</a></li></ul></li><li><a href=\"/how-does-short-event-work$short-event-validations\">Short Event Validations</a></li><li><a href=\"/how-does-short-event-work$short-event-impacts\">Short Event Impacts</a><ul><li><a href=\"/how-does-short-event-work$impacts-on-order-and-inventory-components\">Impacts on Order and Inventory Components</a></li></ul></li><li><a href=\"/how-does-short-event-work$impacts-on-order-and-inventory-components-for-a-ship-to-store-orders\">Impacts on Order and Inventory components for a Ship to Store Orders</a></li><li><a href=\"/how-does-short-event-work$om-and-sif-integration\">OM and SIF Integration</a></li><li><a href=\"/how-does-short-event-work$configuration\">Configuration</a><ul><li><a href=\"/how-does-short-event-work$reallocate-on-short-in-the-nbsp-order-configuration\">Reallocate on Short in the&nbsp;Order Configuration</a></li><li><a href=\"/how-does-short-event-work$order-reason-configuration\">Order Reason Configuration</a></li><li><a href=\"/how-does-short-event-work$inventory-reason-configuration\">Inventory Reason Configuration</a></li></ul></li><li><a href=\"/how-does-short-event-work$implementation-flavors\">Implementation Flavors</a><ul><li><a href=\"/how-does-short-event-work$recognize-a-short-message-from-carrier-during-the-time-of-delivery-in-scenarios-where-product-is-damaged\">Recognize a short message from carrier (during the time of delivery) in scenarios where product is damaged.</a></li><li><a href=\"/how-does-short-event-work$on-short-reason-codes-backorder-instead-of-cancel\">On Short Reason Codes - Backorder instead of Cancel</a></li><li><a href=\"/how-does-short-event-work$override-the-short-reason-sent-from-fulfillment-so-that-the-order-line-is-canceled-based-on-an-overridden-short-reason-where-reallocateonshort-is-false\">Override the short reason sent from fulfillment so that the order line is canceled based on an overridden short reason where ReallocateOnShort is false.</a></li><li><a href=\"/how-does-short-event-work$how-to-apply-hold-on-order-line-after-release-is-shorted-by-dc\">How to apply hold on order line after release is shorted by DC</a></li></ul></li><li><a href=\"/how-does-short-event-work$troubleshooting\">Troubleshooting</a><ul><li><a href=\"/how-does-short-event-work$attempting-to-short-the-releases-for-partially-fulfilled-order-lines-using-api-gives-an-error\">Attempting to short the releases for partially fulfilled order lines using API gives an error</a></li></ul></li><li><a href=\"/how-does-short-event-work$related-articles\">Related Articles</a></li></ul></li></ul></div>\r\n\r\n<h3><a name=\"short-order-events\" id=\"short-order-events\"></a>Short Order Events</h3>\r\n\r\n<p data-ccp-props=\"{&quot;335551550&quot;:1,&quot;335551620&quot;:1,&quot;335559683&quot;:0,&quot;335559685&quot;:172,&quot;335559731&quot;:-172,&quot;335559737&quot;:0,&quot;335562764&quot;:2,&quot;335562765&quot;:1,&quot;335562766&quot;:4,&quot;335562767&quot;:0,&quot;335562768&quot;:4,&quot;335562769&quot;:0}\" lang=\"EN-US\" paraeid=\"{1a0f4776-be8b-4c40-a713-41b40dadc40c}{243}\" paraid=\"0\" xml:lang=\"EN-US\">A short event occurs when an execution system cannot fulfill an item for any reason (for example, no inventory, capacity constraints, and so on). A short event will contain details about the item that is to be shorted with short quantity and short reason.</p>\r\n\r\n<h4><a name=\"sample-api-for-short-nbsp-order-events-nbsp\" id=\"sample-api-for-short-nbsp-order-events-nbsp\"></a>Sample API for Short&nbsp;Order Events:&nbsp;</h4>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-1\" class=\"toggle-content\"><span class=\"toggle-title\">Sample Order Event – Short without reason</span></a></p><div id=\"tg-1\"><div class=\"computer_code\">\n<p>{</p>\n\n<p>&quot;ExternalMessageId&quot;: &quot;543453654656&quot;,</p>\n\n<p>&quot;OrderEvent&quot;: [{</p>\n\n<p>&quot;ExternalMessageId&quot;: &quot;543453654656&quot;,</p>\n\n<p>&quot;EventTypeId&quot;: &quot;Short&quot;,</p>\n\n<p>&quot;OrderId&quot;: &quot;06-02-2020_044&quot;,</p>\n\n<p>&quot;OrderLineId&quot;: &quot;1&quot;,</p>\n\n<p>&quot;ReleaseId&quot;: &quot;06-02-2020_0441&quot;,</p>\n\n<p>&quot;ReleaseLineId&quot;: &quot;1&quot;,</p>\n\n<p>&quot;Item&quot;: &quot;ITEM596947&quot;,</p>\n\n<p>&quot;Quantity&quot;: &quot;1&quot;,</p>\n\n<p>&quot;UOM&quot;: &quot;EA&quot;</p>\n\n<p>}]</p>\n\n<p>}</p>\n</div>\n</div></div>&nbsp;<br />\r\n<div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-2\" class=\"toggle-content\"><span class=\"toggle-title\">Sample Order Event – Short with reason</span></a></p><div id=\"tg-2\"><div class=\"computer_code\">\n<p>{</p>\n\n<p>&quot;ExternalMessageId&quot;: &quot;543453654656&quot;,</p>\n\n<p>&quot;OrderEvent&quot;: [{</p>\n\n<p>&quot;ExternalMessageId&quot;: &quot;543453654656&quot;,</p>\n\n<p>&quot;EventTypeId&quot;: &quot;Short&quot;,</p>\n\n<p>&quot;OrderId&quot;: &quot;06-02-2020_044&quot;,</p>\n\n<p>&quot;OrderLineId&quot;: &quot;1&quot;,</p>\n\n<p>&quot;ReleaseId&quot;: &quot;06-02-2020_0441&quot;,</p>\n\n<p>&quot;ReleaseLineId&quot;: &quot;1&quot;,</p>\n\n<p>&quot;Item&quot;: &quot;ITEM596947&quot;,</p>\n\n<p>&quot;Quantity&quot;: &quot;1&quot;,</p>\n\n<p>&quot;UOM&quot;: &quot;EA&quot;,</p>\n\n<p>&quot;ShortReasonId&quot;: &quot;1000.000&quot;</p>\n\n<p>}]</p>\n\n<p>}</p>\n</div>\n</div></div></p>\r\n\r\n<p>Short event also includes an attribute&nbsp;&ldquo;event process&rdquo;. This field represents the actual process in the execution system during which the quantities are shorted. This field is used by the order component to identify which status quantities to short by referencing this field to the corresponding status in the &quot;EventProcessingConfig&quot; entity. If left blank, Order uses a default method to update quantities of the lowest status.</p>\r\n\r\n<p>During a short event, the system should use this status to determine which quantities on the order should be shorted. For example, if the &quot;EventProcess&quot; field &#39;Pick&#39;&nbsp;maps to a status of &quot;3500&quot; in the EventProcessConfig, then when the short message is processed, quantities in 3500 status are shorted.</p>\r\n\r\n<p>The event processes available out of the box are :&nbsp;</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width: 304px;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\" style=\"width: 149px;\">EventProcess</th>\r\n\t\t\t<th scope=\"col\" style=\"width: 127px;\">StatusToUpdate</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 147px;\">&quot;Pick&quot;</td>\r\n\t\t\t<td style=\"width: 124px;\">3500</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 147px;\">&quot;Pack&quot;</td>\r\n\t\t\t<td style=\"width: 124px;\">3600</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 147px;\">&quot;DC Processing&quot;</td>\r\n\t\t\t<td style=\"width: 124px;\">3500</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-3\" class=\"toggle-content\"><span class=\"toggle-title\">Sample Order Event – With Event Process attribute</span></a></p><div id=\"tg-3\"><div class=\"computer_code\">\n<p>{</p>\n\n<p>&quot;ExternalMessageId&quot;: &quot;543453654656&quot;,</p>\n\n<p>&quot;OrderEvent&quot;: [{</p>\n\n<p>&quot;ExternalMessageId&quot;: &quot;543453654656&quot;,</p>\n\n<p>&quot;EventTypeId&quot;: &quot;Short&quot;,</p>\n\n<p>&quot;OrderId&quot;: &quot;06-02-2020_041&quot;,</p>\n\n<p>&quot;OrderLineId&quot;: &quot;1&quot;,</p>\n\n<p>&quot;ReleaseId&quot;: &quot;06-02-2020_0411&quot;,</p>\n\n<p>&quot;ReleaseLineId&quot;: &quot;1&quot;,</p>\n\n<p>&quot;Item&quot;: &quot;ITEM596947&quot;,</p>\n\n<p>&quot;Quantity&quot;: &quot;1&quot;,</p>\n\n<p>&quot;UOM&quot;: &quot;EA&quot;,</p>\n\n<p>&quot;ShortReasonId&quot;: &quot;1000.000&quot;,</p>\n\n<p>&quot;EventProcess&quot;: &quot;Pick&quot;</p>\n\n<p>}]</p>\n\n<p>}</p>\n</div>\n</div></div></p>\r\n\r\n<div class=\"tip\"><strong>Note</strong>: Multiple short events can be included in a single order event interface.</div>\r\n\r\n<h3><a name=\"short-event-validations\" id=\"short-event-validations\"></a>Short Event Validations</h3>\r\n\r\n<p>Validations performed during Short event are:&nbsp;</p>\r\n\r\n<ul>\r\n\t<li>Event Type -&nbsp; Event type is mandatory and should be a valid base event type &rdquo;Short&rdquo; or a valid extended event type defined in the entity&nbsp;extendedEventType.&nbsp;</li>\r\n\t<li>ReleaseId and ReleaseLineId - Mandatory and should be a valid release or release line Id</li>\r\n\t<li>Quantity - Mandatory check. The quantity&nbsp;has to be provided and should be greater than 0 and is&nbsp;checked for eligibility against released&nbsp;qty. Any excess quantity&nbsp;is not allowed.</li>\r\n</ul>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">Input Data</th>\r\n\t\t\t<th scope=\"col\">Ship/PickUp</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>OrderId + OrderLineId + Quantity</td>\r\n\t\t\t<td>Not Permitted</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>ReleaseId + ReleaseLineId + Quantity&nbsp;</td>\r\n\t\t\t<td>Permitted</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>ReleaseId + ReleaseLineId</td>\r\n\t\t\t<td>Not Permitted</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>ReleaseId</td>\r\n\t\t\t<td>Not Permitted</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<h3><a name=\"short-event-impacts\" id=\"short-event-impacts\"></a>Short Event Impacts</h3>\r\n\r\n<h4><a name=\"impacts-on-order-and-inventory-components\" id=\"impacts-on-order-and-inventory-components\"></a>Impacts on Order and Inventory Components</h4>\r\n\r\n<p data-ccp-props=\"{&quot;335551550&quot;:1,&quot;335551620&quot;:1,&quot;335559683&quot;:1,&quot;335559685&quot;:360,&quot;335559731&quot;:-180,&quot;335559737&quot;:0,&quot;335562764&quot;:2,&quot;335562765&quot;:1,&quot;335562766&quot;:4,&quot;335562767&quot;:0,&quot;335562768&quot;:4,&quot;335562769&quot;:0}\" lang=\"EN-US\" paraeid=\"{80eff2a7-d9f2-459a-8da7-05974a5f78a6}{83}\" paraid=\"0\" xml:lang=\"EN-US\">When an order event &#39;Short&#39; is processed, the following updates occur:</p>\r\n\r\n<p data-ccp-props=\"{&quot;335551550&quot;:1,&quot;335551620&quot;:1,&quot;335559683&quot;:1,&quot;335559685&quot;:360,&quot;335559731&quot;:-180,&quot;335559737&quot;:0,&quot;335562764&quot;:2,&quot;335562765&quot;:1,&quot;335562766&quot;:4,&quot;335562767&quot;:0,&quot;335562768&quot;:4,&quot;335562769&quot;:0}\" lang=\"EN-US\" paraeid=\"{80eff2a7-d9f2-459a-8da7-05974a5f78a6}{83}\" paraid=\"0\" xml:lang=\"EN-US\"><a id=\"Short Event Impacts\" name=\"Short Event Impacts\"></a>Order Updates &nbsp;</p>\r\n\r\n<div class=\"tip\" data-ccp-props=\"{&quot;335551550&quot;:1,&quot;335551620&quot;:1,&quot;335559683&quot;:1,&quot;335559685&quot;:360,&quot;335559731&quot;:-180,&quot;335559737&quot;:0,&quot;335562764&quot;:2,&quot;335562765&quot;:1,&quot;335562766&quot;:4,&quot;335562767&quot;:0,&quot;335562768&quot;:4,&quot;335562769&quot;:0}\" lang=\"EN-US\" paraeid=\"{80eff2a7-d9f2-459a-8da7-05974a5f78a6}{83}\" paraid=\"0\" xml:lang=\"EN-US\">\r\n<ul>\r\n\t<li>The canceled quantity on the release line is increased by the order event quantity.</li>\r\n\t<li>The quantity on the allocation is decreased by the order event quantity.</li>\r\n\t<li>The quantity detail on the order is moved to &quot;Backordered&quot; status.\r\n\t<ul>\r\n\t\t<li>If there is a short reasonId passed on the order event, then this value is populated for the reasonId on the quantity detail and the quantity shorted will be either canceled or submitted for reallocation automatically depending on the Reallocate on Short configuration in the order reason code.&nbsp;\r\n\t\t<ul>\r\n\t\t\t<li>Note that the same&nbsp;reason codes should be defined across Store Inventory & Fulfillment(SIF), Order Management,&nbsp;and Inventory Management.&nbsp;If&nbsp;an unrecognized ShortReasonId is passed, then the server sends 400 bad request error&nbsp;indicating&nbsp;that the request sent to the server is invalid.</li>\r\n\t\t\t<li>If the short reason has the Reallocate on Short configuration set to null (it needs to be explicitly set to null through the backend), then the short quantity is reallocated or canceled based on the order configuration &quot;Reallocate on Short&quot;.&nbsp; In the event that the &#39;Cancel Backordered Units&#39; configuration is enabled and there is no available inventory, short quantities are canceled when they are attempted to be allocation.</li>\r\n\t\t\t<li>If the short reason is not passed, the short quantity is reallocated or canceled based on the order configuration &ldquo;Reallocate on Short&rdquo;. If the quantity is canceled, then an entry in&nbsp;OrderLineCancelHistory&nbsp;is created with a default reason &ldquo;FulfillmentSystemShorted. The quantity is cancelled from lower status to upper status, resulting in an inappropriate order line status. For example, consider an order with one line 3 quantity; 2 quantity in Picked status and&nbsp;1 quantity in Released status. On receiving a short event for 2 quantity,&nbsp;1 quantity from released and 1 quantity from picked status are cancelled, instead of canceling 2 quantity in picked status. This will result in both Min and Max fulfilment status of order line as Released and Picked instead of Released. It is expected that a further short on the picked qty is resent with &quot;Re-allocate on Short&quot; as true by doing so the order line will now move to released status.</li>\r\n\t\t</ul>\r\n\t\t</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li>The order line &quot;lineShortCount&quot; is incremented whenever a short event is processed. Note that&nbsp;the count increment is not with respect to short quantity but with the number of events processed per order line.</li>\r\n\t<li>A message is sent to the Inventory component to reduce the supply allocated quantity and reduce the reservation allocated qty</li>\r\n</ul>\r\n</div>\r\n\r\n<p>Inventory Updates &nbsp;</p>\r\n\r\n<p>For short events, the Order component must communicate to the Inventory component that an order could not be fulfilled. When a short event is received, the Order component relays a supply event with transaction type &quot;Short&quot; to the Inventory component. Inventory reads the <a href=\"/how-does-short-event-work$Inventoryreasoncode\"><span style=\"color:#2980b9;\">short reason code</span></a> and determines what action to take, such as should the inventory be an error&nbsp;or not. For example,&nbsp;Marking inventory as damaged or locked for QA for future orders.</p>\r\n\r\n<div class=\"tip\"><strong>Note</strong>: During the inventory updates, the supply allocated quantity is reduced, but the supply quantity is not reduced.</div>\r\n\r\n<p>For additional details of how Inventory processes the&nbsp;events see the&nbsp;<a hqid=\"2606084\" href=\"/how-reservation-works\">Reservation Guide -&nbsp;Fulfillment (Short) section</a><a hqid=\"2606084\" href=\"/how-reservation-works$short\">.</a></p>\r\n\r\n<p><img height=\"102\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/image(423).png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL2ltYWdlKDQyMykucG5nIiwiQ29uZGl0aW9uIjp7IkRhdGVMZXNzVGhhbiI6eyJBV1M6RXBvY2hUaW1lIjoxNzU0NzUxNzU1fX19XX0_&Signature=LcxcQL3v--uoYCNSNMpTzAWnMfHar31f7Gz3K~0VAOxq8Yz76Zfa5ouzQGJZTepkJ0fPDbiRaTVDlRq24368BlV1pMFf03CqT6~DQaQCKZtHHblVOSTPmwcVBszQvMWKEIXby1so8Rvok9nd6A0mBMcTNza99Nu1LolUtoWjmV1zDrtsJJrgmaeLHsgRPkmSW4NcHM4QCqWx8WECK9Vm6XZkwpjF-ZpGutnJUBXyr0IQ02nwSM~y4CF-HsCbjECf2NRua4rhupy6uwh58NlfjkmjbAi3kC1JQ8jgqGLrinf28nhdKIdaE7-9V7XiulHO2lBMqE7w5Cpzd3elV7EquQ__&Key-Pair-Id=K2TK3EG287XSFC\" width=\"624\" /></p>\r\n\r\n<div class=\"tip\"><strong>Note</strong>:&nbsp;If a location supports several supply types and if a short event is received on an On Hand supply type, all on Hand inventory records will be marked with the same error. That comes from the assumption that all fulfillment system should always try to fulfill the orders if there is inventory available. If a fulfillment system shorts an order, we interpret it such as there is no on hand inventory available across supply types for this item in this location.</div>\r\n\r\n<h3><a name=\"impacts-on-order-and-inventory-components-for-a-ship-to-store-orders\" id=\"impacts-on-order-and-inventory-components-for-a-ship-to-store-orders\"></a>Impacts on Order and Inventory components for a Ship to Store Orders</h3>\r\n\r\n<p>Since there are two allocations for order quantities, the status changes for the order quantities happen differently than with regular, single-leg orders. For ship to store orders, the status of the first leg (merge) determines the order quantity status until &quot;released&quot; (3000) status. This merge leg can be shorted before the order is shipped. In which case the allocation details of the order line is moved to a canceled/backorder&nbsp;status based on the&nbsp;<span style=\"color:#2980b9;\"><a href=\"/how-does-short-event-work$Inventoryreasoncode\">short reason code</a>&nbsp;</span></p>\r\n\r\n<p>Once the merge leg is released,&nbsp;the Pick up leg&nbsp;can be shorted&nbsp;before the order&nbsp;is picked up. When the pick up leg is shorted, the order line is moved to a canceled/backorder&nbsp;status based on the&nbsp;<span style=\"color:#2980b9;\"><a href=\"/how-does-short-event-work$Inventoryreasoncode\">short reason code</a></span></p>\r\n\r\n<h3><a name=\"om-and-sif-integration\" id=\"om-and-sif-integration\"></a>OM and SIF Integration</h3>\r\n\r\n<p>When fulfillment is being executed within Store Fulfillment, status and quantity updates are communicated to the Order component via&nbsp;fulfillment outbound messages. These messages are translated into Order Event messages which the order can then process.&nbsp;Based on the type update, a specific type of order event message is created.&nbsp;The following&nbsp;table&nbsp;describes the order events that are triggered by the fulfillment updates. The details of how each order event type updates the order is described&nbsp;<a href=\"https://omni.helpdocsonline.com/order-fulfillment-process$Order Events\">here</a>.</p>\r\n\r\n<p>Multiple messages can be triggered at the same time if there are different kinds of updates during one fulfillment event. For example, during picking, if the store associate finds that not enough inventory is available for a fulfillment order, part of the fulfillment quantity is successfully picked, and the remaining is shorted. Two outbound messages/order events are triggered: one of type &quot;Picked&quot; and one of type &quot;Short&quot; for the respective quantities.</p>\r\n\r\n<p class=\"info\"><b>Note</b>: At the time of fulfillment, if an invalid ItemId is sent by the fulfillment system against a correct &quot;ReleaseId&quot;, then OMS does not validate the ItemId and performs necessary action (pick/pack/short/ship etc) against the ReleaseId</p>\r\n\r\n<ul>\r\n\t<li>When SIF and DOM are integrated, each fulfillment outbound message SIF&nbsp;generates is picked up by the&nbsp;order component and translated into order events which are then&nbsp;processed.&nbsp;SIF releases a message which has a change set of records and values which have been updated (old&nbsp;values) as well as a full picture of the current fulfillment (new values).&nbsp;</li>\r\n\t<li>Order will have to compute the delta and determine the quantities and order event type for the order&nbsp;event.&nbsp;Other order event input values will come from the fulfillment outbound message.&nbsp;Fulfillment sends an outbound message with Event Name = &nbsp;Fulfillment Shorted.&nbsp;</li>\r\n\t<li>Order generates an order event of&nbsp;EventTypeId&nbsp;= Short with&nbsp;statusId&nbsp;as 1500.000 (Backordered) and the quantity on Order Event is calculated as: Current Object Cancelled Qty - Change Set Cancelled Qty</li>\r\n</ul>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">Fulfillment Event</th>\r\n\t\t\t<th scope=\"col\">Order Event</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Fulfillment Shorted (during picking or packing)</td>\r\n\t\t\t<td>An order event is created of type &quot;Short&quot;</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Fulfillment Canceled</td>\r\n\t\t\t<td>An order event is created of type &quot;Short&quot;</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div class=\"tip\"><strong>Note</strong>: The reason code configuration across store fulfillment, inventory, and order reasons should be the same.</div>\r\n\r\n<h3><a name=\"configuration\" id=\"configuration\"></a>Configuration</h3>\r\n\r\n<h4><a name=\"reallocate-on-short-in-the-nbsp-order-configuration\" id=\"reallocate-on-short-in-the-nbsp-order-configuration\"></a><a id=\"orderconfReallocation\" name=\"orderconfReallocation\"></a>Reallocate on Short in the&nbsp;Order Configuration</h4>\r\n\r\n<p>When order quantities are shorted by a fulfillment system, these quantities are back-ordered. The system determines how to handle these backorders based on the configuration of the&nbsp;&quot;ReallocateOnShort&quot; field. The order configuration flag ReallocateOnShort&nbsp;is evaluated only if&nbsp;ShortReasonId reason Id&nbsp;is not passed on the ShortEvent.&nbsp;If the field is set to true, then&nbsp;the order component&nbsp;attempts to reallocate these shorted quantities. If the field is set to false,&nbsp;the system cancels these quantities. This is configured in the&nbsp;<a hqid=\"1827455\" href=\"/order-fulfillment-configuration-2\">Order Configuration UI</a>.</p>\r\n\r\n<h4><a name=\"order-reason-configuration\" id=\"order-reason-configuration\"></a><a id=\"orderreasoncode\" name=\"orderreasoncode\"></a>Order Reason Configuration</h4>\r\n\r\n<p>Order Reasons can be configured using the menu on the left navigation panel on the application by accessing &#39;Order reasons&#39; under &#39;Manage Order Configuration&#39;. The order reason should have a Reason Id, Reason Type Id, and optional description. The order reason also has the Reallocate On Short&nbsp;check box.&nbsp;If the reason type id is short and the check box is selected, then the order is tried for allocation. If&nbsp;the Reallocate On Short check box is not selected,&nbsp;then the back-ordered units are cancelled. If ShortReasonId reason Id&nbsp;is not passed on the ShortEvent msg, then the system fails to use the ReallocateOnShort from the corresponding OrderConfig.</p>\r\n\r\n<div class=\"tip\"><strong>Note</strong>: If&nbsp;an unrecognized ShortReasonId is passed, then the server sends 400 bad request error&nbsp;indicating&nbsp;that the request sent to the server is invalid.</div>\r\n\r\n<h4><a name=\"inventory-reason-configuration\" id=\"inventory-reason-configuration\"></a><a id=\"Inventoryreasoncode\" name=\"Inventoryreasoncode\"></a>Inventory Reason Configuration</h4>\r\n\r\n<p>Inventory reasons codes can be configured&nbsp;using the menu on the left navigation panel on the application by accessing the &#39;Inventory Reason Codes&#39; tab under the &#39;Manage Inventory Configuration section&#39;.</p>\r\n\r\n<p><img height=\"726\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/Short%20configs.png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL1Nob3J0JTIwY29uZmlncy5wbmciLCJDb25kaXRpb24iOnsiRGF0ZUxlc3NUaGFuIjp7IkFXUzpFcG9jaFRpbWUiOjE3NTQ3NTE3NTV9fX1dfQ__&Signature=gSOq5njcUghlajc0MlyQ25E8rLeIWa4U35XG3B5K8hTRz6fCfgp6J-IUY3ZEM2GcrTLrfjpn4JtRW4GMtp8wNS4FN5dk1YWGUwMftLtq9300zTaMFmu2rPBzBngL7FG7PUyB5xjNSuA9NHB9mm7-C4fMwdALnoAgdQums-hcthIXH8S21JtxDOd9P6CLkFbP0edXRU1XDt1MXOgdNKtkuWXoSXLXzPzytl6Oysb0UrEwsOgxDGXp6XAhCeXnC~ZYPs5gV5lImeXiDbnlo0WnrFQGirpSddJYvFjI0wWe2Q~VZ6g8XFC0nY-2JOogoW7xNRu74FLw1ZSfptxZcu~a1w__&Key-Pair-Id=K2TK3EG287XSFC\" style=\"width: 897px; height: 341px;\" width=\"1908\" /></p>\r\n\r\n<div class=\"warning\">If orderLineorderLineAdditional.IsMarkedForCancellation = true and short order event is received for the Release belonging to this order line, the quantity shorted in the order event will be canceled irrespective of the reallocate on short configuration&nbsp;</div>\r\n\r\n<h3><a name=\"implementation-flavors\" id=\"implementation-flavors\"></a>Implementation Flavors</h3>\r\n\r\n<h5><a name=\"recognize-a-short-message-from-carrier-during-the-time-of-delivery-in-scenarios-where-product-is-damaged\" id=\"recognize-a-short-message-from-carrier-during-the-time-of-delivery-in-scenarios-where-product-is-damaged\"></a>Recognize a short message from carrier (during the time of delivery) in scenarios where product is damaged.</h5>\r\n\r\n<p><u>Implementation:</u> Customer can choose to have a custom status prior to fulfillment and move it to Fulfillment post POD. This is done as Short can be received from POD post fulfillment.</p>\r\n\r\n<h5 id=\"OrderCancellation,CancelonBackorder-OnShortReasonCodes-BackorderinsteadofCancel\"><a name=\"on-short-reason-codes-backorder-instead-of-cancel\" id=\"on-short-reason-codes-backorder-instead-of-cancel\"></a>On Short Reason Codes - Backorder instead of Cancel</h5>\r\n\r\n<p>Whenever a short comes from the downstream fulfillment systems, some retailers want the order lines to remain in &quot;backordered&quot; status and not cancel immediately (when re-allocate&nbsp;on short is false). This will allow the retailers to manually review the order lines, select a fulfillment facility and manually allocate the order lines again.&nbsp;</p>\r\n\r\n<p><u>Implementation</u>: This can be achieved using &quot;OrderLineShortExtensionHandler&quot; by specifying the entry condition as per the retailer&#39;s requirement.</p>\r\n\r\n<ol>\r\n\t<li>If you want only one reason code to move the order line to cancelled status, use &quot;==&quot; .</li>\r\n</ol>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-4\" class=\"toggle-content\"><span class=\"toggle-title\">One reason code to move the order line to cancelled status</span></a></p><div id=\"tg-4\"><pre class=\"computer_code\">\r\n{\r\n   &quot;ExtensionHandlerId&quot;: &quot;OrderLineShortExtensionHandler&quot;,\r\n   &quot;ProfileId&quot;: &quot;retail&quot;,\r\n   &quot;ExtensionhandlerRoute&quot;: [\r\n      {\r\n         &quot;ExtensionhandlerRouteId&quot;: &quot;OrderLineShortExtensionHandlerRouteId&quot;,\r\n         &quot;Source&quot;: &quot;ON_EVENT&quot;,\r\n         &quot;Destination&quot;: &quot;cancelOrderLineShortEvent&quot;,\r\n         &quot;IsSync&quot;: &quot;true&quot;\r\n      }\r\n   ],\r\n   &quot;RegisteredExtensionPoints&quot;: [\r\n      {\r\n         &quot;ExtensionPointId&quot;: &quot;Order:OrderLine:Event:OnShort&quot;,\r\n         &quot;EntryCondition&quot;: &quot;CancelReason.ReasonId == &#39;2000.000&#39;&quot;\r\n      }\r\n   ]\r\n}</pre>\r\n</div></div></p>\r\n\r\n<p>This will allow order lines which are shorted with reason code = 2000.000 to go to &quot;Cancelled&quot; status and orders shorted with any other reason code having &quot;re-allocate on short&quot; as&nbsp;false to be in backordered status.</p>\r\n\r\n<p>Short with reason code 1000.000 - &quot;Reallocate on Short = False&quot; - Result: Backordered</p>\r\n\r\n<p>Short with reason code 2000.000 - &quot;Reallocate on Short = False&quot; - Result: Cancelled</p>\r\n\r\n<ol start=\"2\">\r\n\t<li>If you&nbsp;want any two reason codes to move the order line to canceled status, use &quot;||&quot; .</li>\r\n</ol>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-5\" class=\"toggle-content\"><span class=\"toggle-title\">Two reason codes to move the order line to cancelled status</span></a></p><div id=\"tg-5\"><pre class=\"computer_code\">\r\n{\r\n   &quot;ExtensionHandlerId&quot;: &quot;OrderLineShortExtensionHandler&quot;,\r\n   &quot;ProfileId&quot;: &quot;base&quot;,\r\n   &quot;ExtensionhandlerRoute&quot;: [\r\n      {\r\n         &quot;ExtensionhandlerRouteId&quot;: &quot;OrderLineShortExtensionHandlerRouteId&quot;,\r\n         &quot;Source&quot;: &quot;ON_EVENT&quot;,\r\n         &quot;Destination&quot;: &quot;cancelOrderLineShortEvent&quot;,\r\n         &quot;IsSync&quot;: &quot;true&quot;\r\n      }\r\n   ],\r\n   &quot;RegisteredExtensionPoints&quot;: [\r\n      {\r\n         &quot;ExtensionPointId&quot;: &quot;Order:OrderLine:Event:OnShort&quot;,\r\n         &quot;EntryCondition&quot;: &quot;CancelReason.ReasonId == &#39;1000.000&#39;||CancelReason.ReasonId == &#39;2000.000&#39;&quot;\r\n      }\r\n   ]\r\n}</pre>\r\n</div></div></p>\r\n\r\n<p>This will allow order lines which are shorted with reason code = 1000.000 or 2000.000 to go to &quot;Cancelled&quot; status and order lines shorted with any other reason code having &quot;re-allocate on short&quot; as false to be in backordered status.</p>\r\n\r\n<p>Short with reason code 1000.000 - &quot;Reallocate on Short = False&quot; - Result: Cancelled</p>\r\n\r\n<p>Short with reason code 2000.000 - &quot;Reallocate on Short = False&quot; - Result: Cancelled</p>\r\n\r\n<p>Short with reason code TESTREASON - &quot;Reallocate on Short = False&quot; - Result: Backordered</p>\r\n\r\n<ol start=\"3\">\r\n\t<li>If you want more than two reason&nbsp;codes to move the order line to canceled status, use contains in the entry condition.</li>\r\n</ol>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-6\" class=\"toggle-content\"><span class=\"toggle-title\">More than two reason code to move the order line to cancelled status</span></a></p><div id=\"tg-6\"><pre class=\"computer_code\">\r\n{\r\n   &quot;ExtensionHandlerId&quot;: &quot;OrderLineShortExtensionHandler&quot;,\r\n   &quot;ProfileId&quot;: &quot;base&quot;,\r\n   &quot;ExtensionhandlerRoute&quot;: [\r\n      {\r\n         &quot;ExtensionhandlerRouteId&quot;: &quot;OrderLineShortExtensionHandlerRouteId&quot;,\r\n         &quot;Source&quot;: &quot;ON_EVENT&quot;,\r\n         &quot;Destination&quot;: &quot;cancelOrderLineShortEvent&quot;,\r\n         &quot;IsSync&quot;: &quot;true&quot;\r\n      }\r\n   ],\r\n   &quot;RegisteredExtensionPoints&quot;: [\r\n      {\r\n         &quot;ExtensionPointId&quot;: &quot;Order:OrderLine:Event:OnShort&quot;,\r\n         &quot;EntryCondition&quot;: &quot;([&#39;1000.000&#39;, &#39;2000.000&#39;, &#39;TESTREASON&#39;] contains CancelReason.ReasonId)&quot;\r\n      }\r\n   ]\r\n}</pre>\r\n</div></div></p>\r\n\r\n<p>This will allow order lines which are shorted with reason code = 1000.000, 2000.000 and TESTREASON to go to &quot;Cancelled&quot; status and order lines shorted with any other reason code having &quot;re-allocate on short&quot;: false to be in backordered status</p>\r\n\r\n<p>Short with reason code 1000.000 - &quot;Reallocate on Short = False&quot; - Result: Cancelled</p>\r\n\r\n<p>Short with reason code 2000.000 - &quot;Reallocate on Short = False&quot; - Result: Cancelled</p>\r\n\r\n<p>Short with reason code TESTREASON - &quot;Reallocate on Short = False&quot; - Result: Cancelled</p>\r\n\r\n<p>Short with reason code TESTREASON2 - &quot;Reallocate on Short = False&quot; - Result: Backordered</p>\r\n\r\n<ol start=\"4\">\r\n\t<li>If you want one reason code to move the order line to cancelled status and the rest to move to backordered use &quot;&&&quot;&nbsp;</li>\r\n</ol>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-7\" class=\"toggle-content\"><span class=\"toggle-title\">One reason code to move the order line to cancelled status and the rest to move to backordered</span></a></p><div id=\"tg-7\"><pre class=\"computer_code\">\r\n{\r\n   &quot;ExtensionHandlerId&quot;: &quot;OrderLineShortExtensionHandler&quot;,\r\n   &quot;ProfileId&quot;: &quot;base&quot;,\r\n   &quot;ExtensionhandlerRoute&quot;: [\r\n      {\r\n         &quot;ExtensionhandlerRouteId&quot;: &quot;OrderLineShortExtensionHandlerRouteId&quot;,\r\n         &quot;Source&quot;: &quot;ON_EVENT&quot;,\r\n         &quot;Destination&quot;: &quot;cancelOrderLineShortEvent&quot;,\r\n         &quot;IsSync&quot;: &quot;true&quot;\r\n      }\r\n   ],\r\n   &quot;RegisteredExtensionPoints&quot;: [\r\n      {\r\n         &quot;ExtensionPointId&quot;: &quot;Order:OrderLine:Event:OnShort&quot;,\r\n         &quot;EntryCondition&quot;: &quot;(CancelReason.ReasonId != &#39;3000.000&#39;) &amp;&amp; (CancelReason.ReasonId == &#39;1000.000&#39;)&quot;\r\n      }\r\n   ]\r\n}</pre>\r\n</div></div></p>\r\n\r\n<p>This will allow order lines which are shorted with reason code = 1000.000 to go to &quot;Cancelled&quot; status and order lines shorted with any other reason code having &quot;re-allocate on short&quot; as false to be in backordered status.</p>\r\n\r\n<p>Short with reason code 1000.000 - &quot;Reallocate on Short = False&quot; - Result: Cancelled</p>\r\n\r\n<p>Short with reason code 2000.000 - &quot;Reallocate on Short = False&quot; - Result: Backordered</p>\r\n\r\n<p>Short with reason code TESTREASON - &quot;Reallocate on Short = False&quot; - Result: Backordered</p>\r\n\r\n<p>Short with reason code TESTREASON2 - &quot;Reallocate on Short = False&quot; - Result: Backordered</p>\r\n\r\n<h5><a name=\"override-the-short-reason-sent-from-fulfillment-so-that-the-order-line-is-canceled-based-on-an-overridden-short-reason-where-reallocateonshort-is-false\" id=\"override-the-short-reason-sent-from-fulfillment-so-that-the-order-line-is-canceled-based-on-an-overridden-short-reason-where-reallocateonshort-is-false\"></a>Override the short reason sent from fulfillment so that the order line is canceled based on an overridden short reason where ReallocateOnShort is false.</h5>\r\n\r\n<p><u>Implementation:</u> Tap OrderEventMessageType before posting them to the base queue,&nbsp;filter event &quot;Short&quot;, post them to a custom queue. Update the event with a new short reason and then post it to the base queue.</p>\r\n\r\n<h5><a name=\"how-to-apply-hold-on-order-line-after-release-is-shorted-by-dc\" id=\"how-to-apply-hold-on-order-line-after-release-is-shorted-by-dc\"></a>How to apply hold on order line after release is shorted by DC</h5>\r\n\r\n<p><u>Implementations</u>: Out of the box does not support this feature. Use preOrderEvent or postOrderEvent user exits.</p>\r\n\r\n<ol>\r\n\t<li>Release line is shorted from DC or Store.</li>\r\n\t<li>Short event is sent to custom queue.</li>\r\n\t<li>Manhattan&nbsp;Active&reg; Omni&nbsp;custom service checks the ShortReasodId if the Hold is required.</li>\r\n\t<li>A Hold is placed on order line, with matching hold type id.</li>\r\n\t<li>Short event message is sent to base queue.</li>\r\n</ol>\r\n\r\n<h3><a name=\"troubleshooting\" id=\"troubleshooting\"></a>Troubleshooting</h3>\r\n\r\n<h4><a name=\"attempting-to-short-the-releases-for-partially-fulfilled-order-lines-using-api-gives-an-error\" id=\"attempting-to-short-the-releases-for-partially-fulfilled-order-lines-using-api-gives-an-error\"></a>Attempting to short the releases for partially fulfilled order lines using API gives an error</h4>\r\n\r\n<p>Not able to short releases using API for partially fulfilled order lines when the order lines are not getting allocated because of unavailability of inventory(on hand or in transit).</p>\r\n\r\n<p>Follow the steps below in case the supply record is purged:</p>\r\n\r\n<ul>\r\n\t<li>Do a supply save instead of adjustment and add the corresponding Hash Id in the reservation to the supply.</li>\r\n\t<li>Use the sample JSONs provided here:</li>\r\n</ul>\r\n\r\n<div class=\"computer_code\">{<br />\r\n&nbsp; &quot;ExternalMessageId&quot;: &quot;17618&quot;,<br />\r\n&nbsp; &quot;OrderEvent&quot;: [{<br />\r\n&nbsp; &nbsp; &quot;ExternalMessageId&quot;: &quot;17618&quot;,<br />\r\n&nbsp; &nbsp; &quot;EventTypeId&quot;: &quot;Short&quot;,<br />\r\n&nbsp; &nbsp;&quot;ReleaseId&quot;: &quot;MN-MARCH02-M00084&quot;,<br />\r\n&nbsp; &nbsp; &quot;ReleaseLineId&quot;: &quot;1&quot;,<br />\r\n&nbsp; &nbsp; &quot;Item&quot;: &quot;Tops-19691-Blue-S&quot;,<br />\r\n&nbsp; &nbsp; &quot;Quantity&quot;: 1,<br />\r\n&nbsp; &nbsp; &quot;UOM&quot;: &quot;EA&quot;,<br />\r\n&nbsp; &nbsp; &quot;FulfillmentInfo&quot;: {<br />\r\n&nbsp; &nbsp; &nbsp; &quot;ShortReasonId&quot;: &quot;3000.000&quot;<br />\r\n&nbsp; &nbsp; }<br />\r\n&nbsp; }]}<br />\r\n&nbsp;</div>\r\n\r\n<h3><a name=\"related-articles\" id=\"related-articles\"></a>Related Articles</h3>\r\n\r\n<div class=\"info\"><ul class=\"related-articles\"><li><a href=\"/how-does-ship-event-work\" hqid=\"2618994\">Ship Events</a></li><li><a href=\"/types-of-order-event\" hqid=\"2618990\">Types of Order Events</a></li><li><a href=\"/delivery-method-update-order-event\" hqid=\"2854314\">Delivery Method Update Events</a></li><li><a href=\"/substitution-during-fulfillment\" hqid=\"3465566\">Substitution During Fulfillment</a></li><li><a href=\"/order-event-overview\" hqid=\"2597360\">Overview</a></li><li><a href=\"/how-does-status-update-event-work\" hqid=\"2619339\">Status Update Events</a></li><li><a href=\"/order-event-restapis\" hqid=\"2618996\">REST APIs and User Exits</a></li><li><a href=\"/how-does-status-update-event-work-2-2\" hqid=\"2794986\">Fulfillment Update Events</a></li></ul></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n\t  </div>\r\n </div>\r\n <div id=\"ui-page-fb-wrap\"></div>\r\n <div class=\"hiq-footer-wrap\">\r\n    \r\n                \r\n  </div>\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n",
  "content_length": 37696,
  "scraped_at": "2025-08-09T21:57:35.330326",
  "content_clean": "Home ››Manhattan Active® Omni››Order Management››Process & Configuration Guides››Order Processing››Order Fulfillment››Order Events ››Short Events Short Events Short EventsShort Order EventsSample API for Short Order Events: Short Event ValidationsShort Event ImpactsImpacts on Order and Inventory ComponentsImpacts on Order and Inventory components for a Ship to Store OrdersOM and SIF IntegrationConfigurationReallocate on Short in the Order ConfigurationOrder Reason ConfigurationInventory Reason ConfigurationImplementation FlavorsRecognize a short message from carrier (during the time of delivery) in scenarios where product is damaged.On Short Reason Codes - Backorder instead of CancelOverride the short reason sent from fulfillment so that the order line is canceled based on an overridden short reason where ReallocateOnShort is false.How to apply hold on order line after release is shorted by DCTroubleshootingAttempting to short the releases for partially fulfilled order lines using API gives an errorRelated Articles Short Order Events A short event occurs when an execution system cannot fulfill an item for any reason (for example, no inventory, capacity constraints, and so on). A short event will contain details about the item that is to be shorted with short quantity and short reason. Sample API for Short Order Events: Sample Order Event – Short without reason { \"ExternalMessageId\": \"543453654656\", \"OrderEvent\": [{ \"ExternalMessageId\": \"543453654656\", \"EventTypeId\": \"Short\", \"OrderId\": \"06-02-2020_044\", \"OrderLineId\": \"1\", \"ReleaseId\": \"06-02-2020_0441\", \"ReleaseLineId\": \"1\", \"Item\": \"ITEM596947\", \"Quantity\": \"1\", \"UOM\": \"EA\" }] } Sample Order Event – Short with reason { \"ExternalMessageId\": \"543453654656\", \"OrderEvent\": [{ \"ExternalMessageId\": \"543453654656\", \"EventTypeId\": \"Short\", \"OrderId\": \"06-02-2020_044\", \"OrderLineId\": \"1\", \"ReleaseId\": \"06-02-2020_0441\", \"ReleaseLineId\": \"1\", \"Item\": \"ITEM596947\", \"Quantity\": \"1\", \"UOM\": \"EA\", \"ShortReasonId\": \"1000.000\" }] } Short event also includes an attribute “event process”. This field represents the actual process in the execution system during which the quantities are shorted. This field is used by the order component to identify which status quantities to short by referencing this field to the corresponding status in the \"EventProcessingConfig\" entity. If left blank, Order uses a default method to update quantities of the lowest status. During a short event, the system should use this status to determine which quantities on the order should be shorted. For example, if the \"EventProcess\" field 'Pick' maps to a status of \"3500\" in the EventProcessConfig, then when the short message is processed, quantities in 3500 status are shorted. The event processes available out of the box are : EventProcess StatusToUpdate \"Pick\" 3500 \"Pack\" 3600 \"DC Processing\" 3500 Sample Order Event – With Event Process attribute { \"ExternalMessageId\": \"543453654656\", \"OrderEvent\": [{ \"ExternalMessageId\": \"543453654656\", \"EventTypeId\": \"Short\", \"OrderId\": \"06-02-2020_041\", \"OrderLineId\": \"1\", \"ReleaseId\": \"06-02-2020_0411\", \"ReleaseLineId\": \"1\", \"Item\": \"ITEM596947\", \"Quantity\": \"1\", \"UOM\": \"EA\", \"ShortReasonId\": \"1000.000\", \"EventProcess\": \"Pick\" }] } Note: Multiple short events can be included in a single order event interface. Short Event Validations Validations performed during Short event are: Event Type -  Event type is mandatory and should be a valid base event type ”Short” or a valid extended event type defined in the entity extendedEventType. ReleaseId and ReleaseLineId - Mandatory and should be a valid release or release line Id Quantity - Mandatory check. The quantity has to be provided and should be greater than 0 and is checked for eligibility against released qty. Any excess quantity is not allowed. Input Data Ship/PickUp OrderId + OrderLineId + Quantity Not Permitted ReleaseId + ReleaseLineId + Quantity Permitted ReleaseId + ReleaseLineId Not Permitted ReleaseId Not Permitted Short Event Impacts Impacts on Order and Inventory Components When an order event 'Short' is processed, the following updates occur: Order Updates The canceled quantity on the release line is increased by the order event quantity. The quantity on the allocation is decreased by the order event quantity. The quantity detail on the order is moved to \"Backordered\" status. If there is a short reasonId passed on the order event, then this value is populated for the reasonId on the quantity detail and the quantity shorted will be either canceled or submitted for reallocation automatically depending on the Reallocate on Short configuration in the order reason code. Note that the same reason codes should be defined across Store Inventory & Fulfillment(SIF), Order Management, and Inventory Management. If an unrecognized ShortReasonId is passed, then the server sends 400 bad request error indicating that the request sent to the server is invalid. If the short reason has the Reallocate on Short configuration set to null (it needs to be explicitly set to null through the backend), then the short quantity is reallocated or canceled based on the order configuration \"Reallocate on Short\".  In the event that the 'Cancel Backordered Units' configuration is enabled and there is no available inventory, short quantities are canceled when they are attempted to be allocation. If the short reason is not passed, the short quantity is reallocated or canceled based on the order configuration “Reallocate on Short”. If the quantity is canceled, then an entry in OrderLineCancelHistory is created with a default reason “FulfillmentSystemShorted. The quantity is cancelled from lower status to upper status, resulting in an inappropriate order line status. For example, consider an order with one line 3 quantity; 2 quantity in Picked status and 1 quantity in Released status. On receiving a short event for 2 quantity, 1 quantity from released and 1 quantity from picked status are cancelled, instead of canceling 2 quantity in picked status. This will result in both Min and Max fulfilment status of order line as Released and Picked instead of Released. It is expected that a further short on the picked qty is resent with \"Re-allocate on Short\" as true by doing so the order line will now move to released status. The order line \"lineShortCount\" is incremented whenever a short event is processed. Note that the count increment is not with respect to short quantity but with the number of events processed per order line. A message is sent to the Inventory component to reduce the supply allocated quantity and reduce the reservation allocated qty Inventory Updates For short events, the Order component must communicate to the Inventory component that an order could not be fulfilled. When a short event is received, the Order component relays a supply event with transaction type \"Short\" to the Inventory component. Inventory reads the short reason code and determines what action to take, such as should the inventory be an error or not. For example, Marking inventory as damaged or locked for QA for future orders. Note: During the inventory updates, the supply allocated quantity is reduced, but the supply quantity is not reduced. For additional details of how Inventory processes the events see the Reservation Guide - Fulfillment (Short) section. Note: If a location supports several supply types and if a short event is received on an On Hand supply type, all on Hand inventory records will be marked with the same error. That comes from the assumption that all fulfillment system should always try to fulfill the orders if there is inventory available. If a fulfillment system shorts an order, we interpret it such as there is no on hand inventory available across supply types for this item in this location. Impacts on Order and Inventory components for a Ship to Store Orders Since there are two allocations for order quantities, the status changes for the order quantities happen differently than with regular, single-leg orders. For ship to store orders, the status of the first leg (merge) determines the order quantity status until \"released\" (3000) status. This merge leg can be shorted before the order is shipped. In which case the allocation details of the order line is moved to a canceled/backorder status based on the short reason code Once the merge leg is released, the Pick up leg can be shorted before the order is picked up. When the pick up leg is shorted, the order line is moved to a canceled/backorder status based on the short reason code OM and SIF Integration When fulfillment is being executed within Store Fulfillment, status and quantity updates are communicated to the Order component via fulfillment outbound messages. These messages are translated into Order Event messages which the order can then process. Based on the type update, a specific type of order event message is created. The following table describes the order events that are triggered by the fulfillment updates. The details of how each order event type updates the order is described here. Multiple messages can be triggered at the same time if there are different kinds of updates during one fulfillment event. For example, during picking, if the store associate finds that not enough inventory is available for a fulfillment order, part of the fulfillment quantity is successfully picked, and the remaining is shorted. Two outbound messages/order events are triggered: one of type \"Picked\" and one of type \"Short\" for the respective quantities. Note: At the time of fulfillment, if an invalid ItemId is sent by the fulfillment system against a correct \"ReleaseId\", then OMS does not validate the ItemId and performs necessary action (pick/pack/short/ship etc) against the ReleaseId When SIF and DOM are integrated, each fulfillment outbound message SIF generates is picked up by the order component and translated into order events which are then processed. SIF releases a message which has a change set of records and values which have been updated (old values) as well as a full picture of the current fulfillment (new values). Order will have to compute the delta and determine the quantities and order event type for the order event. Other order event input values will come from the fulfillment outbound message. Fulfillment sends an outbound message with Event Name =  Fulfillment Shorted. Order generates an order event of EventTypeId = Short with statusId as 1500.000 (Backordered) and the quantity on Order Event is calculated as: Current Object Cancelled Qty - Change Set Cancelled Qty Fulfillment Event Order Event Fulfillment Shorted (during picking or packing) An order event is created of type \"Short\" Fulfillment Canceled An order event is created of type \"Short\" Note: The reason code configuration across store fulfillment, inventory, and order reasons should be the same. Configuration Reallocate on Short in the Order Configuration When order quantities are shorted by a fulfillment system, these quantities are back-ordered. The system determines how to handle these backorders based on the configuration of the \"ReallocateOnShort\" field. The order configuration flag ReallocateOnShort is evaluated only if ShortReasonId reason Id is not passed on the ShortEvent. If the field is set to true, then the order component attempts to reallocate these shorted quantities. If the field is set to false, the system cancels these quantities. This is configured in the Order Configuration UI. Order Reason Configuration Order Reasons can be configured using the menu on the left navigation panel on the application by accessing 'Order reasons' under 'Manage Order Configuration'. The order reason should have a Reason Id, Reason Type Id, and optional description. The order reason also has the Reallocate On Short check box. If the reason type id is short and the check box is selected, then the order is tried for allocation. If the Reallocate On Short check box is not selected, then the back-ordered units are cancelled. If ShortReasonId reason Id is not passed on the ShortEvent msg, then the system fails to use the ReallocateOnShort from the corresponding OrderConfig. Note: If an unrecognized ShortReasonId is passed, then the server sends 400 bad request error indicating that the request sent to the server is invalid. Inventory Reason Configuration Inventory reasons codes can be configured using the menu on the left navigation panel on the application by accessing the 'Inventory Reason Codes' tab under the 'Manage Inventory Configuration section'. If orderLineorderLineAdditional.IsMarkedForCancellation = true and short order event is received for the Release belonging to this order line, the quantity shorted in the order event will be canceled irrespective of the reallocate on short configuration Implementation Flavors Recognize a short message from carrier (during the time of delivery) in scenarios where product is damaged. Implementation: Customer can choose to have a custom status prior to fulfillment and move it to Fulfillment post POD. This is done as Short can be received from POD post fulfillment. On Short Reason Codes - Backorder instead of Cancel Whenever a short comes from the downstream fulfillment systems, some retailers want the order lines to remain in \"backordered\" status and not cancel immediately (when re-allocate on short is false). This will allow the retailers to manually review the order lines, select a fulfillment facility and manually allocate the order lines again. Implementation: This can be achieved using \"OrderLineShortExtensionHandler\" by specifying the entry condition as per the retailer's requirement. If you want only one reason code to move the order line to cancelled status, use \"==\" . One reason code to move the order line to cancelled status { \"ExtensionHandlerId\": \"OrderLineShortExtensionHandler\", \"ProfileId\": \"retail\", \"ExtensionhandlerRoute\": [ { \"ExtensionhandlerRouteId\": \"OrderLineShortExtensionHandlerRouteId\", \"Source\": \"ON_EVENT\", \"Destination\": \"cancelOrderLineShortEvent\", \"IsSync\": \"true\" } ], \"RegisteredExtensionPoints\": [ { \"ExtensionPointId\": \"Order:OrderLine:Event:OnShort\", \"EntryCondition\": \"CancelReason.ReasonId == '2000.000'\" } ] } This will allow order lines which are shorted with reason code = 2000.000 to go to \"Cancelled\" status and orders shorted with any other reason code having \"re-allocate on short\" as false to be in backordered status. Short with reason code 1000.000 - \"Reallocate on Short = False\" - Result: Backordered Short with reason code 2000.000 - \"Reallocate on Short = False\" - Result: Cancelled If you want any two reason codes to move the order line to canceled status, use \"||\" . Two reason codes to move the order line to cancelled status { \"ExtensionHandlerId\": \"OrderLineShortExtensionHandler\", \"ProfileId\": \"base\", \"ExtensionhandlerRoute\": [ { \"ExtensionhandlerRouteId\": \"OrderLineShortExtensionHandlerRouteId\", \"Source\": \"ON_EVENT\", \"Destination\": \"cancelOrderLineShortEvent\", \"IsSync\": \"true\" } ], \"RegisteredExtensionPoints\": [ { \"ExtensionPointId\": \"Order:OrderLine:Event:OnShort\", \"EntryCondition\": \"CancelReason.ReasonId == '1000.000'||CancelReason.ReasonId == '2000.000'\" } ] } This will allow order lines which are shorted with reason code = 1000.000 or 2000.000 to go to \"Cancelled\" status and order lines shorted with any other reason code having \"re-allocate on short\" as false to be in backordered status. Short with reason code 1000.000 - \"Reallocate on Short = False\" - Result: Cancelled Short with reason code 2000.000 - \"Reallocate on Short = False\" - Result: Cancelled Short with reason code TESTREASON - \"Reallocate on Short = False\" - Result: Backordered If you want more than two reason codes to move the order line to canceled status, use contains in the entry condition. More than two reason code to move the order line to cancelled status { \"ExtensionHandlerId\": \"OrderLineShortExtensionHandler\", \"ProfileId\": \"base\", \"ExtensionhandlerRoute\": [ { \"ExtensionhandlerRouteId\": \"OrderLineShortExtensionHandlerRouteId\", \"Source\": \"ON_EVENT\", \"Destination\": \"cancelOrderLineShortEvent\", \"IsSync\": \"true\" } ], \"RegisteredExtensionPoints\": [ { \"ExtensionPointId\": \"Order:OrderLine:Event:OnShort\", \"EntryCondition\": \"(['1000.000', '2000.000', 'TESTREASON'] contains CancelReason.ReasonId)\" } ] } This will allow order lines which are shorted with reason code = 1000.000, 2000.000 and TESTREASON to go to \"Cancelled\" status and order lines shorted with any other reason code having \"re-allocate on short\": false to be in backordered status Short with reason code 1000.000 - \"Reallocate on Short = False\" - Result: Cancelled Short with reason code 2000.000 - \"Reallocate on Short = False\" - Result: Cancelled Short with reason code TESTREASON - \"Reallocate on Short = False\" - Result: Cancelled Short with reason code TESTREASON2 - \"Reallocate on Short = False\" - Result: Backordered If you want one reason code to move the order line to cancelled status and the rest to move to backordered use \"&&\" One reason code to move the order line to cancelled status and the rest to move to backordered { \"ExtensionHandlerId\": \"OrderLineShortExtensionHandler\", \"ProfileId\": \"base\", \"ExtensionhandlerRoute\": [ { \"ExtensionhandlerRouteId\": \"OrderLineShortExtensionHandlerRouteId\", \"Source\": \"ON_EVENT\", \"Destination\": \"cancelOrderLineShortEvent\", \"IsSync\": \"true\" } ], \"RegisteredExtensionPoints\": [ { \"ExtensionPointId\": \"Order:OrderLine:Event:OnShort\", \"EntryCondition\": \"(CancelReason.ReasonId != '3000.000') && (CancelReason.ReasonId == '1000.000')\" } ] } This will allow order lines which are shorted with reason code = 1000.000 to go to \"Cancelled\" status and order lines shorted with any other reason code having \"re-allocate on short\" as false to be in backordered status. Short with reason code 1000.000 - \"Reallocate on Short = False\" - Result: Cancelled Short with reason code 2000.000 - \"Reallocate on Short = False\" - Result: Backordered Short with reason code TESTREASON - \"Reallocate on Short = False\" - Result: Backordered Short with reason code TESTREASON2 - \"Reallocate on Short = False\" - Result: Backordered Override the short reason sent from fulfillment so that the order line is canceled based on an overridden short reason where ReallocateOnShort is false. Implementation: Tap OrderEventMessageType before posting them to the base queue, filter event \"Short\", post them to a custom queue. Update the event with a new short reason and then post it to the base queue. How to apply hold on order line after release is shorted by DC Implementations: Out of the box does not support this feature. Use preOrderEvent or postOrderEvent user exits. Release line is shorted from DC or Store. Short event is sent to custom queue. Manhattan Active® Omni custom service checks the ShortReasodId if the Hold is required. A Hold is placed on order line, with matching hold type id. Short event message is sent to base queue. Troubleshooting Attempting to short the releases for partially fulfilled order lines using API gives an error Not able to short releases using API for partially fulfilled order lines when the order lines are not getting allocated because of unavailability of inventory(on hand or in transit). Follow the steps below in case the supply record is purged: Do a supply save instead of adjustment and add the corresponding Hash Id in the reservation to the supply. Use the sample JSONs provided here: { \"ExternalMessageId\": \"17618\", \"OrderEvent\": [{ \"ExternalMessageId\": \"17618\", \"EventTypeId\": \"Short\", \"ReleaseId\": \"MN-MARCH02-M00084\", \"ReleaseLineId\": \"1\", \"Item\": \"Tops-19691-Blue-S\", \"Quantity\": 1, \"UOM\": \"EA\", \"FulfillmentInfo\": { \"ShortReasonId\": \"3000.000\" } }]} Related Articles Ship EventsTypes of Order EventsDelivery Method Update EventsSubstitution During FulfillmentOverviewStatus Update EventsREST APIs and User ExitsFulfillment Update Events"
}