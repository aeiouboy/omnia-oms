{
  "id": "2342340",
  "permalink": "resilientcloud_configuration_guide",
  "title": "Resilient Cloud Configuration Guide",
  "type": "topic",
  "level": 7,
  "path": "Manhattan Active® Omni/Store/Process & Configuration Guides/Point of Sale/POS Classic Guides/Resilient Cloud for POS/Configuration/Resilient Cloud Configuration",
  "raw_item": {
    "id": "2342340",
    "text": "Resilient Cloud Configuration",
    "title": "Resilient Cloud Configuration",
    "permalink": "resilientcloud_configuration_guide",
    "leaf": false,
    "droppable": true,
    "expanded": true,
    "closed": true,
    "visible": true,
    "editable": true,
    "type": "topic",
    "topicType": "0",
    "status": "1",
    "iconCls": "icon-topic",
    "cls": "",
    "folder_id": "225076",
    "parent": "f;225076",
    "created_date": "1571867751",
    "modified_date": "1735316972",
    "instructor_id": null,
    "loaded": true,
    "haschildren": false,
    "callout": "0",
    "order": "1"
  },
  "success": true,
  "content": "\r\n\r\n\r\n<div class=\"hiq-page-wrap\">\r\n<div class=\"hiq-t-wrap\">\r\n\t\t\r\n  \t  <div class=\"hiq-t \">\r\n\t\t\t\t<ul class=\"breadcrumbs\"><li><a class=\"breadcrumb-links\" hqid=\"1788908\"  href=\"/home\">Home</a></li> <li><span>&rsaquo;&rsaquo;</span><a hqid=\"3500940\" href=\"/omni\" class=\"breadcrumb-links\">Manhattan Active® Omni</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"3426481\" href=\"/store-3\" class=\"breadcrumb-links\">Store</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158412\" href=\"/process-configuration-guides-3\" class=\"breadcrumb-links\">Process & Configuration Guides</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158737\" href=\"/point-of-sale\" class=\"breadcrumb-links\">Point of Sale</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2225114\" href=\"/process-configuration-guides-4\" class=\"breadcrumb-links\">POS Classic Guides</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2342333\" href=\"/20.1-resilient-cloud-for-pos-draft\" class=\"breadcrumb-links\">Resilient Cloud for POS</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2342339\" href=\"/configuration\" class=\"breadcrumb-links\">Configuration</a></li><li> <span>››</span>Resilient Cloud Configuration Guide</li></ul>  \t\r\n\t\t<h2>Resilient Cloud Configurations</h2>\r\n\r\n<p></p>\r\n\r\n<div class=\"info\"><ul><li><a href=\"/resilientcloud_configuration_guide$scheduler-config-nbsp-for-resilient-cloud\">Scheduler Config&nbsp;for Resilient Cloud</a><ul><li><a href=\"/resilientcloud_configuration_guide$common-scheduler-config\">Common Scheduler Config</a></li><li><a href=\"/resilientcloud_configuration_guide$inbound-sync-nbsp\">Inbound sync&nbsp;</a></li><li><a href=\"/resilientcloud_configuration_guide$outbound-sync-nbsp\">Outbound Sync&nbsp;</a></li><li><a href=\"/resilientcloud_configuration_guide$refresh-heartbeat-nbsp-scheduler-config\">Refresh Heartbeat:&nbsp;Scheduler Config</a></li></ul></li><li><a href=\"/resilientcloud_configuration_guide$edge-management-configurations\">Edge Management Configurations</a><ul><li><a href=\"/resilientcloud_configuration_guide$deployment-groups\">Deployment Groups</a></li><li><a href=\"/resilientcloud_configuration_guide$heartbeat\">Heartbeat</a></li></ul></li><li><a href=\"/resilientcloud_configuration_guide$edge-server-logging\">Edge Server Logging</a></li><li><a href=\"/resilientcloud_configuration_guide$online-offline-app-transition\">Online/Offline App Transition</a></li><li><a href=\"/resilientcloud_configuration_guide$uis-and-entities\">UIs and Entities</a></li></ul></div>\r\n\r\n<h3><a name=\"scheduler-config-nbsp-for-resilient-cloud\" id=\"scheduler-config-nbsp-for-resilient-cloud\"></a>Scheduler Config&nbsp;for Resilient Cloud</h3>\r\n\r\n<p>The data on the edge server needs to be constantly updated to keep in sync with the central server. This&nbsp;data exchange can be configured to be&nbsp;a scheduled interval or&nbsp;a cron&nbsp;job process. The cron&nbsp;job is configured for inbound sync and the scheduler interval job is configured for inbound sync for backoffice, heartbeat and outbound sync processes. There are certain configurations&nbsp;which are common across all the process and some are specific. Check the below configuration sections for the respective processes.</p>\r\n\r\n<h4><a name=\"common-scheduler-config\" id=\"common-scheduler-config\"></a>Common Scheduler Config</h4>\r\n\r\n<p>The scheduler job requires configuration of the below attributes in the application-edge.yml file on the backoffice&nbsp;component.&nbsp;Below are some common attributes that needs to be configured for the scheduler to work.&nbsp;These configurations are necessary to pull and push the data from central to resilient cloud or vice versa.&nbsp;</p>\r\n\r\n<p><strong>Central Server URL Config:</strong> The value for this configuration will be picked from the environment.bat file.</p>\r\n\r\n<ul>\r\n\t<li><strong>authURL</strong>: &nbsp;${CENTRAL_SERVER_AUTH_URL}</li>\r\n\t<li><strong>appURL</strong>: &nbsp;${CENTRAL_SERVER_URL}</li>\r\n</ul>\r\n\r\n<p><strong>Object Store Config: </strong>The&nbsp;binaries and config files are stored in object store, this data is picked by resilient cloud servers during initial setup and upgrade process. User can choose the object store type, it can be either amazon S3 bucket or google cloud storage. Based on the object store type, the below configuration need to be set up in backoffice, configSync and pricePromo components.</p>\r\n\r\n<ul>\r\n\t<li><strong>objectstore_type</strong>: cloud storage type, for example: s3 or gcs</li>\r\n\t<li><strong>accessKeyId</strong>: Access key Id&nbsp;valid for s3.</li>\r\n\t<li><strong>secretAccessKey</strong>: Secret Access Key valid for s3.</li>\r\n\t<li><strong>serviceAccountKey</strong>: Service Account Key valid for gcs</li>\r\n\t<li><strong>bucket</strong>: storage&nbsp;bucket details, valid for s3 or gcs.</li>\r\n\t<li><strong>region</strong>: storage region details,&nbsp;valid for s3 or gcs.</li>\r\n</ul>\r\n\r\n<p><span style=\"background-color:#ffffcc;\"><strong><big><a id=\"application-edgeyml\" name=\"application-edgeyml\"></a>application-edge.yml snapshot</big></strong></span></p>\r\n\r\n<pre>\r\n<code>edge:\r\n  heartbeat: \r\n    interval: 300000\r\n  inboundSyncBackoffice:\r\n    interval: 120000\r\n  outboundSync:\r\n    interval: 300000\r\n  outbound:\r\n    # maximum records to fetch for sync at a time\r\n    fetchSize: 100\r\n    # maximum minutes to wait before sync of confirmed/unconfirmed orders\r\n    waitBeforeSync:\r\n        confirmedOrders: 15\r\n        unconfirmedOrders: 30\r\n  inboundSync:\r\n    cron: 0 0 0 * * *\r\n    exportDir: ${CONFIG_FOLDER_PATH}/inbound-sync/exports\r\n    diffDir: ${CONFIG_FOLDER_PATH}/inbound-sync/diffs\r\n    qualifier: EdgeServer\r\n    objectStore:\r\n      namespace: config-data\r\n    import:\r\n# Wait time in minutes\r\n      waitTime: 10\r\n  config:\r\n    qualifier:\r\n  configFolderPath: ${CONFIG_FOLDER_PATH}\r\n  heartbeatKeyFilePath: file:/${CONFIG_FOLDER_PATH}/heartbeat.key\r\n \r\n#central server properties for store.\r\n# Example values\r\n# authUrl: https://dz-auth.manh-dev.com\r\n# appUrl: https://dz.manh-dev.com\r\n \r\ncentral:\r\n authUrl: ${CENTRAL_SERVER_AUTH_URL}\r\n appUrl: ${CENTRAL_SERVER_URL}\r\n \r\n#Object Store Configuration\r\n\r\ncore:\r\n  objectstore:\r\n    type: ${CORE_OBJECTSTORE_TYPE:s3}\r\n    s3:\r\n&nbsp;     accessKeyId: ${CORE_OBJECTSTORE_S3_ACCESSKEYID:}\r\n&nbsp; &nbsp; &nbsp; secretAccessKey: ${CORE_OBJECTSTORE_S3_SECRETACCESSKEY:}\r\n&nbsp; &nbsp; &nbsp; bucket: ${CORE_OBJECTSTORE_S3_BUCKET:}\r\n&nbsp; &nbsp; &nbsp; region: ${CORE_OBJECTSTORE_S3_REGION:}\r\n    gcs: \r\n&nbsp; &nbsp; &nbsp; bucket: ${CORE_OBJECTSTORE_GCS_BUCKET:}\r\n&nbsp; &nbsp; &nbsp; region: ${CORE_OBJECTSTORE_GCS_REGION:}\r\n&nbsp; &nbsp; &nbsp; serviceAccountKey: ${CORE_OBJECTSTORE_GCS_SERVICEACCOUNTKEY:}</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4><a name=\"inbound-sync-nbsp\" id=\"inbound-sync-nbsp\"></a>Inbound sync&nbsp;</h4>\r\n\r\n<h5><big>Scheduler Config</big></h5>\r\n\r\n<p>&quot;Inbound&quot;&nbsp;is the process by which packaged/posted data&nbsp;from the Central&nbsp;server is retrieved/loaded&nbsp;by the edge&nbsp;server. Below configurations are required for Inbound Sync scheduler.</p>\r\n\r\n<ul style=\"list-style-position: initial; list-style-image: initial;\">\r\n\t<li><strong>cron</strong>:&nbsp;<em>0 0 0 * * *</em>&nbsp;(Which can be interpreted as the job is scheduled&nbsp;to run every day at 10:00 AM)</li>\r\n\t<li><strong>configFolderPath</strong>: &nbsp;<em>${CONFIG_FOLDER_PATH}</em> (This actual path will be picked from environment.bat file, this attribute specifies&nbsp;the folder path for configurations)</li>\r\n\t<li><strong>exportDir</strong>:&nbsp;<em>${CONFIG_FOLDER_PATH}/inbound-sync/exports</em>&nbsp;(This actual path will be picked from environment.bat file, which&nbsp;is again appended by the subfolder structure)</li>\r\n\t<li><strong>diffDir</strong>:&nbsp;<em>${CONFIG_FOLDER_PATH}/inbound-sync/diffs</em>&nbsp;(This actual path will be picked from environment.bat file, which&nbsp;is again appended by the subfolder structure)</li>\r\n\t<li><strong>qualifier</strong>: <em>EdgeServer</em>&nbsp;(The code for inbound sync process will look for files appended with &quot;EdgeServer&quot; for this job)</li>\r\n\t<li><strong>objectStore_nameSpace</strong>:<strong> </strong><em>config-data</em>&nbsp;(Export directory name on the S3/GCS bucket from where the zip file needs to be fetched)</li>\r\n\t<li><strong>import_waitTime</strong>: 10 (This time is in minutes, the wait time provided for import file to be copied to edge server. After this wait time the inbound job will log the status of the inbound job)</li>\r\n</ul>\r\n\r\n<h5><big>Backoffice- scheduler&nbsp;config</big></h5>\r\n\r\n<p>This &quot;Inbound&quot; job is specific to push the backoffice&nbsp;transaction such as &quot;store open&quot; and &quot;till open&quot; transaction from central server to the edge server so that when store goes offline the tills are in the correct state/status/amount.&nbsp; This is the only case in which certain transaction data&nbsp;are sent FROM Central TO Edge - normally only configurations and price data are&nbsp;included in Inbound bundles, and transactions&nbsp;flow the other way during Outbound sync.&nbsp; Below configurations are required for inbound&nbsp;backoffice Sync scheduler. This job will use the common scheduler config&nbsp;with below configuration.</p>\r\n\r\n<ul>\r\n\t<li><strong>inboundSyncBackoffice_interval</strong>: 120000 (This time is in milliseconds;&nbsp;this job run every 2 minutes)</li>\r\n</ul>\r\n\r\n<div>\r\n<h4>&nbsp;</h4>\r\n\r\n<h4><a name=\"outbound-sync-nbsp\" id=\"outbound-sync-nbsp\"></a>Outbound Sync&nbsp;</h4>\r\n\r\n<p><big>Scheduler Config</big></p>\r\n\r\n<p>When the devices are running in offline &#39;Edge&#39; mode, transactions are written to the Edge server.&nbsp; Periodically, when connectivity to Cloud is present, these transactions must move from the local Edge server&nbsp;to the Central cloud.&nbsp; The&nbsp;&quot;Outbound&quot; job is&nbsp;to push the order and backoffice&nbsp;transaction&nbsp;from edge server to the central server.&nbsp; Below configurations are required in application-edge.yml for outbound&nbsp;Sync scheduler.&nbsp;This job will use the common scheduler&nbsp;config&nbsp;with below configuration.</p>\r\n\r\n<ul>\r\n\t<li><strong>outboundSync_interval</strong>: 300000&nbsp;(This time is in milliseconds;&nbsp;this job run every 5&nbsp;minutes)</li>\r\n\t<li><strong>fetchSize</strong>: 100 (maximum number of records to fetch for sync at a time)</li>\r\n\t<li><strong>waitBeforeSync_confirmedOrders</strong>: 15 (This time is in minutes;&nbsp;outbound&nbsp;sync process will pick&nbsp;confirmed order after 15 minutes&nbsp;of creation of order)</li>\r\n\t<li><strong>waitBeforeSync_unconfirmedOrders</strong>:&nbsp;30&nbsp;(This time is in minutes;&nbsp;outbound&nbsp;sync process will&nbsp;pick&nbsp;confirmed order after 15&nbsp;minutes of creation of order)</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4><a name=\"refresh-heartbeat-nbsp-scheduler-config\" id=\"refresh-heartbeat-nbsp-scheduler-config\"></a>Refresh Heartbeat:&nbsp;Scheduler Config</h4>\r\n\r\n<p>The below&nbsp;configuration is required for heartbeat scheduler process.</p>\r\n\r\n<ul>\r\n\t<li>heartbeat_interval: 30000&nbsp;(This time is in milliseconds;&nbsp;in this example the refresh job runs every 5&nbsp;minutes)</li>\r\n</ul>\r\n\r\n<hr />\r\n<h3><a name=\"edge-management-configurations\" id=\"edge-management-configurations\"></a>Edge Management Configurations</h3>\r\n\r\n<p>The configurations of Edge management screen which include Edge Dashboard, Deployment groups, Edge Server details, Heartbeat are covered in this section</p>\r\n\r\n<h4><a name=\"deployment-groups\" id=\"deployment-groups\"></a><a id=\"Deploymentgroup_Config\" name=\"Deploymentgroup_Config\"></a>Deployment Groups</h4>\r\n\r\n<p>The Installer at each Edge should be scheduled to run automatically based on an initial date and a duration.&nbsp; &nbsp;For example, &quot;At this location, after December 15, 2019, run the installer every day after 10 PM for 4 hours&quot;.&nbsp; This means the installer will check for binaries at any locations configured this way nightly, from 10 PM to 2 AM local time.&nbsp;</p>\r\n\r\n<p>For convenience we offer the ability to set up this schedule for groups of stores, rather than store-by-store.&nbsp;&nbsp;&nbsp;These groups are called Deployment Groups.&nbsp;</p>\r\n\r\n<p>The Deployment group screen lists all the location included as part of scheduled automated job for installation. Deployment group includes locations, date, time window and target binary files configuration.&nbsp;This can be done from config UI&nbsp;running on central server. This is done by a corporate or IT admin user to configure automated installation from config UI&nbsp;on central. Deployment group can be configured for all locations&nbsp;in that organization, but each location can be part of only one deployment group. i.e. a single location or edge server&nbsp;cannot have two automated scheduled installation configured. It&nbsp;works for fresh install or an upgrade and can be for specific location or group of locations.</p>\r\n\r\n<p>The deployment group list screen shows all the deployment groups created for the logged in organization. If user switches organization from top header, then deployment group for select organization will be displayed.</p>\r\n\r\n<h5>Configuration on Central Server</h5>\r\n\r\n<p>There is an Omnifacade Config UI on central server to support management of automated installation/update. User must create a deployment group and add locations and/or edge server Ids which need to be upgraded or installed. This deployment group will initiate&nbsp;the scheduler process for installation by providing edge server files to the caller (resilient cloud) during&nbsp;the configured date and time window. Check the step by step&nbsp;configurations.</p>\r\n\r\n<ul>\r\n\t<li>Log in to&nbsp;the central server configuration UI.</li>\r\n\t<li>Go to&nbsp;<strong>Edge Management</strong> &gt; <strong>Heartbeat </strong>on the&nbsp;omnifacade screen.</li>\r\n\t<li>Heartbeat lists all the locations in that organization, Identify&nbsp;the locations which needs resilient cloud install or upgrade.</li>\r\n\t<li>Create heartbeat for that location, if heartbeat exists, then reset the heartbeat.</li>\r\n\t<li>Go to the Deployment groups tab.&nbsp;Create a deployment group (automated scheduler) and add locations which needs edge server installation/upgrade.</li>\r\n\t<li>Choose the date and the time window to execute the process .\r\n\t<ul>\r\n\t\t<li>Resilient cloud picks for updates&nbsp;only after this date is reached and only during that configured time window.</li>\r\n\t\t<li>If It fails for the configured date, it will try again the next day and subsequent days until the edge server has successfully installed.</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li>Choose the edge server files which you want to install or upgrade.\r\n\t<ul>\r\n\t\t<li>User needs to provide either of the below binary zip file version\r\n\t\t<ul>\r\n\t\t\t<li>Base binary zip file version (If this is fresh installation, then base file is mandatory for successful installation)</li>\r\n\t\t\t<li>Custom&nbsp;binary zip file version</li>\r\n\t\t\t<li>Config&nbsp;binary zip file version</li>\r\n\t\t</ul>\r\n\t\t</li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<h5>Configuration on Resilient cloud</h5>\r\n\r\n<p>Upon completion of configuration on central, each resilient cloud server box which are configured for automated install/upgrade needs to have &quot;edge installer&quot; which is a&nbsp;utility tool. Edge Installer makes calls to central using default heartbeat to get object store credentials and files which needs upgrades, downloads the files and performs the automated installation on resilient cloud box. There are some more pre-requisites and configuration required on resilient cloud for automated process. For details on pre-requisites and to set up edge server installation, check&nbsp;<a hqid=\"2342336\" href=\"/installationandupgrade$Deployment group\">Installation and Upgrade</a>&nbsp;</p>\r\n\r\n<h4><a name=\"heartbeat\" id=\"heartbeat\"></a><a id=\"Heartbeat-config\" name=\"Heartbeat-config\"></a>Heartbeat</h4>\r\n\r\n<p>Before deploying&nbsp;the Resilient Cloud&nbsp;server on store, it is a pre-requisite to create&nbsp;a username and password (heartbeat) for that store/location. This can be done from the omnifacade&nbsp;UI under Menu &gt; Manage POS Configuration &gt; Edge Configuration &gt; Heartbeat.&nbsp;The heartbeat timestamp in OmniFacade is displayed in UTC.</p>\r\n\r\n<p><strong>Filter Options:</strong></p>\r\n\r\n<ul>\r\n\t<li>All</li>\r\n\t<li>With Active Heartbeat</li>\r\n\t<li>With No Active Heartbeat</li>\r\n</ul>\r\n\r\n<p><strong>Grants: </strong>A&nbsp;user will be allowed to view and generate the heartbeat, ensure that the user role has the below grants:</p>\r\n\r\n<ul>\r\n\t<li>To view the heartbeat for a store: &quot;omnifacade::edgeserver::heartbeat::read&quot; and &quot;omnifacade::edgeserver::newheartbeat::read&quot;</li>\r\n\t<li>To generate heartbeat for a store or list of stores: &quot;omnifacade::edgeserver::heartbeat::createupdate&quot;</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><big>Generating Heartbeat:</big> Heartbeat configuration UI will list down all the stores and provides information if the store already has a heartbeat. To generate a heartbeat, user can use below filter option or use the locationId&nbsp;to filter edge server and click the generate button after making the selection. HeartbeatId is generated for the selected locations or edge servers.</p>\r\n\r\n<p>The generated&nbsp;heartbeat is saved in&nbsp;backoffice component along with the timestamp data.&nbsp;This data will be saved on the user table as well,&nbsp;the &quot;generate and confirm process&quot; will do that for us and saves the heartbeat as a password in the existing user entity on the organization component. The username will be the orgId+locationId&nbsp;prefixed with the text &quot;edge&quot;, for example:&nbsp;if the orgId=tm-demo-us and&nbsp;storeId is STR1 then the username created for this will be &quot;edgetm-demo-usSTR1&quot;. This information on user entity is to authenticate the calls from edge server to central, if the data between edge and central goes out of sync. Whenever a new heartbeat is generated as part of refresh heartbeat, the password on the user entity for this user&nbsp;will be updated with the latest.&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<p><big>Reset Heartbeat:</big>&nbsp;If a heartbeat goes out of sync during any refresh heartbeat process or due to any data manipulation,&nbsp;or if the user wants to setup a scheduled/automated&nbsp;upgrade of edge server for its previously manually installed edge server&nbsp;locations then a default heartbeat is required. User can use this screen to reset the heartbeat for one or more locations/edge servers. This will reset the heartbeat with a default value.</p>\r\n\r\n<div class=\"info\">Note: If you are running an edge server which is installed manually and then upgrading to automated edge server installation using deployment group, then reset heartbeat is mandatory for all locations + edge servers.&nbsp;&nbsp;</div>\r\n\r\n<hr />\r\n<h3><a name=\"edge-server-logging\" id=\"edge-server-logging\"></a>Edge Server Logging</h3>\r\n\r\n<p>This configuration is required before edge server start up. This is a manual set up which is done for individual edge servers. The &ldquo;<b>cron</b>&rdquo; configuration is to specify the daily scheduler time to run which is 6 AM for&nbsp;this configuration. The log directory specifies the Tomcat&rsquo;s log directory which only needs to change when the Tomcat web container release is not version 8, or we don&rsquo;t use Tomcat at all.</p>\r\n\r\n<p>Application-edge.yml under edge session:</p>\r\n\r\n<p>uploadLogCentral:</p>\r\n\r\n<p>cron: ${UPLOAD_LOG_CRON_EXPRESSION: 0 0 6 * * ?</p>\r\n\r\n<p>logDirectory: ${MANH_EDGE_HOME}/tomcat8/logs</p>\r\n\r\n<hr />\r\n<h3><a name=\"online-offline-app-transition\" id=\"online-offline-app-transition\"></a>Online/Offline App Transition</h3>\r\n\r\n<p>There are three configurations associated to the online/offline notification allowing users to switch between the two applications. The configs can be found under Application Configuration &gt; Manage POS Configuration &gt; POS Configurations &gt; POS Store Configurations &gt; Store Common Config.&nbsp;</p>\r\n\r\n<ul>\r\n\t<li>Notify Online Offline: When selected, the user will be notified that the application is offline to the cloud or store network, and subsequently when communication is established.</li>\r\n\t<li>App Switch Countdown: This is the countdown in seconds that appears on the notification to the user.&nbsp; If the user does not choose an option before the countdown reaches 0, they will automatically be logged out of the application.&nbsp; If no value is set, the system will default to a 30 second countdown</li>\r\n\t<li>UI Response Timeout: This timeout allows the retailer to set an appropriate amount of time in seconds for which the UI will wait for a response from the cloud before initiating the timeout notification.&nbsp; The default timeout is 15 seconds</li>\r\n</ul>\r\n\r\n<p>These configurations can be set either at the individual location level or for all locations.</p>\r\n\r\n<h3><a name=\"uis-and-entities\" id=\"uis-and-entities\"></a>UIs and Entities</h3>\r\n\r\n<p>The configuration UI&#39;s mentioned in this document are listed in the following table, along with information to&nbsp;navigate&nbsp;to the API documentation.</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\" style=\"margin-top: 0px; margin-right: 0px; margin-left: 0px; font-weight: normal;\"><strong>UI Name</strong></th>\r\n\t\t\t<th scope=\"col\" style=\"margin-top: 0px; margin-right: 0px; margin-left: 0px; font-weight: normal;\"><strong>Component</strong></th>\r\n\t\t\t<th scope=\"col\" style=\"margin-top: 0px; margin-right: 0px; margin-left: 0px; font-weight: normal;\"><strong>Group</strong></th>\r\n\t\t\t<th scope=\"col\" style=\"margin-top: 0px; margin-right: 0px; margin-left: 0px; font-weight: normal;\"><strong>Seed Data Present?</strong></th>\r\n\t\t\t<th scope=\"col\" style=\"margin-top: 0px; margin-right: 0px; margin-left: 0px; font-weight: normal;\"><strong>Seed Data Profile</strong></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"margin: 0px;\">Edge Management-Dashboard</td>\r\n\t\t\t<td style=\"margin: 0px;\">backoffice</td>\r\n\t\t\t<td style=\"margin: 0px;\">EdgeEventSummary Services</td>\r\n\t\t\t<td style=\"margin: 0px;\">No</td>\r\n\t\t\t<td style=\"margin: 0px;\">&nbsp;</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"margin: 0px;\">Edge Management-Deployment Group</td>\r\n\t\t\t<td style=\"margin: 0px;\">backoffice</td>\r\n\t\t\t<td style=\"margin: 0px;\">DeploymentGroup Service</td>\r\n\t\t\t<td style=\"margin: 0px;\">Yes</td>\r\n\t\t\t<td style=\"margin: 0px;\">Base</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"margin: 0px;\">Edge Management-Edge Servers</td>\r\n\t\t\t<td style=\"margin: 0px;\">backoffice</td>\r\n\t\t\t<td style=\"margin: 0px;\">EdgeEventTrace&nbsp;Service</td>\r\n\t\t\t<td style=\"margin: 0px;\">No</td>\r\n\t\t\t<td style=\"margin: 0px;\">&nbsp;</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"margin: 0px;\">Edge Management-Heartbeat</td>\r\n\t\t\t<td style=\"margin: 0px;\">backoffice</td>\r\n\t\t\t<td style=\"margin: 0px;\">StoreHeartbeat Service</td>\r\n\t\t\t<td style=\"margin: 0px;\">No</td>\r\n\t\t\t<td style=\"margin: 0px;\">&nbsp;</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n</div>\r\n\r\n\t  </div>\r\n </div>\r\n <div id=\"ui-page-fb-wrap\"></div>\r\n <div class=\"hiq-footer-wrap\">\r\n    \r\n                \r\n  </div>\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n",
  "content_length": 23209,
  "scraped_at": "2025-08-09T22:03:56.043172",
  "content_clean": "Home ››Manhattan Active® Omni››Store››Process & Configuration Guides››Point of Sale››POS Classic Guides››Resilient Cloud for POS››Configuration ››Resilient Cloud Configuration Guide Resilient Cloud Configurations Scheduler Config for Resilient CloudCommon Scheduler ConfigInbound sync Outbound Sync Refresh Heartbeat: Scheduler ConfigEdge Management ConfigurationsDeployment GroupsHeartbeatEdge Server LoggingOnline/Offline App TransitionUIs and Entities Scheduler Config for Resilient Cloud The data on the edge server needs to be constantly updated to keep in sync with the central server. This data exchange can be configured to be a scheduled interval or a cron job process. The cron job is configured for inbound sync and the scheduler interval job is configured for inbound sync for backoffice, heartbeat and outbound sync processes. There are certain configurations which are common across all the process and some are specific. Check the below configuration sections for the respective processes. Common Scheduler Config The scheduler job requires configuration of the below attributes in the application-edge.yml file on the backoffice component. Below are some common attributes that needs to be configured for the scheduler to work. These configurations are necessary to pull and push the data from central to resilient cloud or vice versa. Central Server URL Config: The value for this configuration will be picked from the environment.bat file. authURL:  ${CENTRAL_SERVER_AUTH_URL} appURL:  ${CENTRAL_SERVER_URL} Object Store Config: The binaries and config files are stored in object store, this data is picked by resilient cloud servers during initial setup and upgrade process. User can choose the object store type, it can be either amazon S3 bucket or google cloud storage. Based on the object store type, the below configuration need to be set up in backoffice, configSync and pricePromo components. objectstore_type: cloud storage type, for example: s3 or gcs accessKeyId: Access key Id valid for s3. secretAccessKey: Secret Access Key valid for s3. serviceAccountKey: Service Account Key valid for gcs bucket: storage bucket details, valid for s3 or gcs. region: storage region details, valid for s3 or gcs. application-edge.yml snapshot edge: heartbeat: interval: 300000 inboundSyncBackoffice: interval: 120000 outboundSync: interval: 300000 outbound: # maximum records to fetch for sync at a time fetchSize: 100 # maximum minutes to wait before sync of confirmed/unconfirmed orders waitBeforeSync: confirmedOrders: 15 unconfirmedOrders: 30 inboundSync: cron: 0 0 0 * * * exportDir: ${CONFIG_FOLDER_PATH}/inbound-sync/exports diffDir: ${CONFIG_FOLDER_PATH}/inbound-sync/diffs qualifier: EdgeServer objectStore: namespace: config-data import: # Wait time in minutes waitTime: 10 config: qualifier: configFolderPath: ${CONFIG_FOLDER_PATH} heartbeatKeyFilePath: file:/${CONFIG_FOLDER_PATH}/heartbeat.key #central server properties for store. # Example values # authUrl: https://dz-auth.manh-dev.com # appUrl: https://dz.manh-dev.com central: authUrl: ${CENTRAL_SERVER_AUTH_URL} appUrl: ${CENTRAL_SERVER_URL} #Object Store Configuration core: objectstore: type: ${CORE_OBJECTSTORE_TYPE:s3} s3: accessKeyId: ${CORE_OBJECTSTORE_S3_ACCESSKEYID:} secretAccessKey: ${CORE_OBJECTSTORE_S3_SECRETACCESSKEY:} bucket: ${CORE_OBJECTSTORE_S3_BUCKET:} region: ${CORE_OBJECTSTORE_S3_REGION:} gcs: bucket: ${CORE_OBJECTSTORE_GCS_BUCKET:} region: ${CORE_OBJECTSTORE_GCS_REGION:} serviceAccountKey: ${CORE_OBJECTSTORE_GCS_SERVICEACCOUNTKEY:} Inbound sync Scheduler Config \"Inbound\" is the process by which packaged/posted data from the Central server is retrieved/loaded by the edge server. Below configurations are required for Inbound Sync scheduler. cron: 0 0 0 * * * (Which can be interpreted as the job is scheduled to run every day at 10:00 AM) configFolderPath:  ${CONFIG_FOLDER_PATH} (This actual path will be picked from environment.bat file, this attribute specifies the folder path for configurations) exportDir: ${CONFIG_FOLDER_PATH}/inbound-sync/exports (This actual path will be picked from environment.bat file, which is again appended by the subfolder structure) diffDir: ${CONFIG_FOLDER_PATH}/inbound-sync/diffs (This actual path will be picked from environment.bat file, which is again appended by the subfolder structure) qualifier: EdgeServer (The code for inbound sync process will look for files appended with \"EdgeServer\" for this job) objectStore_nameSpace: config-data (Export directory name on the S3/GCS bucket from where the zip file needs to be fetched) import_waitTime: 10 (This time is in minutes, the wait time provided for import file to be copied to edge server. After this wait time the inbound job will log the status of the inbound job) Backoffice- scheduler config This \"Inbound\" job is specific to push the backoffice transaction such as \"store open\" and \"till open\" transaction from central server to the edge server so that when store goes offline the tills are in the correct state/status/amount.  This is the only case in which certain transaction data are sent FROM Central TO Edge - normally only configurations and price data are included in Inbound bundles, and transactions flow the other way during Outbound sync.  Below configurations are required for inbound backoffice Sync scheduler. This job will use the common scheduler config with below configuration. inboundSyncBackoffice_interval: 120000 (This time is in milliseconds; this job run every 2 minutes) Outbound Sync Scheduler Config When the devices are running in offline 'Edge' mode, transactions are written to the Edge server.  Periodically, when connectivity to Cloud is present, these transactions must move from the local Edge server to the Central cloud.  The \"Outbound\" job is to push the order and backoffice transaction from edge server to the central server.  Below configurations are required in application-edge.yml for outbound Sync scheduler. This job will use the common scheduler config with below configuration. outboundSync_interval: 300000 (This time is in milliseconds; this job run every 5 minutes) fetchSize: 100 (maximum number of records to fetch for sync at a time) waitBeforeSync_confirmedOrders: 15 (This time is in minutes; outbound sync process will pick confirmed order after 15 minutes of creation of order) waitBeforeSync_unconfirmedOrders: 30 (This time is in minutes; outbound sync process will pick confirmed order after 15 minutes of creation of order) Refresh Heartbeat: Scheduler Config The below configuration is required for heartbeat scheduler process. heartbeat_interval: 30000 (This time is in milliseconds; in this example the refresh job runs every 5 minutes) Edge Management Configurations The configurations of Edge management screen which include Edge Dashboard, Deployment groups, Edge Server details, Heartbeat are covered in this section Deployment Groups The Installer at each Edge should be scheduled to run automatically based on an initial date and a duration.   For example, \"At this location, after December 15, 2019, run the installer every day after 10 PM for 4 hours\".  This means the installer will check for binaries at any locations configured this way nightly, from 10 PM to 2 AM local time. For convenience we offer the ability to set up this schedule for groups of stores, rather than store-by-store.   These groups are called Deployment Groups. The Deployment group screen lists all the location included as part of scheduled automated job for installation. Deployment group includes locations, date, time window and target binary files configuration. This can be done from config UI running on central server. This is done by a corporate or IT admin user to configure automated installation from config UI on central. Deployment group can be configured for all locations in that organization, but each location can be part of only one deployment group. i.e. a single location or edge server cannot have two automated scheduled installation configured. It works for fresh install or an upgrade and can be for specific location or group of locations. The deployment group list screen shows all the deployment groups created for the logged in organization. If user switches organization from top header, then deployment group for select organization will be displayed. Configuration on Central Server There is an Omnifacade Config UI on central server to support management of automated installation/update. User must create a deployment group and add locations and/or edge server Ids which need to be upgraded or installed. This deployment group will initiate the scheduler process for installation by providing edge server files to the caller (resilient cloud) during the configured date and time window. Check the step by step configurations. Log in to the central server configuration UI. Go to Edge Management > Heartbeat on the omnifacade screen. Heartbeat lists all the locations in that organization, Identify the locations which needs resilient cloud install or upgrade. Create heartbeat for that location, if heartbeat exists, then reset the heartbeat. Go to the Deployment groups tab. Create a deployment group (automated scheduler) and add locations which needs edge server installation/upgrade. Choose the date and the time window to execute the process . Resilient cloud picks for updates only after this date is reached and only during that configured time window. If It fails for the configured date, it will try again the next day and subsequent days until the edge server has successfully installed. Choose the edge server files which you want to install or upgrade. User needs to provide either of the below binary zip file version Base binary zip file version (If this is fresh installation, then base file is mandatory for successful installation) Custom binary zip file version Config binary zip file version Configuration on Resilient cloud Upon completion of configuration on central, each resilient cloud server box which are configured for automated install/upgrade needs to have \"edge installer\" which is a utility tool. Edge Installer makes calls to central using default heartbeat to get object store credentials and files which needs upgrades, downloads the files and performs the automated installation on resilient cloud box. There are some more pre-requisites and configuration required on resilient cloud for automated process. For details on pre-requisites and to set up edge server installation, check Installation and Upgrade Heartbeat Before deploying the Resilient Cloud server on store, it is a pre-requisite to create a username and password (heartbeat) for that store/location. This can be done from the omnifacade UI under Menu > Manage POS Configuration > Edge Configuration > Heartbeat. The heartbeat timestamp in OmniFacade is displayed in UTC. Filter Options: All With Active Heartbeat With No Active Heartbeat Grants: A user will be allowed to view and generate the heartbeat, ensure that the user role has the below grants: To view the heartbeat for a store: \"omnifacade::edgeserver::heartbeat::read\" and \"omnifacade::edgeserver::newheartbeat::read\" To generate heartbeat for a store or list of stores: \"omnifacade::edgeserver::heartbeat::createupdate\" Generating Heartbeat: Heartbeat configuration UI will list down all the stores and provides information if the store already has a heartbeat. To generate a heartbeat, user can use below filter option or use the locationId to filter edge server and click the generate button after making the selection. HeartbeatId is generated for the selected locations or edge servers. The generated heartbeat is saved in backoffice component along with the timestamp data. This data will be saved on the user table as well, the \"generate and confirm process\" will do that for us and saves the heartbeat as a password in the existing user entity on the organization component. The username will be the orgId+locationId prefixed with the text \"edge\", for example: if the orgId=tm-demo-us and storeId is STR1 then the username created for this will be \"edgetm-demo-usSTR1\". This information on user entity is to authenticate the calls from edge server to central, if the data between edge and central goes out of sync. Whenever a new heartbeat is generated as part of refresh heartbeat, the password on the user entity for this user will be updated with the latest. Reset Heartbeat: If a heartbeat goes out of sync during any refresh heartbeat process or due to any data manipulation, or if the user wants to setup a scheduled/automated upgrade of edge server for its previously manually installed edge server locations then a default heartbeat is required. User can use this screen to reset the heartbeat for one or more locations/edge servers. This will reset the heartbeat with a default value. Note: If you are running an edge server which is installed manually and then upgrading to automated edge server installation using deployment group, then reset heartbeat is mandatory for all locations + edge servers. Edge Server Logging This configuration is required before edge server start up. This is a manual set up which is done for individual edge servers. The “cron” configuration is to specify the daily scheduler time to run which is 6 AM for this configuration. The log directory specifies the Tomcat’s log directory which only needs to change when the Tomcat web container release is not version 8, or we don’t use Tomcat at all. Application-edge.yml under edge session: uploadLogCentral: cron: ${UPLOAD_LOG_CRON_EXPRESSION: 0 0 6 * * ? logDirectory: ${MANH_EDGE_HOME}/tomcat8/logs Online/Offline App Transition There are three configurations associated to the online/offline notification allowing users to switch between the two applications. The configs can be found under Application Configuration > Manage POS Configuration > POS Configurations > POS Store Configurations > Store Common Config. Notify Online Offline: When selected, the user will be notified that the application is offline to the cloud or store network, and subsequently when communication is established. App Switch Countdown: This is the countdown in seconds that appears on the notification to the user.  If the user does not choose an option before the countdown reaches 0, they will automatically be logged out of the application.  If no value is set, the system will default to a 30 second countdown UI Response Timeout: This timeout allows the retailer to set an appropriate amount of time in seconds for which the UI will wait for a response from the cloud before initiating the timeout notification.  The default timeout is 15 seconds These configurations can be set either at the individual location level or for all locations. UIs and Entities The configuration UI's mentioned in this document are listed in the following table, along with information to navigate to the API documentation. UI Name Component Group Seed Data Present? Seed Data Profile Edge Management-Dashboard backoffice EdgeEventSummary Services No Edge Management-Deployment Group backoffice DeploymentGroup Service Yes Base Edge Management-Edge Servers backoffice EdgeEventTrace Service No Edge Management-Heartbeat backoffice StoreHeartbeat Service No"
}