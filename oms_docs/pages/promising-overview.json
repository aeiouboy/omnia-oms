{
  "id": "2641919",
  "permalink": "promising-overview",
  "title": "Overview",
  "type": "topic",
  "level": 4,
  "path": "Manhattan Active® Omni/Order Management/Process & Configuration Guides/Order Promising/Overview",
  "raw_item": {
    "id": "2641919",
    "text": "Overview",
    "title": "Overview",
    "permalink": "promising-overview",
    "leaf": false,
    "droppable": true,
    "expanded": true,
    "closed": true,
    "visible": true,
    "editable": true,
    "type": "topic",
    "topicType": "0",
    "status": "1",
    "iconCls": "icon-topic",
    "cls": "",
    "folder_id": "129588",
    "parent": "f;129588",
    "created_date": "1602560546",
    "modified_date": "1751546947",
    "instructor_id": null,
    "loaded": true,
    "haschildren": false,
    "callout": "0",
    "order": "2"
  },
  "success": true,
  "content": "\r\n\r\n\r\n<div class=\"hiq-page-wrap\">\r\n<div class=\"hiq-t-wrap\">\r\n\t\t\r\n  \t  <div class=\"hiq-t \">\r\n\t\t\t\t<ul class=\"breadcrumbs\"><li><a class=\"breadcrumb-links\" hqid=\"1788908\"  href=\"/home\">Home</a></li> <li><span>&rsaquo;&rsaquo;</span><a hqid=\"3500940\" href=\"/omni\" class=\"breadcrumb-links\">Manhattan Active® Omni</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158393\" href=\"/order-management\" class=\"breadcrumb-links\">Order Management</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158394\" href=\"/process-configuration-guides\" class=\"breadcrumb-links\">Process & Configuration Guides</a></li><li><span>&rsaquo;&rsaquo;</span><a hqid=\"2158972\" href=\"/order-promising\" class=\"breadcrumb-links\">Order Promising</a></li><li> <span>››</span>Overview</li></ul>  \t\r\n\t\t<h2>Overview</h2>\r\n\r\n<p></p>\r\n\r\n<a href=\"/advance-shipping-restrictions\" hqid=\"3529483\">Next</a>\r\n<p>&nbsp;</p>\r\n\r\n<div class=\"info\"><ul><li><a href=\"/promising-overview$terminologies\">Terminologies</a></li><li><a href=\"/promising-overview$fulfillment-optimization-configuration\">Fulfillment Optimization Configuration</a></li><li><a href=\"/promising-overview$types-of-promising-request-modes\">Types of Promising Request Modes</a></li><li><a href=\"/promising-overview$delivery-methods\">Delivery Methods</a></li><li><a href=\"/promising-overview$fulfillment-group\">Fulfillment Group</a></li><li><a href=\"/promising-overview$strategy-type-complete-single-source\">Strategy Type - Complete Single Source</a></li><li><a href=\"/promising-overview$promising-request-details-vs-promising-request-which-attributes-take-priority\">Promising Request Details vs Promising Request - Which attributes take priority?</a></li></ul></div>\r\n\r\n<p>Promising is a process by which inventory is allocated/reserved for an order. It uses an algorithm to find and reserve the optimal inventory for the requested order. The reservation information is communicated back to the order capture system. As part of the promise, the following activities takes place.</p>\r\n\r\n<ul>\r\n\t<li>A promising request is sent from the Order capture system to the Promising system with the requested quantity to be allocated and other promising details.</li>\r\n\t<li>Find Optimal Source location(s) by prioritization of the location(s), applying hard constraints (Capacity, scheduling, Inventory), and applying optimization</li>\r\n\t<li>Reserve Quantity at the determined location(s), thereby preventing other orders from accessing the same units.</li>\r\n\t<li>Availability is adjusted by the quantity reserved for the order.</li>\r\n\t<li>Capacity (if configured), is reserved to control the number of orders that may be allocated to a location.</li>\r\n\t<li>Allocation information like quantity, location, scheduling dates is communicated back to the order capture system.</li>\r\n</ul>\r\n\r\n<h4><a name=\"terminologies\" id=\"terminologies\"></a>Terminologies</h4>\r\n\r\n<p>It is recommended to understand the below terminologies that will be commonly used in this guide.</p>\r\n\r\n<div class=\"tip\">\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:1450px;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\" style=\"text-align: center; width: 155px;\">Terminology</th>\r\n\t\t\t<th scope=\"col\" style=\"text-align: center; width: 1117px;\">Description</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 153px;\">Promising</td>\r\n\t\t\t<td style=\"width: 1114px;\">\r\n\t\t\t<p>The process of finding the locations where the order can be promised.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 153px;\">Reservation</td>\r\n\t\t\t<td style=\"width: 1114px;\">\r\n\t\t\t<p>The process of reserving inventory against the location.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 153px;\">Allocation</td>\r\n\t\t\t<td style=\"width: 1114px;\">\r\n\t\t\t<p>Used interchangeably with \"reservation\".</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 153px;\">Promising Request Modes</td>\r\n\t\t\t<td style=\"width: 1114px;\">\r\n\t\t\t<p>Promising request is the input for the promising process. This contains the list of items and quantity to be allocated along with other promising attributes which will aid promising process. Promising request is sent from Order capture system. Refer to the <a href=\"/promising-overview$Types of Promising Requests\">different types of promising request</a> supported.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 153px;\">Promising Type (B2B vs Regular)</td>\r\n\t\t\t<td style=\"width: 1114px;\">\r\n\t\t\t<ul>\r\n\t\t\t\t<li><strong>B2B Promising</strong>: This promising type corresponds to the retail order&nbsp;flow. The request will be submitted to the system with 'ShipFromLocationId' field populated for all the promising request detail, which means If Ship from Location ID is populated for all the promising request detail and none of the delivery method is \"Pick up at store\", then B2B promising flow is triggered.&nbsp;If at least one line doesn't have the Ship from LocationId or at least one line has Delivery method PickUpAtStore&nbsp;populated, then regular promising flow is triggered. In B2B flow, the<strong>&nbsp;</strong>Promising Strategy <strong>i</strong>s not evaluated and will try to reserve the direct inventory from the given location.</li>\r\n\t\t\t\t<li><strong>Regular Promising:</strong>&nbsp;This promising type comes into effect when at least one promising request detail has 'ShipFromLocationId' not populated or the delivery method on the line is 'PickUpAtStore' even though the promising request detail has 'ShipFromLocationId' populated. Here, the promising strategy is checked and will be able to reserve inventory based on the source selected and based on the priority rule, if exists.</li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 153px;\">Fulfillment Optimization configuration</td>\r\n\t\t\t<td style=\"width: 1114px;\">\r\n\t\t\t<p>A Promising Strategy is a set of rules which define how to allocate an order. This defines the source type (Perpetual vs ATC view), prioritization of the source location(s) and the strategy to be used for promising. Used interchangeably with Promising Configuration and Promising Strategy. Refer to the&nbsp;<a href=\"/promising-overview$Promising Configuration\">Fulfillment Optimization configuration</a> section for more details.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 153px;\">Fulfillment Group</td>\r\n\t\t\t<td style=\"width: 1114px;\">\r\n\t\t\t<p>Fulfillment grouping enables the grouping of&nbsp;order lines that should&nbsp;be sourced, optimized, and reserved together. This is useful if certain order lines cannot be scheduled or optimized together. These groups are formed using the grouping IDs sent on each request detail. If a request includes multiple fulfillment groups, when the promising process is complete for all fulfillment groups, a reservation request is made for all lines.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 153px;\">Allocation overrides</td>\r\n\t\t\t<td style=\"width: 1114px;\">\r\n\t\t\t<p>It’s typical for&nbsp;retailers to override capacity considerations and protection quantities in order to meet specific business requirements. Hence, in the allocation configuration, provision to perform overrides is provided. Following are the overrides supported.</p>\r\n\r\n\t\t\t<ul>\r\n\t\t\t\t<li><a hqid=\"2641920\" href=\"/howpromisingworks$Different ways of Allocation overrides capacity\">Override Capacity (Ignore or Consider capacity)</a></li>\r\n\t\t\t\t<li><a hqid=\"2641920\" href=\"/howpromisingworks$Allocation overrides - Ignore Protection\">Ignore Protection quantity</a></li>\r\n\t\t\t</ul>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 153px;\">Complete Single Source</td>\r\n\t\t\t<td style=\"width: 1114px;\">\r\n\t\t\t<p>In a typical network fulfillment model wherein a customer order consists of group of items, the order is fulfilled from multiple sources owing to availability, promising preferences, scheduling constraints, capacity and other key parameters. In such cases, multiple items/quantities get&nbsp;released to multiple locations and fulfilled in parts&nbsp;through multiple shipments. Certain business cases like international orders or kits&nbsp;may require retailers to source the lines from a single location. This provides an opportunity for retailers to make a single shipment, which improves customer experience and saves on shipping costs.<br>\r\n\t\t\t<br>\r\n\t\t\tPromising will only consider the location(s) which can completely fulfill all/group of lines (based on the Strategy Type and Fulfillment group). If no location is available to completely fulfill the lines, then all/group of line(s) are not allocated. Refer to <a href=\"/promising-overview$Strategy Type - Complete Single Source\">Strategy Type - Complete Single Source</a> for more details.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 153px;\"><a id=\"merge shipment\" name=\"merge shipment\"></a>Merge Shipments</td>\r\n\t\t\t<td style=\"width: 1114px;\">\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Merge shipment is a concept where the order is merged or consolidated at a location before the final shipment to the customer. In a merge scenario, the order is merged at the merge location, also called as merge node. It can be a regular distribution center or a specialized consolidation location.</li>\r\n\t\t\t</ul>\r\n\r\n\t\t\t<p>Reasons for order consolidation: There are a few reasons for consolidation of an order. One of them is saving the shipping cost by optimizing the consolidation route. The other benefit is improving the customer service by delivering the order in one go. Also, there are certain products which logically need consolidation before being shipped out, say, for example, a laptop and a laptop carrying case.</p>\r\n\r\n\t\t\t<ul>\r\n\t\t\t\t<li>Order hopping: Order hopping is a concept where the order shipment hops from one location to another before being shipped out to the customer. This need not necessarily be an order consolidation scenario. The entire order can be shipped from the origin location and then hops through the nodes before being finally shipped.</li>\r\n\t\t\t</ul>\r\n\r\n\t\t\t<p>Reasons for order hopping: It may not be necessary, but in certain cases, order hopping may result in an optimized shipment. For example, if the order is shipped from the origin to the destination using an external carrier service, it might incur a high shipping cost. Instead, if the order is hopped internally to a location which is geographically closer to the destination using the internal carrier, and the final leg shipment being done using the external carrier, the shipping cost incurred might be very cheap. In certain cases, order hopping is required as the origin location does not have an external carrier shipping facility. Say, for example, a satellite Distribution center may always ship to the main Distribution center thus making the main DC as the hopping node for the satellite DC.</p>\r\n\r\n\t\t\t<p>Refer to <a href=\"https://omni.helpdocsonline.com/how-optimization-works-2$merge-shipment-optimization\">Merge Shipment - Optimization</a> for more details on how Optimization is performed for Merge Shipment</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 153px;\">Scheduling Dates</td>\r\n\t\t\t<td style=\"width: 1114px;\">\r\n\t\t\t<p>Scheduling is the process of determining delivery dates for an order, and occurs during<span>&nbsp;</span>order promising. This includes assigning the optimistic and the pessimistic order delivery dates once the order is reserved. These dates are used to&nbsp;ensure that the order meets the requested delivery date (RDD) or Last Possible Delivery Dates (LPDD). These dates can also be used&nbsp;to provide possible delivery dates to the end customer. After an&nbsp;promising completes and an order is reserved, rescheduling is triggered if a reservation&nbsp;transfer occurs from one future inventory to another (PO to ASN or ASN to PO), or during ETA updates on future inventory.</p>\r\n\r\n\t\t\t<p>Two sets of dates are calculated in the scheduling process:&nbsp;pessimistic dates and optimistic dates.<strong><em>&nbsp;</em></strong>Pessimistic dates are the latest set of ship and release dates which still&nbsp;meet the delivery requirement. Optimistic dates are the earliest ship by and delivery dates if all other processes&nbsp;occur on schedule. Backward scheduling is used to calculate pessimistic dates, whereas forward scheduling is used to calculate optimistic dates.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width: 153px;\">Force Allocate</td>\r\n\t\t\t<td style=\"width: 1114px;\">Force allocation or reservation provides an opportunity for the retailer to allocate the order(s) irrespective of the inventory levels at a location.</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4><a name=\"fulfillment-optimization-configuration\" id=\"fulfillment-optimization-configuration\"></a><a id=\"Promising Configuration\" name=\"Promising Configuration\"></a>Fulfillment Optimization Configuration</h4>\r\n\r\n<p>Before promising can begin, a Promising Strategy (also called a Promising Configuration)&nbsp;must be selected.&nbsp;A Promising Strategy is a set of rules which define how to allocate an order. A retailer may configure multiple&nbsp;strategies&nbsp;based on business needs. A rank is assigned to each strategy. Different configurations typically correspond to different order characteristics. For example, orders with different delivery options or order channels may require&nbsp;different types of allocation, and thus different types of configuration. Though the promising process remains the same, the results differ because of different configurations. Fulfillment Optimization Configuration can be created via <a href=\"https://omni.helpdocsonline.com/order-promising-configuration$promising-strategy\">Fulfillment Optimization Config UI</a> or via APIs Examples of these controls include:</p>\r\n\r\n<ul>\r\n\t<li>Type of locations to consider</li>\r\n\t<li>Priority of locations to consider</li>\r\n\t<li>Type of inventory to use</li>\r\n\t<li>Optimization factors to consider</li>\r\n\t<li>Whether split allocations are allowed</li>\r\n</ul>\r\n\r\n<p>The order capture system should evaluate the order-level sourcing rules defined for each Promising Strategy in their ranked order. If a matching Promising Strategy is&nbsp;found, then the PromisingConfigId is stamped on the Promising Request in the StrategyId field. The following diagram illustrates how the Order component finds a matching Promising Strategy. Refer to the process below for how each Promising Strategy is evaluated.</p>\r\n\r\n<p><strong>Note</strong>: Only order header-level fields are evaluated in order to find a matching configuration. Line-level fields are not considered since the promising process attempts&nbsp;to find an optimized solution for the entire order, but are considered later for line-level source overrides.</p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-1\" class=\"toggle-content\"><span class=\"toggle-title\">How is Fulfillment Optimization Config Evaluated?</span></a></p><div id=\"tg-1\"><p><img alt=\"\" class=\"ckimgrsz\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/FindingMatchingConfiguration.png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL0ZpbmRpbmdNYXRjaGluZ0NvbmZpZ3VyYXRpb24ucG5nIiwiQ29uZGl0aW9uIjp7IkRhdGVMZXNzVGhhbiI6eyJBV1M6RXBvY2hUaW1lIjoxNzU0NzUxNjU1fX19XX0_&Signature=O5zg~ci8bMh4KGBkGE7PAqzyXqaneGZ21KrPYGBQOZgcjeSLDFCPtUhOwsINLkLgygxWGRRr-jm2q9FQU7cfzPesAV0FWT2WVdsPyQJgbKh7igfuQrUo1JZAGMHZhcwysTDskLHVZ2koyWF3i37SvQgpieosH9oTKo2B~E-C6-M9po76XLedDC20uDaMZA2VHG1COpMmULhyBLp5rhA33bSvwbd8egQETa-y7N3~7k3njfE6H3Mba1LpjFFHQ58BCW4dc0pHPG4r3jK49nUuNRV5oJQrWfA20pszI0nrcfwmpYiRTehfFU4VLakVLzgpKEuRa7mjKw1Gwtx6DrO2Gw__&Key-Pair-Id=K2TK3EG287XSFC\" style=\"width: 453px; height: 750px;\" /></p>\n</div></div></p>\r\n\r\n<p><strong>Promising request without a Promising Configuration -</strong>&nbsp;If the StrategyId or StrategyName does not match any of the configured promising strategies, or if the StrategyId and StrategyName are missing from the promising request entirely, then a basic form&nbsp;of promising is done as described below:</p>\r\n\r\n<ul>\r\n\t<li>Source:<em>&nbsp;</em>Considers all perpetual inventory as the source</li>\r\n\t<li>Prioritize:<em>&nbsp;</em>Does not apply any prioritization to the source</li>\r\n\t<li>Apply Constraints:&nbsp;Applies the hard constraints (inventory, scheduling and capacity)</li>\r\n\t<li>Optimize:&nbsp;Performs&nbsp;a basic optimization of reserving against a location which can fulfill the maximum number of order lines. No cost optimization is done.</li>\r\n\t<li>Reserve:<em>&nbsp;</em>Reserve the order for the first location with available inventory</li>\r\n</ul>\r\n\r\n<p>These processes are described further in the <a href=\"https://omni.helpdocsonline.com/howpromisingworks\">promising process</a>&nbsp;section.</p>\r\n\r\n<h4><a name=\"types-of-promising-request-modes\" id=\"types-of-promising-request-modes\"></a><a id=\"Types of Promising Requests\" name=\"Types of Promising Requests\"></a>Types of Promising Request Modes</h4>\r\n\r\n<p>Promising supports three types of promising request.</p>\r\n\r\n<ul>\r\n\t<li>Optimization (This is the default if the request type is not specified.)</li>\r\n\t<li>Reservation</li>\r\n\t<li>Query</li>\r\n</ul>\r\n\r\n<p><strong>Optimization - </strong>When the request type is sent as an optimization, this triggers the promising and optimization features described in this document, which includes&nbsp;finding&nbsp;the location with the lowest cost of fulfillment&nbsp;and reserving&nbsp;the order against that location. To optimize the order, either StrategyId or StrategyName must be populated in the promising request (using the PromisingConfigId or PromisingConfigName, respectively).</p>\r\n\r\n<p><strong>Reservation - </strong>When the&nbsp;request type is sent as a reservation, the&nbsp;order is reserved&nbsp;as quickly as possible&nbsp;without determining the optimum solution.&nbsp;In this case, promising considers all inventory as the source based on configuration ID and does not apply any prioritization logic. It applies the hard constraints (inventory, scheduling and capacity) described later in this document and performs basic optimization by reserving against a location that can fulfill the highest number of order lines, which includes protection and item exclusions in the availability view. It reserves the order against the first location which has inventory available. The reservation process is&nbsp;intended&nbsp;to reserve&nbsp;inventory quickly. This&nbsp;may be useful in scenarios such as a peak season.</p>\r\n\r\n<p class=\"tip\"><span style=\"color:#4e5f70;\">Since Optimization is not during Pre-Reservation (Promising request - Reservation mode), there is a possibility of difference between the location allocated during pre-reservation and the actual Order. This is because during Promising request (reservation mode), the system does not run optimization, and it just blocks inventory from a location. But when the actual order is bridged in for allocation, promising will try to run optimization if the Fulfillment config has Optimization factors set up&nbsp;to make sure there are no better locations from initially allocated. If there is a better location, then the system de-allocates from the original location and allocates to the new location.</span></p>\r\n\r\n<p><strong>Query (Available to Promise Calls) - </strong>When the&nbsp;request type is sent as a query, the&nbsp;location(s) to&nbsp;promise is found, but the reservation is not made. This query acts as an ATP (Available to Promise) call<strong><em>&nbsp;</em></strong>where the caller sends a query to the promising engine to determine&nbsp;whether the order can be promised to the customer.&nbsp;Scheduling dates are sent in the promising response.</p>\r\n\r\n<ul>\r\n\t<li>If the StrategyId or StrategyName is populated in the promising request (with PromisingConfigId and PromisingConfigName respectively), then the promising engine performs the optimization logic using the promising strategy in the request and finds the optimal location to allocate from. It does not create the reservation request.</li>\r\n\t<li>If the StrategyId or StrategyName is not populated in the promising request, the promising process determines a location without running the optimization logic. This is similar to the reservation&nbsp;process&nbsp;but without the actual reservation call.</li>\r\n</ul>\r\n\r\n<div class=\"warning\"><span style=\"color:#4e5f70;\">Note:&nbsp;The number of lines should be less than 5 and the number of network locations considered should be less than 20 for standalone promising call (Query mode) from Ecom or External order taking channel to fetch availability with delivery dates. This restriction is to ensure timely response.</span></div>\r\n\r\n<h4><a name=\"delivery-methods\" id=\"delivery-methods\"></a><a id=\"Delivery Methods\" name=\"Delivery Methods\"></a>Delivery Methods</h4>\r\n\r\n<p>The e-commerce channel can make up a significant portion of the total revenue for a retailer. A promising engine which can effectively consider holistic&nbsp;network inventory (store and DC inventory) is critical. The following delivery methods are the typical e-commerce order flows.</p>\r\n\r\n<ul>\r\n\t<li>\r\n\t<p><strong>Ship to Home Orders - </strong>A ship to home order includes an item which is&nbsp;delivered to a customer's&nbsp;address. This is the case for an e-commerce order, or a save the sale order placed in a store. For ship to home orders, promising expects the shipping address and shipping method to be provided in the request. The shipping address and shipping method are&nbsp;used&nbsp;for scheduling and calculating the shipping cost, in order to find the best location for reservation. When the order is reserved, the allocation information is sent back to the caller.&nbsp;The allocation information includes&nbsp;the scheduling dates, such as the earliest delivery date and earliest ship date. These dates&nbsp;indicate the date and time when the order is expected to be shipped and delivered.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Ship to Store Orders -</strong> A ship&nbsp;to store order&nbsp;exists&nbsp;when an item is shipped to a store for customer pickup. This saves the customer the cost of shipping the order, and gives&nbsp;the retailer an opportunity to&nbsp;upsell&nbsp;other inventory. For ship&nbsp;to store&nbsp;orders, promising expects the delivery method to be specified as ship to store&nbsp;on the request. The destination store and shipping method information are also required. The destination store and the shipping method are used to schedule&nbsp;the order and calculate&nbsp;the shipping cost to find&nbsp;the best location for reservation.&nbsp; The allocation information which has the scheduling information in the form of a delivery path is returned in the promising response.&nbsp;A ship to store order reservation results in two delivery paths: a ship to store path and a pickup at store path.&nbsp;</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Pickup in Store Orders -&nbsp;</strong> A pickup in store order is created when the item is present in a store and the customer reserves the item for pickup in store. For pickup&nbsp;orders, promising expects the delivery method as 'PickUpInStore' in the promising request. The pickup store must also be specified as ship from store in the promising request. &nbsp;The allocation information is returned on the promising response with only the pickup leg information.</p>\r\n\t</li>\r\n</ul>\r\n\r\n<h4><a name=\"fulfillment-group\" id=\"fulfillment-group\"></a><a id=\"Fulfillment Group\" name=\"Fulfillment Group\"></a>Fulfillment Group</h4>\r\n\r\n<p>Fulfillment grouping enables the grouping of&nbsp;order lines that should&nbsp;be sourced, optimized, and reserved together. This is useful if certain order lines cannot be scheduled or optimized together. These groups are formed using the grouping IDs sent on each request detail. Promising is performed separately for all Fulfillment group. When the promising process is complete for all the fulfillment groups,&nbsp;a reservation request is made for all lines. Some examples of common fulfillment groupings are listed as follows:</p>\r\n\r\n<ul>\r\n\t<li><strong>Different Shipping Addresses - </strong>If two lines on the&nbsp;same promising request have different shipping addresses, they cannot be optimized together since one of the core principles of optimization is to reduce the shipping cost. If two lines have different addresses, then at least two shipments are required to fulfill the order. So, each group of lines with the same address should be&nbsp;optimized separately.&nbsp;</li>\r\n\t<li><strong>Different Delivery Methods - </strong>If two lines on a promising request have different delivery methods, each line should be optimized separately. Ship to home orders will have a different address than ship to store and pickup in store orders. In addition, ship to store and pickup in store orders are fulfilled from different locations. So, all three delivery methods should be optimized separately.</li>\r\n\t<li><strong>Different Shipping Methods - </strong>If two order lines have different shipping methods, each should be optimized separately&nbsp;since they&nbsp;can be shipped separately. For example, a same day delivery order line and a standard delivery order line must be&nbsp;shipped in different packages.</li>\r\n</ul>\r\n\r\n<div class=\"tip\"><strong>Note</strong>: All request details without a&nbsp;fulfillmentGroupId&nbsp;are considered as a single group.</div>\r\n\r\n<h4><a name=\"strategy-type-complete-single-source\" id=\"strategy-type-complete-single-source\"></a><a id=\"Strategy Type - Complete Single Source\" name=\"Strategy Type - Complete Single Source\"></a>Strategy Type - Complete Single Source</h4>\r\n\r\n<p>Strategy Type - Complete Single Source provides an ability for the retailer to completely source all or group of order lines from a single location. The \"StrategyType\" attribute on the&nbsp;OrderLinePromisingInfo as well as PromisingRequestDetail&nbsp;accepts valid values of \"CompleteSingleSource\" or null. For instance, all lines of the same fulfillment group with strategy “CompleteSingleSource” need&nbsp;to be completely fulfilled from a single location or back-ordered. Promising will only consider the location(s) which can completely fulfill all/group of lines (based on the Strategy Type and Fulfillment group). If no location is available to completely fulfill the lines, then all/group of line(s) are not allocated. If the strategy is \"CompleteSingleSource\" then on the Reservation request, the \"allorNone\" flag is sent as true to indicate that the line(s) with the same Fulfillment Group ID and \"allorNone\" flag as true should be reserved together. Refer to <a hqid=\"2606084\" href=\"/how-reservation-works$Other Constraints Check\">How Reservation works</a> for more details.</p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-2\" class=\"toggle-content\"><span class=\"toggle-title\">Complete Single Source - How it works</span></a></p><div id=\"tg-2\"><p><img class=\"ckimgrsz\" height=\"597\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/CSS_FunctionalFlow(2).png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL0NTU19GdW5jdGlvbmFsRmxvdygyKS5wbmciLCJDb25kaXRpb24iOnsiRGF0ZUxlc3NUaGFuIjp7IkFXUzpFcG9jaFRpbWUiOjE3NTQ3NTE2NTV9fX1dfQ__&Signature=eyIeAVJfM24Lwt2laGVJzMYX5RXHSd~KhXW40mLfts5plJniMX4rf684zAQRZIUjMJhX-QDeT2MQmaDkDJrlC2jANwlg2R2nioS4Lh8kLEKFNi3m91daNgYZACPI~DwXrtGH7PPmM1EaHbjcLv8yyHrOfwf0gPNw8LyCpXHBKpC076OKRDa-rPikATDRbvZ8rw~W68e2HJcOXjHMuT348nZfUx7s9dgul8RjyUcxqH-O4kGGNCxbM6EFnlBuKSmvtLuEswW~d~AmhLzXSJS1CblsPZM5kMR064lYjheyxLn5RNNlOZ9j9oEjs3BgMNMvqDSmtdkVKYKPRB4LQADr~g__&Key-Pair-Id=K2TK3EG287XSFC\" style=\"width: 466px; height: 505px;\" width=\"552\" /></p>\n\n<p><img class=\"ckimgrsz\" height=\"660\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/CSS_HighLevelFlow(1).png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL0NTU19IaWdoTGV2ZWxGbG93KDEpLnBuZyIsIkNvbmRpdGlvbiI6eyJEYXRlTGVzc1RoYW4iOnsiQVdTOkVwb2NoVGltZSI6MTc1NDc1MTY1NX19fV19&Signature=aMzfCh1NKgdWMr2P-m2P-m1LsjEuRs0ho6g~JHoacAU50NBhV6zPUmzZcLK5f2d1ANbsxutW~82OaMH0ZphdOJrafL3pxNF6wYbzTFSJB2CE7EQD~aVp6SNSQKC6m5dcmqk5SIz6NMMdvyXhebRGAoGTnEcV8YbHT5GKS6FDTSoG9mmb-S30ElUImEF46VwWmR2UBXbO68ecQ-OF7cr3kmqKO-ANVdGVq3~s2c0q-tsbadryWLqwt5K4zRIXWNV-iWoEo3PY7dCYloUvWZXNnwmDxqkZ6RCDxWPZ2N6PFBVjdtn6clhBvON4GrcWF~hjwrfsIqsjEZ0ATcI7R6ADag__&Key-Pair-Id=K2TK3EG287XSFC\" style=\"width: 864px; height: 506px;\" width=\"1127\" /></p>\n</div></div></p>\r\n\r\n<p>The following use cases can be supported using the strategy type.</p>\r\n\r\n<ul>\r\n\t<li>The ability for a retailer to request complete fulfillment of an entire order from a single location - A retailer dealing in electronic components, ships products in multiple geographies via International Shipments. In order to avoid the cost of multiple shipments, any such order should always be fulfilled from a single location else backorder.</li>\r\n</ul>\r\n\r\n<p style=\"margin-left: 40px;\"><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-3\" class=\"toggle-content\"><span class=\"toggle-title\">Complete Single Source - Use case 1</span></a></p><div id=\"tg-3\"><p><img class=\"ckimgrsz\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/CSS_UseCase1(1).png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL0NTU19Vc2VDYXNlMSgxKS5wbmciLCJDb25kaXRpb24iOnsiRGF0ZUxlc3NUaGFuIjp7IkFXUzpFcG9jaFRpbWUiOjE3NTQ3NTE2NTV9fX1dfQ__&Signature=cvul1Gk5-zvLnfWTC0IPAI6iIQVB89tDN8tSdKGKDDbu4Gujly84uhLxmt5QBuO0bBo9GGqvS9XZAoDscDiPtlPCSNO-8GlqyIKlBiA18mxYRY6Qdn6d87zrQsBFaGmUvRb84rJlFQQma4uts0QrpRFq~xtVGSmdyBKr3WefQcp5bdPOSP9Sb5aUknXqMore0rSE4N8TuaEGMC8Rk4sHK41SThxQwHy5Q8wXbvG8dqHj0C1Mb0QYpgkZ44cKgj2WwSgbA3DqeZG4~qdSWkVLJM~1QrgEp6-dD596mkQ3AomVIPvVCazQjxR-iuG7zOuLSfAXozEgQzGDTT7ODO32Yw__&Key-Pair-Id=K2TK3EG287XSFC\" style=\"width: 1000px; height: 642px; border-style: solid;\" /></p>\n</div></div></p>\r\n\r\n<ul>\r\n\t<li>The ability for a retailer to request complete fulfillment of \"Group of Lines\" from a single location - A retailer dealing in skincare, makeup or hair care products offers a wide range of products which are bought together, usually along with some regular items. For instance: \"Advance Night Repair\" - Serum, Mask, Toner, Cleanser are usually bought together. In order to have a better user experience, such lines should be completely shipped and from a single location.</li>\r\n</ul>\r\n\r\n<p style=\"margin-left: 40px;\"><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-4\" class=\"toggle-content\"><span class=\"toggle-title\">Complete Single Source - Use Case 2</span></a></p><div id=\"tg-4\"><p><img class=\"ckimgrsz\" src=\"https://dzf8vqv24eqhg.cloudfront.net/userfiles/4665/7671/ckfinder/images/CSS_UseCase4(1).png?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9kemY4dnF2MjRlcWhnLmNsb3VkZnJvbnQubmV0L3VzZXJmaWxlcy80NjY1Lzc2NzEvY2tmaW5kZXIvaW1hZ2VzL0NTU19Vc2VDYXNlNCgxKS5wbmciLCJDb25kaXRpb24iOnsiRGF0ZUxlc3NUaGFuIjp7IkFXUzpFcG9jaFRpbWUiOjE3NTQ3NTE2NTV9fX1dfQ__&Signature=Nflj69RSaY4XabmPxyzSxspnN91pdE82yjHpH2LFg5DzPos-A2ZAsW5sHff0ZG8evJY6RScJqRoNSzyz9Y2Z1ZHBNMTo~eHtYEkeDIXUWXZrzzAMdwsoPTloBTRtobiWeR1sJ0tjpNU7gSCe9bzobmliMAa8UD2i6Ls1nD0LCZ0P84igFTLI~MXH7Up-uSPqsmOJvJ4BO7jSUVfuM~joR2dFUZ8HZqKXBpYN4~OFGshpdjWpedjB7B4fCFZO~4LesG2KTCuvruSe01uFIIazjTiwmd3hpzmLG7y3nN1iq-eSwgXKPg-Qvv-lKgr3YZMzmNI49exuEqILhHxMaf~caQ__&Key-Pair-Id=K2TK3EG287XSFC\" style=\"width: 1000px; height: 732px; border-style: solid;\" /></p>\n</div></div></p>\r\n\r\n<div class=\"tip\"><strong>NOTE:&nbsp;</strong>The reshuffle logic for Complete Single Source (CSS) works only on allocated lines, and if a CSS line goes to backorder, no reshuffle request is created—reallocation must be handled through a separate job. This behavior change is not en by default and must be enabled via the UI under the setting named <strong data-end=\"330\" data-is-last-node=\"\" data-start=\"307\">\"Behaviour Change.\"</strong></div>\r\n\r\n<h4><a name=\"promising-request-details-vs-promising-request-which-attributes-take-priority\" id=\"promising-request-details-vs-promising-request-which-attributes-take-priority\"></a>Promising Request Details vs Promising Request - Which attributes take priority?</h4>\r\n\r\n<p>Attributes which drive a promising algorithm (like Ship from, Ship to, Consolidation locations, and so on) can be defined at both Promising request detail and Promising request level. The line level attribute always overrides the value at header level. This is true for all such attributes which are present at PromisingRequestDetail(line level) as well as PromisingRequestLevel (header level). Refer to sample Promising request for reference</p>\r\n\r\n<p><div class=\"toggle_outerdiv\"><p class=\"toggle_div\"><a href=\"#tg-5\" class=\"toggle-content\"><span class=\"toggle-title\">Promising request - Sample</span></a></p><div id=\"tg-5\"><div class=\"computer_code\">{<br />\n&nbsp; &quot;Address&quot;: {},<br />\n&nbsp; &quot;CarrierCode&quot;: &quot;string&quot;,<br />\n&nbsp; &quot;ConsolidationLocationId&quot;: &quot;string&quot;,<br />\n&nbsp; &quot;DeliveryMethodId&quot;: &quot;string&quot;,<br />\n&nbsp; &quot;DemandType&quot;: &quot;string&quot;,<br />\n&nbsp; &quot;ExistingReservations&quot;: [],<br />\n&nbsp; &quot;Extended&quot;: {},<br />\n&nbsp; &quot;ExternalRouteId&quot;: &quot;string&quot;,<br />\n&nbsp; &quot;IsConfirmed&quot;: false,<br />\n&nbsp; &quot;IsPartialRequest&quot;: false,<br />\n&nbsp; &quot;LastPossibleDeliveryDate&quot;: &quot;2020-10-20T04:18:52.894Z&quot;,<br />\n&nbsp; &quot;OrganizationId&quot;: &quot;string&quot;,<br />\n&nbsp; &quot;PromisingRequestDetail&quot;: [<br />\n&nbsp;&nbsp;&nbsp; {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;ASNDetailId&quot;: &quot;string&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;ASNId&quot;: &quot;string&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Address&quot;: {},<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;CarrierCode&quot;: &quot;string&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;ConsolidationLocationId&quot;: &quot;string&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;DeliveryMethodId&quot;: &quot;string&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;DemandType&quot;: &quot;string&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;EffectiveRank&quot;: &quot;string&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Extended&quot;: {},<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;ExternalRouteId&quot;: &quot;string&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;FulfillmentGroupId&quot;: &quot;string&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;InventoryTypeId&quot;: &quot;string&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;IsForceAllocate&quot;: false,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;ItemId&quot;: &quot;string&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;LastPossibleDeliveryDate&quot;: &quot;2020-10-20T04:18:52.894Z&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;PODetailId&quot;: &quot;string&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;POId&quot;: &quot;string&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;ParentItemId&quot;: &quot;string&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;ProductStatusId&quot;: &quot;string&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;PromisingRequestDetailId&quot;: &quot;string&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Quantity&quot;: 0,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;ReqCapacityPerUnit&quot;: 0,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;RequestedDeliveryDate&quot;: &quot;2020-10-20T04:18:52.894Z&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;ServiceLevelCode&quot;: &quot;string&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;ShipFromLocationId&quot;: &quot;string&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;ShipToLocationId&quot;: &quot;string&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;ShippingMethodId&quot;: &quot;string&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;ShippingMethodIds&quot;: [<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;string&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ],<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;SourceId&quot;: &quot;string&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;StrategyType&quot;: &quot;string&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Weight&quot;: 0<br />\n&nbsp;&nbsp;&nbsp; }<br />\n&nbsp; ],<br />\n&nbsp; &quot;PromisingRequestId&quot;: &quot;string&quot;,<br />\n&nbsp; &quot;RequestType&quot;: &quot;string&quot;,<br />\n&nbsp; &quot;RequestedDeliveryDate&quot;: &quot;2020-10-20T04:18:52.894Z&quot;,<br />\n&nbsp; &quot;ReservationExpiryDate&quot;: &quot;2020-10-20T04:18:52.894Z&quot;, (Indicates the date on which the Reservation expires if the Order is not confirmed)<br />\n&nbsp; &quot;ServiceLevelCode&quot;: &quot;string&quot;,<br />\n&nbsp; &quot;ShipFrom&quot;: {<br />\n&nbsp;&nbsp;&nbsp; &quot;Radius&quot;: 0,<br />\n&nbsp;&nbsp;&nbsp; &quot;RadiusUOM&quot;: &quot;string&quot;,<br />\n&nbsp;&nbsp;&nbsp; &quot;Segments&quot;: [<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;string&quot;<br />\n&nbsp;&nbsp;&nbsp; ],<br />\n&nbsp;&nbsp;&nbsp; &quot;ShipFromLocationIds&quot;: [<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;string&quot;<br />\n&nbsp;&nbsp;&nbsp; ]<br />\n&nbsp; },<br />\n&nbsp; &quot;ShipToLocationId&quot;: &quot;string&quot;,<br />\n&nbsp; &quot;ShippingMethodId&quot;: &quot;string&quot;,<br />\n&nbsp; &quot;ShippingMethodIds&quot;: [<br />\n&nbsp;&nbsp;&nbsp; &quot;string&quot;<br />\n&nbsp; ],<br />\n&nbsp; &quot;StrategyName&quot;: &quot;string&quot;, (takes PromisingConfigName)<br />\n&nbsp; &quot;StrategyType&quot;: &quot;string&quot;,<br />\n&nbsp; &quot;confirmed&quot;: true,<br />\n&nbsp; &quot;expiryDate&quot;: &quot;2020-10-20T04:18:52.894Z&quot; (Indicates the date on which the promising config expires)<br />\n}</div>\n\n<p>&nbsp;</p>\n\n<div class=\"info\"><strong>Note </strong>: Demand Type is mandatory in the promising request.&nbsp;</div>\n</div></div></p>\r\n\r\n<div class=\"tip\"><strong>Note</strong>: In a Promising request, 'CompleteSingleSource' is not supported at the header level and must be passed at the line level.</div>\r\n\r\n<div class=\"info\"><ul class=\"related-articles\"><li><a href=\"/howpromisingworks\" hqid=\"2641920\">How Promising Works</a></li><li><a href=\"/customer_engagement_configurations\" hqid=\"2429187\">Customer Engagement Configurations</a></li><li><a href=\"/promising-rest-apis-and-user-exits\" hqid=\"2684158\">REST APIs and User Exits</a></li><li><a href=\"/substitution-during-allocation\" hqid=\"2651273\">Substitution During Allocation</a></li><li><a href=\"/forecast-reservation\" hqid=\"3575064\">Forecast Reservation</a></li><li><a href=\"/procure-to-sell\" hqid=\"3629659\">Procure To Sell</a></li><li><a href=\"/how-optimization-works-2\" hqid=\"2646833\">How Optimization Works</a></li><li><a href=\"/advance-shipping-restrictions\" hqid=\"3529483\">Advanced Shipping Restrictions</a></li><li><a href=\"/promising-troubleshooting\" hqid=\"2652008\">Troubleshooting</a></li><li><a href=\"/forceallocate\" hqid=\"2641921\">Force Allocate</a></li></ul></div>\r\n\r\n\t  </div>\r\n </div>\r\n <div id=\"ui-page-fb-wrap\"></div>\r\n <div class=\"hiq-footer-wrap\">\r\n    \r\n                \r\n  </div>\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n",
  "content_length": 39363,
  "scraped_at": "2025-08-09T21:55:56.005800",
  "content_clean": "Home ››Manhattan Active® Omni››Order Management››Process & Configuration Guides››Order Promising ››Overview Overview Next TerminologiesFulfillment Optimization ConfigurationTypes of Promising Request ModesDelivery MethodsFulfillment GroupStrategy Type - Complete Single SourcePromising Request Details vs Promising Request - Which attributes take priority? Promising is a process by which inventory is allocated/reserved for an order. It uses an algorithm to find and reserve the optimal inventory for the requested order. The reservation information is communicated back to the order capture system. As part of the promise, the following activities takes place. A promising request is sent from the Order capture system to the Promising system with the requested quantity to be allocated and other promising details. Find Optimal Source location(s) by prioritization of the location(s), applying hard constraints (Capacity, scheduling, Inventory), and applying optimization Reserve Quantity at the determined location(s), thereby preventing other orders from accessing the same units. Availability is adjusted by the quantity reserved for the order. Capacity (if configured), is reserved to control the number of orders that may be allocated to a location. Allocation information like quantity, location, scheduling dates is communicated back to the order capture system. Terminologies It is recommended to understand the below terminologies that will be commonly used in this guide. Terminology Description Promising The process of finding the locations where the order can be promised. Reservation The process of reserving inventory against the location. Allocation Used interchangeably with \"reservation\". Promising Request Modes Promising request is the input for the promising process. This contains the list of items and quantity to be allocated along with other promising attributes which will aid promising process. Promising request is sent from Order capture system. Refer to the different types of promising request supported. Promising Type (B2B vs Regular) B2B Promising: This promising type corresponds to the retail order flow. The request will be submitted to the system with 'ShipFromLocationId' field populated for all the promising request detail, which means If Ship from Location ID is populated for all the promising request detail and none of the delivery method is \"Pick up at store\", then B2B promising flow is triggered. If at least one line doesn't have the Ship from LocationId or at least one line has Delivery method PickUpAtStore populated, then regular promising flow is triggered. In B2B flow, the Promising Strategy is not evaluated and will try to reserve the direct inventory from the given location. Regular Promising: This promising type comes into effect when at least one promising request detail has 'ShipFromLocationId' not populated or the delivery method on the line is 'PickUpAtStore' even though the promising request detail has 'ShipFromLocationId' populated. Here, the promising strategy is checked and will be able to reserve inventory based on the source selected and based on the priority rule, if exists. Fulfillment Optimization configuration A Promising Strategy is a set of rules which define how to allocate an order. This defines the source type (Perpetual vs ATC view), prioritization of the source location(s) and the strategy to be used for promising. Used interchangeably with Promising Configuration and Promising Strategy. Refer to the Fulfillment Optimization configuration section for more details. Fulfillment Group Fulfillment grouping enables the grouping of order lines that should be sourced, optimized, and reserved together. This is useful if certain order lines cannot be scheduled or optimized together. These groups are formed using the grouping IDs sent on each request detail. If a request includes multiple fulfillment groups, when the promising process is complete for all fulfillment groups, a reservation request is made for all lines. Allocation overrides It’s typical for retailers to override capacity considerations and protection quantities in order to meet specific business requirements. Hence, in the allocation configuration, provision to perform overrides is provided. Following are the overrides supported. Override Capacity (Ignore or Consider capacity) Ignore Protection quantity Complete Single Source In a typical network fulfillment model wherein a customer order consists of group of items, the order is fulfilled from multiple sources owing to availability, promising preferences, scheduling constraints, capacity and other key parameters. In such cases, multiple items/quantities get released to multiple locations and fulfilled in parts through multiple shipments. Certain business cases like international orders or kits may require retailers to source the lines from a single location. This provides an opportunity for retailers to make a single shipment, which improves customer experience and saves on shipping costs. Promising will only consider the location(s) which can completely fulfill all/group of lines (based on the Strategy Type and Fulfillment group). If no location is available to completely fulfill the lines, then all/group of line(s) are not allocated. Refer to Strategy Type - Complete Single Source for more details. Merge Shipments Merge shipment is a concept where the order is merged or consolidated at a location before the final shipment to the customer. In a merge scenario, the order is merged at the merge location, also called as merge node. It can be a regular distribution center or a specialized consolidation location. Reasons for order consolidation: There are a few reasons for consolidation of an order. One of them is saving the shipping cost by optimizing the consolidation route. The other benefit is improving the customer service by delivering the order in one go. Also, there are certain products which logically need consolidation before being shipped out, say, for example, a laptop and a laptop carrying case. Order hopping: Order hopping is a concept where the order shipment hops from one location to another before being shipped out to the customer. This need not necessarily be an order consolidation scenario. The entire order can be shipped from the origin location and then hops through the nodes before being finally shipped. Reasons for order hopping: It may not be necessary, but in certain cases, order hopping may result in an optimized shipment. For example, if the order is shipped from the origin to the destination using an external carrier service, it might incur a high shipping cost. Instead, if the order is hopped internally to a location which is geographically closer to the destination using the internal carrier, and the final leg shipment being done using the external carrier, the shipping cost incurred might be very cheap. In certain cases, order hopping is required as the origin location does not have an external carrier shipping facility. Say, for example, a satellite Distribution center may always ship to the main Distribution center thus making the main DC as the hopping node for the satellite DC. Refer to Merge Shipment - Optimization for more details on how Optimization is performed for Merge Shipment Scheduling Dates Scheduling is the process of determining delivery dates for an order, and occurs during order promising. This includes assigning the optimistic and the pessimistic order delivery dates once the order is reserved. These dates are used to ensure that the order meets the requested delivery date (RDD) or Last Possible Delivery Dates (LPDD). These dates can also be used to provide possible delivery dates to the end customer. After an promising completes and an order is reserved, rescheduling is triggered if a reservation transfer occurs from one future inventory to another (PO to ASN or ASN to PO), or during ETA updates on future inventory. Two sets of dates are calculated in the scheduling process: pessimistic dates and optimistic dates. Pessimistic dates are the latest set of ship and release dates which still meet the delivery requirement. Optimistic dates are the earliest ship by and delivery dates if all other processes occur on schedule. Backward scheduling is used to calculate pessimistic dates, whereas forward scheduling is used to calculate optimistic dates. Force Allocate Force allocation or reservation provides an opportunity for the retailer to allocate the order(s) irrespective of the inventory levels at a location. Fulfillment Optimization Configuration Before promising can begin, a Promising Strategy (also called a Promising Configuration) must be selected. A Promising Strategy is a set of rules which define how to allocate an order. A retailer may configure multiple strategies based on business needs. A rank is assigned to each strategy. Different configurations typically correspond to different order characteristics. For example, orders with different delivery options or order channels may require different types of allocation, and thus different types of configuration. Though the promising process remains the same, the results differ because of different configurations. Fulfillment Optimization Configuration can be created via Fulfillment Optimization Config UI or via APIs Examples of these controls include: Type of locations to consider Priority of locations to consider Type of inventory to use Optimization factors to consider Whether split allocations are allowed The order capture system should evaluate the order-level sourcing rules defined for each Promising Strategy in their ranked order. If a matching Promising Strategy is found, then the PromisingConfigId is stamped on the Promising Request in the StrategyId field. The following diagram illustrates how the Order component finds a matching Promising Strategy. Refer to the process below for how each Promising Strategy is evaluated. Note: Only order header-level fields are evaluated in order to find a matching configuration. Line-level fields are not considered since the promising process attempts to find an optimized solution for the entire order, but are considered later for line-level source overrides. How is Fulfillment Optimization Config Evaluated? Promising request without a Promising Configuration - If the StrategyId or StrategyName does not match any of the configured promising strategies, or if the StrategyId and StrategyName are missing from the promising request entirely, then a basic form of promising is done as described below: Source: Considers all perpetual inventory as the source Prioritize: Does not apply any prioritization to the source Apply Constraints: Applies the hard constraints (inventory, scheduling and capacity) Optimize: Performs a basic optimization of reserving against a location which can fulfill the maximum number of order lines. No cost optimization is done. Reserve: Reserve the order for the first location with available inventory These processes are described further in the promising process section. Types of Promising Request Modes Promising supports three types of promising request. Optimization (This is the default if the request type is not specified.) Reservation Query Optimization - When the request type is sent as an optimization, this triggers the promising and optimization features described in this document, which includes finding the location with the lowest cost of fulfillment and reserving the order against that location. To optimize the order, either StrategyId or StrategyName must be populated in the promising request (using the PromisingConfigId or PromisingConfigName, respectively). Reservation - When the request type is sent as a reservation, the order is reserved as quickly as possible without determining the optimum solution. In this case, promising considers all inventory as the source based on configuration ID and does not apply any prioritization logic. It applies the hard constraints (inventory, scheduling and capacity) described later in this document and performs basic optimization by reserving against a location that can fulfill the highest number of order lines, which includes protection and item exclusions in the availability view. It reserves the order against the first location which has inventory available. The reservation process is intended to reserve inventory quickly. This may be useful in scenarios such as a peak season. Since Optimization is not during Pre-Reservation (Promising request - Reservation mode), there is a possibility of difference between the location allocated during pre-reservation and the actual Order. This is because during Promising request (reservation mode), the system does not run optimization, and it just blocks inventory from a location. But when the actual order is bridged in for allocation, promising will try to run optimization if the Fulfillment config has Optimization factors set up to make sure there are no better locations from initially allocated. If there is a better location, then the system de-allocates from the original location and allocates to the new location. Query (Available to Promise Calls) - When the request type is sent as a query, the location(s) to promise is found, but the reservation is not made. This query acts as an ATP (Available to Promise) call where the caller sends a query to the promising engine to determine whether the order can be promised to the customer. Scheduling dates are sent in the promising response. If the StrategyId or StrategyName is populated in the promising request (with PromisingConfigId and PromisingConfigName respectively), then the promising engine performs the optimization logic using the promising strategy in the request and finds the optimal location to allocate from. It does not create the reservation request. If the StrategyId or StrategyName is not populated in the promising request, the promising process determines a location without running the optimization logic. This is similar to the reservation process but without the actual reservation call. Note: The number of lines should be less than 5 and the number of network locations considered should be less than 20 for standalone promising call (Query mode) from Ecom or External order taking channel to fetch availability with delivery dates. This restriction is to ensure timely response. Delivery Methods The e-commerce channel can make up a significant portion of the total revenue for a retailer. A promising engine which can effectively consider holistic network inventory (store and DC inventory) is critical. The following delivery methods are the typical e-commerce order flows. Ship to Home Orders - A ship to home order includes an item which is delivered to a customer's address. This is the case for an e-commerce order, or a save the sale order placed in a store. For ship to home orders, promising expects the shipping address and shipping method to be provided in the request. The shipping address and shipping method are used for scheduling and calculating the shipping cost, in order to find the best location for reservation. When the order is reserved, the allocation information is sent back to the caller. The allocation information includes the scheduling dates, such as the earliest delivery date and earliest ship date. These dates indicate the date and time when the order is expected to be shipped and delivered. Ship to Store Orders - A ship to store order exists when an item is shipped to a store for customer pickup. This saves the customer the cost of shipping the order, and gives the retailer an opportunity to upsell other inventory. For ship to store orders, promising expects the delivery method to be specified as ship to store on the request. The destination store and shipping method information are also required. The destination store and the shipping method are used to schedule the order and calculate the shipping cost to find the best location for reservation.  The allocation information which has the scheduling information in the form of a delivery path is returned in the promising response. A ship to store order reservation results in two delivery paths: a ship to store path and a pickup at store path. Pickup in Store Orders -  A pickup in store order is created when the item is present in a store and the customer reserves the item for pickup in store. For pickup orders, promising expects the delivery method as 'PickUpInStore' in the promising request. The pickup store must also be specified as ship from store in the promising request.  The allocation information is returned on the promising response with only the pickup leg information. Fulfillment Group Fulfillment grouping enables the grouping of order lines that should be sourced, optimized, and reserved together. This is useful if certain order lines cannot be scheduled or optimized together. These groups are formed using the grouping IDs sent on each request detail. Promising is performed separately for all Fulfillment group. When the promising process is complete for all the fulfillment groups, a reservation request is made for all lines. Some examples of common fulfillment groupings are listed as follows: Different Shipping Addresses - If two lines on the same promising request have different shipping addresses, they cannot be optimized together since one of the core principles of optimization is to reduce the shipping cost. If two lines have different addresses, then at least two shipments are required to fulfill the order. So, each group of lines with the same address should be optimized separately. Different Delivery Methods - If two lines on a promising request have different delivery methods, each line should be optimized separately. Ship to home orders will have a different address than ship to store and pickup in store orders. In addition, ship to store and pickup in store orders are fulfilled from different locations. So, all three delivery methods should be optimized separately. Different Shipping Methods - If two order lines have different shipping methods, each should be optimized separately since they can be shipped separately. For example, a same day delivery order line and a standard delivery order line must be shipped in different packages. Note: All request details without a fulfillmentGroupId are considered as a single group. Strategy Type - Complete Single Source Strategy Type - Complete Single Source provides an ability for the retailer to completely source all or group of order lines from a single location. The \"StrategyType\" attribute on the OrderLinePromisingInfo as well as PromisingRequestDetail accepts valid values of \"CompleteSingleSource\" or null. For instance, all lines of the same fulfillment group with strategy “CompleteSingleSource” need to be completely fulfilled from a single location or back-ordered. Promising will only consider the location(s) which can completely fulfill all/group of lines (based on the Strategy Type and Fulfillment group). If no location is available to completely fulfill the lines, then all/group of line(s) are not allocated. If the strategy is \"CompleteSingleSource\" then on the Reservation request, the \"allorNone\" flag is sent as true to indicate that the line(s) with the same Fulfillment Group ID and \"allorNone\" flag as true should be reserved together. Refer to How Reservation works for more details. Complete Single Source - How it works The following use cases can be supported using the strategy type. The ability for a retailer to request complete fulfillment of an entire order from a single location - A retailer dealing in electronic components, ships products in multiple geographies via International Shipments. In order to avoid the cost of multiple shipments, any such order should always be fulfilled from a single location else backorder. Complete Single Source - Use case 1 The ability for a retailer to request complete fulfillment of \"Group of Lines\" from a single location - A retailer dealing in skincare, makeup or hair care products offers a wide range of products which are bought together, usually along with some regular items. For instance: \"Advance Night Repair\" - Serum, Mask, Toner, Cleanser are usually bought together. In order to have a better user experience, such lines should be completely shipped and from a single location. Complete Single Source - Use Case 2 NOTE: The reshuffle logic for Complete Single Source (CSS) works only on allocated lines, and if a CSS line goes to backorder, no reshuffle request is created—reallocation must be handled through a separate job. This behavior change is not en by default and must be enabled via the UI under the setting named \"Behaviour Change.\" Promising Request Details vs Promising Request - Which attributes take priority? Attributes which drive a promising algorithm (like Ship from, Ship to, Consolidation locations, and so on) can be defined at both Promising request detail and Promising request level. The line level attribute always overrides the value at header level. This is true for all such attributes which are present at PromisingRequestDetail(line level) as well as PromisingRequestLevel (header level). Refer to sample Promising request for reference Promising request - Sample{ \"Address\": {}, \"CarrierCode\": \"string\", \"ConsolidationLocationId\": \"string\", \"DeliveryMethodId\": \"string\", \"DemandType\": \"string\", \"ExistingReservations\": [], \"Extended\": {}, \"ExternalRouteId\": \"string\", \"IsConfirmed\": false, \"IsPartialRequest\": false, \"LastPossibleDeliveryDate\": \"2020-10-20T04:18:52.894Z\", \"OrganizationId\": \"string\", \"PromisingRequestDetail\": [ { \"ASNDetailId\": \"string\", \"ASNId\": \"string\", \"Address\": {}, \"CarrierCode\": \"string\", \"ConsolidationLocationId\": \"string\", \"DeliveryMethodId\": \"string\", \"DemandType\": \"string\", \"EffectiveRank\": \"string\", \"Extended\": {}, \"ExternalRouteId\": \"string\", \"FulfillmentGroupId\": \"string\", \"InventoryTypeId\": \"string\", \"IsForceAllocate\": false, \"ItemId\": \"string\", \"LastPossibleDeliveryDate\": \"2020-10-20T04:18:52.894Z\", \"PODetailId\": \"string\", \"POId\": \"string\", \"ParentItemId\": \"string\", \"ProductStatusId\": \"string\", \"PromisingRequestDetailId\": \"string\", \"Quantity\": 0, \"ReqCapacityPerUnit\": 0, \"RequestedDeliveryDate\": \"2020-10-20T04:18:52.894Z\", \"ServiceLevelCode\": \"string\", \"ShipFromLocationId\": \"string\", \"ShipToLocationId\": \"string\", \"ShippingMethodId\": \"string\", \"ShippingMethodIds\": [ \"string\" ], \"SourceId\": \"string\", \"StrategyType\": \"string\", \"Weight\": 0 } ], \"PromisingRequestId\": \"string\", \"RequestType\": \"string\", \"RequestedDeliveryDate\": \"2020-10-20T04:18:52.894Z\", \"ReservationExpiryDate\": \"2020-10-20T04:18:52.894Z\", (Indicates the date on which the Reservation expires if the Order is not confirmed) \"ServiceLevelCode\": \"string\", \"ShipFrom\": { \"Radius\": 0, \"RadiusUOM\": \"string\", \"Segments\": [ \"string\" ], \"ShipFromLocationIds\": [ \"string\" ] }, \"ShipToLocationId\": \"string\", \"ShippingMethodId\": \"string\", \"ShippingMethodIds\": [ \"string\" ], \"StrategyName\": \"string\", (takes PromisingConfigName) \"StrategyType\": \"string\", \"confirmed\": true, \"expiryDate\": \"2020-10-20T04:18:52.894Z\" (Indicates the date on which the promising config expires) } Note : Demand Type is mandatory in the promising request. Note: In a Promising request, 'CompleteSingleSource' is not supported at the header level and must be passed at the line level. How Promising WorksCustomer Engagement ConfigurationsREST APIs and User ExitsSubstitution During AllocationForecast ReservationProcure To SellHow Optimization WorksAdvanced Shipping RestrictionsTroubleshootingForce Allocate"
}